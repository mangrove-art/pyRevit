{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p> pyRevit Rapid Application Development (RAD) Environment for Autodesk Revit\u00ae </p> <p> </p> <p> </p> <p> </p> <p>pyRevit helps you quickly sketch out your automation and addon ideas, in whichever language that you are most comfortable with, inside the Revit environment and using its APIs. It also ships with an extensive set of powerful tools that showcase its capabilities as a development environment. Download and install pyRevit, launch Revit, and note the new pyRevit tab that includes these tools. pyRevit also ships with a handy CLI utility for customized configuration and deployment of your tools, and a telemetry server to monitor pyRevit usage across your teams.</p> <p> </p>"},{"location":"#pyrevit-can-help-you","title":"pyRevit can help you","text":"<ul> <li>Add a powerful set of free tools to your Revit workflows.</li> <li>Sketch out your automation ideas quickly in python</li> <li>Write your own Revit addons for Revit using python (IronPython or CPython), C#, VB.Net</li> <li>Distribute your tools (pyRevit, Dynamo, or Grasshopper) easily to your teams using a unified interface</li> <li>Share your tools with the community</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#get-started-using-pyrevit","title":"Get Started Using pyRevit","text":"<p>Install pyRevit</p> <p>Create Custom Patterns</p> <p>Manage Keynotes</p> <p>Configure pyRevit</p> <p>Install Extensions</p> <p>\u2193 More guides are available here</p> <p>HOW TO Guides</p>"},{"location":"#get-started-developing-for-pyrevit","title":"Get Started Developing for pyRevit","text":"<p>Create Your First Command</p> <p>\u2193 Read the pyRevit API reference to know everything about pyRevit available modules, functions, ...</p> <p>pyRevit API Reference</p> <p>\u2193 Read the docs to know everything about pyRevit scripts, extensions, ...</p> <p>Developer Docs</p> <p>\u2193 pyRevit has a powerful command line utility</p> <p>pyRevit CLI</p> <p>\u2193 And when you are ready to deploy your tools to your team</p> <p>pyRevit For Teams</p> <p> </p>"},{"location":"#staying-updated","title":"Staying Updated","text":"<p>Follow pyRevit on Twitter to stay notified about the upcoming changes and follow pyRevit Release Notes for the breaking changes</p> <p>\u2193 Check out the blog for news</p> <p>Blog</p> <p>\u2193 And the future plans for pyRevit are laid out here</p> <p>Roadmap</p> <p> </p>"},{"location":"#dealing-with-issues","title":"Dealing with Issues","text":"<p>Check the list of Currently Open and Previously Reported Issues for anything similar to yours.</p> <p>\u2193 See the FAQ page for questions</p> <p>FAQs</p> <p>\u2193 See the guide below on how to report new issues</p> <p>Reporting New Issues</p> <p> </p>"},{"location":"#getting-involved","title":"Getting Involved","text":"<p>\u2193 Get involved with the community of developers, creating tools with and for pyRevit</p> <p>Community</p>"},{"location":"#share-your-passion","title":"Share Your Passion","text":"<p>\u2193 Help making pyRevit better</p> <p>Help with Documentation</p> <p>Help Translate pyRevit</p> <p>Create Tutorials</p> <p>Share Revit Build Numbers</p>"},{"location":"#share-your-code","title":"Share Your Code","text":"<p>\u2193 Help making pyRevit core and tools better</p> <p>Improve pyRevit Core</p> <p>Contribute New Tools</p> <p>Share Your Extensions</p> <p>Bundle Shelf</p>"},{"location":"#share-your-coins","title":"Share Your Coins","text":"<p>\u2193 Help making pyRevit financially stronger</p> <p>Support on OpenCollective</p> <p>Support on Patreon</p> <p>Supporters</p>"},{"location":"#contributors","title":"Contributors","text":"<p>Made with contrib.rocks</p> <p> </p> <p>**** with \ud83d\udda4 in Portland, Oregon</p> <p>Copyright \u00a9 2014-2025 by Ehsan Iran-Nejad (pyrevitlabs.io) - All Rights Reserved</p> <p>No part of this publication may be reproduced, distributed, or transmitted in any form or by any means, including photocopying, recording, or other electronic or mechanical methods, without the prior written permission of the publisher.</p>"},{"location":"CODE_OF_CONDUCT/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"CODE_OF_CONDUCT/#our-pledge","title":"Our Pledge","text":"<p>In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p>"},{"location":"CODE_OF_CONDUCT/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to creating a positive environment include:</p> <ul> <li>Using welcoming and inclusive language</li> <li>Being respectful of differing viewpoints and experiences</li> <li>Gracefully accepting constructive criticism</li> <li>Focusing on what is best for the community</li> <li>Showing empathy towards other community members</li> </ul> <p>Examples of unacceptable behavior by participants include:</p> <ul> <li>The use of sexualized language or imagery and unwelcome sexual attention or  advances</li> <li>Trolling, insulting/derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or electronic  address, without explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a  professional setting</li> </ul>"},{"location":"CODE_OF_CONDUCT/#our-responsibilities","title":"Our Responsibilities","text":"<p>Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.</p> <p>Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.</p>"},{"location":"CODE_OF_CONDUCT/#scope","title":"Scope","text":"<p>This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.</p>"},{"location":"CODE_OF_CONDUCT/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at hello@pyrevitlabs.io. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.</p> <p>Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.</p>"},{"location":"CODE_OF_CONDUCT/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html</p> <p>For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq</p>"},{"location":"CONTRIBUTING/","title":"Contributing","text":"<p>See Contributing to pyRevit Source on pyRevit Wiki</p>"},{"location":"CREDITS/","title":"Credits","text":""},{"location":"CREDITS/#credits","title":"Credits","text":"<p>See Credits Here</p>"},{"location":"SECURITY/","title":"Security Policy","text":"<p>Note that the most up to date code is located in the develop branch. Every 6 months to 12 months, the develop branch is merged to the master branch and new releases are integrated.</p>"},{"location":"SECURITY/#reporting-a-vulnerability","title":"Reporting a Vulnerability","text":"<p>Please do not report security vulnerabilities through public pyRevit GitHub issues, discussions, or pull requests.</p> <p>Instead, please send an email to eirannejad+pyrevitsecurity[@]gmail.com .</p> <p>Please include as much of the information listed below as you can to help us better understand and resolve the issue:</p> <ul> <li>The type of issue (e.g., buffer overflow, SQL injection, or cross-site scripting)</li> <li>Full paths of source file(s) related to the manifestation of the issue</li> <li>The location of the affected source code (tag/branch/commit or direct URL)</li> <li>Any special configuration required to reproduce the issue</li> <li>Step-by-step instructions to reproduce the issue</li> <li>Proof-of-concept or exploit code (if possible)</li> <li>Impact of the issue, including how an attacker might exploit the issue</li> </ul> <p>This information will help us triage your report more quickly.</p>"},{"location":"architecture/","title":"Understanding pyRevit Architecture","text":"<p>This guide provides an overview of pyRevit\u2019s architecture to help new contributors understand how the software works.</p> <p>Whether you want to create tools, troubleshoot issues, or contribute code, understanding these components will help you navigate the project.</p>"},{"location":"architecture/#components-of-pyrevit","title":"Components of pyRevit","text":"<ol> <li> <p>pyRevit Add-In (pyRevitLoader)</p> <ul> <li>A small piece of C# code that starts pyRevit inside Revit.</li> <li>It loads a Python script using the IronPython engine, which handles the rest of pyRevit\u2019s functionality.</li> </ul> </li> <li> <p>pyRevit python Libraries (pyrevitlibs)</p> <ul> <li>Python packages that simplify working with the .NET Revit API.</li> <li>Provide tools to create ribbon buttons, run scripts, and more.</li> </ul> </li> <li> <p>Extensions</p> <ul> <li>These are the tools and features users see inside Revit.</li> <li>They are mostly written in python, but can also be C#/VB.NET scripts, dynamo projects, and so on</li> <li>Bundled extensions appear in the \"pyRevit\" tab, offering many tools.</li> <li>Users can add extensions by:<ul> <li>Enabling listed extensions in <code>dev/extensions/extensions.json</code> via the \u201cExtensions\u201d button in pyRevit.</li> <li>Creating custom extensions and adding their paths to the configuration.</li> </ul> </li> </ul> </li> <li> <p>pyRevit Command-Line Interface (CLI)</p> <ul> <li>A tool for managing configurations, running scripts in bulk, and troubleshooting.</li> <li>Useful for corporate setups and advanced users.</li> </ul> </li> <li> <p>Telemetry Server</p> <ul> <li>A small server (written in Go) that tracks usage data of pyRevit tools.</li> <li>Stores data in MongoDB or PostgreSQL for business intelligence.</li> </ul> </li> </ol>"},{"location":"architecture/#how-pyrevit-loads-in-revit","title":"How pyRevit Loads in Revit","text":"<p>TL;DR:</p> <ul> <li>Revit reads the <code>.addin</code> manifest in the Addins folders</li> <li>The <code>.addin</code> manifest points to <code>pyRevitLoader.dll</code></li> <li><code>pyRevitLoader.dll</code> launches <code>pyrevitloader.py</code> inside an IronPython environment</li> <li><code>pyrevitloader.py</code> calls functions from the <code>pyrevit</code> python package to build the UI and the buttons commands.</li> </ul>"},{"location":"architecture/#addin-manifest","title":".addin Manifest","text":"<ul> <li>The installer creates a file with <code>.addin</code> extension, called manifest, in the Revit Addins folder, instructing Revit to load pyRevit when it starts.</li> <li>The Addins folder can be located in one of these paths, depending on pyRevit installation:<ul> <li><code>C:\\ProgramData\\Autodesk\\Revit\\Addins</code> (for all users)</li> <li><code>%APPDATA%\\Autodesk\\Revit\\Addins</code> (for the current user only)</li> </ul> </li> <li>The manifest points to <code>pyRevitLoader.dll</code>, which acts as the entry point for pyRevit.</li> </ul>"},{"location":"architecture/#pyrevitloaderdll","title":"pyRevitLoader.dll","text":"<p>The <code>pyRevitLoader.dll</code> file is a small C# program that:</p> <ul> <li>Ensures required .NET assemblies are loaded.</li> <li>Loads the IronPython engine and runs pyRevit\u2019s Python startup script (<code>pyrevitloader.py</code>).</li> </ul> Info <p>the source code is in <code>PyRevitLoaderApplication.cs</code> and it is an implementation of the Revit API <code>IExternalApplication</code> interface (the standard way to create a plugin for Revit).</p> <p>There are multiple versions of <code>pyRevitLoader.dll</code> to support:</p> <ul> <li>different Revit versions:<ul> <li>One for Revit 2025 and newer, built with .NET 8.</li> <li>Another for older Revit versions, built with the .NET Framework.</li> </ul> </li> <li>different IronPython versions; to this date:<ul> <li>version 2.7.12, the default one</li> <li>version 3.4.0, more recent but not fully tested.</li> </ul> </li> </ul> <p>They share the same source code, but are compiled against the different .net runtimes and IronPython versions.</p> <p>Note</p> <p>Since we cannot have multiple IronPython engines running at the same time, if the user switches the engine in the configuration, pyRevit will change the <code>.addin</code> manifest mentioned above to point to the correct dll path. It may be that sometimes the addin is not created correctly or points to the wrong path, and this is why most of the times the <code>pyrevit attach</code> command solves the installation issues.</p>"},{"location":"architecture/#startup-script-pyrevitloaderpy","title":"Startup Script: <code>pyrevitloader.py</code>","text":"<p>This Python script is the first code executed by pyRevit inside Revit. It:</p> <ul> <li>Sets up environment variables.</li> <li>Initializes the logging system and prepares the script console</li> <li>Checks for updates if enabled, pulling changes for pyRevit and extensions.</li> <li>Loads extensions and creates UI elements like ribbons and buttons (see below).</li> <li>Activates hooks, which enable features like event-driven scripts.</li> <li>Initializes API routes and Telemetry, if enabled</li> </ul> Info <p><code>pyrevitloader.py</code> is a small script that just calls the pyrevit.loader.sessionmgr.load_session function. That function is responsible to do all the things mentioned above.</p>"},{"location":"architecture/#extensions-discovery","title":"Extensions discovery","text":"<ul> <li>pyRevit scans known paths and user defined folders to find extensions.</li> <li>For each extension, it builds a .net assembly to create buttons, tabs, and other UI elements.</li> </ul> Info <p>Extensions directories are detected by pyrevit.userconfig.PyRevitConfig.get_ext_root_dirs. Extension components discovery is performed by pyrevit.extensions.extensionmgr.get_installed_ui_extensions. Assemblies are generated by pyrevit.loader.asmmaker with types from pyrevit.runtime.create_type.</p>"},{"location":"architecture/#how-pyrevit-commands-run","title":"How pyRevit Commands run","text":"<p>TL;DR:</p> <p>Command execution is handled by the c# project <code>pyRevitLabs.Pyrevit.Runtime</code></p> <p>Each button generated by the Extension discovery is bound to a command derived by the <code>ScriptCommand.cs</code> source code.</p> <p>This code deals with:</p> <ul> <li>detecting the modifier keys hold while clicking the button, and change the behavior accordingly</li> <li>calling <code>ScriptExcecutor.ExcecuteScript</code> passing the python script (or any other supportesd script) for the command</li> </ul> Info <p>The <code>ScriptCommand</code> class implements Revit\u2019s <code>IExternalCommand</code> interface. The <code>Execute</code> method is the one called when you click the Ribbon button.</p> <p>In turn, the code in <code>ScriptExecutor.cs</code> calls the appropriate script engine based on the type of (IronPython, CPython, .NET, and so on).</p> Info <p>You can find the code of the engines in the files that end <code>Engine.cs</code>.</p>"},{"location":"dev-guide/","title":"pyRevit Developer's Guide","text":"<p>This guide is designed to help new contributors set up their development environment, get familiar with the codebase, and start contributing to the project.</p> <p>Note</p> <p>This guide is for people that wants to get their hands dirty in the core pyRevit code, the part written in C#.</p> <p>It is not for the development of the python side.</p>"},{"location":"dev-guide/#requirements","title":"Requirements","text":"<p>Before you begin, you'll need to set up your development environment with the following tools:</p>"},{"location":"dev-guide/#visual-studio","title":"Visual Studio","text":"<p>Install Visual Studio 2022 and select:</p> <ul> <li>under workloads, enable .NET desktop development</li> <li>under \u00a8Individual components make sure the following are selected:<ul> <li>.NET 8.0 Runtime (Long Term Support)</li> <li>.NET Framework 4.7.2 Targeting Pack</li> <li>.NET Framework 4.8 SDK</li> <li>.NET Framework 4.8 Targeting Pack</li> <li>.NET 3.1 Runtime (MahApps.Metro)</li> <li>NuGet package manager</li> <li>MSBuild</li> </ul> </li> </ul>"},{"location":"dev-guide/#python-3","title":"Python 3","text":"<p>Make sure Python 3 is installed on your system.</p> <p>Download it from the Python official website.</p>"},{"location":"dev-guide/#pipenv","title":"Pipenv","text":"<p>This tool manages Python environments and dependencies.</p> <p>You can install Pipenv by running:</p> <pre><code>pip install pipenv\n</code></pre>"},{"location":"dev-guide/#git-setup","title":"Git Setup","text":"<p>To contribute to pyRevit, you'll need to set up your Git environment as follows:</p>"},{"location":"dev-guide/#fork-the-repository","title":"Fork the Repository","text":"<p>Go to the pyrevitlabs/pyrevit GitHub page and click on the \"Fork\" button to create your own copy of the repository.</p> <p>Make sure to uncheck the \"Copy the master branch only\" option, since we mostly use the develop branch to make changes.</p>"},{"location":"dev-guide/#clone-your-fork","title":"Clone Your Fork","text":"<p>if you already have a copy of pyRevit or pyRevit CLI installed, you can use the command</p> <pre><code>pyrevit clone &lt;name-of-your-choice&gt; --source &lt;url-of-you-repo&gt; --dest &lt;destination-directory&gt; --branch develop\n</code></pre> <p>As an example, I choose to call the clone \"dev\" and put it in \"C:\\pyrevit\", so my command becomes</p> <pre><code>pyrevit clone dev --source https:/gitlab.com/sanzoghenzo/pyrevit.git --dest c:\\pyrevit --branch=develop\n</code></pre> <p>Note</p> <p>I will use the <code>dev</code> name in the following steps, make sure to replace it with the name of your choice.</p> <p>If you don't have pyrevit cli installed, or prefer to do things in the canonical way, follow these steps:</p> <ol> <li> <p>Clone Your Fork: Clone your forked repository to your local machine:</p> <pre><code>git clone &lt;your-fork-url&gt;\n</code></pre> </li> <li> <p>Enter pyRevit folder:</p> <pre><code>cd pyrevit\n</code></pre> </li> <li> <p>Checkout the Develop Branch: This is where active development happens, so make sure you're working on this branch:</p> <pre><code>git checkout develop\n</code></pre> </li> </ol>"},{"location":"dev-guide/#set-upstream-remote","title":"Set Upstream Remote","text":"<p>Add the original pyrevitlabs repository as an \"upstream\" remote to keep your fork in sync:</p> <pre><code>git remote add upstream https://github.com/pyrevitlabs/pyrevit.git\n</code></pre> <p>You can choose any name for the remote, but \"upstream\" is a common convention.</p>"},{"location":"dev-guide/#retrieve-the-submodules","title":"Retrieve the submodules","text":"<p>At this time of writing, the pyRevit repository uses git submodules (stored in the <code>dev\\modules</code> folder) to get some of its dependencies. Initialize and fetch them with the following commands:</p> <pre><code>git submodule update --init --recursive\n</code></pre> <p>Note</p> <p>you may have to repeat the <code>git submodule update</code> command when you switch to another existing branch, or when new commits in the develop branch update the dependencies.</p>"},{"location":"dev-guide/#initialize-the-pipenv-environment","title":"Initialize the pipenv environment","text":"<p>This will create a python environment for running the toolchain scripts to build the various pyrevit components.</p> <pre><code>pipenv install\n</code></pre>"},{"location":"dev-guide/#ide-setup","title":"IDE Setup","text":"<p>You have a couple of options for setting up your development environment:</p> <ol> <li> <p>Visual Studio Code: You can open the entire pyRevit directory in Visual Studio Code. This setup works well for Python development, but may lack some C#/.NET language support.</p> </li> <li> <p>Recommended extensions: C#, Python, and GitLens.</p> </li> <li> <p>Visual Studio: For full C#/.NET support, it's better to open a specific solution file (<code>.sln</code>) in Visual Studio. This gives you access to language checks, autocompletion, and suggestions.</p> </li> <li> <p>Open the solution that corresponds to the area of the project you're working on.</p> </li> </ol> <p>But you can of course use your IDE of choice, such as Rider for .NET and pyCharm for python.</p>"},{"location":"dev-guide/#revit-setup","title":"Revit Setup","text":"<p>To run and test your changes in Revit, follow these steps:</p> <ol> <li>Create a Clone: If you cloned the git repository without the pyRevit CLI, you need to use it now to create a clone of your git directory:</li> </ol> <pre><code>pyrevit clones add dev &lt;path-to-your-git-directory&gt;\n</code></pre> <ol> <li>Attach the Clone: Attach your clone to the default Revit installation:</li> </ol> <pre><code>pyrevit attach dev default --installed\n</code></pre> <p>Note</p> <p>the pyRevit dll paths have changed with pyrevit 5 (current WIP version), so you need to use the pyrevit CLI from a WIP installer for this to work. If you don't have it already, you can build the CLI from sources and run it with</p> <pre><code>pipenv run pyrevit build labs\ncopy .\\release\\.pyrevitargs .\n.\\bin\\pyrevit.exe attach dev default --installed\n</code></pre>"},{"location":"dev-guide/#debugging-code","title":"Debugging Code","text":"<p>Currently, you cannot use Visual Studio's \"Run\" button to debug pyRevit because of some build issues. Instead, follow this approach:</p> <ol> <li>Build the Project: Open a command prompt or PowerShell, navigate to your git directory, and build the project in Debug mode:</li> </ol> <pre><code>pipenv run pyrevit build products Debug\n</code></pre> <ol> <li> <p>Open the Solution in Visual Studio: Once the DLLs are built, open the <code>pyRevitLabs.PyRevit.Runtime</code> solution in Visual Studio.</p> </li> <li> <p>Attach the Debugger: Attach the Visual Studio debugger to the <code>revit.exe</code> process to start debugging:</p> </li> <li>Go to <code>Debug</code> &gt; <code>Attach to Process...</code> and select <code>revit.exe</code> from the list.</li> </ol>"},{"location":"dev-guide/#conclusion","title":"Conclusion","text":"<p>You're now ready to start contributing to pyRevit! Whether you're fixing bugs, adding new features, or improving documentation, your contributions are valuable. If you have any questions, feel free to reach out to the community through GitHub or other communication channels.</p> <p>Happy coding!</p>"},{"location":"repo-organization/","title":"Repository organization","text":"<p>The pyRevit repository is organized in the following folders:</p> <ul> <li><code>bin</code> contains the binaries (dll and other support files) for pyRevit; usually a source repository doesn't have these, but it was made like this to be able to switch pyRevit versions using clones. This may change in the future and we could get rid of most content of this folder. Note that in this folder there also are the python envrionments  (for example the CPython dlls and core packages).</li> <li><code>dev</code> is where the c# code resides.</li> <li><code>docs</code> is for the automatic generation of the documentation website</li> <li><code>extensions</code> holds the various pyRevit extensions; the pyRevitCore.extension is the one that build the <code>pyRevit</code> ribbon tab, the others can be enabled via the Extension button inside pyRevit itself. <code>pyRevitDevTools</code> is quite handy to run tests and check if pyRevit (and the modifications you'll do) is running fine.</li> <li><code>extras</code> are\u2026 extra files that can come in handy (icons and the dark mode generator are there to this date).</li> <li><code>licenses</code> contains all the licenses of the included third party projects.</li> <li><code>pyrevitlib</code> contains pyRevit and other related project's python libraries. It is usually the library that gets imported in the user scripts to ease the Revit API development.</li> <li><code>release</code> contains static assets needed to build the final product (pyrevit and pyrevit cli installers).</li> <li><code>site-packages</code> is the collection of third-party python packaces that are made available by pyRevit to the user. Given that the main python engine is IronPython 2.7.12, packages in that folder needs to be compatible with it.</li> <li><code>static</code> are assets for the website, youtube channels and so on, you can ignore it.</li> </ul>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>pyrevit<ul> <li>api</li> <li>compat</li> <li>coreutils<ul> <li>apidocs</li> <li>appdata</li> <li>applocales</li> <li>assmutils</li> <li>charts</li> <li>colors</li> <li>configparser</li> <li>envvars</li> <li>git</li> <li>logger</li> <li>markdown<ul> <li>__version__</li> <li>blockparser</li> <li>blockprocessors</li> <li>extensions<ul> <li>abbr</li> <li>admonition</li> <li>attr_list</li> <li>codehilite</li> <li>def_list</li> <li>extra</li> <li>fenced_code</li> <li>footnotes</li> <li>headerid</li> <li>meta</li> <li>nl2br</li> <li>sane_lists</li> <li>smart_strong</li> <li>smarty</li> <li>tables</li> <li>toc</li> <li>wikilinks</li> </ul> </li> <li>inlinepatterns</li> <li>odict</li> <li>postprocessors</li> <li>preprocessors</li> <li>serializers</li> <li>treeprocessors</li> <li>util</li> </ul> </li> <li>mathnet</li> <li>moduleutils</li> <li>pyutils</li> <li>ribbon</li> <li>yaml</li> </ul> </li> <li>engine</li> <li>extensions<ul> <li>cacher_asc</li> <li>cacher_bin</li> <li>components</li> <li>extensionmgr</li> <li>extpackages</li> <li>genericcomps</li> <li>parser</li> </ul> </li> <li>forms<ul> <li>toaster</li> <li>utils</li> </ul> </li> <li>framework</li> <li>interop<ul> <li>adc</li> <li>bbx</li> <li>dxf</li> <li>ifc</li> <li>pts</li> <li>rhino</li> <li>stl</li> <li>xl</li> </ul> </li> <li>labs</li> <li>loader<ul> <li>asmmaker</li> <li>hooks</li> <li>sessioninfo</li> <li>sessionmgr</li> <li>systemdiag</li> <li>uimaker</li> </ul> </li> <li>output<ul> <li>cards</li> <li>linkmaker</li> </ul> </li> <li>preflight<ul> <li>case</li> </ul> </li> <li>revit<ul> <li>bim360</li> <li>db<ul> <li>count</li> <li>create</li> <li>delete</li> <li>ensure</li> <li>failure</li> <li>pickling</li> <li>query</li> <li>select</li> <li>transaction</li> <li>update</li> </ul> </li> <li>dc3dserver</li> <li>events</li> <li>features</li> <li>files</li> <li>geom</li> <li>journals</li> <li>report</li> <li>selection</li> <li>serverutils</li> <li>tabs</li> <li>ui</li> <li>units</li> </ul> </li> <li>routes<ul> <li>api</li> <li>server<ul> <li>base</li> <li>exceptions</li> <li>handler</li> <li>router</li> <li>server</li> <li>serverinfo</li> </ul> </li> </ul> </li> <li>runtime<ul> <li>bundletypemaker</li> <li>dynamotypemaker</li> <li>invoketypemaker</li> <li>pythontypemaker</li> <li>typemaker</li> <li>types</li> <li>urltypemaker</li> </ul> </li> <li>script</li> <li>telemetry<ul> <li>events</li> <li>record</li> </ul> </li> <li>unittests<ul> <li>runner</li> </ul> </li> <li>userconfig</li> <li>versionmgr<ul> <li>about</li> <li>updater</li> <li>upgrade</li> <li>urls</li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/pyrevit/","title":"pyrevit","text":"<p>pyRevit root level config for all pyrevit sub-modules.</p> <p>Examples:</p> <pre><code>from pyrevit import DB, UI\nfrom pyrevit import PyRevitException, PyRevitIOError\n\n# pyrevit module has global instance of the\n# _HostAppPostableCommand and _ExecutorParams classes already created\n# import and use them like below\nfrom pyrevit import HOST_APP\nfrom pyrevit import EXEC_PARAMS\n</code></pre>"},{"location":"reference/pyrevit/#pyrevit-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/#pyrevit.PYREVIT_ADDON_NAME","title":"<code>PYREVIT_ADDON_NAME = 'pyRevit'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/#pyrevit.PYREVIT_CLI_NAME","title":"<code>PYREVIT_CLI_NAME = 'pyrevit.exe'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/#pyrevit.VERSION_STRING","title":"<code>VERSION_STRING = version_file.read()</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/#pyrevit.matches","title":"<code>matches = re.findall('(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)\\\\.?(.+)?', VERSION_STRING)[0]</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/#pyrevit.BUILD_METADATA","title":"<code>BUILD_METADATA = ''</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/#pyrevit.VERSION_MAJOR","title":"<code>VERSION_MAJOR = int(VERSION_MAJOR)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/#pyrevit.VERSION_MINOR","title":"<code>VERSION_MINOR = int(VERSION_MINOR)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/#pyrevit.VERSION_PATCH","title":"<code>VERSION_PATCH = int(VERSION_PATCH)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/#pyrevit.HOME_DIR","title":"<code>HOME_DIR = op.dirname(op.dirname(op.dirname(__file__)))</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/#pyrevit.DOTNET_RUNTIME_ID","title":"<code>DOTNET_RUNTIME_ID = 'netcore' if compat.NETCORE else 'netfx'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/#pyrevit.ROOT_BIN_DIR","title":"<code>ROOT_BIN_DIR = op.join(HOME_DIR, 'bin')</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/#pyrevit.BIN_DIR","title":"<code>BIN_DIR = op.join(ROOT_BIN_DIR, DOTNET_RUNTIME_ID)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/#pyrevit.MAIN_LIB_DIR","title":"<code>MAIN_LIB_DIR = op.join(HOME_DIR, 'pyrevitlib')</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/#pyrevit.MISC_LIB_DIR","title":"<code>MISC_LIB_DIR = op.join(HOME_DIR, 'site-packages')</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/#pyrevit.MODULE_DIR","title":"<code>MODULE_DIR = op.join(MAIN_LIB_DIR, 'pyrevit')</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/#pyrevit.LOADER_DIR","title":"<code>LOADER_DIR = op.join(MODULE_DIR, 'loader')</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/#pyrevit.RUNTIME_DIR","title":"<code>RUNTIME_DIR = op.join(MODULE_DIR, 'runtime')</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/#pyrevit.ADDIN_DIR","title":"<code>ADDIN_DIR = op.join(LOADER_DIR, 'addin')</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/#pyrevit.ENGINES_DIR","title":"<code>ENGINES_DIR = op.join(BIN_DIR, 'engines', eng.EngineVersion)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/#pyrevit.PYREVIT_CLI_PATH","title":"<code>PYREVIT_CLI_PATH = op.join(HOME_DIR, 'bin', PYREVIT_CLI_NAME)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/#pyrevit.TRACEBACK_TITLE","title":"<code>TRACEBACK_TITLE = 'Traceback:'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/#pyrevit.HOST_APP","title":"<code>HOST_APP = _HostApplication()</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/#pyrevit.EXEC_PARAMS","title":"<code>EXEC_PARAMS = _ExecutorParams()</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/#pyrevit.DOCS","title":"<code>DOCS = _DocsGetter()</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/#pyrevit.ALLUSER_PROGRAMDATA","title":"<code>ALLUSER_PROGRAMDATA = os.getenv('programdata')</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/#pyrevit.USER_ROAMING_DIR","title":"<code>USER_ROAMING_DIR = os.getenv('appdata')</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/#pyrevit.USER_SYS_TEMP","title":"<code>USER_SYS_TEMP = os.getenv('temp')</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/#pyrevit.USER_DESKTOP","title":"<code>USER_DESKTOP = op.expandvars('%userprofile%\\\\desktop')</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/#pyrevit.EXTENSIONS_DEFAULT_DIR","title":"<code>EXTENSIONS_DEFAULT_DIR = op.join(HOME_DIR, 'extensions')</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/#pyrevit.THIRDPARTY_EXTENSIONS_DEFAULT_DIR","title":"<code>THIRDPARTY_EXTENSIONS_DEFAULT_DIR = op.join(USER_ROAMING_DIR, PYREVIT_ADDON_NAME, 'Extensions')</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/#pyrevit.PYREVIT_ALLUSER_APP_DIR","title":"<code>PYREVIT_ALLUSER_APP_DIR = op.join(ALLUSER_PROGRAMDATA, PYREVIT_ADDON_NAME)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/#pyrevit.PYREVIT_APP_DIR","title":"<code>PYREVIT_APP_DIR = op.join(USER_ROAMING_DIR, PYREVIT_ADDON_NAME)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/#pyrevit.PYREVIT_VERSION_APP_DIR","title":"<code>PYREVIT_VERSION_APP_DIR = op.join(PYREVIT_APP_DIR, HOST_APP.version)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/#pyrevit.PYREVIT_FILE_PREFIX_UNIVERSAL","title":"<code>PYREVIT_FILE_PREFIX_UNIVERSAL = '{}_'.format(PYREVIT_ADDON_NAME)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/#pyrevit.PYREVIT_FILE_PREFIX_UNIVERSAL_REGEX","title":"<code>PYREVIT_FILE_PREFIX_UNIVERSAL_REGEX = '^' + PYREVIT_ADDON_NAME + '_(?P&lt;fname&gt;.+)'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/#pyrevit.PYREVIT_FILE_PREFIX","title":"<code>PYREVIT_FILE_PREFIX = '{}_{}_'.format(PYREVIT_ADDON_NAME, HOST_APP.version)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/#pyrevit.PYREVIT_FILE_PREFIX_REGEX","title":"<code>PYREVIT_FILE_PREFIX_REGEX = '^' + PYREVIT_ADDON_NAME + '_(?P&lt;version&gt;\\\\d{4})_(?P&lt;fname&gt;.+)'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/#pyrevit.PYREVIT_FILE_PREFIX_STAMPED","title":"<code>PYREVIT_FILE_PREFIX_STAMPED = '{}_{}_{}_'.format(PYREVIT_ADDON_NAME, HOST_APP.version, HOST_APP.proc_id)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/#pyrevit.PYREVIT_FILE_PREFIX_STAMPED_REGEX","title":"<code>PYREVIT_FILE_PREFIX_STAMPED_REGEX = '^' + PYREVIT_ADDON_NAME + '_(?P&lt;version&gt;\\\\d{4})_(?P&lt;pid&gt;\\\\d+)_(?P&lt;fname&gt;.+)'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/#pyrevit.PYREVIT_FILE_PREFIX_UNIVERSAL_USER","title":"<code>PYREVIT_FILE_PREFIX_UNIVERSAL_USER = '{}_{}_'.format(PYREVIT_ADDON_NAME, HOST_APP.username)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/#pyrevit.PYREVIT_FILE_PREFIX_UNIVERSAL_USER_REGEX","title":"<code>PYREVIT_FILE_PREFIX_UNIVERSAL_USER_REGEX = '^' + PYREVIT_ADDON_NAME + '_(?P&lt;user&gt;.+)_(?P&lt;fname&gt;.+)'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/#pyrevit.PYREVIT_FILE_PREFIX_USER","title":"<code>PYREVIT_FILE_PREFIX_USER = '{}_{}_{}_'.format(PYREVIT_ADDON_NAME, HOST_APP.version, HOST_APP.username)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/#pyrevit.PYREVIT_FILE_PREFIX_USER_REGEX","title":"<code>PYREVIT_FILE_PREFIX_USER_REGEX = '^' + PYREVIT_ADDON_NAME + '_(?P&lt;version&gt;\\\\d{4})_(?P&lt;user&gt;.+)_(?P&lt;fname&gt;.+)'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/#pyrevit.PYREVIT_FILE_PREFIX_STAMPED_USER","title":"<code>PYREVIT_FILE_PREFIX_STAMPED_USER = '{}_{}_{}_{}_'.format(PYREVIT_ADDON_NAME, HOST_APP.version, HOST_APP.username, HOST_APP.proc_id)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/#pyrevit.PYREVIT_FILE_PREFIX_STAMPED_USER_REGEX","title":"<code>PYREVIT_FILE_PREFIX_STAMPED_USER_REGEX = '^' + PYREVIT_ADDON_NAME + '_(?P&lt;version&gt;\\\\d{4})_(?P&lt;user&gt;.+)_(?P&lt;pid&gt;\\\\d+)_(?P&lt;fname&gt;.+)'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/#pyrevit-classes","title":"Classes","text":""},{"location":"reference/pyrevit/#pyrevit.PyRevitException","title":"<code>PyRevitException</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Common base class for all pyRevit exceptions.</p> <p>Parameters args and message are derived from Exception class.</p>"},{"location":"reference/pyrevit/#pyrevit.PyRevitException-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/#pyrevit.PyRevitException.msg","title":"<code>msg</code>  <code>property</code>","text":"<p>Return exception message.</p>"},{"location":"reference/pyrevit/#pyrevit.PyRevitIOError","title":"<code>PyRevitIOError</code>","text":"<p>               Bases: <code>PyRevitException</code></p> <p>Common base class for all pyRevit io-related exceptions.</p>"},{"location":"reference/pyrevit/#pyrevit.PyRevitIOError-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/#pyrevit.PyRevitIOError.msg","title":"<code>msg</code>  <code>property</code>","text":"<p>Return exception message.</p>"},{"location":"reference/pyrevit/#pyrevit.PyRevitCPythonNotSupported","title":"<code>PyRevitCPythonNotSupported(feature_name)</code>","text":"<p>               Bases: <code>PyRevitException</code></p> <p>Exception for features not supported under CPython.</p> Source code in <code>pyrevitlib/pyrevit/__init__.py</code> <pre><code>def __init__(self, feature_name):\n    super(PyRevitCPythonNotSupported, self).__init__()\n    self.feature_name = feature_name\n</code></pre>"},{"location":"reference/pyrevit/#pyrevit.PyRevitCPythonNotSupported-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/#pyrevit.PyRevitCPythonNotSupported.feature_name","title":"<code>feature_name = feature_name</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/#pyrevit.PyRevitCPythonNotSupported.msg","title":"<code>msg</code>  <code>property</code>","text":"<p>Return exception message.</p>"},{"location":"reference/pyrevit/#pyrevit._HostApplication","title":"<code>_HostApplication()</code>","text":"<p>               Bases: <code>object</code></p> <p>Private Wrapper for Current Instance of Revit.</p> <p>Provides version info and comparison functionality, alongside providing info on the active screen, active document and ui-document, available postable commands, and other functionality.</p> <p>Examples:</p> <pre><code>hostapp = _HostApplication()\nhostapp.is_newer_than(2017)\n</code></pre> Source code in <code>pyrevitlib/pyrevit/__init__.py</code> <pre><code>def __init__(self):\n    self._postable_cmds = []\n</code></pre>"},{"location":"reference/pyrevit/#pyrevit._HostApplication-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/#pyrevit._HostApplication.uiapp","title":"<code>uiapp</code>  <code>property</code>","text":"<p>Return UIApplication provided to the running command.</p>"},{"location":"reference/pyrevit/#pyrevit._HostApplication.app","title":"<code>app</code>  <code>property</code>","text":"<p>Return Application provided to the running command.</p>"},{"location":"reference/pyrevit/#pyrevit._HostApplication.addin_id","title":"<code>addin_id</code>  <code>property</code>","text":"<p>Return active addin id.</p>"},{"location":"reference/pyrevit/#pyrevit._HostApplication.has_api_context","title":"<code>has_api_context</code>  <code>property</code>","text":"<p>Determine if host application is in API context.</p>"},{"location":"reference/pyrevit/#pyrevit._HostApplication.uidoc","title":"<code>uidoc</code>  <code>property</code>","text":"<p>Return active UIDocument.</p>"},{"location":"reference/pyrevit/#pyrevit._HostApplication.doc","title":"<code>doc</code>  <code>property</code>","text":"<p>Return active Document.</p>"},{"location":"reference/pyrevit/#pyrevit._HostApplication.active_view","title":"<code>active_view</code>  <code>property</code> <code>writable</code>","text":"<p>Return view that is active (UIDocument.ActiveView).</p>"},{"location":"reference/pyrevit/#pyrevit._HostApplication.docs","title":"<code>docs</code>  <code>property</code>","text":"<p>Return :obj:<code>list</code> of open :obj:<code>Document</code> objects.</p>"},{"location":"reference/pyrevit/#pyrevit._HostApplication.available_servers","title":"<code>available_servers</code>  <code>property</code>","text":"<p>Return :obj:<code>list</code> of available Revit server names.</p>"},{"location":"reference/pyrevit/#pyrevit._HostApplication.version","title":"<code>version</code>  <code>property</code>","text":"<p>str: Return version number (e.g. '2018').</p>"},{"location":"reference/pyrevit/#pyrevit._HostApplication.subversion","title":"<code>subversion</code>  <code>property</code>","text":"<p>str: Return subversion number (e.g. '2018.3').</p>"},{"location":"reference/pyrevit/#pyrevit._HostApplication.version_name","title":"<code>version_name</code>  <code>property</code>","text":"<p>str: Return version name (e.g. 'Autodesk Revit 2018').</p>"},{"location":"reference/pyrevit/#pyrevit._HostApplication.build","title":"<code>build</code>  <code>property</code>","text":"<p>str: Return build number (e.g. '20170927_1515(x64)').</p>"},{"location":"reference/pyrevit/#pyrevit._HostApplication.serial_no","title":"<code>serial_no</code>  <code>property</code>","text":"<p>str: Return serial number number (e.g. '569-09704828').</p>"},{"location":"reference/pyrevit/#pyrevit._HostApplication.pretty_name","title":"<code>pretty_name</code>  <code>property</code>","text":"<p>Returns the pretty name of the host.</p> <p>Examples:</p> <p>Autodesk Revit 2019.2 build: 20190808_0900(x64)</p> <p>Returns:</p> Type Description <code>str</code> <p>Pretty name of the host</p>"},{"location":"reference/pyrevit/#pyrevit._HostApplication.is_demo","title":"<code>is_demo</code>  <code>property</code>","text":"<p>bool: Determine if product is using demo license.</p>"},{"location":"reference/pyrevit/#pyrevit._HostApplication.language","title":"<code>language</code>  <code>property</code>","text":"<p>str: Return language type (e.g. 'LanguageType.English_USA').</p>"},{"location":"reference/pyrevit/#pyrevit._HostApplication.username","title":"<code>username</code>  <code>property</code>","text":"<p>str: Return the username from Revit API (Application.Username).</p>"},{"location":"reference/pyrevit/#pyrevit._HostApplication.proc","title":"<code>proc</code>  <code>property</code>","text":"<p>System.Diagnostics.Process: Return current process object.</p>"},{"location":"reference/pyrevit/#pyrevit._HostApplication.proc_id","title":"<code>proc_id</code>  <code>property</code>","text":"<p>int: Return current process id.</p>"},{"location":"reference/pyrevit/#pyrevit._HostApplication.proc_name","title":"<code>proc_name</code>  <code>property</code>","text":"<p>str: Return current process name.</p>"},{"location":"reference/pyrevit/#pyrevit._HostApplication.proc_path","title":"<code>proc_path</code>  <code>property</code>","text":"<p>str: Return file path for the current process main module.</p>"},{"location":"reference/pyrevit/#pyrevit._HostApplication.proc_window","title":"<code>proc_window</code>  <code>property</code>","text":"<p><code>intptr</code>: Return handle to current process window.</p>"},{"location":"reference/pyrevit/#pyrevit._HostApplication.proc_screen","title":"<code>proc_screen</code>  <code>property</code>","text":"<p><code>intptr</code>: Return handle to screen hosting current process.</p>"},{"location":"reference/pyrevit/#pyrevit._HostApplication.proc_screen_workarea","title":"<code>proc_screen_workarea</code>  <code>property</code>","text":"<p><code>System.Drawing.Rectangle</code>: Return screen working area.</p>"},{"location":"reference/pyrevit/#pyrevit._HostApplication.proc_screen_scalefactor","title":"<code>proc_screen_scalefactor</code>  <code>property</code>","text":"<p>float: Return scaling for screen hosting current process.</p>"},{"location":"reference/pyrevit/#pyrevit._HostApplication-functions","title":"Functions","text":""},{"location":"reference/pyrevit/#pyrevit._HostApplication.is_newer_than","title":"<code>is_newer_than(version, or_equal=False)</code>","text":"<p>bool: Return True if host app is newer than provided version.</p> <p>Parameters:</p> Name Type Description Default <code>version</code> <code>str or int</code> <p>version to check against.</p> required <code>or_equal</code> <code>bool</code> <p>Whether to include <code>version</code> in the comparison</p> <code>False</code> Source code in <code>pyrevitlib/pyrevit/__init__.py</code> <pre><code>def is_newer_than(self, version, or_equal=False):\n    \"\"\"bool: Return True if host app is newer than provided version.\n\n    Args:\n        version (str or int): version to check against.\n        or_equal (bool): Whether to include `version` in the comparison\n    \"\"\"\n    if or_equal:\n        return int(self.version) &gt;= int(version)\n    else:\n        return int(self.version) &gt; int(version)\n</code></pre>"},{"location":"reference/pyrevit/#pyrevit._HostApplication.is_older_than","title":"<code>is_older_than(version)</code>","text":"<p>bool: Return True if host app is older than provided version.</p> <p>Parameters:</p> Name Type Description Default <code>version</code> <code>str or int</code> <p>version to check against.</p> required Source code in <code>pyrevitlib/pyrevit/__init__.py</code> <pre><code>def is_older_than(self, version):\n    \"\"\"bool: Return True if host app is older than provided version.\n\n    Args:\n        version (str or int): version to check against.\n    \"\"\"\n    return int(self.version) &lt; int(version)\n</code></pre>"},{"location":"reference/pyrevit/#pyrevit._HostApplication.is_exactly","title":"<code>is_exactly(version)</code>","text":"<p>bool: Return True if host app is equal to provided version.</p> <p>Parameters:</p> Name Type Description Default <code>version</code> <code>str or int</code> <p>version to check against.</p> required Source code in <code>pyrevitlib/pyrevit/__init__.py</code> <pre><code>def is_exactly(self, version):\n    \"\"\"bool: Return True if host app is equal to provided version.\n\n    Args:\n        version (str or int): version to check against.\n    \"\"\"\n    return int(self.version) == int(version)\n</code></pre>"},{"location":"reference/pyrevit/#pyrevit._HostApplication.get_postable_commands","title":"<code>get_postable_commands()</code>","text":"<p>Return list of postable commands.</p> <p>Returns:</p> Type Description <code>list[_HostAppPostableCommand]</code> <p>postable commands.</p> Source code in <code>pyrevitlib/pyrevit/__init__.py</code> <pre><code>def get_postable_commands(self):\n    \"\"\"Return list of postable commands.\n\n    Returns:\n        (list[_HostAppPostableCommand]): postable commands.\n    \"\"\"\n    # if list of postable commands is _not_ already created\n    # make the list and store in instance parameter\n    if not self._postable_cmds:\n        for pc in UI.PostableCommand.GetValues(UI.PostableCommand):\n            try:\n                rcid = UI.RevitCommandId.LookupPostableCommandId(pc)\n                self._postable_cmds.append(\n                    # wrap postable command info in custom namedtuple\n                    _HostAppPostableCommand(name=safe_strtype(pc),\n                                            key=rcid.Name,\n                                            id=rcid.Id,\n                                            rvtobj=rcid)\n                    )\n            except Exception:\n                # if any error occured when querying postable command\n                # or its info, pass silently\n                pass\n\n    return self._postable_cmds\n</code></pre>"},{"location":"reference/pyrevit/#pyrevit._HostApplication.post_command","title":"<code>post_command(command_id)</code>","text":"<p>Request Revit to run a command.</p> <p>Parameters:</p> Name Type Description Default <code>command_id</code> <code>str</code> <p>command identifier e.g. ID_REVIT_SAVE_AS_TEMPLATE</p> required Source code in <code>pyrevitlib/pyrevit/__init__.py</code> <pre><code>def post_command(self, command_id):\n    \"\"\"Request Revit to run a command.\n\n    Args:\n        command_id (str): command identifier e.g. ID_REVIT_SAVE_AS_TEMPLATE\n    \"\"\"\n    command_id = UI.RevitCommandId.LookupCommandId(command_id)\n    self.uiapp.PostCommand(command_id)\n</code></pre>"},{"location":"reference/pyrevit/api/","title":"api","text":"<p>Provide access to Revit API.</p> <p>Examples:</p> <pre><code>from pyrevit.api import AdWindows\n</code></pre>"},{"location":"reference/pyrevit/api/#pyrevit.api-functions","title":"Functions","text":""},{"location":"reference/pyrevit/api/#pyrevit.api.get_product_serial_number","title":"<code>get_product_serial_number()</code>","text":"<p>Return serial number of running host instance.</p> <p>Returns:</p> Type Description <code>str</code> <p>Serial number</p> Source code in <code>pyrevitlib/pyrevit/api.py</code> <pre><code>def get_product_serial_number():\n    \"\"\"Return serial number of running host instance.\n\n    Returns:\n        (str): Serial number\n    \"\"\"\n    return UIFrameworkServices.InfoCenterService.ProductSerialNumber\n</code></pre>"},{"location":"reference/pyrevit/api/#pyrevit.api.is_product_demo","title":"<code>is_product_demo()</code>","text":"<p>Determine if product is using demo license.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if product is using demo license</p> Source code in <code>pyrevitlib/pyrevit/api.py</code> <pre><code>def is_product_demo():\n    \"\"\"Determine if product is using demo license.\n\n    Returns:\n        (bool): True if product is using demo license\n    \"\"\"\n    return get_product_serial_number() == '000-00000000'\n</code></pre>"},{"location":"reference/pyrevit/api/#pyrevit.api.is_api_object","title":"<code>is_api_object(data_type)</code>","text":"<p>Check if given object belongs to Revit API.</p> <p>Parameters:</p> Name Type Description Default <code>data_type</code> <code>object</code> <p>Object to check</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if object belongs to Revit API</p> Source code in <code>pyrevitlib/pyrevit/api.py</code> <pre><code>def is_api_object(data_type):\n    \"\"\"Check if given object belongs to Revit API.\n\n    Args:\n        data_type (object): Object to check\n\n    Returns:\n        (bool): True if object belongs to Revit API\n    \"\"\"\n    if hasattr(data_type, 'GetType'):\n        return 'Autodesk.Revit.' in data_type.GetType().Namespace\n</code></pre>"},{"location":"reference/pyrevit/compat/","title":"compat","text":"<p>python engine compatibility module.</p> <p>Examples:</p> <pre><code>from pyrevit.compat import IRONPY2711\nfrom pyrevit.compat import safe_strtype\n</code></pre>"},{"location":"reference/pyrevit/compat/#pyrevit.compat-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/compat/#pyrevit.compat.PY2","title":"<code>PY2 = sys.version_info[0] == 2</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/compat/#pyrevit.compat.PY3","title":"<code>PY3 = sys.version_info[0] == 3</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/compat/#pyrevit.compat.IRONPY","title":"<code>IRONPY = '.net' in sys.version.lower()</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/compat/#pyrevit.compat.IRONPY2","title":"<code>IRONPY2 = PY2 and IRONPY</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/compat/#pyrevit.compat.IRONPY3","title":"<code>IRONPY3 = PY3 and IRONPY</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/compat/#pyrevit.compat.NETCORE","title":"<code>NETCORE = System.Environment.Version.Major &gt;= 8</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/compat/#pyrevit.compat.NETFRAMEWORK","title":"<code>NETFRAMEWORK = not NETCORE</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/compat/#pyrevit.compat.NO_REVIT","title":"<code>NO_REVIT = -1</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/compat/#pyrevit.compat.REVIT_NETCORE_VERSION","title":"<code>REVIT_NETCORE_VERSION = 2025</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/compat/#pyrevit.compat.safe_strtype","title":"<code>safe_strtype = str</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/compat/#pyrevit.compat-functions","title":"Functions","text":""},{"location":"reference/pyrevit/compat/#pyrevit.compat.get_elementid_value_func","title":"<code>get_elementid_value_func()</code>","text":"<p>Returns the ElementId value extraction function based on the Revit version.</p> <p>Follows API changes in Revit 2024.</p> <p>Returns:</p> Name Type Description <code>function</code> <p>A function returns the value of an ElementId.</p> <p>Examples:</p> <pre><code>get_elementid_value = get_elementid_value_func()\nsheet_revids = {get_elementid_value(x) for x in self.revit_sheet.GetAllRevisionIds()}\nadd_sheet_revids = {get_elementid_value(x) x in self.revit_sheet.GetAdditionalRevisionIds()}\n</code></pre> Source code in <code>pyrevitlib/pyrevit/compat.py</code> <pre><code>def get_elementid_value_func():\n    \"\"\"Returns the ElementId value extraction function based on the Revit version.\n\n    Follows API changes in Revit 2024.\n\n    Returns:\n        function: A function returns the value of an ElementId.\n\n    Examples:\n        ```python\n        get_elementid_value = get_elementid_value_func()\n        sheet_revids = {get_elementid_value(x) for x in self.revit_sheet.GetAllRevisionIds()}\n        add_sheet_revids = {get_elementid_value(x) x in self.revit_sheet.GetAdditionalRevisionIds()}\n        ```\n    \"\"\"\n    def get_value_post2024(item):\n        return item.Value\n\n    def get_value_pre2024(item):\n        return item.IntegerValue\n\n    return get_value_post2024 if _get_revit_version() &gt; 2023 else get_value_pre2024\n</code></pre>"},{"location":"reference/pyrevit/compat/#pyrevit.compat.urlopen","title":"<code>urlopen(url)</code>","text":"<p>Urlopen wrapper.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>request url</p> required Source code in <code>pyrevitlib/pyrevit/compat.py</code> <pre><code>def urlopen(url):\n    \"\"\"Urlopen wrapper.\n\n    Args:\n        url (str): request url\n    \"\"\"\n    if PY3:\n        return urllib.request.urlopen(url)\n    return urllib2.urlopen(url)\n</code></pre>"},{"location":"reference/pyrevit/compat/#pyrevit.compat.make_request","title":"<code>make_request(url, headers, data)</code>","text":"<p>Urlopen wrapper to create and send a request.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>request url</p> required <code>headers</code> <code>dict[str, str]</code> <p>headers</p> required <code>data</code> <code>bytes | None</code> <p>request data</p> required Source code in <code>pyrevitlib/pyrevit/compat.py</code> <pre><code>def make_request(url, headers, data):\n    \"\"\"Urlopen wrapper to create and send a request.\n\n    Args:\n        url (str): request url\n        headers (dict[str, str]): headers\n        data (bytes | None): request data\n    \"\"\"\n    if PY3:\n        req = urllib.request.Request(url, headers, data)\n        urllib.request.urlopen(req).close()\n        return\n\n    req = urllib2.Request(url, headers, data)\n    urllib2.urlopen(req).close()\n</code></pre>"},{"location":"reference/pyrevit/engine/","title":"engine","text":"<p>Access loading engine properties.</p>"},{"location":"reference/pyrevit/engine/#pyrevit.engine-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/engine/#pyrevit.engine.ScriptExecutor","title":"<code>ScriptExecutor = PyRevitLoader.ScriptExecutor</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/engine/#pyrevit.engine.EnginePrefix","title":"<code>EnginePrefix = ScriptExecutor.EnginePrefix</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/engine/#pyrevit.engine.EngineVersion","title":"<code>EngineVersion = ScriptExecutor.EngineVersion</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/engine/#pyrevit.engine.EnginePath","title":"<code>EnginePath = op.dirname(clr.GetClrType(ScriptExecutor).Assembly.Location)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/framework/","title":"framework","text":"<p>Provide access to DotNet Framework.</p> <p>Examples:</p> <pre><code>from pyrevit.framework import Assembly, Windows\n</code></pre>"},{"location":"reference/pyrevit/framework/#pyrevit.framework-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/framework/#pyrevit.framework.ASSEMBLY_FILE_TYPE","title":"<code>ASSEMBLY_FILE_TYPE = 'dll'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/framework/#pyrevit.framework.ASSEMBLY_FILE_EXT","title":"<code>ASSEMBLY_FILE_EXT = '.dll'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/framework/#pyrevit.framework.ipy_assmname","title":"<code>ipy_assmname = '{prefix}IronPython'.format(prefix=eng.EnginePrefix)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/framework/#pyrevit.framework.ipy_dllpath","title":"<code>ipy_dllpath = op.join(eng.EnginePath, ipy_assmname + ASSEMBLY_FILE_EXT)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/framework/#pyrevit.framework.wpf_assmname","title":"<code>wpf_assmname = '{prefix}IronPython.Wpf'.format(prefix=eng.EnginePrefix)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/framework/#pyrevit.framework.wpf_dllpath","title":"<code>wpf_dllpath = op.join(eng.EnginePath, wpf_assmname + ASSEMBLY_FILE_EXT)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/framework/#pyrevit.framework.sqlite3_assmname","title":"<code>sqlite3_assmname = '{prefix}IronPython.SQLite'.format(prefix=eng.EnginePrefix)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/framework/#pyrevit.framework.sqlite3_dllpath","title":"<code>sqlite3_dllpath = op.join(eng.EnginePath, sqlite3_assmname + ASSEMBLY_FILE_EXT)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/framework/#pyrevit.framework-functions","title":"Functions","text":""},{"location":"reference/pyrevit/framework/#pyrevit.framework.get_type","title":"<code>get_type(fw_object)</code>","text":"<p>Return CLR type of an object.</p> Source code in <code>pyrevitlib/pyrevit/framework.py</code> <pre><code>def get_type(fw_object):\n    \"\"\"Return CLR type of an object.\"\"\"\n    return clr.GetClrType(fw_object)\n</code></pre>"},{"location":"reference/pyrevit/framework/#pyrevit.framework.get_dll_file","title":"<code>get_dll_file(assembly_name)</code>","text":"<p>Return path to given assembly name.</p> Source code in <code>pyrevitlib/pyrevit/framework.py</code> <pre><code>def get_dll_file(assembly_name):\n    \"\"\"Return path to given assembly name.\"\"\"\n    addin_file = op.join(BIN_DIR, assembly_name + '.dll')\n    if op.exists(addin_file):\n        return addin_file\n</code></pre>"},{"location":"reference/pyrevit/framework/#pyrevit.framework.get_current_thread_id","title":"<code>get_current_thread_id()</code>","text":"<p>Return manageed thread id of current thread.</p> Source code in <code>pyrevitlib/pyrevit/framework.py</code> <pre><code>def get_current_thread_id():\n    \"\"\"Return manageed thread id of current thread.\"\"\"\n    return System.Threading.Thread.CurrentThread.ManagedThreadId\n</code></pre>"},{"location":"reference/pyrevit/labs/","title":"labs","text":"<p>Wrapper module for pyRevitLabs functionality.</p>"},{"location":"reference/pyrevit/labs/#pyrevit.labs-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/labs/#pyrevit.labs.mlogger","title":"<code>mlogger = logger.get_logger(__name__)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/labs/#pyrevit.labs.config","title":"<code>config = NLog.Config.LoggingConfiguration()</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/labs/#pyrevit.labs.target","title":"<code>target = PyRevitOutputTarget()</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/labs/#pyrevit.labs.nlog_mlogger","title":"<code>nlog_mlogger = NLog.LogManager.GetLogger(__name__)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/labs/#pyrevit.labs-classes","title":"Classes","text":""},{"location":"reference/pyrevit/labs/#pyrevit.labs.PyRevitOutputTarget","title":"<code>PyRevitOutputTarget</code>","text":"<p>               Bases: <code>TargetWithLayout</code></p> <p>NLog target to direct log messages to pyRevit output window.</p>"},{"location":"reference/pyrevit/labs/#pyrevit.labs.PyRevitOutputTarget-functions","title":"Functions","text":""},{"location":"reference/pyrevit/labs/#pyrevit.labs.PyRevitOutputTarget.Write","title":"<code>Write(asyncLogEvent)</code>","text":"<p>Write event handler.</p> Source code in <code>pyrevitlib/pyrevit/labs.py</code> <pre><code>def Write(self, asyncLogEvent):\n    \"\"\"Write event handler.\"\"\"\n    try:\n        event = asyncLogEvent.LogEvent\n        level = self.convert_level(event.Level)\n        if mlogger.is_enabled_for(level):\n            print(self.Layout.Render(event))    #pylint: disable=E1101\n    except Exception as e:\n        print(e)\n</code></pre>"},{"location":"reference/pyrevit/labs/#pyrevit.labs.PyRevitOutputTarget.convert_level","title":"<code>convert_level(nlog_level)</code>","text":"<p>Convert Nlog levels to pything logging levels.</p> Source code in <code>pyrevitlib/pyrevit/labs.py</code> <pre><code>def convert_level(self, nlog_level):\n    \"\"\"Convert Nlog levels to pything logging levels.\"\"\"\n    if nlog_level == NLog.LogLevel.Fatal:\n        return logging.CRITICAL\n    elif nlog_level == NLog.LogLevel.Error:\n        return logging.ERROR\n    elif nlog_level == NLog.LogLevel.Info:\n        return logging.INFO\n    elif nlog_level == NLog.LogLevel.Debug:\n        return logging.DEBUG\n    elif nlog_level == NLog.LogLevel.Off:\n        return logging.DEBUG\n    elif nlog_level == NLog.LogLevel.Trace:\n        return logging.DEBUG\n    elif nlog_level == NLog.LogLevel.Warn:\n        return logging.WARNING\n</code></pre>"},{"location":"reference/pyrevit/labs/#pyrevit.labs-functions","title":"Functions","text":""},{"location":"reference/pyrevit/labs/#pyrevit.labs.extract_build_from_exe","title":"<code>extract_build_from_exe(proc_path)</code>","text":"<p>Extract build number from host .exe file.</p> <p>Parameters:</p> Name Type Description Default <code>proc_path</code> <code>str</code> <p>full path of the host .exe file</p> required <p>Returns:</p> Type Description <code>str</code> <p>build number (e.g. '20170927_1515(x64)')</p> Source code in <code>pyrevitlib/pyrevit/labs.py</code> <pre><code>def extract_build_from_exe(proc_path):\n    \"\"\"Extract build number from host .exe file.\n\n    Args:\n        proc_path (str): full path of the host .exe file\n\n    Returns:\n        (str): build number (e.g. '20170927_1515(x64)')\n    \"\"\"\n    # Revit 2021 has a bug on .VersionBuild\n    ## it reports identical value as .VersionNumber\n    pinfo = TargetApps.Revit.RevitProductData.GetBinaryProductInfo(proc_path)\n    return \"{}({})\".format(pinfo.build, pinfo.target) \\\n        if pinfo.build else \"20000101_0000(x64)\"\n</code></pre>"},{"location":"reference/pyrevit/script/","title":"script","text":"<p>Provide basic utilities for pyRevit scripts.</p> <p>Examples:</p> <pre><code>from pyrevit import script\nscript.clipboard_copy('some text')\ndata = script.journal_read('data-key')\nscript.exit()\n</code></pre>"},{"location":"reference/pyrevit/script/#pyrevit.script-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/script/#pyrevit.script.mlogger","title":"<code>mlogger = logger.get_logger(__name__)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/script/#pyrevit.script.DATAFEXT","title":"<code>DATAFEXT = 'pym'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/script/#pyrevit.script.ICON_SMALL","title":"<code>ICON_SMALL = 16</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/script/#pyrevit.script.ICON_MEDIUM","title":"<code>ICON_MEDIUM = 24</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/script/#pyrevit.script.ICON_LARGE","title":"<code>ICON_LARGE = 32</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/script/#pyrevit.script-classes","title":"Classes","text":""},{"location":"reference/pyrevit/script/#pyrevit.script-functions","title":"Functions","text":""},{"location":"reference/pyrevit/script/#pyrevit.script.get_info","title":"<code>get_info()</code>","text":"<p>Return info on current pyRevit command.</p> <p>Returns:</p> Type Description <code>GenericUICommand</code> <p>Command info object</p> Source code in <code>pyrevitlib/pyrevit/script.py</code> <pre><code>def get_info():\n    \"\"\"Return info on current pyRevit command.\n\n    Returns:\n        (pyrevit.extensions.genericcomps.GenericUICommand):\n            Command info object\n    \"\"\"\n    return get_command_from_path(EXEC_PARAMS.command_path)\n</code></pre>"},{"location":"reference/pyrevit/script/#pyrevit.script.get_command_from_path","title":"<code>get_command_from_path(comp_path)</code>","text":"<p>Returns a pyRevit command object from the given bundle directory.</p> <p>Parameters:</p> Name Type Description Default <code>comp_path</code> <code>str</code> <p>Full directory address of the command bundle</p> required <p>Returns:</p> Type Description <code>GenericUICommand</code> <p>A subclass of pyRevit command object.</p> Source code in <code>pyrevitlib/pyrevit/script.py</code> <pre><code>def get_command_from_path(comp_path):\n    \"\"\"Returns a pyRevit command object from the given bundle directory.\n\n    Args:\n        comp_path (str): Full directory address of the command bundle\n\n    Returns:\n        (genericcomps.GenericUICommand): A subclass of pyRevit command object.\n    \"\"\"\n    cmds = parse_comp_dir(comp_path, GenericUICommand)\n    if cmds:\n        return cmds[0]\n\n    return None\n</code></pre>"},{"location":"reference/pyrevit/script/#pyrevit.script.get_script_path","title":"<code>get_script_path()</code>","text":"<p>Return script path of the current pyRevit command.</p> <p>Returns:</p> Type Description <code>str</code> <p>script path</p> Source code in <code>pyrevitlib/pyrevit/script.py</code> <pre><code>def get_script_path():\n    \"\"\"Return script path of the current pyRevit command.\n\n    Returns:\n        (str): script path\n    \"\"\"\n    return EXEC_PARAMS.command_path\n</code></pre>"},{"location":"reference/pyrevit/script/#pyrevit.script.get_alt_script_path","title":"<code>get_alt_script_path()</code>","text":"<p>Return config script path of the current pyRevit command.</p> <p>Returns:</p> Type Description <code>str</code> <p>config script path</p> Source code in <code>pyrevitlib/pyrevit/script.py</code> <pre><code>def get_alt_script_path():\n    \"\"\"Return config script path of the current pyRevit command.\n\n    Returns:\n        (str): config script path\n    \"\"\"\n    return EXEC_PARAMS.command_config_path\n</code></pre>"},{"location":"reference/pyrevit/script/#pyrevit.script.get_bundle_name","title":"<code>get_bundle_name()</code>","text":"<p>Return bundle name of the current pyRevit command.</p> <p>Returns:</p> Type Description <code>str</code> <p>bundle name (e.g. MyButton.pushbutton)</p> Source code in <code>pyrevitlib/pyrevit/script.py</code> <pre><code>def get_bundle_name():\n    \"\"\"Return bundle name of the current pyRevit command.\n\n    Returns:\n        (str): bundle name (e.g. MyButton.pushbutton)\n    \"\"\"\n    return EXEC_PARAMS.command_bundle\n</code></pre>"},{"location":"reference/pyrevit/script/#pyrevit.script.get_extension_name","title":"<code>get_extension_name()</code>","text":"<p>Return extension name of the current pyRevit command.</p> <p>Returns:</p> Type Description <code>str</code> <p>extension name (e.g. MyExtension.extension)</p> Source code in <code>pyrevitlib/pyrevit/script.py</code> <pre><code>def get_extension_name():\n    \"\"\"Return extension name of the current pyRevit command.\n\n    Returns:\n        (str): extension name (e.g. MyExtension.extension)\n    \"\"\"\n    return EXEC_PARAMS.command_extension\n</code></pre>"},{"location":"reference/pyrevit/script/#pyrevit.script.get_unique_id","title":"<code>get_unique_id()</code>","text":"<p>Return unique id of the current pyRevit command.</p> <p>Returns:</p> Type Description <code>str</code> <p>command unique id</p> Source code in <code>pyrevitlib/pyrevit/script.py</code> <pre><code>def get_unique_id():\n    \"\"\"Return unique id of the current pyRevit command.\n\n    Returns:\n        (str): command unique id\n    \"\"\"\n    return EXEC_PARAMS.command_uniqueid\n</code></pre>"},{"location":"reference/pyrevit/script/#pyrevit.script.get_results","title":"<code>get_results()</code>","text":"<p>Return command results dictionary for logging.</p> <p>Returns:</p> Type Description <code>CommandCustomResults</code> <p>Command results dict</p> Source code in <code>pyrevitlib/pyrevit/script.py</code> <pre><code>def get_results():\n    \"\"\"Return command results dictionary for logging.\n\n    Returns:\n        (pyrevit.telemetry.record.CommandCustomResults):\n            Command results dict\n    \"\"\"\n    from pyrevit.telemetry.record import CommandCustomResults\n    return CommandCustomResults()\n</code></pre>"},{"location":"reference/pyrevit/script/#pyrevit.script.get_pyrevit_version","title":"<code>get_pyrevit_version()</code>","text":"<p>Return pyRevit version.</p> <p>Returns:</p> Type Description <code>_PyRevitVersion</code> <p>pyRevit version provider</p> Source code in <code>pyrevitlib/pyrevit/script.py</code> <pre><code>def get_pyrevit_version():\n    \"\"\"Return pyRevit version.\n\n    Returns:\n        (pyrevit.versionmgr._PyRevitVersion): pyRevit version provider\n    \"\"\"\n    return versionmgr.get_pyrevit_version()\n</code></pre>"},{"location":"reference/pyrevit/script/#pyrevit.script.get_logger","title":"<code>get_logger()</code>","text":"<p>Create and return logger named for current script.</p> <p>Returns:</p> Type Description <code>LoggerWrapper</code> <p>Logger object</p> Source code in <code>pyrevitlib/pyrevit/script.py</code> <pre><code>def get_logger():\n    \"\"\"Create and return logger named for current script.\n\n    Returns:\n        (pyrevit.coreutils.logger.LoggerWrapper): Logger object\n    \"\"\"\n    return logger.get_logger(EXEC_PARAMS.command_name)\n</code></pre>"},{"location":"reference/pyrevit/script/#pyrevit.script.get_output","title":"<code>get_output()</code>","text":"<p>Return object wrapping output window for current script.</p> <p>Returns:</p> Type Description <code>PyRevitOutputWindow</code> <p>Output wrapper object</p> Source code in <code>pyrevitlib/pyrevit/script.py</code> <pre><code>def get_output():\n    \"\"\"Return object wrapping output window for current script.\n\n    Returns:\n        (pyrevit.output.PyRevitOutputWindow): Output wrapper object\n    \"\"\"\n    return output.get_output()\n</code></pre>"},{"location":"reference/pyrevit/script/#pyrevit.script.get_config","title":"<code>get_config(section=None)</code>","text":"<p>Create and return config section parser object for current script.</p> <p>Parameters:</p> Name Type Description Default <code>section</code> <code>str</code> <p>config section name. If not provided, it will default to the command name plus the 'config' suffix.</p> <code>None</code> <p>Returns:</p> Type Description <code>PyRevitConfigSectionParser</code> <p>Config section parser object</p> Source code in <code>pyrevitlib/pyrevit/script.py</code> <pre><code>def get_config(section=None):\n    \"\"\"Create and return config section parser object for current script.\n\n    Args:\n        section (str, optional): config section name. If not provided,\n            it will default to the command name plus the 'config' suffix.\n\n    Returns:\n        (pyrevit.coreutils.configparser.PyRevitConfigSectionParser):\n            Config section parser object\n    \"\"\"\n    from pyrevit.userconfig import user_config\n    if not section:\n        script_cfg_postfix = 'config'\n        section = EXEC_PARAMS.command_name + script_cfg_postfix\n\n    try:\n        return user_config.get_section(section)\n    except AttributeError:\n        return user_config.add_section(section)\n</code></pre>"},{"location":"reference/pyrevit/script/#pyrevit.script.save_config","title":"<code>save_config()</code>","text":"<p>Save pyRevit config.</p> <p>Scripts should call this to save any changes they have done to their config section object received from script.get_config() method.</p> Source code in <code>pyrevitlib/pyrevit/script.py</code> <pre><code>def save_config():\n    \"\"\"Save pyRevit config.\n\n    Scripts should call this to save any changes they have done to their\n    config section object received from script.get_config() method.\n    \"\"\"\n    from pyrevit.userconfig import user_config\n    user_config.save_changes()\n</code></pre>"},{"location":"reference/pyrevit/script/#pyrevit.script.reset_config","title":"<code>reset_config(section=None)</code>","text":"<p>Reset pyRevit config.</p> <p>Script should call this to reset any save configuration by removing section related to current script.</p> <p>Parameters:</p> Name Type Description Default <code>section</code> <code>str</code> <p>config section name</p> <code>None</code> Source code in <code>pyrevitlib/pyrevit/script.py</code> <pre><code>def reset_config(section=None):\n    \"\"\"Reset pyRevit config.\n\n    Script should call this to reset any save configuration by removing\n    section related to current script.\n\n    Args:\n        section (str, optional): config section name\n    \"\"\"\n    from pyrevit.userconfig import user_config\n    if not section:\n        script_cfg_postfix = 'config'\n        section = EXEC_PARAMS.command_name + script_cfg_postfix\n    elif section in [PyRevit.PyRevitConsts.ConfigsCoreSection]:\n        raise PyRevitException('Can not remove internal config section: {}'\n                               .format(section))\n\n    try:\n        user_config.remove_section(section)\n        user_config.save_changes()\n    except Exception:\n        mlogger.debug('Failed resetting config for %s (%s)',\n                      EXEC_PARAMS.command_name, section)\n</code></pre>"},{"location":"reference/pyrevit/script/#pyrevit.script.get_universal_data_file","title":"<code>get_universal_data_file(file_id, file_ext, add_cmd_name=False)</code>","text":"<p>Return filename to be used by a user script to store data.</p> <p>File name is generated in this format: <code>pyRevit_{file_id}.{file_ext}</code></p> <p>Examples:</p> <p><pre><code>script.get_universal_data_file('mydata', 'data')\n</code></pre> '/pyRevit_mydata.data' <pre><code>script.get_universal_data_file('mydata', 'data', add_cmd_name=True)\n</code></pre> '/pyRevit_Command Name_mydata.data'</p> <p>Universal data files are not cleaned up at pyRevit startup. Script should manage cleaning up these files.</p> <p>Parameters:</p> Name Type Description Default <code>file_id</code> <code>str</code> <p>unique id for the filename</p> required <code>file_ext</code> <code>str</code> <p>file extension</p> required <code>add_cmd_name</code> <code>bool</code> <p>add command name to file name</p> <code>False</code> <p>Returns:</p> Type Description <code>str</code> <p>full file path</p> Source code in <code>pyrevitlib/pyrevit/script.py</code> <pre><code>def get_universal_data_file(file_id, file_ext, add_cmd_name=False):\n    \"\"\"Return filename to be used by a user script to store data.\n\n    File name is generated in this format:\n    ``pyRevit_{file_id}.{file_ext}``\n\n    Examples:\n        ```python\n        script.get_universal_data_file('mydata', 'data')\n        ```\n        '/pyRevit_mydata.data'\n        ```python\n        script.get_universal_data_file('mydata', 'data', add_cmd_name=True)\n        ```\n        '/pyRevit_Command Name_mydata.data'\n\n    Universal data files are not cleaned up at pyRevit startup.\n    Script should manage cleaning up these files.\n\n    Args:\n        file_id (str): unique id for the filename\n        file_ext (str): file extension\n        add_cmd_name (bool, optional): add command name to file name\n\n    Returns:\n        (str): full file path\n    \"\"\"\n    if add_cmd_name:\n        script_file_id = '{}_{}'.format(EXEC_PARAMS.command_name, file_id)\n    else:\n        script_file_id = file_id\n\n    return appdata.get_universal_data_file(script_file_id, file_ext)\n</code></pre>"},{"location":"reference/pyrevit/script/#pyrevit.script.get_data_file","title":"<code>get_data_file(file_id, file_ext, add_cmd_name=False)</code>","text":"<p>Return filename to be used by a user script to store data.</p> <p>File name is generated in this format: <code>pyRevit_{Revit Version}_{file_id}.{file_ext}</code></p> <p>Examples:</p> <p><pre><code>script.get_data_file('mydata', 'data')\n</code></pre> '/pyRevit_2018_mydata.data' <pre><code>script.get_data_file('mydata', 'data', add_cmd_name=True)\n</code></pre> '/pyRevit_2018_Command Name_mydata.data'</p> <p>Data files are not cleaned up at pyRevit startup. Script should manage cleaning up these files.</p> <p>Parameters:</p> Name Type Description Default <code>file_id</code> <code>str</code> <p>unique id for the filename</p> required <code>file_ext</code> <code>str</code> <p>file extension</p> required <code>add_cmd_name</code> <code>bool</code> <p>add command name to file name</p> <code>False</code> <p>Returns:</p> Type Description <code>str</code> <p>full file path</p> Source code in <code>pyrevitlib/pyrevit/script.py</code> <pre><code>def get_data_file(file_id, file_ext, add_cmd_name=False):\n    \"\"\"Return filename to be used by a user script to store data.\n\n    File name is generated in this format:\n    ``pyRevit_{Revit Version}_{file_id}.{file_ext}``\n\n    Examples:\n        ```python\n        script.get_data_file('mydata', 'data')\n        ```\n        '/pyRevit_2018_mydata.data'\n        ```python\n        script.get_data_file('mydata', 'data', add_cmd_name=True)\n        ```\n        '/pyRevit_2018_Command Name_mydata.data'\n\n\n    Data files are not cleaned up at pyRevit startup.\n    Script should manage cleaning up these files.\n\n    Args:\n        file_id (str): unique id for the filename\n        file_ext (str): file extension\n        add_cmd_name (bool, optional): add command name to file name\n\n    Returns:\n        (str): full file path\n    \"\"\"\n    if add_cmd_name:\n        script_file_id = '{}_{}'.format(EXEC_PARAMS.command_name, file_id)\n    else:\n        script_file_id = file_id\n\n    return appdata.get_data_file(script_file_id, file_ext)\n</code></pre>"},{"location":"reference/pyrevit/script/#pyrevit.script.get_instance_data_file","title":"<code>get_instance_data_file(file_id, add_cmd_name=False)</code>","text":"<p>Return filename to be used by a user script to store data.</p> <p>File name is generated in this format: <code>pyRevit_{Revit Version}_{Process Id}_{file_id}.{file_ext}</code></p> <p>Examples:</p> <p><pre><code>script.get_instance_data_file('mydata')\n</code></pre> '/pyRevit_2018_6684_mydata.tmp' <pre><code>script.get_instance_data_file('mydata', add_cmd_name=True)\n</code></pre> '/pyRevit_2018_6684_Command Name_mydata.tmp'</p> <p>Instance data files are cleaned up at pyRevit startup.</p> <p>Parameters:</p> Name Type Description Default <code>file_id</code> <code>str</code> <p>unique id for the filename</p> required <code>add_cmd_name</code> <code>bool</code> <p>add command name to file name</p> <code>False</code> <p>Returns:</p> Type Description <code>str</code> <p>full file path</p> Source code in <code>pyrevitlib/pyrevit/script.py</code> <pre><code>def get_instance_data_file(file_id, add_cmd_name=False):\n    \"\"\"Return filename to be used by a user script to store data.\n\n    File name is generated in this format:\n    ``pyRevit_{Revit Version}_{Process Id}_{file_id}.{file_ext}``\n\n    Examples:\n        ```python\n        script.get_instance_data_file('mydata')\n        ```\n        '/pyRevit_2018_6684_mydata.tmp'\n        ```python\n        script.get_instance_data_file('mydata', add_cmd_name=True)\n        ```\n        '/pyRevit_2018_6684_Command Name_mydata.tmp'\n\n    Instance data files are cleaned up at pyRevit startup.\n\n    Args:\n        file_id (str): unique id for the filename\n        add_cmd_name (bool, optional): add command name to file name\n\n    Returns:\n        (str): full file path\n    \"\"\"\n    if add_cmd_name:\n        script_file_id = '{}_{}'.format(EXEC_PARAMS.command_name, file_id)\n    else:\n        script_file_id = file_id\n\n    return appdata.get_instance_data_file(script_file_id)\n</code></pre>"},{"location":"reference/pyrevit/script/#pyrevit.script.get_document_data_file","title":"<code>get_document_data_file(file_id, file_ext, add_cmd_name=False)</code>","text":"<p>Return filename to be used by a user script to store data.</p> <p>File name is generated in this format: <code>pyRevit_{Revit Version}_{file_id}_{Project Name}.{file_ext}</code></p> <p>Examples:</p> <p><pre><code>script.get_document_data_file('mydata', 'data')\n</code></pre> '/pyRevit_2018_mydata_Project1.data' <pre><code>script.get_document_data_file('mydata', 'data', add_cmd_name=True)\n</code></pre> '/pyRevit_2018_Command Name_mydata_Project1.data'</p> <p>Document data files are not cleaned up at pyRevit startup. Script should manage cleaning up these files.</p> <p>Parameters:</p> Name Type Description Default <code>file_id</code> <code>str</code> <p>unique id for the filename</p> required <code>file_ext</code> <code>str</code> <p>file extension</p> required <code>add_cmd_name</code> <code>bool</code> <p>add command name to file name</p> <code>False</code> <p>Returns:</p> Type Description <code>str</code> <p>full file path</p> Source code in <code>pyrevitlib/pyrevit/script.py</code> <pre><code>def get_document_data_file(file_id, file_ext, add_cmd_name=False):\n    \"\"\"Return filename to be used by a user script to store data.\n\n    File name is generated in this format:\n    ``pyRevit_{Revit Version}_{file_id}_{Project Name}.{file_ext}``\n\n    Examples:\n        ```python\n        script.get_document_data_file('mydata', 'data')\n        ```\n        '/pyRevit_2018_mydata_Project1.data'\n        ```python\n        script.get_document_data_file('mydata', 'data', add_cmd_name=True)\n        ```\n        '/pyRevit_2018_Command Name_mydata_Project1.data'\n\n    Document data files are not cleaned up at pyRevit startup.\n    Script should manage cleaning up these files.\n\n    Args:\n        file_id (str): unique id for the filename\n        file_ext (str): file extension\n        add_cmd_name (bool, optional): add command name to file name\n\n    Returns:\n        (str): full file path\n    \"\"\"\n    proj_info = revit.query.get_project_info()\n\n    if add_cmd_name:\n        script_file_id = '{}_{}_{}'.format(EXEC_PARAMS.command_name,\n                                           file_id,\n                                           proj_info.filename\n                                           or proj_info.name)\n    else:\n        script_file_id = '{}_{}'.format(file_id,\n                                        proj_info.filename\n                                        or proj_info.name)\n\n    return appdata.get_data_file(script_file_id, file_ext)\n</code></pre>"},{"location":"reference/pyrevit/script/#pyrevit.script.remove_data_file","title":"<code>remove_data_file(filepath)</code>","text":"<p>Remove given data file.</p> Source code in <code>pyrevitlib/pyrevit/script.py</code> <pre><code>def remove_data_file(filepath):\n    \"\"\"Remove given data file.\"\"\"\n    appdata.garbage_data_file(filepath)\n</code></pre>"},{"location":"reference/pyrevit/script/#pyrevit.script.get_bundle_file","title":"<code>get_bundle_file(file_name)</code>","text":"<p>Return full path to file under current script bundle.</p> <p>Parameters:</p> Name Type Description Default <code>file_name</code> <code>str</code> <p>bundle file name</p> required <p>Returns:</p> Type Description <code>str</code> <p>full bundle file path</p> Source code in <code>pyrevitlib/pyrevit/script.py</code> <pre><code>def get_bundle_file(file_name):\n    \"\"\"Return full path to file under current script bundle.\n\n    Args:\n        file_name (str): bundle file name\n\n    Returns:\n        (str): full bundle file path\n    \"\"\"\n    return op.join(EXEC_PARAMS.command_path, file_name)\n</code></pre>"},{"location":"reference/pyrevit/script/#pyrevit.script.get_bundle_files","title":"<code>get_bundle_files(sub_path=None)</code>","text":"<p>Return full path to all file under current script bundle.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>list of bundle file paths</p> Source code in <code>pyrevitlib/pyrevit/script.py</code> <pre><code>def get_bundle_files(sub_path=None):\n    \"\"\"Return full path to all file under current script bundle.\n\n    Returns:\n        (list[str]): list of bundle file paths\n    \"\"\"\n    if sub_path:\n        command_path = op.join(EXEC_PARAMS.command_path, sub_path)\n    else:\n        command_path = EXEC_PARAMS.command_path\n    return [op.join(command_path, x) for x in os.listdir(command_path)]\n</code></pre>"},{"location":"reference/pyrevit/script/#pyrevit.script.journal_write","title":"<code>journal_write(data_key, msg)</code>","text":"<p>Write key and value to active Revit journal for current command.</p> <p>Parameters:</p> Name Type Description Default <code>data_key</code> <code>str</code> <p>data key</p> required <code>msg</code> <code>str</code> <p>data value string</p> required Source code in <code>pyrevitlib/pyrevit/script.py</code> <pre><code>def journal_write(data_key, msg):\n    \"\"\"Write key and value to active Revit journal for current command.\n\n    Args:\n        data_key (str): data key\n        msg (str): data value string\n    \"\"\"\n    # Get the StringStringMap class which can write data into.\n    data_map = EXEC_PARAMS.command_data.JournalData\n    data_map.Clear()\n\n    # Begin to add the support data\n    data_map.Add(data_key, msg)\n</code></pre>"},{"location":"reference/pyrevit/script/#pyrevit.script.journal_read","title":"<code>journal_read(data_key)</code>","text":"<p>Read value for provided key from active Revit journal.</p> <p>Parameters:</p> Name Type Description Default <code>data_key</code> <code>str</code> <p>data key</p> required <p>Returns:</p> Type Description <code>str</code> <p>data value string</p> Source code in <code>pyrevitlib/pyrevit/script.py</code> <pre><code>def journal_read(data_key):\n    \"\"\"Read value for provided key from active Revit journal.\n\n    Args:\n        data_key (str): data key\n\n    Returns:\n        (str): data value string\n    \"\"\"\n    # Get the StringStringMap class which can write data into.\n    data_map = EXEC_PARAMS.command_data.JournalData\n\n    # Begin to get the support data\n    return data_map[data_key]\n</code></pre>"},{"location":"reference/pyrevit/script/#pyrevit.script.get_button","title":"<code>get_button()</code>","text":"<p>Find and return current script ui button.</p> <p>Returns:</p> Type Description <code>_PyRevitRibbonButton</code> <p>ui button object</p> Source code in <code>pyrevitlib/pyrevit/script.py</code> <pre><code>def get_button():\n    \"\"\"Find and return current script ui button.\n\n    Returns:\n        (pyrevit.coreutils.ribbon._PyRevitRibbonButton): ui button object\n    \"\"\"\n    from pyrevit.coreutils.ribbon import get_current_ui\n    pyrvt_tabs = get_current_ui().get_pyrevit_tabs()\n    for tab in pyrvt_tabs:\n        button = tab.find_child(EXEC_PARAMS.command_name)\n        if button:\n            return button\n    return None\n</code></pre>"},{"location":"reference/pyrevit/script/#pyrevit.script.get_all_buttons","title":"<code>get_all_buttons()</code>","text":"<p>Find and return all ui buttons matching current script command name.</p> <p>Sometimes tools are duplicated across extensions for user access control so this would help smart buttons to find all the loaded buttons and make icon adjustments.</p> <p>Returns:</p> Type Description <code>list[_PyRevitRibbonButton]</code> <p>list of ui button objects</p> Source code in <code>pyrevitlib/pyrevit/script.py</code> <pre><code>def get_all_buttons():\n    \"\"\"Find and return all ui buttons matching current script command name.\n\n    Sometimes tools are duplicated across extensions for user access control\n    so this would help smart buttons to find all the loaded buttons and make\n    icon adjustments.\n\n    Returns:\n        (list[pyrevit.coreutils.ribbon._PyRevitRibbonButton]):\n            list of ui button objects\n    \"\"\"\n    from pyrevit.coreutils.ribbon import get_current_ui\n    pyrvt_tabs = get_current_ui().get_pyrevit_tabs()\n    buttons = []\n    for tab in pyrvt_tabs:\n        button = tab.find_child(EXEC_PARAMS.command_name)\n        if button:\n            buttons.append(button)\n    return buttons\n</code></pre>"},{"location":"reference/pyrevit/script/#pyrevit.script.toggle_icon","title":"<code>toggle_icon(new_state, on_icon_path=None, off_icon_path=None, icon_size=ICON_MEDIUM)</code>","text":"<p>Set the state of button icon (on or off).</p> <p>This method expects on.png and off.png in command bundle for on and off icon states, unless full path of icon states are provided.</p> <p>Parameters:</p> Name Type Description Default <code>new_state</code> <code>bool</code> <p>state of the ui button icon.</p> required <code>on_icon_path</code> <code>str</code> <p>full path of icon for on state.                           default='on.png'</p> <code>None</code> <code>off_icon_path</code> <code>str</code> <p>full path of icon for off state.                            default='off.png'</p> <code>None</code> <code>icon_size</code> <code>int</code> <p>size of the icon. Defaults to medium (24x24)</p> <code>ICON_MEDIUM</code> Source code in <code>pyrevitlib/pyrevit/script.py</code> <pre><code>def toggle_icon(new_state, on_icon_path=None, off_icon_path=None, icon_size=ICON_MEDIUM):\n    \"\"\"Set the state of button icon (on or off).\n\n    This method expects on.png and off.png in command bundle for on and off\n    icon states, unless full path of icon states are provided.\n\n    Args:\n        new_state (bool): state of the ui button icon.\n        on_icon_path (str, optional): full path of icon for on state.\n                                      default='on.png'\n        off_icon_path (str, optional): full path of icon for off state.\n                                       default='off.png'\n        icon_size (int): size of the icon. Defaults to medium (24x24)\n    \"\"\"\n    # find the ui button\n    uibuttons = get_all_buttons()\n    if not uibuttons:\n        mlogger.debug('Can not find ui button.')\n        return\n\n    # get icon for on state\n    if not on_icon_path:\n        on_icon_path = ui.resolve_icon_file(EXEC_PARAMS.command_path, exts.DEFAULT_ON_ICON_FILE)\n        if not on_icon_path:\n            mlogger.debug('Script does not have icon for on state.')\n            return\n\n    # get icon for off state\n    if not off_icon_path:\n        off_icon_path = ui.resolve_icon_file(EXEC_PARAMS.command_path, exts.DEFAULT_OFF_ICON_FILE)\n        if not off_icon_path:\n            mlogger.debug('Script does not have icon for on state.')\n            return\n\n    icon_path = on_icon_path if new_state else off_icon_path\n    mlogger.debug('Setting icon state to: %s (%s)',\n                  new_state, icon_path)\n\n    for uibutton in uibuttons:\n        uibutton.set_icon(icon_path, icon_size)\n</code></pre>"},{"location":"reference/pyrevit/script/#pyrevit.script.exit","title":"<code>exit()</code>","text":"<p>Stop the script execution and exit.</p> Source code in <code>pyrevitlib/pyrevit/script.py</code> <pre><code>def exit():     #pylint: disable=W0622\n    \"\"\"Stop the script execution and exit.\"\"\"\n    sys.exit()\n</code></pre>"},{"location":"reference/pyrevit/script/#pyrevit.script.show_file_in_explorer","title":"<code>show_file_in_explorer(file_path)</code>","text":"<p>Show file in Windows Explorer.</p> Source code in <code>pyrevitlib/pyrevit/script.py</code> <pre><code>def show_file_in_explorer(file_path):\n    \"\"\"Show file in Windows Explorer.\"\"\"\n    coreutils.show_entry_in_explorer(file_path)\n</code></pre>"},{"location":"reference/pyrevit/script/#pyrevit.script.show_folder_in_explorer","title":"<code>show_folder_in_explorer(folder_path)</code>","text":"<p>Show folder in Windows Explorer.</p> Source code in <code>pyrevitlib/pyrevit/script.py</code> <pre><code>def show_folder_in_explorer(folder_path):\n    \"\"\"Show folder in Windows Explorer.\"\"\"\n    coreutils.open_folder_in_explorer(folder_path)\n</code></pre>"},{"location":"reference/pyrevit/script/#pyrevit.script.open_url","title":"<code>open_url(url)</code>","text":"<p>Open url in a new tab in default webbrowser.</p> Source code in <code>pyrevitlib/pyrevit/script.py</code> <pre><code>def open_url(url):\n    \"\"\"Open url in a new tab in default webbrowser.\"\"\"\n    import webbrowser\n    if re.match('^https*://', url.lower()):\n        webbrowser.open_new_tab(url)\n    else:\n        webbrowser.open_new_tab('http://' + url)\n</code></pre>"},{"location":"reference/pyrevit/script/#pyrevit.script.clipboard_copy","title":"<code>clipboard_copy(string_to_copy)</code>","text":"<p>Copy string to Windows Clipboard.</p> Source code in <code>pyrevitlib/pyrevit/script.py</code> <pre><code>def clipboard_copy(string_to_copy):\n    \"\"\"Copy string to Windows Clipboard.\"\"\"\n    framework.Clipboard.SetText(string_to_copy)\n</code></pre>"},{"location":"reference/pyrevit/script/#pyrevit.script.load_index","title":"<code>load_index(index_file='index.html')</code>","text":"<p>Load html file into output window.</p> <p>This method expects index.html file in the current command bundle, unless full path to an html file is provided.</p> <p>Parameters:</p> Name Type Description Default <code>index_file</code> <code>str</code> <p>full path of html file.</p> <code>'index.html'</code> Source code in <code>pyrevitlib/pyrevit/script.py</code> <pre><code>def load_index(index_file='index.html'):\n    \"\"\"Load html file into output window.\n\n    This method expects index.html file in the current command bundle,\n    unless full path to an html file is provided.\n\n    Args:\n        index_file (str, optional): full path of html file.\n    \"\"\"\n    outputwindow = get_output()\n    if not op.isfile(index_file):\n        index_file = get_bundle_file(index_file)\n    outputwindow.open_page(index_file)\n</code></pre>"},{"location":"reference/pyrevit/script/#pyrevit.script.load_ui","title":"<code>load_ui(ui_instance, ui_file='ui.xaml', handle_esc=True, set_owner=True)</code>","text":"<p>Load xaml file into given window instance.</p> <p>If window instance defines a method named <code>setup</code> it will be called after loading </p> <p>Parameters:</p> Name Type Description Default <code>ui_instance</code> <code>WPFWindow</code> <p>ui form instance</p> required <code>ui_file</code> <code>str</code> <p>name of ui xaml file. defaults to: 'ui.xaml'</p> <code>'ui.xaml'</code> <code>handle_esc</code> <code>bool</code> <p>handle escape and close window</p> <code>True</code> <code>set_owner</code> <code>bool</code> <p>set window owner to Revit window</p> <code>True</code> Source code in <code>pyrevitlib/pyrevit/script.py</code> <pre><code>def load_ui(ui_instance, ui_file='ui.xaml', handle_esc=True, set_owner=True):\n    \"\"\"Load xaml file into given window instance.\n\n    If window instance defines a method named `setup` it\n    will be called after loading \n\n    Args:\n        ui_instance (forms.WPFWindow): ui form instance\n        ui_file (str, optional): name of ui xaml file. defaults to: 'ui.xaml'\n        handle_esc (bool, optional): handle escape and close window\n        set_owner (bool, optional): set window owner to Revit window\n    \"\"\"\n    ui_file = get_bundle_file(ui_file)\n    if ui_file:\n        ui_instance.load_xaml(\n            ui_file,\n            literal_string=False,\n            handle_esc=handle_esc,\n            set_owner=set_owner\n            )\n        if hasattr(ui_instance, 'setup'):\n            ui_instance.setup()\n        return ui_instance\n\n    raise PyRevitException(\"Missing bundle ui file: {}\".format(ui_file))\n</code></pre>"},{"location":"reference/pyrevit/script/#pyrevit.script.get_envvar","title":"<code>get_envvar(envvar)</code>","text":"<p>Return value of give pyRevit environment variable.</p> <p>The environment variable system is used to retain small values in memory between script runs (e.g. active/inactive state for toggle tools). Do not store large objects in memory using this method. List of currently set environment variables could be sees in pyRevit settings window.</p> <p>Parameters:</p> Name Type Description Default <code>envvar</code> <code>str</code> <p>name of environment variable</p> required <p>Returns:</p> Type Description <code>Any</code> <p>object stored in environment variable</p> <p>Examples:</p> <p><pre><code>script.get_envvar('ToolActiveState')\n</code></pre> True</p> Source code in <code>pyrevitlib/pyrevit/script.py</code> <pre><code>def get_envvar(envvar):\n    \"\"\"Return value of give pyRevit environment variable.\n\n    The environment variable system is used to retain small values in memory\n    between script runs (e.g. active/inactive state for toggle tools). Do not\n    store large objects in memory using this method. List of currently set\n    environment variables could be sees in pyRevit settings window.\n\n    Args:\n        envvar (str): name of environment variable\n\n    Returns:\n        (Any): object stored in environment variable\n\n    Examples:\n        ```python\n        script.get_envvar('ToolActiveState')\n        ```\n        True\n    \"\"\"\n    return envvars.get_pyrevit_env_var(envvar)\n</code></pre>"},{"location":"reference/pyrevit/script/#pyrevit.script.set_envvar","title":"<code>set_envvar(envvar, value)</code>","text":"<p>Set value of give pyRevit environment variable.</p> <p>The environment variable system is used to retain small values in memory between script runs (e.g. active/inactive state for toggle tools). Do not store large objects in memory using this method. List of currently set environment variables could be sees in pyRevit settings window.</p> <p>Parameters:</p> Name Type Description Default <code>envvar</code> <code>str</code> <p>name of environment variable</p> required <code>value</code> <code>any</code> <p>value of environment variable</p> required <p>Examples:</p> <p><pre><code>script.set_envvar('ToolActiveState', False)\nscript.get_envvar('ToolActiveState')\n</code></pre> False</p> Source code in <code>pyrevitlib/pyrevit/script.py</code> <pre><code>def set_envvar(envvar, value):\n    \"\"\"Set value of give pyRevit environment variable.\n\n    The environment variable system is used to retain small values in memory\n    between script runs (e.g. active/inactive state for toggle tools). Do not\n    store large objects in memory using this method. List of currently set\n    environment variables could be sees in pyRevit settings window.\n\n    Args:\n        envvar (str): name of environment variable\n        value (any): value of environment variable\n\n    Examples:\n        ```python\n        script.set_envvar('ToolActiveState', False)\n        script.get_envvar('ToolActiveState')\n        ```\n        False\n    \"\"\"\n    return envvars.set_pyrevit_env_var(envvar, value)\n</code></pre>"},{"location":"reference/pyrevit/script/#pyrevit.script.dump_json","title":"<code>dump_json(data, filepath)</code>","text":"<p>Dumps given data into given json file.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>object</code> <p>serializable data to be dumped</p> required <code>filepath</code> <code>str</code> <p>json file path</p> required Source code in <code>pyrevitlib/pyrevit/script.py</code> <pre><code>def dump_json(data, filepath):\n    \"\"\"Dumps given data into given json file.\n\n    Args:\n        data (object): serializable data to be dumped\n        filepath (str): json file path\n    \"\"\"\n    json_repr = json.dumps(data, indent=4, ensure_ascii=False)\n    with codecs.open(filepath, 'w', \"utf-8\") as json_file:\n        json_file.write(json_repr)\n</code></pre>"},{"location":"reference/pyrevit/script/#pyrevit.script.load_json","title":"<code>load_json(filepath)</code>","text":"<p>Loads data from given json file.</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>str</code> <p>json file path</p> required <p>Returns:</p> Type Description <code>object</code> <p>deserialized data</p> Source code in <code>pyrevitlib/pyrevit/script.py</code> <pre><code>def load_json(filepath):\n    \"\"\"Loads data from given json file.\n\n    Args:\n        filepath (str): json file path\n\n    Returns:\n        (object): deserialized data\n    \"\"\"\n    with codecs.open(filepath, 'r', \"utf-8\") as json_file:\n        return json.load(json_file)\n</code></pre>"},{"location":"reference/pyrevit/script/#pyrevit.script.dump_csv","title":"<code>dump_csv(data, filepath)</code>","text":"<p>Dumps given data into given csv file.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>list[list[str]]</code> <p>data to be dumped</p> required <code>filepath</code> <code>str</code> <p>csv file path</p> required Source code in <code>pyrevitlib/pyrevit/script.py</code> <pre><code>def dump_csv(data, filepath):\n    \"\"\"Dumps given data into given csv file.\n\n    Args:\n        data (list[list[str]]): data to be dumped\n        filepath (str): csv file path\n    \"\"\"\n    with codecs.open(filepath, 'wb', encoding='utf-8') as csvfile:\n        writer = csv.writer(csvfile, delimiter=',', quotechar='\\\"')\n        writer.writerows(data)\n</code></pre>"},{"location":"reference/pyrevit/script/#pyrevit.script.load_csv","title":"<code>load_csv(filepath)</code>","text":"<p>Read lines from given csv file.</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>str</code> <p>csv file path</p> required <p>Returns:</p> Type Description <code>list[list[str]]</code> <p>csv data</p> Source code in <code>pyrevitlib/pyrevit/script.py</code> <pre><code>def load_csv(filepath):\n    \"\"\"Read lines from given csv file.\n\n    Args:\n        filepath (str): csv file path\n\n    Returns:\n        (list[list[str]]): csv data\n    \"\"\"\n    with codecs.open(filepath, 'rb', encoding='utf-8') as csvfile:\n        return list(csv.reader(csvfile, delimiter=',', quotechar='\\\"'))\n</code></pre>"},{"location":"reference/pyrevit/script/#pyrevit.script.store_data","title":"<code>store_data(slot_name, data, this_project=True)</code>","text":"<p>Wraps python pickle.dump() to easily store data to pyRevit data files.</p> <p>To store native Revit objects, use revit.serialize(). See Example</p> <p>Parameters:</p> Name Type Description Default <code>slot_name</code> <code>type</code> <p>desc</p> required <code>data</code> <code>obj</code> <p>any pickalable data</p> required <code>this_project</code> <code>bool</code> <p>data belongs to this project only</p> <code>True</code> <p>Examples:</p> <pre><code>from pyrevit import revit\n    from pyrevit import script\n\n\n    class CustomData(object):\n        def __init__(self, count, element_ids):\n            self._count = count\n            # serializes the Revit native objects\n            self._elmnt_ids = [revit.serialize(x) for x in element_ids]\n\n        @property\n        def count(self):\n            return self._count\n\n        @property\n        def element_ids(self):\n            # de-serializes the Revit native objects\n            return [x.deserialize() for x in self._elmnt_ids]\n\n\n    mydata = CustomData(\n        count=3,\n        element_ids=[&lt;DB.ElementId&gt;, &lt;DB.ElementId&gt;, &lt;DB.ElementId&gt;]\n    )\n\n    script.store_data(\"Selected Elements\", mydata)\n</code></pre> Source code in <code>pyrevitlib/pyrevit/script.py</code> <pre><code>def store_data(slot_name, data, this_project=True):\n    \"\"\"Wraps python pickle.dump() to easily store data to pyRevit data files.\n\n    To store native Revit objects, use revit.serialize(). See Example\n\n    Args:\n        slot_name (type): desc\n        data (obj): any pickalable data\n        this_project (bool): data belongs to this project only\n\n    Examples:\n        ```python\n        from pyrevit import revit\n            from pyrevit import script\n\n\n            class CustomData(object):\n                def __init__(self, count, element_ids):\n                    self._count = count\n                    # serializes the Revit native objects\n                    self._elmnt_ids = [revit.serialize(x) for x in element_ids]\n\n                @property\n                def count(self):\n                    return self._count\n\n                @property\n                def element_ids(self):\n                    # de-serializes the Revit native objects\n                    return [x.deserialize() for x in self._elmnt_ids]\n\n\n            mydata = CustomData(\n                count=3,\n                element_ids=[&lt;DB.ElementId&gt;, &lt;DB.ElementId&gt;, &lt;DB.ElementId&gt;]\n            )\n\n            script.store_data(\"Selected Elements\", mydata)\n        ```\n\n    \"\"\"\n    # for this specific project?\n    if this_project:\n        data_file = get_document_data_file(file_id=slot_name,\n                                           file_ext=DATAFEXT,\n                                           add_cmd_name=False)\n    # for any project file\n    else:\n        data_file = get_data_file(file_id=slot_name,\n                                  file_ext=DATAFEXT,\n                                  add_cmd_name=False)\n\n    with open(data_file, 'w') as dfile:\n        pickle.dump(data, dfile)\n</code></pre>"},{"location":"reference/pyrevit/script/#pyrevit.script.load_data","title":"<code>load_data(slot_name, this_project=True)</code>","text":"<p>Wraps python pickle.load() to easily load data from pyRevit data files.</p> <p>To recover native Revit objects, use revit.deserialize(). See Example</p> <p>Similar to pickle module, the custom data types must be defined in the main scope so the loader can create an instance and return original stored data</p> <p>Parameters:</p> Name Type Description Default <code>slot_name</code> <code>type</code> <p>desc</p> required <code>this_project</code> <code>bool</code> <p>data belongs to this project only</p> <code>True</code> <p>Returns:</p> Type Description <code>object</code> <p>stored data</p> <p>Examples:</p> <p><pre><code>from pyrevit import revit\nfrom pyrevit import script\n\n\n    class CustomData(object):\n        def __init__(self, count, element_ids):\n            self._count = count\n            # serializes the Revit native objects\n            self._elmnt_ids = [revit.serialize(x) for x in element_ids]\n\n        @property\n        def count(self):\n            return self._count\n\n        @property\n        def element_ids(self):\n            # de-serializes the Revit native objects\n            return [x.deserialize() for x in self._elmnt_ids]\n\n\n    mydata = script.load_data(\"Selected Elements\")\n    mydata.element_ids\n</code></pre> [, , ] Source code in <code>pyrevitlib/pyrevit/script.py</code> <pre><code>def load_data(slot_name, this_project=True):\n    \"\"\"Wraps python pickle.load() to easily load data from pyRevit data files.\n\n    To recover native Revit objects, use revit.deserialize(). See Example\n\n    Similar to pickle module, the custom data types must be defined in the main\n    scope so the loader can create an instance and return original stored data\n\n    Args:\n        slot_name (type): desc\n        this_project (bool): data belongs to this project only\n\n    Returns:\n        (object): stored data\n\n    Examples:\n        ```python\n        from pyrevit import revit\n        from pyrevit import script\n\n\n            class CustomData(object):\n                def __init__(self, count, element_ids):\n                    self._count = count\n                    # serializes the Revit native objects\n                    self._elmnt_ids = [revit.serialize(x) for x in element_ids]\n\n                @property\n                def count(self):\n                    return self._count\n\n                @property\n                def element_ids(self):\n                    # de-serializes the Revit native objects\n                    return [x.deserialize() for x in self._elmnt_ids]\n\n\n            mydata = script.load_data(\"Selected Elements\")\n            mydata.element_ids\n        ```\n        [&lt;DB.ElementId&gt;, &lt;DB.ElementId&gt;, &lt;DB.ElementId&gt;]\n    \"\"\"\n    # for this specific project?\n    if this_project:\n        data_file = get_document_data_file(file_id=slot_name,\n                                           file_ext=DATAFEXT,\n                                           add_cmd_name=False)\n    # for any project file\n    else:\n        data_file = get_data_file(file_id=slot_name,\n                                  file_ext=DATAFEXT,\n                                  add_cmd_name=False)\n\n    with open(data_file, 'r') as dfile:\n        return pickle.load(dfile)\n</code></pre>"},{"location":"reference/pyrevit/script/#pyrevit.script.data_exists","title":"<code>data_exists(slot_name, this_project=True)</code>","text":"<p>Checks if data file in a specified slot and for certain project exists.</p> <p>Parameters:</p> Name Type Description Default <code>slot_name</code> <code>type</code> <p>desc</p> required <code>this_project</code> <code>bool</code> <p>data belongs to this project only</p> <code>True</code> <p>Returns:</p> Type Description <code>bool</code> <p>true if the path exists</p> Source code in <code>pyrevitlib/pyrevit/script.py</code> <pre><code>def data_exists(slot_name, this_project=True):\n    \"\"\"Checks if data file in a specified slot and for certain project exists.\n\n    Args:\n        slot_name (type): desc\n        this_project (bool): data belongs to this project only\n\n    Returns:\n        (bool): true if the path exists\n    \"\"\"\n    # for this specific project?\n    if this_project:\n        data_file = get_document_data_file(file_id=slot_name,\n                                           file_ext=DATAFEXT,\n                                           add_cmd_name=False)\n    # for any project file\n    else:\n        data_file = get_data_file(file_id=slot_name,\n                                  file_ext=DATAFEXT,\n                                  add_cmd_name=False)\n    return os.path.exists(data_file)\n</code></pre>"},{"location":"reference/pyrevit/userconfig/","title":"userconfig","text":"<p>Handle reading and parsing, writing and saving of all user configurations.</p> <p>This module handles the reading and writing of the pyRevit configuration files. It's been used extensively by pyRevit sub-modules. user_config is set up automatically in the global scope by this module and can be imported into scripts and other modules to access the default configurations.</p> <p>All other modules use this module to query user config.</p> <p>Examples:</p> <pre><code>from pyrevit.userconfig import user_config\nuser_config.add_section('newsection')\nuser_config.newsection.property = value\nuser_config.newsection.get_option('property', default_value)\nuser_config.save_changes()\n</code></pre> <p>The user_config object is also the destination for reading and writing configuration by pyRevit scripts through :func:<code>get_config</code> of :mod:<code>pyrevit.script</code> module. Here is the function source:</p> <p>.. literalinclude:: ../../pyrevitlib/pyrevit/script.py     :pyobject: get_config</p> <p>Examples:</p> <pre><code>from pyrevit import script\ncfg = script.get_config()\ncfg.property = value\ncfg.get_option('property', default_value)\nscript.save_config()\n</code></pre>"},{"location":"reference/pyrevit/userconfig/#pyrevit.userconfig-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/userconfig/#pyrevit.userconfig.DEFAULT_CSV_SEPARATOR","title":"<code>DEFAULT_CSV_SEPARATOR = ','</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/userconfig/#pyrevit.userconfig.mlogger","title":"<code>mlogger = logger.get_logger(__name__)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/userconfig/#pyrevit.userconfig.CONSTS","title":"<code>CONSTS = PyRevit.PyRevitConsts</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/userconfig/#pyrevit.userconfig.LOCAL_CONFIG_FILE","title":"<code>LOCAL_CONFIG_FILE = find_config_file(HOME_DIR)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/userconfig/#pyrevit.userconfig.ADMIN_CONFIG_FILE","title":"<code>ADMIN_CONFIG_FILE = find_config_file(PYREVIT_ALLUSER_APP_DIR)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/userconfig/#pyrevit.userconfig.USER_CONFIG_FILE","title":"<code>USER_CONFIG_FILE = find_config_file(PYREVIT_APP_DIR)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/userconfig/#pyrevit.userconfig.CONFIG_TYPE","title":"<code>CONFIG_TYPE = 'Seed'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/userconfig/#pyrevit.userconfig.CONFIG_FILE","title":"<code>CONFIG_FILE = find_config_file(PYREVIT_APP_DIR)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/userconfig/#pyrevit.userconfig.user_config","title":"<code>user_config = PyRevitConfig(cfg_file_path=CONFIG_FILE, config_type=CONFIG_TYPE)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/userconfig/#pyrevit.userconfig-classes","title":"Classes","text":""},{"location":"reference/pyrevit/userconfig/#pyrevit.userconfig.PyRevitConfig","title":"<code>PyRevitConfig(cfg_file_path=None, config_type='Unknown')</code>","text":"<p>               Bases: <code>PyRevitConfigParser</code></p> <p>Provide read/write access to pyRevit configuration.</p> <p>Parameters:</p> Name Type Description Default <code>cfg_file_path</code> <code>str</code> <p>full path to config file to be used.</p> <code>None</code> <code>config_type</code> <code>str</code> <p>type of config file</p> <code>'Unknown'</code> <p>Examples:</p> <pre><code>cfg = PyRevitConfig(cfg_file_path)\ncfg.add_section('sectionname')\ncfg.sectionname.property = value\ncfg.sectionname.get_option('property', default_value)\ncfg.save_changes()\n</code></pre> <p>Load settings from provided config file and setup parser.</p> Source code in <code>pyrevitlib/pyrevit/userconfig.py</code> <pre><code>def __init__(self, cfg_file_path=None, config_type='Unknown'):\n    \"\"\"Load settings from provided config file and setup parser.\"\"\"\n    # try opening and reading config file in order.\n    super(PyRevitConfig, self).__init__(cfg_file_path=cfg_file_path)\n\n    # set log mode on the logger module based on\n    # user settings (overriding the defaults)\n    self._update_env()\n    self._admin = config_type == 'Admin'\n    self.config_type = config_type\n</code></pre>"},{"location":"reference/pyrevit/userconfig/#pyrevit.userconfig.PyRevitConfig-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/userconfig/#pyrevit.userconfig.PyRevitConfig.config_type","title":"<code>config_type = config_type</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/userconfig/#pyrevit.userconfig.PyRevitConfig.config_file","title":"<code>config_file</code>  <code>property</code>","text":"<p>Current config file path.</p>"},{"location":"reference/pyrevit/userconfig/#pyrevit.userconfig.PyRevitConfig.environment","title":"<code>environment</code>  <code>property</code>","text":"<p>Environment section.</p>"},{"location":"reference/pyrevit/userconfig/#pyrevit.userconfig.PyRevitConfig.core","title":"<code>core</code>  <code>property</code>","text":"<p>Core section.</p>"},{"location":"reference/pyrevit/userconfig/#pyrevit.userconfig.PyRevitConfig.routes","title":"<code>routes</code>  <code>property</code>","text":"<p>Routes section.</p>"},{"location":"reference/pyrevit/userconfig/#pyrevit.userconfig.PyRevitConfig.telemetry","title":"<code>telemetry</code>  <code>property</code>","text":"<p>Telemetry section.</p>"},{"location":"reference/pyrevit/userconfig/#pyrevit.userconfig.PyRevitConfig.bin_cache","title":"<code>bin_cache</code>  <code>property</code> <code>writable</code>","text":"<p>\"Whether to use the cache for extensions.</p>"},{"location":"reference/pyrevit/userconfig/#pyrevit.userconfig.PyRevitConfig.check_updates","title":"<code>check_updates</code>  <code>property</code> <code>writable</code>","text":"<p>Whether to check for updates.</p>"},{"location":"reference/pyrevit/userconfig/#pyrevit.userconfig.PyRevitConfig.auto_update","title":"<code>auto_update</code>  <code>property</code> <code>writable</code>","text":"<p>Whether to automatically update pyRevit.</p>"},{"location":"reference/pyrevit/userconfig/#pyrevit.userconfig.PyRevitConfig.rocket_mode","title":"<code>rocket_mode</code>  <code>property</code> <code>writable</code>","text":"<p>Whether to enable rocket mode.</p>"},{"location":"reference/pyrevit/userconfig/#pyrevit.userconfig.PyRevitConfig.log_level","title":"<code>log_level</code>  <code>property</code> <code>writable</code>","text":"<p>Logging level.</p>"},{"location":"reference/pyrevit/userconfig/#pyrevit.userconfig.PyRevitConfig.file_logging","title":"<code>file_logging</code>  <code>property</code> <code>writable</code>","text":"<p>Whether to enable file logging.</p>"},{"location":"reference/pyrevit/userconfig/#pyrevit.userconfig.PyRevitConfig.startuplog_timeout","title":"<code>startuplog_timeout</code>  <code>property</code> <code>writable</code>","text":"<p>Timeout for the startup log.</p>"},{"location":"reference/pyrevit/userconfig/#pyrevit.userconfig.PyRevitConfig.required_host_build","title":"<code>required_host_build</code>  <code>property</code> <code>writable</code>","text":"<p>Host build required to run the commands.</p>"},{"location":"reference/pyrevit/userconfig/#pyrevit.userconfig.PyRevitConfig.min_host_drivefreespace","title":"<code>min_host_drivefreespace</code>  <code>property</code> <code>writable</code>","text":"<p>Minimum free space for running the commands.</p>"},{"location":"reference/pyrevit/userconfig/#pyrevit.userconfig.PyRevitConfig.load_beta","title":"<code>load_beta</code>  <code>property</code> <code>writable</code>","text":"<p>Whether to load commands in beta.</p>"},{"location":"reference/pyrevit/userconfig/#pyrevit.userconfig.PyRevitConfig.cpython_engine_version","title":"<code>cpython_engine_version</code>  <code>property</code> <code>writable</code>","text":"<p>CPython engine version to use.</p>"},{"location":"reference/pyrevit/userconfig/#pyrevit.userconfig.PyRevitConfig.user_locale","title":"<code>user_locale</code>  <code>property</code> <code>writable</code>","text":"<p>User locale.</p>"},{"location":"reference/pyrevit/userconfig/#pyrevit.userconfig.PyRevitConfig.output_stylesheet","title":"<code>output_stylesheet</code>  <code>property</code> <code>writable</code>","text":"<p>Stylesheet used for output.</p>"},{"location":"reference/pyrevit/userconfig/#pyrevit.userconfig.PyRevitConfig.routes_host","title":"<code>routes_host</code>  <code>property</code> <code>writable</code>","text":"<p>Routes API host.</p>"},{"location":"reference/pyrevit/userconfig/#pyrevit.userconfig.PyRevitConfig.routes_port","title":"<code>routes_port</code>  <code>property</code> <code>writable</code>","text":"<p>API routes port.</p>"},{"location":"reference/pyrevit/userconfig/#pyrevit.userconfig.PyRevitConfig.load_core_api","title":"<code>load_core_api</code>  <code>property</code> <code>writable</code>","text":"<p>Whether to load pyRevit core api.</p>"},{"location":"reference/pyrevit/userconfig/#pyrevit.userconfig.PyRevitConfig.telemetry_utc_timestamp","title":"<code>telemetry_utc_timestamp</code>  <code>property</code> <code>writable</code>","text":"<p>Whether to use UTC timestamps in telemetry.</p>"},{"location":"reference/pyrevit/userconfig/#pyrevit.userconfig.PyRevitConfig.telemetry_status","title":"<code>telemetry_status</code>  <code>property</code> <code>writable</code>","text":"<p>Telemetry status.</p>"},{"location":"reference/pyrevit/userconfig/#pyrevit.userconfig.PyRevitConfig.telemetry_file_dir","title":"<code>telemetry_file_dir</code>  <code>property</code> <code>writable</code>","text":"<p>Telemetry file directory.</p>"},{"location":"reference/pyrevit/userconfig/#pyrevit.userconfig.PyRevitConfig.telemetry_server_url","title":"<code>telemetry_server_url</code>  <code>property</code> <code>writable</code>","text":"<p>Telemetry server URL.</p>"},{"location":"reference/pyrevit/userconfig/#pyrevit.userconfig.PyRevitConfig.telemetry_include_hooks","title":"<code>telemetry_include_hooks</code>  <code>property</code> <code>writable</code>","text":"<p>Whether to include hooks in telemetry.</p>"},{"location":"reference/pyrevit/userconfig/#pyrevit.userconfig.PyRevitConfig.apptelemetry_status","title":"<code>apptelemetry_status</code>  <code>property</code> <code>writable</code>","text":"<p>Telemetry status.</p>"},{"location":"reference/pyrevit/userconfig/#pyrevit.userconfig.PyRevitConfig.apptelemetry_server_url","title":"<code>apptelemetry_server_url</code>  <code>property</code> <code>writable</code>","text":"<p>App telemetry server URL.</p>"},{"location":"reference/pyrevit/userconfig/#pyrevit.userconfig.PyRevitConfig.apptelemetry_event_flags","title":"<code>apptelemetry_event_flags</code>  <code>property</code> <code>writable</code>","text":"<p>Telemetry event flags.</p>"},{"location":"reference/pyrevit/userconfig/#pyrevit.userconfig.PyRevitConfig.user_can_update","title":"<code>user_can_update</code>  <code>property</code> <code>writable</code>","text":"<p>Whether the user can update pyRevit repos.</p>"},{"location":"reference/pyrevit/userconfig/#pyrevit.userconfig.PyRevitConfig.user_can_extend","title":"<code>user_can_extend</code>  <code>property</code> <code>writable</code>","text":"<p>Whether the user can manage pyRevit Extensions.</p>"},{"location":"reference/pyrevit/userconfig/#pyrevit.userconfig.PyRevitConfig.user_can_config","title":"<code>user_can_config</code>  <code>property</code> <code>writable</code>","text":"<p>Whether the user can access the configuration.</p>"},{"location":"reference/pyrevit/userconfig/#pyrevit.userconfig.PyRevitConfig.colorize_docs","title":"<code>colorize_docs</code>  <code>property</code> <code>writable</code>","text":"<p>Whether to enable the document colorizer.</p>"},{"location":"reference/pyrevit/userconfig/#pyrevit.userconfig.PyRevitConfig.tooltip_debug_info","title":"<code>tooltip_debug_info</code>  <code>property</code> <code>writable</code>","text":"<p>Whether to append debug info on tooltips.</p>"},{"location":"reference/pyrevit/userconfig/#pyrevit.userconfig.PyRevitConfig.routes_server","title":"<code>routes_server</code>  <code>property</code> <code>writable</code>","text":"<p>Whether the server routes are enabled.</p>"},{"location":"reference/pyrevit/userconfig/#pyrevit.userconfig.PyRevitConfig.respect_language_direction","title":"<code>respect_language_direction</code>  <code>property</code> <code>writable</code>","text":"<p>Whether the system respects the language direction.</p>"},{"location":"reference/pyrevit/userconfig/#pyrevit.userconfig.PyRevitConfig.is_readonly","title":"<code>is_readonly</code>  <code>property</code>","text":"<p>bool: whether the config is read only.</p>"},{"location":"reference/pyrevit/userconfig/#pyrevit.userconfig.PyRevitConfig-functions","title":"Functions","text":""},{"location":"reference/pyrevit/userconfig/#pyrevit.userconfig.PyRevitConfig.get_config_file_hash","title":"<code>get_config_file_hash()</code>","text":"<p>Get calculated unique hash for this config.</p> <p>Returns:</p> Type Description <code>str</code> <p>hash of the config.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/configparser.py</code> <pre><code>def get_config_file_hash(self):\n    \"\"\"Get calculated unique hash for this config.\n\n    Returns:\n        (str): hash of the config.\n    \"\"\"\n    with codecs.open(self._cfg_file_path, 'r', 'utf-8') as cfg_file:\n        cfg_hash = coreutils.get_str_hash(cfg_file.read())\n\n    return cfg_hash\n</code></pre>"},{"location":"reference/pyrevit/userconfig/#pyrevit.userconfig.PyRevitConfig.has_section","title":"<code>has_section(section_name)</code>","text":"<p>Check if config contains given section.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/configparser.py</code> <pre><code>def has_section(self, section_name):\n    \"\"\"Check if config contains given section.\"\"\"\n    try:\n        self.get_section(section_name)\n        return True\n    except Exception:\n        return False\n</code></pre>"},{"location":"reference/pyrevit/userconfig/#pyrevit.userconfig.PyRevitConfig.add_section","title":"<code>add_section(section_name)</code>","text":"<p>Add section with given name to config.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/configparser.py</code> <pre><code>def add_section(self, section_name):\n    \"\"\"Add section with given name to config.\"\"\"\n    self._parser.add_section(section_name)\n    return PyRevitConfigSectionParser(self._parser, section_name)\n</code></pre>"},{"location":"reference/pyrevit/userconfig/#pyrevit.userconfig.PyRevitConfig.get_section","title":"<code>get_section(section_name)</code>","text":"<p>Get section with given name.</p> <p>Raises:</p> Type Description <code>AttributeError</code> <p>if section is missing</p> Source code in <code>pyrevitlib/pyrevit/coreutils/configparser.py</code> <pre><code>def get_section(self, section_name):\n    \"\"\"Get section with given name.\n\n    Raises:\n        AttributeError: if section is missing\n    \"\"\"\n    # check is section with full name is available\n    if self._parser.has_section(section_name):\n        return PyRevitConfigSectionParser(self._parser, section_name)\n\n    # if not try to match with section_name.subsection\n    # if there is a section_name.subsection defined, that should be\n    # the sign that the section exists\n    # section obj then supports getting all subsections\n    for cfg_section_name in self._parser.sections():\n        master_section = coreutils.get_canonical_parts(cfg_section_name)[0]\n        if section_name == master_section:\n            return PyRevitConfigSectionParser(self._parser,\n                                              master_section)\n\n    # if no match happened then raise exception\n    raise AttributeError('Section does not exist in config file.')\n</code></pre>"},{"location":"reference/pyrevit/userconfig/#pyrevit.userconfig.PyRevitConfig.remove_section","title":"<code>remove_section(section_name)</code>","text":"<p>Remove section from config.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/configparser.py</code> <pre><code>def remove_section(self, section_name):\n    \"\"\"Remove section from config.\"\"\"\n    cfg_section = self.get_section(section_name)\n    for cfg_subsection in cfg_section.get_subsections():\n        self._parser.remove_section(cfg_subsection.header)\n    self._parser.remove_section(cfg_section.header)\n</code></pre>"},{"location":"reference/pyrevit/userconfig/#pyrevit.userconfig.PyRevitConfig.reload","title":"<code>reload(cfg_file_path=None)</code>","text":"<p>Reload config from original or given file.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/configparser.py</code> <pre><code>def reload(self, cfg_file_path=None):\n    \"\"\"Reload config from original or given file.\"\"\"\n    try:\n        with codecs.open(cfg_file_path \\\n                or self._cfg_file_path, 'r', 'utf-8') as cfg_file:\n            try:\n                self._parser.readfp(cfg_file)\n            except AttributeError:\n                self._parser.read_file(cfg_file)\n    except (OSError, IOError):\n        raise PyRevitIOError()\n</code></pre>"},{"location":"reference/pyrevit/userconfig/#pyrevit.userconfig.PyRevitConfig.save","title":"<code>save(cfg_file_path=None)</code>","text":"<p>Save config to original or given file.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/configparser.py</code> <pre><code>def save(self, cfg_file_path=None):\n    \"\"\"Save config to original or given file.\"\"\"\n    try:\n        with codecs.open(cfg_file_path \\\n                or self._cfg_file_path, 'w', 'utf-8') as cfg_file:\n            self._parser.write(cfg_file)\n    except (OSError, IOError):\n        raise PyRevitIOError()\n</code></pre>"},{"location":"reference/pyrevit/userconfig/#pyrevit.userconfig.PyRevitConfig.get_config_version","title":"<code>get_config_version()</code>","text":"<p>Return version of config file used for change detection.</p> <p>Returns:</p> Type Description <code>str</code> <p>hash of the config file</p> Source code in <code>pyrevitlib/pyrevit/userconfig.py</code> <pre><code>def get_config_version(self):\n    \"\"\"Return version of config file used for change detection.\n\n    Returns:\n        (str): hash of the config file\n    \"\"\"\n    return self.get_config_file_hash()\n</code></pre>"},{"location":"reference/pyrevit/userconfig/#pyrevit.userconfig.PyRevitConfig.get_thirdparty_ext_root_dirs","title":"<code>get_thirdparty_ext_root_dirs(include_default=True)</code>","text":"<p>Return a list of external extension directories set by the user.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>External user extension directories.</p> Source code in <code>pyrevitlib/pyrevit/userconfig.py</code> <pre><code>def get_thirdparty_ext_root_dirs(self, include_default=True):\n    \"\"\"Return a list of external extension directories set by the user.\n\n    Returns:\n        (list[str]): External user extension directories.\n    \"\"\"\n    dir_list = set()\n    if include_default:\n        # add default ext path\n        dir_list.add(THIRDPARTY_EXTENSIONS_DEFAULT_DIR)\n    try:\n        dir_list.update([\n            op.expandvars(op.normpath(x))\n            for x in self.core.get_option(\n                CONSTS.ConfigsUserExtensionsKey,\n                default_value=[]\n            )])\n    except Exception as read_err:\n        mlogger.error('Error reading list of user extension folders. | %s',\n                      read_err)\n\n    return [x for x in dir_list if op.exists(x)]\n</code></pre>"},{"location":"reference/pyrevit/userconfig/#pyrevit.userconfig.PyRevitConfig.get_ext_root_dirs","title":"<code>get_ext_root_dirs()</code>","text":"<p>Return a list of all extension directories.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>user extension directories.</p> Source code in <code>pyrevitlib/pyrevit/userconfig.py</code> <pre><code>def get_ext_root_dirs(self):\n    \"\"\"Return a list of all extension directories.\n\n    Returns:\n        (list[str]): user extension directories.\n\n    \"\"\"\n    dir_list = set()\n    if op.exists(EXTENSIONS_DEFAULT_DIR):\n        dir_list.add(EXTENSIONS_DEFAULT_DIR)\n    dir_list.update(self.get_thirdparty_ext_root_dirs())\n    return list(dir_list)\n</code></pre>"},{"location":"reference/pyrevit/userconfig/#pyrevit.userconfig.PyRevitConfig.get_ext_sources","title":"<code>get_ext_sources()</code>","text":"<p>Return a list of extension definition source files.</p> Source code in <code>pyrevitlib/pyrevit/userconfig.py</code> <pre><code>def get_ext_sources(self):\n    \"\"\"Return a list of extension definition source files.\"\"\"\n    ext_sources = self.environment.get_option(\n        CONSTS.EnvConfigsExtensionLookupSourcesKey,\n        default_value=[],\n    )\n    return list(set(ext_sources))\n</code></pre>"},{"location":"reference/pyrevit/userconfig/#pyrevit.userconfig.PyRevitConfig.set_thirdparty_ext_root_dirs","title":"<code>set_thirdparty_ext_root_dirs(path_list)</code>","text":"<p>Updates list of external extension directories in config file.</p> <p>Parameters:</p> Name Type Description Default <code>path_list</code> <code>list[str]</code> <p>list of external extension paths</p> required Source code in <code>pyrevitlib/pyrevit/userconfig.py</code> <pre><code>def set_thirdparty_ext_root_dirs(self, path_list):\n    \"\"\"Updates list of external extension directories in config file.\n\n    Args:\n        path_list (list[str]): list of external extension paths\n    \"\"\"\n    for ext_path in path_list:\n        if not op.exists(ext_path):\n            raise PyRevitException(\"Path \\\"%s\\\" does not exist.\" % ext_path)\n\n    try:\n        self.core.userextensions = \\\n            [op.normpath(x) for x in path_list]\n    except Exception as write_err:\n        mlogger.error('Error setting list of user extension folders. | %s',\n                      write_err)\n</code></pre>"},{"location":"reference/pyrevit/userconfig/#pyrevit.userconfig.PyRevitConfig.get_current_attachment","title":"<code>get_current_attachment()</code>","text":"<p>Return current pyRevit attachment.</p> Source code in <code>pyrevitlib/pyrevit/userconfig.py</code> <pre><code>def get_current_attachment(self):\n    \"\"\"Return current pyRevit attachment.\"\"\"\n    try:\n        return PyRevit.PyRevitAttachments.GetAttached(int(HOST_APP.version))\n    except PyRevitException as ex:\n        mlogger.error('Error getting current attachment. | %s', ex)\n</code></pre>"},{"location":"reference/pyrevit/userconfig/#pyrevit.userconfig.PyRevitConfig.get_active_cpython_engine","title":"<code>get_active_cpython_engine()</code>","text":"<p>Return active cpython engine.</p> Source code in <code>pyrevitlib/pyrevit/userconfig.py</code> <pre><code>def get_active_cpython_engine(self):\n    \"\"\"Return active cpython engine.\"\"\"\n    # try to find attachment and get engines from the clone\n    attachment = self.get_current_attachment()\n    if attachment and attachment.Clone:\n        clone = attachment.Clone\n    else:\n        # if can not find attachment, instantiate a temp clone\n        try:\n            clone = PyRevit.PyRevitClone(clonePath=HOME_DIR)\n        except Exception as cEx:\n            mlogger.debug('Can not create clone from path: %s', str(cEx))\n            clone = None\n    # find cpython engines\n    engines = clone.GetCPythonEngines() if clone else []\n    cpy_engines_dict = {x.Version: x for x in engines}\n    mlogger.debug('cpython engines dict: %s', cpy_engines_dict)\n\n    if not cpy_engines_dict:\n        mlogger.error(\n            'Can not determine cpython engines for current attachment: %s',\n            attachment\n        )\n        return None\n    # grab cpython engine configured to be used by user\n    try:\n        cpyengine_ver = int(self.cpython_engine_version)\n    except (ValueError, TypeError):\n        cpyengine_ver = 000\n\n    try:\n        return cpy_engines_dict[cpyengine_ver]\n    except KeyError:\n        # return the latest cpython engine\n        return max(cpy_engines_dict.values(), key=lambda x: x.Version.Version)\n</code></pre>"},{"location":"reference/pyrevit/userconfig/#pyrevit.userconfig.PyRevitConfig.set_active_cpython_engine","title":"<code>set_active_cpython_engine(pyrevit_engine)</code>","text":"<p>Set the active CPython engine.</p> <p>Parameters:</p> Name Type Description Default <code>pyrevit_engine</code> <code>PyRevitEngine</code> <p>python engine to set as active</p> required Source code in <code>pyrevitlib/pyrevit/userconfig.py</code> <pre><code>def set_active_cpython_engine(self, pyrevit_engine):\n    \"\"\"Set the active CPython engine.\n\n    Args:\n        pyrevit_engine (PyRevitEngine): python engine to set as active\n    \"\"\"\n    self.cpython_engine_version = pyrevit_engine.Version\n</code></pre>"},{"location":"reference/pyrevit/userconfig/#pyrevit.userconfig.PyRevitConfig.save_changes","title":"<code>save_changes()</code>","text":"<p>Save user config into associated config file.</p> Source code in <code>pyrevitlib/pyrevit/userconfig.py</code> <pre><code>def save_changes(self):\n    \"\"\"Save user config into associated config file.\"\"\"\n    if not self._admin and self.config_file:\n        try:\n            super(PyRevitConfig, self).save()\n        except Exception as save_err:\n            mlogger.error('Can not save user config to: %s | %s',\n                          self.config_file, save_err)\n\n        # adjust environment per user configurations\n        self._update_env()\n    else:\n        mlogger.debug('Config is in admin mode. Skipping save.')\n</code></pre>"},{"location":"reference/pyrevit/userconfig/#pyrevit.userconfig.PyRevitConfig.get_list_separator","title":"<code>get_list_separator()</code>  <code>staticmethod</code>","text":"<p>Get list separator defined in user os regional settings.</p> Source code in <code>pyrevitlib/pyrevit/userconfig.py</code> <pre><code>@staticmethod\ndef get_list_separator():\n    \"\"\"Get list separator defined in user os regional settings.\"\"\"\n    intkey = coreutils.get_reg_key(wr.HKEY_CURRENT_USER,\n                                   r'Control Panel\\International')\n    if intkey:\n        try:\n            return wr.QueryValueEx(intkey, 'sList')[0]\n        except Exception:\n            return DEFAULT_CSV_SEPARATOR\n</code></pre>"},{"location":"reference/pyrevit/userconfig/#pyrevit.userconfig-functions","title":"Functions","text":""},{"location":"reference/pyrevit/userconfig/#pyrevit.userconfig.find_config_file","title":"<code>find_config_file(target_path)</code>","text":"<p>Find config file in target path.</p> Source code in <code>pyrevitlib/pyrevit/userconfig.py</code> <pre><code>def find_config_file(target_path):\n    \"\"\"Find config file in target path.\"\"\"\n    return PyRevit.PyRevitConsts.FindConfigFileInDirectory(target_path)\n</code></pre>"},{"location":"reference/pyrevit/userconfig/#pyrevit.userconfig.verify_configs","title":"<code>verify_configs(config_file_path=None)</code>","text":"<p>Create a user settings file.</p> <p>if config_file_path is not provided, configs will be in memory only</p> <p>Parameters:</p> Name Type Description Default <code>config_file_path</code> <code>str</code> <p>config file full name and path</p> <code>None</code> <p>Returns:</p> Type Description <code>PyRevitConfig</code> <p>pyRevit config file handler</p> Source code in <code>pyrevitlib/pyrevit/userconfig.py</code> <pre><code>def verify_configs(config_file_path=None):\n    \"\"\"Create a user settings file.\n\n    if config_file_path is not provided, configs will be in memory only\n\n    Args:\n        config_file_path (str, optional): config file full name and path\n\n    Returns:\n        (pyrevit.userconfig.PyRevitConfig): pyRevit config file handler\n    \"\"\"\n    if config_file_path:\n        mlogger.debug('Creating default config file at: %s', config_file_path)\n        coreutils.touch(config_file_path)\n\n    try:\n        parser = PyRevitConfig(cfg_file_path=config_file_path)\n    except Exception as read_err:\n        # can not create default user config file under appdata folder\n        mlogger.warning('Can not create config file under: %s | %s',\n                        config_file_path, read_err)\n        parser = PyRevitConfig()\n\n    return parser\n</code></pre>"},{"location":"reference/pyrevit/coreutils/","title":"coreutils","text":"<p>Misc Helper functions for pyRevit.</p> <p>Examples:</p> <pre><code>from pyrevit import coreutils\ncoreutils.cleanup_string('some string')\n</code></pre>"},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.DEFAULT_SEPARATOR","title":"<code>DEFAULT_SEPARATOR = ';'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.UNICODE_NONPRINTABLE_CHARS","title":"<code>UNICODE_NONPRINTABLE_CHARS = ['\\u2000', '\\u2001', '\\u2002', '\\u2003', '\\u2004', '\\u2005', '\\u2006', '\\u2007', '\\u2008', '\\u2009', '\\u200a', '\\u200b', '\\u200c', '\\u200d', '\\u200e', '\\u200f', '\\u2028', '\\u2029', '\\u202a', '\\u202b', '\\u202c', '\\u202d', '\\u202e', '\\u202f', '\\u205f', '\\u2060', '\\u2066', '\\u2067', '\\u2068', '\\u2069', '\\u206a', '\\u206b', '\\u206c\\u206d', '\\u206e', '\\u206f']</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.SPECIAL_CHARS","title":"<code>SPECIAL_CHARS = {' ': '', '~': '', '!': 'EXCLAM', '@': 'AT', '#': 'SHARP', '$': 'DOLLAR', '%': 'PERCENT', '^': '', '&amp;': 'AND', '*': 'STAR', '+': 'PLUS', ';': '', ':': '', ',': '', '\"': '', '{': '', '}': '', '[': '', ']': '', '\\\\(': '', '\\\\)': '', '-': 'MINUS', '=': 'EQUALS', '&lt;': '', '&gt;': '', '?': 'QMARK', '.': 'DOT', '_': 'UNDERS', '|': 'VERT', '\\\\/': '', '\\\\': ''}</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils-classes","title":"Classes","text":""},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.Timer","title":"<code>Timer()</code>","text":"<p>               Bases: <code>object</code></p> <p>Timer class using python native time module.</p> <p>Examples:</p> <p><pre><code>timer = Timer()\ntimer.get_time()\n</code></pre> 12</p> <p>Initialize and Start Timer.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/__init__.py</code> <pre><code>def __init__(self):\n    \"\"\"Initialize and Start Timer.\"\"\"\n    self.start = time.time()\n</code></pre>"},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.Timer-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.Timer.start","title":"<code>start = time.time()</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.Timer-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.Timer.restart","title":"<code>restart()</code>","text":"<p>Restart Timer.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/__init__.py</code> <pre><code>def restart(self):\n    \"\"\"Restart Timer.\"\"\"\n    self.start = time.time()\n</code></pre>"},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.Timer.get_time","title":"<code>get_time()</code>","text":"<p>Get Elapsed Time.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/__init__.py</code> <pre><code>def get_time(self):\n    \"\"\"Get Elapsed Time.\"\"\"\n    return time.time() - self.start\n</code></pre>"},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.ScriptFileParser","title":"<code>ScriptFileParser(file_address)</code>","text":"<p>               Bases: <code>object</code></p> <p>Parse python script to extract variables and docstrings.</p> <p>Primarily designed to assist pyRevit in determining script configurations but can work for any python script.</p> <p>Examples:</p> <p><pre><code>finder = ScriptFileParser('/path/to/coreutils/__init__.py')\nfinder.docstring()\n</code></pre> \"Misc Helper functions for pyRevit.\" <pre><code>finder.extract_param('SomeValue', [])\n</code></pre> []</p> <p>Initialize and read provided python script.</p> <p>Parameters:</p> Name Type Description Default <code>file_address</code> <code>str</code> <p>python script file path</p> required Source code in <code>pyrevitlib/pyrevit/coreutils/__init__.py</code> <pre><code>def __init__(self, file_address):\n    \"\"\"Initialize and read provided python script.\n\n    Args:\n        file_address (str): python script file path\n    \"\"\"\n    self.ast_tree = None\n    self.file_addr = file_address\n    with codecs.open(file_address, 'r', 'utf-8') as source_file:\n        contents = source_file.read()\n        if contents:\n            self.ast_tree = ast.parse(contents)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.ScriptFileParser-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.ScriptFileParser.ast_tree","title":"<code>ast_tree = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.ScriptFileParser.file_addr","title":"<code>file_addr = file_address</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.ScriptFileParser-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.ScriptFileParser.extract_node_value","title":"<code>extract_node_value(node)</code>","text":"<p>Manual extraction of values from node.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/__init__.py</code> <pre><code>def extract_node_value(self, node):\n    \"\"\"Manual extraction of values from node.\"\"\"\n    if isinstance(node, ast.Assign):\n        node_value = node.value\n    else:\n        node_value = node\n\n    if isinstance(node_value, ast.Num):\n        return node_value.n\n    elif PY2 and isinstance(node_value, ast.Name):\n        return node_value.id\n    elif PY3 and isinstance(node_value, ast.NameConstant):\n        return node_value.value\n    elif isinstance(node_value, ast.Str):\n        return node_value.s\n    elif isinstance(node_value, ast.List):\n        return node_value.elts\n    elif isinstance(node_value, ast.Dict):\n        return {self.extract_node_value(k):self.extract_node_value(v)\n                for k, v in zip(node_value.keys, node_value.values)}\n</code></pre>"},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.ScriptFileParser.get_docstring","title":"<code>get_docstring()</code>","text":"<p>Get global docstring.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/__init__.py</code> <pre><code>def get_docstring(self):\n    \"\"\"Get global docstring.\"\"\"\n    if self.ast_tree:\n        doc_str = ast.get_docstring(self.ast_tree)\n        if doc_str:\n            return doc_str.decode('utf-8')\n</code></pre>"},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.ScriptFileParser.extract_param","title":"<code>extract_param(param_name, default_value=None)</code>","text":"<p>Find variable and extract its value.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>variable name</p> required <code>default_value</code> <code>any</code> <p>default value to be returned if variable does not exist</p> <code>None</code> <p>Returns:</p> Type Description <code>Any</code> <p>value of the variable or None</p> Source code in <code>pyrevitlib/pyrevit/coreutils/__init__.py</code> <pre><code>def extract_param(self, param_name, default_value=None):\n    \"\"\"Find variable and extract its value.\n\n    Args:\n        param_name (str): variable name\n        default_value (any):\n            default value to be returned if variable does not exist\n\n    Returns:\n        (Any): value of the variable or None\n    \"\"\"\n    if self.ast_tree:\n        try:\n            for node in ast.iter_child_nodes(self.ast_tree):\n                if isinstance(node, ast.Assign):\n                    for target in node.targets:\n                        if hasattr(target, 'id') \\\n                                and target.id == param_name:\n                            return ast.literal_eval(node.value)\n        except Exception as err:\n            raise PyRevitException('Error parsing parameter: {} '\n                                   'in script file for : {} | {}'\n                                   .format(param_name, self.file_addr, err))\n    return default_value\n</code></pre>"},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.FileWatcher","title":"<code>FileWatcher(filepath)</code>","text":"<p>               Bases: <code>object</code></p> <p>Simple file version watcher.</p> <p>This is a simple utility class to look for changes in a file based on its timestamp.</p> <p>Examples:</p> <p><pre><code>watcher = FileWatcher('/path/to/file.ext')\nwatcher.has_changed\n</code></pre> True</p> <p>Initialize and read timestamp of provided file.</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>str</code> <p>file path</p> required Source code in <code>pyrevitlib/pyrevit/coreutils/__init__.py</code> <pre><code>def __init__(self, filepath):\n    \"\"\"Initialize and read timestamp of provided file.\n\n    Args:\n        filepath (str): file path\n    \"\"\"\n    self._cached_stamp = 0\n    self._filepath = filepath\n    self.update_tstamp()\n</code></pre>"},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.FileWatcher-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.FileWatcher.has_changed","title":"<code>has_changed</code>  <code>property</code>","text":"<p>Compare current file timestamp to the cached timestamp.</p>"},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.FileWatcher-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.FileWatcher.update_tstamp","title":"<code>update_tstamp()</code>","text":"<p>Update the cached timestamp for later comparison.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/__init__.py</code> <pre><code>def update_tstamp(self):\n    \"\"\"Update the cached timestamp for later comparison.\"\"\"\n    self._cached_stamp = os.stat(self._filepath).st_mtime\n</code></pre>"},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.SafeDict","title":"<code>SafeDict</code>","text":"<p>               Bases: <code>dict</code></p> <p>Dictionary that does not fail on any key.</p> <p>This is a dictionary subclass to help with string formatting with unknown key values.</p> <p>Examples:</p> <p><pre><code>string = '{target} {attr} is {color}.'\nsafedict = SafeDict({'target': 'Apple',\n                     'attr':   'Color'})\nstring.format(safedict)  # will not fail with missing 'color' key\n</code></pre> 'Apple Color is {color}.'</p>"},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.get_all_subclasses","title":"<code>get_all_subclasses(parent_classes)</code>","text":"<p>Return all subclasses of a python class.</p> <p>Parameters:</p> Name Type Description Default <code>parent_classes</code> <code>list</code> <p>list of python classes</p> required <p>Returns:</p> Type Description <code>list</code> <p>list of python subclasses</p> Source code in <code>pyrevitlib/pyrevit/coreutils/__init__.py</code> <pre><code>def get_all_subclasses(parent_classes):\n    \"\"\"Return all subclasses of a python class.\n\n    Args:\n        parent_classes (list): list of python classes\n\n    Returns:\n        (list): list of python subclasses\n    \"\"\"\n    sub_classes = []\n    # if super-class, get a list of sub-classes.\n    # Otherwise use component_class to create objects.\n    for parent_class in parent_classes:\n        try:\n            derived_classes = parent_class.__subclasses__()\n            if not derived_classes:\n                sub_classes.append(parent_class)\n            else:\n                sub_classes.extend(derived_classes)\n        except AttributeError:\n            sub_classes.append(parent_class)\n    return sub_classes\n</code></pre>"},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.get_sub_folders","title":"<code>get_sub_folders(search_folder)</code>","text":"<p>Get a list of all subfolders directly inside provided folder.</p> <p>Parameters:</p> Name Type Description Default <code>search_folder</code> <code>str</code> <p>folder path</p> required <p>Returns:</p> Type Description <code>list[str]</code> <p>list of subfolder names</p> Source code in <code>pyrevitlib/pyrevit/coreutils/__init__.py</code> <pre><code>def get_sub_folders(search_folder):\n    \"\"\"Get a list of all subfolders directly inside provided folder.\n\n    Args:\n        search_folder (str): folder path\n\n    Returns:\n        (list[str]): list of subfolder names\n    \"\"\"\n    sub_folders = []\n    for sub_folder in os.listdir(search_folder):\n        if op.isdir(op.join(search_folder, sub_folder)):\n            sub_folders.append(sub_folder)\n    return sub_folders\n</code></pre>"},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.verify_directory","title":"<code>verify_directory(folder)</code>","text":"<p>Check if the folder exists and if not create the folder.</p> <p>Parameters:</p> Name Type Description Default <code>folder</code> <code>str</code> <p>path of folder to verify</p> required <p>Returns:</p> Type Description <code>str</code> <p>path of verified folder, equals to provided folder</p> <p>Raises:</p> Type Description <code>OSError</code> <p>on folder creation error.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/__init__.py</code> <pre><code>def verify_directory(folder):\n    \"\"\"Check if the folder exists and if not create the folder.\n\n    Args:\n        folder (str): path of folder to verify\n\n    Returns:\n        (str): path of verified folder, equals to provided folder\n\n    Raises:\n        OSError: on folder creation error.\n    \"\"\"\n    if not op.exists(folder):\n        try:\n            os.makedirs(folder)\n        except OSError as err:\n            raise err\n    return folder\n</code></pre>"},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.join_strings","title":"<code>join_strings(str_list, separator=DEFAULT_SEPARATOR)</code>","text":"<p>Join strings using provided separator.</p> <p>Parameters:</p> Name Type Description Default <code>str_list</code> <code>list</code> <p>list of string values</p> required <code>separator</code> <code>str</code> <p>single separator character, defaults to DEFAULT_SEPARATOR</p> <code>DEFAULT_SEPARATOR</code> <p>Returns:</p> Type Description <code>str</code> <p>joined string</p> Source code in <code>pyrevitlib/pyrevit/coreutils/__init__.py</code> <pre><code>def join_strings(str_list, separator=DEFAULT_SEPARATOR):\n    \"\"\"Join strings using provided separator.\n\n    Args:\n        str_list (list): list of string values\n        separator (str): single separator character,\n            defaults to DEFAULT_SEPARATOR\n\n    Returns:\n        (str): joined string\n    \"\"\"\n    if str_list:\n        if any(not isinstance(x, str) for x in str_list):\n            str_list = [str(x) for x in str_list]\n        return separator.join(str_list)\n    return ''\n</code></pre>"},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.cleanup_string","title":"<code>cleanup_string(input_str, skip=None)</code>","text":"<p>Replace special characters in string with another string.</p> <p>This function was created to help cleanup pyRevit command unique names from any special characters so C# class names can be created based on those unique names.</p> <p><code>coreutils.SPECIAL_CHARS</code> is the conversion table for this function.</p> <p>Parameters:</p> Name Type Description Default <code>input_str</code> <code>str</code> <p>input string to be cleaned</p> required <code>skip</code> <code>Container[str]</code> <p>special characters to keep</p> <code>None</code> <p>Examples:</p> <p><pre><code>src_str = 'TEST@Some*&lt;value&gt;'\ncleanup_string(src_str)\n</code></pre> \"TESTATSomeSTARvalue\"</p> Source code in <code>pyrevitlib/pyrevit/coreutils/__init__.py</code> <pre><code>def cleanup_string(input_str, skip=None):\n    \"\"\"Replace special characters in string with another string.\n\n    This function was created to help cleanup pyRevit command unique names from\n    any special characters so C# class names can be created based on those\n    unique names.\n\n    ``coreutils.SPECIAL_CHARS`` is the conversion table for this function.\n\n    Args:\n        input_str (str): input string to be cleaned\n        skip (Container[str]): special characters to keep\n\n    Examples:\n        ```python\n        src_str = 'TEST@Some*&lt;value&gt;'\n        cleanup_string(src_str)\n        ```\n        \"TESTATSomeSTARvalue\"\n    \"\"\"\n    # remove spaces and special characters from strings\n    for char, repl in SPECIAL_CHARS.items():\n        if skip and char in skip:\n            continue\n        input_str = input_str.replace(char, repl)\n\n    return input_str\n</code></pre>"},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.get_revit_instance_count","title":"<code>get_revit_instance_count()</code>","text":"<p>Return number of open host app instances.</p> <p>Returns:</p> Type Description <code>int</code> <p>number of open host app instances.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/__init__.py</code> <pre><code>def get_revit_instance_count():\n    \"\"\"Return number of open host app instances.\n\n    Returns:\n        (int): number of open host app instances.\n    \"\"\"\n    return len(list(framework.Process.GetProcessesByName(HOST_APP.proc_name)))\n</code></pre>"},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.run_process","title":"<code>run_process(proc, cwd='C:')</code>","text":"<p>Run shell process silently.</p> <p>Parameters:</p> Name Type Description Default <code>proc</code> <code>str</code> <p>process executive name</p> required <code>cwd</code> <code>str</code> <p>current working directory</p> <code>'C:'</code> Exmaple <pre><code>run_process('notepad.exe', 'c:/')\n</code></pre> Source code in <code>pyrevitlib/pyrevit/coreutils/__init__.py</code> <pre><code>def run_process(proc, cwd='C:'):\n    \"\"\"Run shell process silently.\n\n    Args:\n        proc (str): process executive name\n        cwd (str): current working directory\n\n    Exmaple:\n        ```python\n        run_process('notepad.exe', 'c:/')\n        ```\n    \"\"\"\n    import subprocess\n    return subprocess.Popen(proc,\n                            stdout=subprocess.PIPE, stderr=subprocess.PIPE,\n                            cwd=cwd, shell=True)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.inspect_calling_scope_local_var","title":"<code>inspect_calling_scope_local_var(variable_name)</code>","text":"<p>Trace back the stack to find the variable in the caller local stack.</p> <p>PyRevitLoader defines revit in builtins and window in locals. Thus, modules have access to revit but not to window. This function is used to find window in the caller stack.</p> <p>Parameters:</p> Name Type Description Default <code>variable_name</code> <code>str</code> <p>variable name to look up in caller local scope</p> required Source code in <code>pyrevitlib/pyrevit/coreutils/__init__.py</code> <pre><code>def inspect_calling_scope_local_var(variable_name):\n    \"\"\"Trace back the stack to find the variable in the caller local stack.\n\n    PyRevitLoader defines __revit__ in builtins and __window__ in locals.\n    Thus, modules have access to __revit__ but not to __window__.\n    This function is used to find __window__ in the caller stack.\n\n    Args:\n        variable_name (str): variable name to look up in caller local scope\n    \"\"\"\n    import inspect\n\n    frame = inspect.stack()[1][0]\n    while variable_name not in frame.f_locals:\n        frame = frame.f_back\n        if frame is None:\n            return None\n    return frame.f_locals[variable_name]\n</code></pre>"},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.inspect_calling_scope_global_var","title":"<code>inspect_calling_scope_global_var(variable_name)</code>","text":"<p>Trace back the stack to find the variable in the caller global stack.</p> <p>Parameters:</p> Name Type Description Default <code>variable_name</code> <code>str</code> <p>variable name to look up in caller global scope</p> required Source code in <code>pyrevitlib/pyrevit/coreutils/__init__.py</code> <pre><code>def inspect_calling_scope_global_var(variable_name):\n    \"\"\"Trace back the stack to find the variable in the caller global stack.\n\n    Args:\n        variable_name (str): variable name to look up in caller global scope\n    \"\"\"\n    import inspect\n\n    frame = inspect.stack()[1][0]\n    while variable_name not in frame.f_globals:\n        frame = frame.f_back\n        if frame is None:\n            return None\n    return frame.f_locals[variable_name]\n</code></pre>"},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.make_canonical_name","title":"<code>make_canonical_name(*args)</code>","text":"<p>Join arguments with dot creating a unique id.</p> <p>Parameters:</p> Name Type Description Default <code>*args</code> <code>str</code> <p>Variable length argument list</p> <code>()</code> <p>Returns:</p> Type Description <code>str</code> <p>dot separated unique name</p> <p>Examples:</p> <p><pre><code>make_canonical_name('somename', 'someid', 'txt')\n</code></pre> \"somename.someid.txt\"</p> Source code in <code>pyrevitlib/pyrevit/coreutils/__init__.py</code> <pre><code>def make_canonical_name(*args):\n    \"\"\"Join arguments with dot creating a unique id.\n\n    Args:\n        *args (str): Variable length argument list\n\n    Returns:\n        (str): dot separated unique name\n\n    Examples:\n        ```python\n        make_canonical_name('somename', 'someid', 'txt')\n        ```\n        \"somename.someid.txt\"\n    \"\"\"\n    return '.'.join(args)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.get_canonical_parts","title":"<code>get_canonical_parts(canonical_string)</code>","text":"<p>Splots argument using dot, returning all composing parts.</p> <p>Parameters:</p> Name Type Description Default <code>canonical_string</code> <code>str</code> <p>Source string e.g. \"Config.SubConfig\"</p> required <p>Returns:</p> Type Description <code>list[str]</code> <p>list of composing parts</p> <p>Examples:</p> <p><pre><code>get_canonical_parts(\"Config.SubConfig\")\n</code></pre> ['Config', 'SubConfig']</p> Source code in <code>pyrevitlib/pyrevit/coreutils/__init__.py</code> <pre><code>def get_canonical_parts(canonical_string):\n    \"\"\"Splots argument using dot, returning all composing parts.\n\n    Args:\n        canonical_string (str): Source string e.g. \"Config.SubConfig\"\n\n    Returns:\n        (list[str]): list of composing parts\n\n    Examples:\n        ```python\n        get_canonical_parts(\"Config.SubConfig\")\n        ```\n        ['Config', 'SubConfig']\n    \"\"\"\n    return canonical_string.split('.')\n</code></pre>"},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.get_file_name","title":"<code>get_file_name(file_path)</code>","text":"<p>Return file basename of the given file.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>file path</p> required Source code in <code>pyrevitlib/pyrevit/coreutils/__init__.py</code> <pre><code>def get_file_name(file_path):\n    \"\"\"Return file basename of the given file.\n\n    Args:\n        file_path (str): file path\n    \"\"\"\n    return op.splitext(op.basename(file_path))[0]\n</code></pre>"},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.get_str_hash","title":"<code>get_str_hash(source_str)</code>","text":"<p>Calculate hash value of given string.</p> <p>Current implementation uses :func:<code>hashlib.md5</code> hash function.</p> <p>Parameters:</p> Name Type Description Default <code>source_str</code> <code>str</code> <p>source str</p> required <p>Returns:</p> Type Description <code>str</code> <p>hash value as string</p> Source code in <code>pyrevitlib/pyrevit/coreutils/__init__.py</code> <pre><code>def get_str_hash(source_str):\n    \"\"\"Calculate hash value of given string.\n\n    Current implementation uses :func:`hashlib.md5` hash function.\n\n    Args:\n        source_str (str): source str\n\n    Returns:\n        (str): hash value as string\n    \"\"\"\n    return hashlib.md5(source_str.encode('utf-8', 'ignore')).hexdigest()\n</code></pre>"},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.calculate_dir_hash","title":"<code>calculate_dir_hash(dir_path, dir_filter, file_filter)</code>","text":"<p>Create a unique hash to represent state of directory.</p> <p>Parameters:</p> Name Type Description Default <code>dir_path</code> <code>str</code> <p>target directory</p> required <code>dir_filter</code> <code>str</code> <p>exclude directories matching this regex</p> required <code>file_filter</code> <code>str</code> <p>exclude files matching this regex</p> required <p>Returns:</p> Type Description <code>str</code> <p>hash value as string</p> <p>Examples:</p> <p><pre><code>calculate_dir_hash(source_path, '\\.extension', '\\.json')\n</code></pre> \"1a885a0cae99f53d6088b9f7cee3bf4d\"</p> Source code in <code>pyrevitlib/pyrevit/coreutils/__init__.py</code> <pre><code>def calculate_dir_hash(dir_path, dir_filter, file_filter):\n    r\"\"\"Create a unique hash to represent state of directory.\n\n    Args:\n        dir_path (str): target directory\n        dir_filter (str): exclude directories matching this regex\n        file_filter (str): exclude files matching this regex\n\n    Returns:\n        (str): hash value as string\n\n    Examples:\n        ```python\n        calculate_dir_hash(source_path, '\\.extension', '\\.json')\n        ```\n        \"1a885a0cae99f53d6088b9f7cee3bf4d\"\n    \"\"\"\n    mtime_sum = 0\n    for root, dirs, files in os.walk(dir_path): #pylint: disable=W0612\n        if re.search(dir_filter, op.basename(root), flags=re.IGNORECASE):\n            mtime_sum += op.getmtime(root)\n            for filename in files:\n                if re.search(file_filter, filename, flags=re.IGNORECASE):\n                    modtime = op.getmtime(op.join(root, filename))\n                    mtime_sum += modtime\n    return get_str_hash(safe_strtype(mtime_sum))\n</code></pre>"},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.prepare_html_str","title":"<code>prepare_html_str(input_string)</code>","text":"<p>Reformat html string and prepare for pyRevit output window.</p> <p>pyRevit output window renders html content. But this means that &lt; and &gt; characters in outputs from python (e.g. ) will be treated as html tags. To avoid this, all &lt;&gt; characters that are defining html content need to be replaced with special phrases. pyRevit output later translates these phrases back in to &lt; and &gt;. That is how pyRevit distinquishes between &lt;&gt; printed from python and &lt;&gt; that define html. <p>Parameters:</p> Name Type Description Default <code>input_string</code> <code>str</code> <p>input html string</p> required <p>Examples:</p> <p><pre><code>prepare_html_str('&lt;p&gt;Some text&lt;/p&gt;')\n</code></pre> \"&amp;clt;p&amp;cgt;Some text&amp;clt;/p&amp;cgt;\"</p> Source code in <code>pyrevitlib/pyrevit/coreutils/__init__.py</code> <pre><code>def prepare_html_str(input_string):\n    \"\"\"Reformat html string and prepare for pyRevit output window.\n\n    pyRevit output window renders html content. But this means that &lt; and &gt;\n    characters in outputs from python (e.g. &lt;class at xxx&gt;) will be treated\n    as html tags. To avoid this, all &lt;&gt; characters that are defining\n    html content need to be replaced with special phrases. pyRevit output\n    later translates these phrases back in to &lt; and &gt;. That is how pyRevit\n    distinquishes between &lt;&gt; printed from python and &lt;&gt; that define html.\n\n    Args:\n        input_string (str): input html string\n\n    Examples:\n        ```python\n        prepare_html_str('&lt;p&gt;Some text&lt;/p&gt;')\n        ```\n        \"&amp;clt;p&amp;cgt;Some text&amp;clt;/p&amp;cgt;\"\n    \"\"\"\n    return input_string.replace('&lt;', '&amp;clt;').replace('&gt;', '&amp;cgt;')\n</code></pre>"},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.reverse_html","title":"<code>reverse_html(input_html)</code>","text":"<p>Reformat codified pyRevit output html string back to normal html.</p> <p>pyRevit output window renders html content. But this means that &lt; and &gt; characters in outputs from python (e.g. ) will be treated as html tags. To avoid this, all &lt;&gt; characters that are defining html content need to be replaced with special phrases. pyRevit output later translates these phrases back in to &lt; and &gt;. That is how pyRevit distinquishes between &lt;&gt; printed from python and &lt;&gt; that define html. <p>Parameters:</p> Name Type Description Default <code>input_html</code> <code>str</code> <p>input codified html string</p> required <p>Examples:</p> <p><pre><code>prepare_html_str('&amp;clt;p&amp;cgt;Some text&amp;clt;/p&amp;cgt;')\n</code></pre> \"<p>Some text</p>\"</p> Source code in <code>pyrevitlib/pyrevit/coreutils/__init__.py</code> <pre><code>def reverse_html(input_html):\n    \"\"\"Reformat codified pyRevit output html string back to normal html.\n\n    pyRevit output window renders html content. But this means that &lt; and &gt;\n    characters in outputs from python (e.g. &lt;class at xxx&gt;) will be treated\n    as html tags. To avoid this, all &lt;&gt; characters that are defining\n    html content need to be replaced with special phrases. pyRevit output\n    later translates these phrases back in to &lt; and &gt;. That is how pyRevit\n    distinquishes between &lt;&gt; printed from python and &lt;&gt; that define html.\n\n    Args:\n        input_html (str): input codified html string\n\n    Examples:\n        ```python\n        prepare_html_str('&amp;clt;p&amp;cgt;Some text&amp;clt;/p&amp;cgt;')\n        ```\n        \"&lt;p&gt;Some text&lt;/p&gt;\"\n    \"\"\"\n    return input_html.replace('&amp;clt;', '&lt;').replace('&amp;cgt;', '&gt;')\n</code></pre>"},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.escape_for_html","title":"<code>escape_for_html(input_string)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/__init__.py</code> <pre><code>def escape_for_html(input_string):\n    return input_string.replace('&lt;', '&amp;lt;').replace('&gt;', '&amp;gt;')\n</code></pre>"},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.read_url","title":"<code>read_url(url_to_open)</code>","text":"<p>Get the url and return response.</p> <p>Parameters:</p> Name Type Description Default <code>url_to_open</code> <code>str</code> <p>url to check access for</p> required Source code in <code>pyrevitlib/pyrevit/coreutils/__init__.py</code> <pre><code>def read_url(url_to_open):\n    \"\"\"Get the url and return response.\n\n    Args:\n        url_to_open (str): url to check access for\n    \"\"\"\n    client = framework.WebClient()\n    return client.DownloadString(url_to_open)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.touch","title":"<code>touch(fname, times=None)</code>","text":"<p>Update the timestamp on the given file.</p> <p>Parameters:</p> Name Type Description Default <code>fname</code> <code>str</code> <p>target file path</p> required <code>times</code> <code>int</code> <p>number of times to touch the file</p> <code>None</code> Source code in <code>pyrevitlib/pyrevit/coreutils/__init__.py</code> <pre><code>def touch(fname, times=None):\n    \"\"\"Update the timestamp on the given file.\n\n    Args:\n        fname (str): target file path\n        times (int): number of times to touch the file\n    \"\"\"\n    with open(fname, 'a'):\n        os.utime(fname, times)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.read_source_file","title":"<code>read_source_file(source_file_path)</code>","text":"<p>Read text file and return contents.</p> <p>Parameters:</p> Name Type Description Default <code>source_file_path</code> <code>str</code> <p>target file path</p> required <p>Returns:</p> Type Description <code>str</code> <p>file contents</p> <p>Raises:</p> Type Description <code>PyRevitException</code> <p>on read error</p> Source code in <code>pyrevitlib/pyrevit/coreutils/__init__.py</code> <pre><code>def read_source_file(source_file_path):\n    \"\"\"Read text file and return contents.\n\n    Args:\n        source_file_path (str): target file path\n\n    Returns:\n        (str): file contents\n\n    Raises:\n        PyRevitException: on read error\n    \"\"\"\n    try:\n        with open(source_file_path, 'r') as code_file:\n            return code_file.read()\n    except Exception as read_err:\n        raise PyRevitException('Error reading source file: {} | {}'\n                               .format(source_file_path, read_err))\n</code></pre>"},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.open_folder_in_explorer","title":"<code>open_folder_in_explorer(folder_path)</code>","text":"<p>Open given folder in Windows Explorer.</p> <p>Parameters:</p> Name Type Description Default <code>folder_path</code> <code>str</code> <p>directory path</p> required Source code in <code>pyrevitlib/pyrevit/coreutils/__init__.py</code> <pre><code>def open_folder_in_explorer(folder_path):\n    \"\"\"Open given folder in Windows Explorer.\n\n    Args:\n        folder_path (str): directory path\n    \"\"\"\n    import subprocess\n    subprocess.Popen(r'explorer /open,\"{}\"'\n                     .format(os.path.normpath(folder_path)))\n</code></pre>"},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.show_entry_in_explorer","title":"<code>show_entry_in_explorer(entry_path)</code>","text":"<p>Show given entry in Windows Explorer.</p> <p>Parameters:</p> Name Type Description Default <code>entry_path</code> <code>str</code> <p>directory or file path</p> required Source code in <code>pyrevitlib/pyrevit/coreutils/__init__.py</code> <pre><code>def show_entry_in_explorer(entry_path):\n    \"\"\"Show given entry in Windows Explorer.\n\n    Args:\n        entry_path (str): directory or file path\n    \"\"\"\n    import subprocess\n    subprocess.Popen(r'explorer /select,\"{}\"'\n                     .format(os.path.normpath(entry_path)))\n</code></pre>"},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.fully_remove_dir","title":"<code>fully_remove_dir(dir_path)</code>","text":"<p>Remove directory recursively.</p> <p>Parameters:</p> Name Type Description Default <code>dir_path</code> <code>str</code> <p>directory path</p> required Source code in <code>pyrevitlib/pyrevit/coreutils/__init__.py</code> <pre><code>def fully_remove_dir(dir_path):\n    \"\"\"Remove directory recursively.\n\n    Args:\n        dir_path (str): directory path\n    \"\"\"\n    def del_rw(action, name, exc):   #pylint: disable=W0613\n        \"\"\"Force delete entry.\"\"\"\n        os.chmod(name, stat.S_IWRITE)\n        os.remove(name)\n\n    shutil.rmtree(dir_path, onerror=del_rw)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.cleanup_filename","title":"<code>cleanup_filename(file_name, windows_safe=False)</code>","text":"<p>Cleanup file name from special characters.</p> <p>Parameters:</p> Name Type Description Default <code>file_name</code> <code>str</code> <p>file name</p> required <code>windows_safe</code> <code>bool</code> <p>whether to use windows safe characters</p> <code>False</code> <p>Returns:</p> Type Description <code>str</code> <p>cleaned up file name</p> <p>Examples:</p> <p><pre><code>cleanup_filename('Myfile-(3).txt')\n</code></pre> \"Myfile(3).txt\"</p> <p><pre><code>cleanup_filename('Perforations 1/8\" (New)')\n</code></pre> \"Perforations 18 (New).txt\"</p> Source code in <code>pyrevitlib/pyrevit/coreutils/__init__.py</code> <pre><code>def cleanup_filename(file_name, windows_safe=False):\n    \"\"\"Cleanup file name from special characters.\n\n    Args:\n        file_name (str): file name\n        windows_safe (bool): whether to use windows safe characters\n\n    Returns:\n        (str): cleaned up file name\n\n    Examples:\n        ```python\n        cleanup_filename('Myfile-(3).txt')\n        ```\n        \"Myfile(3).txt\"\n\n        ```python\n        cleanup_filename('Perforations 1/8\" (New)')\n        ```\n        \"Perforations 18 (New).txt\"\n    \"\"\"\n    if windows_safe:\n        return re.sub(r'[\\/:*?\"&lt;&gt;|]', '', file_name)\n    else:\n        return re.sub(r'[^\\w_.() -#]|[\"]', '', file_name)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.increment_str","title":"<code>increment_str(input_str, step=1, expand=False)</code>","text":"<p>Incremenet identifier.</p> <p>Parameters:</p> Name Type Description Default <code>input_str</code> <code>str</code> <p>identifier e.g. A310a</p> required <code>step</code> <code>int</code> <p>number of steps to change the identifier</p> <code>1</code> <code>expand</code> <code>bool</code> <p>removes leading zeroes and duplicate letters</p> <code>False</code> <p>Returns:</p> Type Description <code>str</code> <p>modified identifier</p> <p>Examples:</p> <p><pre><code>increment_str('A319z')\n</code></pre> 'A320a'</p> Source code in <code>pyrevitlib/pyrevit/coreutils/__init__.py</code> <pre><code>def increment_str(input_str, step=1, expand=False):\n    \"\"\"Incremenet identifier.\n\n    Args:\n        input_str (str): identifier e.g. A310a\n        step (int): number of steps to change the identifier\n        expand (bool): removes leading zeroes and duplicate letters\n\n    Returns:\n        (str): modified identifier\n\n    Examples:\n        ```python\n        increment_str('A319z')\n        ```\n        'A320a'\n    \"\"\"\n    return _inc_or_dec_string(input_str, abs(step), refit=expand)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.decrement_str","title":"<code>decrement_str(input_str, step=1, shrink=False)</code>","text":"<p>Decrement identifier.</p> <p>Parameters:</p> Name Type Description Default <code>input_str</code> <code>str</code> <p>identifier e.g. A310a</p> required <code>step</code> <code>int</code> <p>number of steps to change the identifier</p> <code>1</code> <code>shrink</code> <code>bool</code> <p>removes leading zeroes or duplicate letters </p> <code>False</code> <p>Returns:</p> Type Description <code>str</code> <p>modified identifier</p> <p>Examples:</p> <p><pre><code>decrement_str('A310a')\n</code></pre> 'A309z'</p> Source code in <code>pyrevitlib/pyrevit/coreutils/__init__.py</code> <pre><code>def decrement_str(input_str, step=1, shrink=False):\n    \"\"\"Decrement identifier.\n\n    Args:\n        input_str (str): identifier e.g. A310a\n        step (int): number of steps to change the identifier\n        shrink (bool): removes leading zeroes or duplicate letters \n\n    Returns:\n        (str): modified identifier\n\n    Examples:\n        ```python\n        decrement_str('A310a')\n        ```\n        'A309z'\n    \"\"\"\n    return _inc_or_dec_string(input_str, -abs(step), refit=shrink)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.extend_counter","title":"<code>extend_counter(input_str, upper=True, use_zero=False)</code>","text":"<p>Add a new level to identifier. e.g. A310 -&gt; A310A.</p> <p>Parameters:</p> Name Type Description Default <code>input_str</code> <code>str</code> <p>identifier e.g. A310</p> required <code>upper</code> <code>bool</code> <p>use UPPERCASE characters for extension</p> <code>True</code> <code>use_zero</code> <code>bool</code> <p>start from 0 for numeric extension</p> <code>False</code> <p>Returns:</p> Type Description <code>str</code> <p>extended identifier</p> <p>Examples:</p> <p><pre><code>extend_counter('A310')\n</code></pre> 'A310A' <pre><code>extend_counter('A310A', use_zero=True)\n</code></pre> 'A310A0'</p> Source code in <code>pyrevitlib/pyrevit/coreutils/__init__.py</code> <pre><code>def extend_counter(input_str, upper=True, use_zero=False):\n    \"\"\"Add a new level to identifier. e.g. A310 -&gt; A310A.\n\n    Args:\n        input_str (str): identifier e.g. A310\n        upper (bool): use UPPERCASE characters for extension\n        use_zero (bool): start from 0 for numeric extension\n\n    Returns:\n        (str): extended identifier\n\n    Examples:\n        ```python\n        extend_counter('A310')\n        ```\n        'A310A'\n        ```python\n        extend_counter('A310A', use_zero=True)\n        ```\n        'A310A0'\n    \"\"\"\n    if input_str[-1].isdigit():\n        return input_str + (\"A\" if upper else \"a\")\n    else:\n        return input_str + (\"0\" if use_zero else \"1\")\n</code></pre>"},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.filter_null_items","title":"<code>filter_null_items(src_list)</code>","text":"<p>Remove None items in the given list.</p> <p>Parameters:</p> Name Type Description Default <code>src_list</code> <code>list[Any]</code> <p>list of any items</p> required <p>Returns:</p> Type Description <code>list[Any]</code> <p>cleaned list</p> Source code in <code>pyrevitlib/pyrevit/coreutils/__init__.py</code> <pre><code>def filter_null_items(src_list):\n    \"\"\"Remove None items in the given list.\n\n    Args:\n        src_list (list[Any]): list of any items\n\n    Returns:\n        (list[Any]): cleaned list\n    \"\"\"\n    return list(filter(bool, src_list))\n</code></pre>"},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.reverse_dict","title":"<code>reverse_dict(input_dict)</code>","text":"<p>Reverse the key, value pairs.</p> <p>Parameters:</p> Name Type Description Default <code>input_dict</code> <code>dict</code> <p>source ordered dict</p> required <p>Returns:</p> Type Description <code>defaultdict</code> <p>reversed dictionary</p> <p>Examples:</p> <p><pre><code>reverse_dict({1: 2, 3: 4})\n</code></pre> defaultdict(, {2: [1], 4: [3]}) Source code in <code>pyrevitlib/pyrevit/coreutils/__init__.py</code> <pre><code>def reverse_dict(input_dict):\n    \"\"\"Reverse the key, value pairs.\n\n    Args:\n        input_dict (dict): source ordered dict\n\n    Returns:\n        (defaultdict): reversed dictionary\n\n    Examples:\n        ```python\n        reverse_dict({1: 2, 3: 4})\n        ```\n        defaultdict(&lt;type 'list'&gt;, {2: [1], 4: [3]})\n    \"\"\"\n    output_dict = defaultdict(list)\n    for key, value in input_dict.items():\n        output_dict[value].append(key)\n    return output_dict\n</code></pre>"},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.timestamp","title":"<code>timestamp()</code>","text":"<p>Return timestamp for current time.</p> <p>Returns:</p> Type Description <code>str</code> <p>timestamp in string format</p> <p>Examples:</p> <p><pre><code>timestamp()\n</code></pre> '01003075032506808'</p> Source code in <code>pyrevitlib/pyrevit/coreutils/__init__.py</code> <pre><code>def timestamp():\n    \"\"\"Return timestamp for current time.\n\n    Returns:\n        (str): timestamp in string format\n\n    Examples:\n        ```python\n        timestamp()\n        ```\n        '01003075032506808'\n    \"\"\"\n    return datetime.datetime.now().strftime(\"%m%j%H%M%S%f\")\n</code></pre>"},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.current_time","title":"<code>current_time()</code>","text":"<p>Return formatted current time.</p> <p>Current implementation uses %H:%M:%S to format time.</p> <p>Returns:</p> Type Description <code>str</code> <p>formatted current time.</p> <p>Examples:</p> <p><pre><code>current_time()\n</code></pre> '07:50:53'</p> Source code in <code>pyrevitlib/pyrevit/coreutils/__init__.py</code> <pre><code>def current_time():\n    \"\"\"Return formatted current time.\n\n    Current implementation uses %H:%M:%S to format time.\n\n    Returns:\n        (str): formatted current time.\n\n    Examples:\n        ```python\n        current_time()\n        ```\n        '07:50:53'\n    \"\"\"\n    return datetime.datetime.now().strftime(\"%H:%M:%S\")\n</code></pre>"},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.current_date","title":"<code>current_date()</code>","text":"<p>Return formatted current date.</p> <p>Current implementation uses %Y-%m-%d to format date.</p> <p>Returns:</p> Type Description <code>str</code> <p>formatted current date.</p> <p>Examples:</p> <p><pre><code>current_date()\n</code></pre> '2018-01-03'</p> Source code in <code>pyrevitlib/pyrevit/coreutils/__init__.py</code> <pre><code>def current_date():\n    \"\"\"Return formatted current date.\n\n    Current implementation uses %Y-%m-%d to format date.\n\n    Returns:\n        (str): formatted current date.\n\n    Examples:\n        ```python\n        current_date()\n        ```\n        '2018-01-03'\n    \"\"\"\n    return datetime.datetime.now().strftime(\"%Y-%m-%d\")\n</code></pre>"},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.is_blank","title":"<code>is_blank(input_string)</code>","text":"<p>Check if input string is blank (multiple white spaces is blank).</p> <p>Parameters:</p> Name Type Description Default <code>input_string</code> <code>str</code> <p>input string</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if string is blank</p> <p>Examples:</p> <p><pre><code>is_blank('   ')\n</code></pre> True</p> Source code in <code>pyrevitlib/pyrevit/coreutils/__init__.py</code> <pre><code>def is_blank(input_string):\n    \"\"\"Check if input string is blank (multiple white spaces is blank).\n\n    Args:\n        input_string (str): input string\n\n    Returns:\n        (bool): True if string is blank\n\n    Examples:\n        ```python\n        is_blank('   ')\n        ```\n        True\n    \"\"\"\n    if input_string and input_string.strip():\n        return False\n    return True\n</code></pre>"},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.is_url_valid","title":"<code>is_url_valid(url_string)</code>","text":"<p>Check if given URL is in valid format.</p> <p>Parameters:</p> Name Type Description Default <code>url_string</code> <code>str</code> <p>URL string</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if URL is in valid format</p> <p>Examples:</p> <p><pre><code>is_url_valid('https://www.google.com')\n</code></pre> True</p> Source code in <code>pyrevitlib/pyrevit/coreutils/__init__.py</code> <pre><code>def is_url_valid(url_string):\n    \"\"\"Check if given URL is in valid format.\n\n    Args:\n        url_string (str): URL string\n\n    Returns:\n        (bool): True if URL is in valid format\n\n    Examples:\n        ```python\n        is_url_valid('https://www.google.com')\n        ```\n        True\n    \"\"\"\n    regex = re.compile(\n        r'^(?:http|ftp)s?://'                   # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+'\n        r'(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'  # domain...\n        r'localhost|'                           # localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'  # ...or ip\n        r'(?::\\d+)?'                            # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n\n    return regex.match(url_string)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.reformat_string","title":"<code>reformat_string(orig_str, orig_format, new_format)</code>","text":"<p>Reformat a string into a new format.</p> <p>Extracts information from a string based on a given pattern, and recreates a new string based on the given new pattern.</p> <p>Parameters:</p> Name Type Description Default <code>orig_str</code> <code>str</code> <p>Original string to be reformatted</p> required <code>orig_format</code> <code>str</code> <p>Pattern of the original str (data to be extracted)</p> required <code>new_format</code> <code>str</code> <p>New pattern (how to recompose the data)</p> required <p>Returns:</p> Type Description <code>str</code> <p>Reformatted string</p> <p>Examples:</p> <p><pre><code>reformat_string('150 - FLOOR/CEILING - WD - 1 HR - FLOOR ASSEMBLY',\n                    '{section} - {loc} - {mat} - {rating} - {name}',\n                    '{section}:{mat}:{rating} - {name} ({loc})'))\n</code></pre> '150:WD:1 HR - FLOOR ASSEMBLY (FLOOR/CEILING)'</p> Source code in <code>pyrevitlib/pyrevit/coreutils/__init__.py</code> <pre><code>def reformat_string(orig_str, orig_format, new_format):\n    \"\"\"Reformat a string into a new format.\n\n    Extracts information from a string based on a given pattern,\n    and recreates a new string based on the given new pattern.\n\n    Args:\n        orig_str (str): Original string to be reformatted\n        orig_format (str): Pattern of the original str (data to be extracted)\n        new_format (str): New pattern (how to recompose the data)\n\n    Returns:\n        (str): Reformatted string\n\n    Examples:\n        ```python\n        reformat_string('150 - FLOOR/CEILING - WD - 1 HR - FLOOR ASSEMBLY',\n                            '{section} - {loc} - {mat} - {rating} - {name}',\n                            '{section}:{mat}:{rating} - {name} ({loc})'))\n        ```\n        '150:WD:1 HR - FLOOR ASSEMBLY (FLOOR/CEILING)'\n    \"\"\"\n    # find the tags\n    tag_extractor = re.compile('{(.+?)}')\n    tags = tag_extractor.findall(orig_format)\n\n    # replace the tags with regex patterns\n    # to create a regex pattern that finds values\n    tag_replacer = re.compile('{.+?}')\n    value_extractor_pattern = tag_replacer.sub('(.+)', orig_format)\n    # find all values\n    value_extractor = re.compile(value_extractor_pattern)\n    match = value_extractor.match(orig_str)\n    values = match.groups()\n\n    # create a dictionary of tags and values\n    reformat_dict = {}\n    for key, value in zip(tags, values):\n        reformat_dict[key] = value\n\n    # use dictionary to reformat the string into new\n    return new_format.format(**reformat_dict)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.get_mapped_drives_dict","title":"<code>get_mapped_drives_dict()</code>","text":"<p>Return a dictionary of currently mapped network drives.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/__init__.py</code> <pre><code>def get_mapped_drives_dict():\n    \"\"\"Return a dictionary of currently mapped network drives.\"\"\"\n    searcher = framework.ManagementObjectSearcher(\n        \"root\\\\CIMV2\",\n        \"SELECT * FROM Win32_MappedLogicalDisk\"\n        )\n\n    return {x['DeviceID']: x['ProviderName'] for x in searcher.Get()}\n</code></pre>"},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.dletter_to_unc","title":"<code>dletter_to_unc(dletter_path)</code>","text":"<p>Convert drive letter path into UNC path of that drive.</p> <p>Parameters:</p> Name Type Description Default <code>dletter_path</code> <code>str</code> <p>drive letter path</p> required <p>Returns:</p> Type Description <code>str</code> <p>UNC path</p> <p>Examples:</p> <p><pre><code># assuming J: is mapped to //filestore/server/jdrive\ndletter_to_unc('J:/somefile.txt')\n</code></pre> '//filestore/server/jdrive/somefile.txt'</p> Source code in <code>pyrevitlib/pyrevit/coreutils/__init__.py</code> <pre><code>def dletter_to_unc(dletter_path):\n    \"\"\"Convert drive letter path into UNC path of that drive.\n\n    Args:\n        dletter_path (str): drive letter path\n\n    Returns:\n        (str): UNC path\n\n    Examples:\n        ```python\n        # assuming J: is mapped to //filestore/server/jdrive\n        dletter_to_unc('J:/somefile.txt')\n        ```\n        '//filestore/server/jdrive/somefile.txt'\n    \"\"\"\n    drives = get_mapped_drives_dict()\n    dletter = dletter_path[:2]\n    for mapped_drive, server_path in drives.items():\n        if dletter.lower() == mapped_drive.lower():\n            return dletter_path.replace(dletter, server_path)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.unc_to_dletter","title":"<code>unc_to_dletter(unc_path)</code>","text":"<p>Convert UNC path into drive letter path.</p> <p>Parameters:</p> Name Type Description Default <code>unc_path</code> <code>str</code> <p>UNC path</p> required <p>Returns:</p> Type Description <code>str</code> <p>drive letter path</p> <p>Examples:</p> <p><pre><code># assuming J: is mapped to //filestore/server/jdrive\nunc_to_dletter('//filestore/server/jdrive/somefile.txt')\n</code></pre> 'J:/somefile.txt'</p> Source code in <code>pyrevitlib/pyrevit/coreutils/__init__.py</code> <pre><code>def unc_to_dletter(unc_path):\n    \"\"\"Convert UNC path into drive letter path.\n\n    Args:\n        unc_path (str): UNC path\n\n    Returns:\n        (str): drive letter path\n\n    Examples:\n        ```python\n        # assuming J: is mapped to //filestore/server/jdrive\n        unc_to_dletter('//filestore/server/jdrive/somefile.txt')\n        ```\n        'J:/somefile.txt'\n    \"\"\"\n    drives = get_mapped_drives_dict()\n    for mapped_drive, server_path in drives.items():\n        if server_path in unc_path:\n            return unc_path.replace(server_path, mapped_drive)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.random_color","title":"<code>random_color()</code>","text":"<p>Return a random color channel value (between 0 and 255).</p> Source code in <code>pyrevitlib/pyrevit/coreutils/__init__.py</code> <pre><code>def random_color():\n    \"\"\"Return a random color channel value (between 0 and 255).\"\"\"\n    return random.randint(0, 255)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.random_alpha","title":"<code>random_alpha()</code>","text":"<p>Return a random alpha value (between 0 and 1.00).</p> Source code in <code>pyrevitlib/pyrevit/coreutils/__init__.py</code> <pre><code>def random_alpha():\n    \"\"\"Return a random alpha value (between 0 and 1.00).\"\"\"\n    return round(random.random(), 2)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.random_hex_color","title":"<code>random_hex_color()</code>","text":"<p>Return a random color in hex format.</p> <p>Examples:</p> <p><pre><code>random_hex_color()\n</code></pre> '#FF0000'</p> Source code in <code>pyrevitlib/pyrevit/coreutils/__init__.py</code> <pre><code>def random_hex_color():\n    \"\"\"Return a random color in hex format.\n\n    Examples:\n        ```python\n        random_hex_color()\n        ```\n        '#FF0000'\n    \"\"\"\n    return '#%02X%02X%02X' % (random_color(),\n                              random_color(),\n                              random_color())\n</code></pre>"},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.random_rgb_color","title":"<code>random_rgb_color()</code>","text":"<p>Return a random color in rgb format.</p> <p>Examples:</p> <p><pre><code>random_rgb_color()\n</code></pre> 'rgb(255, 0, 0)'</p> Source code in <code>pyrevitlib/pyrevit/coreutils/__init__.py</code> <pre><code>def random_rgb_color():\n    \"\"\"Return a random color in rgb format.\n\n    Examples:\n        ```python\n        random_rgb_color()\n        ```\n        'rgb(255, 0, 0)'\n    \"\"\"\n    return 'rgb(%d, %d, %d)' % (random_color(),\n                                random_color(),\n                                random_color())\n</code></pre>"},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.random_rgba_color","title":"<code>random_rgba_color()</code>","text":"<p>Return a random color in rgba format.</p> <p>Examples:</p> <p><pre><code>random_rgba_color()\n</code></pre> 'rgba(255, 0, 0, 0.5)'</p> Source code in <code>pyrevitlib/pyrevit/coreutils/__init__.py</code> <pre><code>def random_rgba_color():\n    \"\"\"Return a random color in rgba format.\n\n    Examples:\n        ```python\n        random_rgba_color()\n        ```\n        'rgba(255, 0, 0, 0.5)'\n    \"\"\"\n    return 'rgba(%d, %d, %d, %.2f)' % (random_color(),\n                                       random_color(),\n                                       random_color(),\n                                       random_alpha())\n</code></pre>"},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.extract_range","title":"<code>extract_range(formatted_str, max_range=500)</code>","text":"<p>Extract range from formatted string.</p> <p>String must be formatted as below A103            No range A103-A106       A103 to A106 A103:A106       A103 to A106 A103,A105a      A103 and A105a A103;A105a      A103 and A105a</p> <p>Parameters:</p> Name Type Description Default <code>formatted_str</code> <code>str</code> <p>string specifying range</p> required <code>max_range</code> <code>int</code> <p>maximum number of items to create.</p> <code>500</code> <p>Returns:</p> Type Description <code>list[str]</code> <p>names in the specified range</p> <p>Examples:</p> <p><pre><code>exract_range('A103:A106')\n</code></pre> ['A103', 'A104', 'A105', 'A106'] <pre><code>exract_range('S203-S206')\n</code></pre> ['S203', 'S204', 'S205', 'S206'] <pre><code>exract_range('M00A,M00B')\n</code></pre> ['M00A', 'M00B']</p> Source code in <code>pyrevitlib/pyrevit/coreutils/__init__.py</code> <pre><code>def extract_range(formatted_str, max_range=500):\n    \"\"\"Extract range from formatted string.\n\n    String must be formatted as below\n    A103            No range\n    A103-A106       A103 to A106\n    A103:A106       A103 to A106\n    A103,A105a      A103 and A105a\n    A103;A105a      A103 and A105a\n\n    Args:\n        formatted_str (str): string specifying range\n        max_range (int): maximum number of items to create.\n\n    Returns:\n        (list[str]): names in the specified range\n\n    Examples:\n        ```python\n        exract_range('A103:A106')\n        ```\n        ['A103', 'A104', 'A105', 'A106']\n        ```python\n        exract_range('S203-S206')\n        ```\n        ['S203', 'S204', 'S205', 'S206']\n        ```python\n        exract_range('M00A,M00B')\n        ```\n        ['M00A', 'M00B']\n    \"\"\"\n    for rchar, rchartype in {'::': 'range', '--': 'range',\n                             ',': 'list', ';': 'list'}.items():\n        if rchar in formatted_str:\n            if rchartype == 'range' \\\n                    and formatted_str.count(rchar) == 1:\n                items = []\n                start, end = formatted_str.split(rchar)\n                assert len(start) == len(end), \\\n                    'Range start and end must have same length'\n                items.append(start)\n                item = increment_str(start, 1)\n                safe_counter = 0\n                while item != end:\n                    items.append(item)\n                    item = increment_str(item, 1)\n                    safe_counter += 1\n                    assert safe_counter &lt; max_range, 'Max range reached.'\n                items.append(end)\n                return items\n            elif rchartype == 'list':\n                return [x.strip() for x in formatted_str.split(rchar)]\n    return [formatted_str]\n</code></pre>"},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.check_encoding_bom","title":"<code>check_encoding_bom(filename, bom_bytes=codecs.BOM_UTF8)</code>","text":"<p>Check if given file contains the given BOM bytes at the start.</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>file path</p> required <code>bom_bytes</code> <code>bytes</code> <p>BOM bytes to check</p> <code>BOM_UTF8</code> Source code in <code>pyrevitlib/pyrevit/coreutils/__init__.py</code> <pre><code>def check_encoding_bom(filename, bom_bytes=codecs.BOM_UTF8):\n    \"\"\"Check if given file contains the given BOM bytes at the start.\n\n    Args:\n        filename (str): file path\n        bom_bytes (bytes, optional): BOM bytes to check\n    \"\"\"\n    with open(filename, 'rb') as rtfile:\n        return rtfile.read()[:len(bom_bytes)] == bom_bytes\n</code></pre>"},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.has_nonprintable","title":"<code>has_nonprintable(input_str)</code>","text":"<p>Check input string for non-printable characters.</p> <p>Parameters:</p> Name Type Description Default <code>input_str</code> <code>str</code> <p>input string</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if contains non-printable characters</p> Source code in <code>pyrevitlib/pyrevit/coreutils/__init__.py</code> <pre><code>def has_nonprintable(input_str):\n    \"\"\"Check input string for non-printable characters.\n\n    Args:\n        input_str (str): input string\n\n    Returns:\n        (bool): True if contains non-printable characters\n    \"\"\"\n    return any([x in input_str for x in UNICODE_NONPRINTABLE_CHARS])\n</code></pre>"},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.get_enum_values","title":"<code>get_enum_values(enum_type)</code>","text":"<p>Returns enum values.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/__init__.py</code> <pre><code>def get_enum_values(enum_type):\n    \"\"\"Returns enum values.\"\"\"\n    return framework.Enum.GetValues(enum_type)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.get_enum_value","title":"<code>get_enum_value(enum_type, value_string)</code>","text":"<p>Return enum value matching given value string (case insensitive).</p> Source code in <code>pyrevitlib/pyrevit/coreutils/__init__.py</code> <pre><code>def get_enum_value(enum_type, value_string):\n    \"\"\"Return enum value matching given value string (case insensitive).\"\"\"\n    for ftype in get_enum_values(enum_type):\n        if str(ftype).lower() == value_string.lower():\n            return ftype\n</code></pre>"},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.get_enum_none","title":"<code>get_enum_none(enum_type)</code>","text":"<p>Returns the None value in given Enum.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/__init__.py</code> <pre><code>def get_enum_none(enum_type):\n    \"\"\"Returns the None value in given Enum.\"\"\"\n    for val in get_enum_values(enum_type):\n        if str(val) == 'None':\n            return val\n</code></pre>"},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.extract_guid","title":"<code>extract_guid(source_str)</code>","text":"<p>Extract GUID number from a string.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/__init__.py</code> <pre><code>def extract_guid(source_str):\n    \"\"\"Extract GUID number from a string.\"\"\"\n    guid_match = re.match(\".*([0-9A-Fa-f]{8}\"\n                          \"[-][0-9A-Fa-f]{4}\"\n                          \"[-][0-9A-Fa-f]{4}\"\n                          \"[-][0-9A-Fa-f]{4}\"\n                          \"[-][0-9A-Fa-f]{12}).*\", source_str)\n    if guid_match:\n        return guid_match.groups()[0]\n</code></pre>"},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.format_hex_rgb","title":"<code>format_hex_rgb(rgb_value)</code>","text":"<p>Formats rgb value as #RGB value string.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/__init__.py</code> <pre><code>def format_hex_rgb(rgb_value):\n    \"\"\"Formats rgb value as #RGB value string.\"\"\"\n    if isinstance(rgb_value, str):\n        if not rgb_value.startswith('#'):\n            return '#%s' % rgb_value\n        else:\n            return rgb_value\n    elif isinstance(rgb_value, int):\n        return '#%x' % rgb_value\n</code></pre>"},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.new_uuid","title":"<code>new_uuid()</code>","text":"<p>Create a new UUID (using dotnet Guid.NewGuid).</p> Source code in <code>pyrevitlib/pyrevit/coreutils/__init__.py</code> <pre><code>def new_uuid():\n    \"\"\"Create a new UUID (using dotnet Guid.NewGuid).\"\"\"\n    # RE: https://github.com/pyrevitlabs/pyRevit/issues/413\n    # return uuid.uuid1()\n    return str(Guid.NewGuid())\n</code></pre>"},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.is_box_visible_on_screens","title":"<code>is_box_visible_on_screens(left, top, width, height)</code>","text":"<p>Check if given box is visible on any screen.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/__init__.py</code> <pre><code>def is_box_visible_on_screens(left, top, width, height):\n    \"\"\"Check if given box is visible on any screen.\"\"\"\n    bounds = \\\n        framework.Drawing.Rectangle(\n            framework.Convert.ToInt32(0 if math.isnan(left) else left),\n            framework.Convert.ToInt32(0 if math.isnan(top) else top),\n            framework.Convert.ToInt32(0 if math.isnan(width) else width),\n            framework.Convert.ToInt32(0 if math.isnan(height) else height)\n            )\n    for scr in framework.Forms.Screen.AllScreens:\n        if bounds.IntersectsWith(scr.Bounds):\n            return True\n    return False\n</code></pre>"},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.fuzzy_search_ratio","title":"<code>fuzzy_search_ratio(target_string, sfilter, regex=False)</code>","text":"<p>Match target string against the filter and return a match ratio.</p> <p>Parameters:</p> Name Type Description Default <code>target_string</code> <code>str</code> <p>target string</p> required <code>sfilter</code> <code>str</code> <p>search term</p> required <code>regex</code> <code>bool</code> <p>treat the sfilter as regular expression pattern</p> <code>False</code> <p>Returns:</p> Type Description <code>int</code> <p>integer between 0 to 100, with 100 being the exact match</p> Source code in <code>pyrevitlib/pyrevit/coreutils/__init__.py</code> <pre><code>def fuzzy_search_ratio(target_string, sfilter, regex=False):\n    \"\"\"Match target string against the filter and return a match ratio.\n\n    Args:\n        target_string (str): target string\n        sfilter (str): search term\n        regex (bool): treat the sfilter as regular expression pattern\n\n    Returns:\n        (int): integer between 0 to 100, with 100 being the exact match\n    \"\"\"\n    tstring = target_string\n\n    # process regex here. It's a yes no situation (100 or 0)\n    if regex:\n        try:\n            if re.search(sfilter, tstring):\n                return 100\n        except Exception:\n            pass\n        return 0\n\n    # 100 for identical matches\n    if sfilter == tstring:\n        return 100\n\n    # 98 to 99 reserved (2 scores)\n\n    # 97 for identical non-case-sensitive matches\n    lower_tstring = tstring.lower()\n    lower_sfilter_str = sfilter.lower()\n    if lower_sfilter_str == lower_tstring:\n        return 97\n\n    # 95  to 96 reserved (2 scores)\n\n    # 93 to 94 for inclusion matches\n    if sfilter in tstring:\n        return 94\n    if lower_sfilter_str in lower_tstring:\n        return 93\n\n    # 91  to 92 reserved (2 scores)\n\n    ## 80 to 90 for parts matches\n    tstring_parts = tstring.split()\n    sfilter_parts = sfilter.split()\n    if all(x in tstring_parts for x in sfilter_parts):\n        return 90\n\n    # 88 to 89 reserved (2 scores)\n\n    lower_tstring_parts = [x.lower() for x in tstring_parts]\n    lower_sfilter_parts = [x.lower() for x in sfilter_parts]\n    # exclude override\n    if any(x[0] == '!' for x in sfilter_parts):\n        exclude_indices = [\n            lower_sfilter_parts.index(i) for i in lower_sfilter_parts\n            if i[0] == '!'\n        ]\n        exclude_indices.reverse()\n        exclude_list = [\n            lower_sfilter_parts.pop(i) for i in exclude_indices\n        ]\n        for e in exclude_list:\n            # doesn't contain\n            if len(e) &gt; 1:\n                exclude_string = e[1:]\n                if any(\n                        [exclude_string in\n                        part for part in lower_tstring_parts]\n                ):\n                    return 0\n    if all(x in lower_tstring_parts for x in lower_sfilter_parts):\n        return 87\n\n    # 85 to 86 reserved (2 scores)\n\n    if all(x in tstring for x in sfilter_parts):\n        return 84\n\n    # 82 to 83 reserved (2 scores)\n\n    if all(x in lower_tstring for x in lower_sfilter_parts):\n        return 81\n\n    # 80 reserved\n\n    return 0\n</code></pre>"},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.get_exe_version","title":"<code>get_exe_version(exepath)</code>","text":"<p>Extract Product Version value from EXE file.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/__init__.py</code> <pre><code>def get_exe_version(exepath):\n    \"\"\"Extract Product Version value from EXE file.\"\"\"\n    version_info = framework.Diagnostics.FileVersionInfo.GetVersionInfo(exepath)\n    return version_info.ProductVersion\n</code></pre>"},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.get_reg_key","title":"<code>get_reg_key(key, subkey)</code>","text":"<p>Get value of the given Windows registry key and subkey.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>PyHKEY</code> <p>parent registry key</p> required <code>subkey</code> <code>str</code> <p>subkey path</p> required <p>Returns:</p> Type Description <code>PyHKEY</code> <p>registry key if found, None if not found</p> <p>Examples:</p> <p><pre><code>get_reg_key(wr.HKEY_CURRENT_USER, 'Control Panel/International')\n</code></pre> Source code in <code>pyrevitlib/pyrevit/coreutils/__init__.py</code> <pre><code>def get_reg_key(key, subkey):\n    \"\"\"Get value of the given Windows registry key and subkey.\n\n    Args:\n        key (PyHKEY): parent registry key\n        subkey (str): subkey path\n\n    Returns:\n        (PyHKEY): registry key if found, None if not found\n\n    Examples:\n        ```python\n        get_reg_key(wr.HKEY_CURRENT_USER, 'Control Panel/International')\n        ```\n        &lt;PyHKEY at 0x...&gt;\n    \"\"\"\n    try:\n        return wr.OpenKey(key, subkey, 0, wr.KEY_READ)\n    except Exception:\n        return None\n</code></pre>"},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.kill_tasks","title":"<code>kill_tasks(task_name)</code>","text":"<p>Kill running tasks matching task_name.</p> <p>Parameters:</p> Name Type Description Default <code>task_name</code> <code>str</code> <p>task name</p> required <p>Examples:</p> <pre><code>kill_tasks('Revit.exe')\n</code></pre> Source code in <code>pyrevitlib/pyrevit/coreutils/__init__.py</code> <pre><code>def kill_tasks(task_name):\n    \"\"\"Kill running tasks matching task_name.\n\n    Args:\n        task_name (str): task name\n\n    Examples:\n        ```python\n        kill_tasks('Revit.exe')\n        ```\n    \"\"\"\n    os.system(\"taskkill /f /im %s\" % task_name)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.int2hex_long","title":"<code>int2hex_long(number)</code>","text":"<p>Integer to hexadecimal string.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/__init__.py</code> <pre><code>def int2hex_long(number):\n    \"\"\"Integer to hexadecimal string.\"\"\"\n    # python 2 fix of addin 'L' to long integers\n    return hex(number).replace('L', '')\n</code></pre>"},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.hex2int_long","title":"<code>hex2int_long(hex_string)</code>","text":"<p>Hexadecimal string to Integer.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/__init__.py</code> <pre><code>def hex2int_long(hex_string):\n    \"\"\"Hexadecimal string to Integer.\"\"\"\n    # python 2 fix of addin 'L' to long integers\n    hex_string.replace('L', '')\n    return int(hex_string, 16)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.split_words","title":"<code>split_words(input_string)</code>","text":"<p>Splits given string by uppercase characters.</p> <p>Parameters:</p> Name Type Description Default <code>input_string</code> <code>str</code> <p>input string</p> required <p>Returns:</p> Type Description <code>list[str]</code> <p>split string</p> <p>Examples:</p> <p><pre><code>split_words(\"UIApplication_ApplicationClosing\")\n</code></pre> ['UIApplication', 'Application', 'Closing']</p> Source code in <code>pyrevitlib/pyrevit/coreutils/__init__.py</code> <pre><code>def split_words(input_string):\n    \"\"\"Splits given string by uppercase characters.\n\n    Args:\n        input_string (str): input string\n\n    Returns:\n        (list[str]): split string\n\n    Examples:\n        ```python\n        split_words(\"UIApplication_ApplicationClosing\")\n        ```\n        ['UIApplication', 'Application', 'Closing']\n    \"\"\"\n    parts = []\n    part = \"\"\n    for c in input_string:\n        if c.isalpha():\n            if c.isupper() and part and part[-1].islower():\n                if part:\n                    parts.append(part.strip())\n                part = c\n            else:\n                part += c\n    parts.append(part)\n    return parts\n</code></pre>"},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.get_paper_sizes","title":"<code>get_paper_sizes(printer_name=None)</code>","text":"<p>Get paper sizes defined on this system.</p> <p>Returns:</p> Type Description <code>list[]</code> <p>list of papersize instances</p> Source code in <code>pyrevitlib/pyrevit/coreutils/__init__.py</code> <pre><code>def get_paper_sizes(printer_name=None):\n    \"\"\"Get paper sizes defined on this system.\n\n    Returns:\n        (list[]): list of papersize instances\n    \"\"\"\n    print_settings = framework.Drawing.Printing.PrinterSettings()\n    if printer_name:\n        print_settings.PrinterName = printer_name\n    return list(print_settings.PaperSizes)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.get_integer_length","title":"<code>get_integer_length(number)</code>","text":"<p>Return digit length of given number.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/__init__.py</code> <pre><code>def get_integer_length(number):\n    \"\"\"Return digit length of given number.\"\"\"\n    return 1 if number == 0 else (math.floor(math.log10(number)) + 1)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/#pyrevit.coreutils.get_my_ip","title":"<code>get_my_ip()</code>","text":"<p>Return local ip address of this machine.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/__init__.py</code> <pre><code>def get_my_ip():\n    \"\"\"Return local ip address of this machine.\"\"\"\n    return socket.gethostbyname(socket.gethostname())\n</code></pre>"},{"location":"reference/pyrevit/coreutils/apidocs/","title":"apidocs","text":"<p>ApiDocs API wrapper.</p>"},{"location":"reference/pyrevit/coreutils/apidocs/#pyrevit.coreutils.apidocs-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/apidocs/#pyrevit.coreutils.apidocs.APIDOCS_INDEX","title":"<code>APIDOCS_INDEX = 'https://static.apidocs.co/apidocs_index.json'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/apidocs/#pyrevit.coreutils.apidocs.APIDOCS_LOOKUP_TEMPLATE","title":"<code>APIDOCS_LOOKUP_TEMPLATE = 'https://api.apidocs.co/resolve/{app_name}/{app_version}/?asset_id={asset_type}:{asset_id}'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/apidocs/#pyrevit.coreutils.apidocs.APIDocsApp","title":"<code>APIDocsApp = namedtuple('APIDocsApp', ['apptitle', 'appslug', 'versionslug'])</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/apidocs/#pyrevit.coreutils.apidocs-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/apidocs/#pyrevit.coreutils.apidocs.get_apps","title":"<code>get_apps()</code>","text":"<p>Returns a list of application available on apidocs.</p> <p>Returns:</p> Type Description <code>list[APIDocsApp]</code> <p>applictations documented on apidocs</p> Source code in <code>pyrevitlib/pyrevit/coreutils/apidocs.py</code> <pre><code>def get_apps():\n    \"\"\"Returns a list of application available on apidocs.\n\n    Returns:\n        (list[APIDocsApp]): applictations documented on apidocs\n    \"\"\"\n    apidoc_apps = []\n    for app in json.loads(coreutils.read_url(APIDOCS_INDEX)):\n        apidoc_apps.append(\n            APIDocsApp(\n                apptitle=app['apptitle'],\n                appslug=app['appslug'],\n                versionslug=app['versionslug']\n            )\n        )\n    return apidoc_apps\n</code></pre>"},{"location":"reference/pyrevit/coreutils/apidocs/#pyrevit.coreutils.apidocs.make_namespace_uri","title":"<code>make_namespace_uri(namespace, app_name='revit', app_version=str(HOST_APP.version))</code>","text":"<p>Returns the URI of a namespace.</p> <p>Parameters:</p> Name Type Description Default <code>namespace</code> <code>str</code> <p>name of the namespace</p> required <code>app_name</code> <code>str</code> <p>name of the application. Defaults to \"revit\".</p> <code>'revit'</code> <code>app_version</code> <code>str</code> <p>version of the application. Defaults to str(HOST_APP.version).</p> <code>str(version)</code> <p>Returns:</p> Type Description <code>str</code> <p>URI of the namespace</p> Source code in <code>pyrevitlib/pyrevit/coreutils/apidocs.py</code> <pre><code>def make_namespace_uri(namespace,\n                       app_name=\"revit\",\n                       app_version=str(HOST_APP.version)):\n    \"\"\"Returns the URI of a namespace.\n\n    Args:\n        namespace (str): name of the namespace\n        app_name (str, optional): name of the application. Defaults to \"revit\".\n        app_version (str, optional): version of the application. Defaults to str(HOST_APP.version).\n\n    Returns:\n        (str): URI of the namespace\n    \"\"\"\n    return _make_uri(\n        asset_type=\"N\",\n        asset_id=namespace,\n        app_name=app_name,\n        app_version=app_version,\n        )\n</code></pre>"},{"location":"reference/pyrevit/coreutils/apidocs/#pyrevit.coreutils.apidocs.make_type_uri","title":"<code>make_type_uri(type_name, app_name='revit', app_version=str(HOST_APP.version))</code>","text":"<p>Returns the URI of a type.</p> <p>Parameters:</p> Name Type Description Default <code>type_name</code> <code>str</code> <p>name of the type</p> required <code>app_name</code> <code>str</code> <p>name of the application. Defaults to \"revit\".</p> <code>'revit'</code> <code>app_version</code> <code>str</code> <p>version of the application. Defaults to str(HOST_APP.version).</p> <code>str(version)</code> <p>Returns:</p> Type Description <code>str</code> <p>URI of the type</p> Source code in <code>pyrevitlib/pyrevit/coreutils/apidocs.py</code> <pre><code>def make_type_uri(type_name,\n                  app_name=\"revit\",\n                  app_version=str(HOST_APP.version)):\n    \"\"\"Returns the URI of a type.\n\n    Args:\n        type_name (str): name of the type\n        app_name (str, optional): name of the application. Defaults to \"revit\".\n        app_version (str, optional): version of the application. Defaults to str(HOST_APP.version).\n\n    Returns:\n        (str): URI of the type\n    \"\"\"\n    return _make_uri(\n        asset_type=\"T\",\n        asset_id=type_name,\n        app_name=app_name,\n        app_version=app_version,\n        )\n</code></pre>"},{"location":"reference/pyrevit/coreutils/apidocs/#pyrevit.coreutils.apidocs.make_event_uri","title":"<code>make_event_uri(event_name, app_name='revit', app_version=str(HOST_APP.version))</code>","text":"<p>Returns the URI of an event.</p> <p>Parameters:</p> Name Type Description Default <code>event_name</code> <code>str</code> <p>name of the event.</p> required <code>app_name</code> <code>str</code> <p>name of the application. Defaults to \"revit\".</p> <code>'revit'</code> <code>app_version</code> <code>str</code> <p>version of the application.</p> <code>str(version)</code> <p>Returns:</p> Type Description <code>str</code> <p>URI of the event</p> Source code in <code>pyrevitlib/pyrevit/coreutils/apidocs.py</code> <pre><code>def make_event_uri(event_name,\n                   app_name=\"revit\",\n                   app_version=str(HOST_APP.version)):\n    \"\"\"Returns the URI of an event.\n\n    Args:\n        event_name (str): name of the event.\n        app_name (str): name of the application. Defaults to \"revit\".\n        app_version (str): version of the application.\n\n\n    Returns:\n        (str): URI of the event\n    \"\"\"\n    return _make_uri(\n        asset_type=\"E\",\n        asset_id=event_name,\n        app_name=app_name,\n        app_version=app_version,\n        )\n</code></pre>"},{"location":"reference/pyrevit/coreutils/appdata/","title":"appdata","text":"<p>Utility functions for creating data files within pyRevit environment.</p> <p>Most times, scripts need to save some data to share between different scripts that work on a similar topic or between script executions. This module provides the necessary and consistent mechanism for creating and maintaining such files.</p> <p>Examples:</p> <pre><code>from pyrevit.coreutils import appdata\nappdata.list_data_files()\n</code></pre>"},{"location":"reference/pyrevit/coreutils/appdata/#pyrevit.coreutils.appdata-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/appdata/#pyrevit.coreutils.appdata.mlogger","title":"<code>mlogger = logger.get_logger(__name__)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/appdata/#pyrevit.coreutils.appdata.TEMP_FILE_EXT","title":"<code>TEMP_FILE_EXT = 'tmp'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/appdata/#pyrevit.coreutils.appdata-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/appdata/#pyrevit.coreutils.appdata.get_universal_data_file","title":"<code>get_universal_data_file(file_id, file_ext, name_only=False)</code>","text":"<p>Get path to file that is shared between all host versions.</p> <p>These data files are not cleaned up at Revit restart. e.g pyrevit_pyrevitlabs_file_id.file_ext</p> <p>Parameters:</p> Name Type Description Default <code>file_id</code> <code>str</code> <p>Unique identifier for the file</p> required <code>file_ext</code> <code>str</code> <p>File extension</p> required <code>name_only</code> <code>bool</code> <p>If true, function returns file name only</p> <code>False</code> <p>Returns:</p> Type Description <code>str</code> <p>File name or full file path (depending on name_only)</p> Source code in <code>pyrevitlib/pyrevit/coreutils/appdata.py</code> <pre><code>def get_universal_data_file(file_id, file_ext, name_only=False):\n    \"\"\"Get path to file that is shared between all host versions.\n\n    These data files are not cleaned up at Revit restart.\n    e.g pyrevit_pyrevitlabs_file_id.file_ext\n\n    Args:\n        file_id (str): Unique identifier for the file\n        file_ext (str): File extension\n        name_only (bool): If true, function returns file name only\n\n    Returns:\n        (str): File name or full file path (depending on name_only)\n    \"\"\"\n    return _get_app_file(file_id, file_ext,\n                         filename_only=name_only, universal=True)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/appdata/#pyrevit.coreutils.appdata.get_data_file","title":"<code>get_data_file(file_id, file_ext, name_only=False)</code>","text":"<p>Get path to file that will not be cleaned up at Revit load.</p> <p>e.g pyrevit_2016_pyrevitlabs_file_id.file_ext</p> <p>Parameters:</p> Name Type Description Default <code>file_id</code> <code>str</code> <p>Unique identifier for the file</p> required <code>file_ext</code> <code>str</code> <p>File extension</p> required <code>name_only</code> <code>bool</code> <p>If true, function returns file name only</p> <code>False</code> <p>Returns:</p> Type Description <code>str</code> <p>File name or full file path (depending on name_only)</p> Source code in <code>pyrevitlib/pyrevit/coreutils/appdata.py</code> <pre><code>def get_data_file(file_id, file_ext, name_only=False):\n    \"\"\"Get path to file that will not be cleaned up at Revit load.\n\n    e.g pyrevit_2016_pyrevitlabs_file_id.file_ext\n\n    Args:\n        file_id (str): Unique identifier for the file\n        file_ext (str): File extension\n        name_only (bool): If true, function returns file name only\n\n    Returns:\n        (str): File name or full file path (depending on name_only)\n    \"\"\"\n    return _get_app_file(file_id, file_ext, filename_only=name_only)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/appdata/#pyrevit.coreutils.appdata.get_instance_data_file","title":"<code>get_instance_data_file(file_id, file_ext=TEMP_FILE_EXT, name_only=False)</code>","text":"<p>Get path to file that should be used by current instance only.</p> <p>These data files will be cleaned up at Revit restart. e.g pyrevit_2016_pyrevitlabs_2353_file_id.file_ext</p> <p>Parameters:</p> Name Type Description Default <code>file_id</code> <code>str</code> <p>Unique identifier for the file</p> required <code>file_ext</code> <code>str</code> <p>File extension</p> <code>TEMP_FILE_EXT</code> <code>name_only</code> <code>bool</code> <p>If true, function returns file name only</p> <code>False</code> <p>Returns:</p> Type Description <code>str</code> <p>File name or full file path (depending on name_only)</p> Source code in <code>pyrevitlib/pyrevit/coreutils/appdata.py</code> <pre><code>def get_instance_data_file(file_id, file_ext=TEMP_FILE_EXT, name_only=False):\n    \"\"\"Get path to file that should be used by current instance only.\n\n    These data files will be cleaned up at Revit restart.\n    e.g pyrevit_2016_pyrevitlabs_2353_file_id.file_ext\n\n    Args:\n        file_id (str): Unique identifier for the file\n        file_ext (str): File extension\n        name_only (bool): If true, function returns file name only\n\n    Returns:\n        (str): File name or full file path (depending on name_only)\n    \"\"\"\n    return _get_app_file(file_id, file_ext,\n                         filename_only=name_only, stamped=True)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/appdata/#pyrevit.coreutils.appdata.is_pyrevit_data_file","title":"<code>is_pyrevit_data_file(file_name)</code>","text":"<p>Check if given file is a pyRevit data file.</p> <p>Parameters:</p> Name Type Description Default <code>file_name</code> <code>str</code> <p>file name</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if file is a pyRevit data file</p> Source code in <code>pyrevitlib/pyrevit/coreutils/appdata.py</code> <pre><code>def is_pyrevit_data_file(file_name):\n    \"\"\"Check if given file is a pyRevit data file.\n\n    Args:\n        file_name (str): file name\n\n    Returns:\n        (bool): True if file is a pyRevit data file\n    \"\"\"\n    return pyrevit.PYREVIT_FILE_PREFIX in file_name\n</code></pre>"},{"location":"reference/pyrevit/coreutils/appdata/#pyrevit.coreutils.appdata.is_file_available","title":"<code>is_file_available(file_name, file_ext, universal=False)</code>","text":"<p>Check if given file is available within appdata directory.</p> <p>Parameters:</p> Name Type Description Default <code>file_name</code> <code>str</code> <p>file name</p> required <code>file_ext</code> <code>str</code> <p>file extension</p> required <code>universal</code> <code>bool</code> <p>Check against universal data files</p> <code>False</code> <p>Returns:</p> Type Description <code>str | bool</code> <p>file path if file is available</p> Source code in <code>pyrevitlib/pyrevit/coreutils/appdata.py</code> <pre><code>def is_file_available(file_name, file_ext, universal=False):\n    \"\"\"Check if given file is available within appdata directory.\n\n    Args:\n        file_name (str): file name\n        file_ext (str): file extension\n        universal (bool): Check against universal data files\n\n    Returns:\n        (str | bool): file path if file is available\n    \"\"\"\n    if universal:\n        full_filename = op.join(\n            pyrevit.PYREVIT_APP_DIR,\n            coreutils.make_canonical_name(file_name, file_ext))\n    else:\n        full_filename = op.join(\n            pyrevit.PYREVIT_VERSION_APP_DIR,\n            coreutils.make_canonical_name(file_name, file_ext))\n    if op.exists(full_filename):\n        return full_filename\n    else:\n        return False\n</code></pre>"},{"location":"reference/pyrevit/coreutils/appdata/#pyrevit.coreutils.appdata.is_data_file_available","title":"<code>is_data_file_available(file_id, file_ext)</code>","text":"<p>Check if given file is available within appdata directory.</p> <p>Parameters:</p> Name Type Description Default <code>file_id</code> <code>str</code> <p>data file id</p> required <code>file_ext</code> <code>str</code> <p>file extension</p> required <p>Returns:</p> Type Description <code>str</code> <p>file path if file is available</p> Source code in <code>pyrevitlib/pyrevit/coreutils/appdata.py</code> <pre><code>def is_data_file_available(file_id, file_ext):\n    \"\"\"Check if given file is available within appdata directory.\n\n    Args:\n        file_id (str): data file id\n        file_ext (str): file extension\n\n    Returns:\n        (str): file path if file is available\n    \"\"\"\n    full_filename = _get_app_file(file_id, file_ext)\n    if op.exists(full_filename):\n        return full_filename\n    else:\n        return False\n</code></pre>"},{"location":"reference/pyrevit/coreutils/appdata/#pyrevit.coreutils.appdata.list_data_files","title":"<code>list_data_files(file_ext, universal=False)</code>","text":"<p>List all data files with given extension.</p> <p>Parameters:</p> Name Type Description Default <code>file_ext</code> <code>str</code> <p>file extension</p> required <code>universal</code> <code>bool</code> <p>Check against universal data files</p> <code>False</code> <p>Returns:</p> Type Description <code>list[str]</code> <p>list of files</p> Source code in <code>pyrevitlib/pyrevit/coreutils/appdata.py</code> <pre><code>def list_data_files(file_ext, universal=False):\n    \"\"\"List all data files with given extension.\n\n    Args:\n        file_ext (str): file extension\n        universal (bool): Check against universal data files\n\n    Returns:\n        (list[str]): list of files\n    \"\"\"\n    return _list_app_files(\n        pyrevit.PYREVIT_FILE_PREFIX,\n        file_ext,\n        universal=universal\n        )\n</code></pre>"},{"location":"reference/pyrevit/coreutils/appdata/#pyrevit.coreutils.appdata.list_instance_data_files","title":"<code>list_instance_data_files(file_ext)</code>","text":"<p>List all data files associated with current session.</p> <p>Parameters:</p> Name Type Description Default <code>file_ext</code> <code>str</code> <p>data files with this extension will be listed only.</p> required <p>Returns:</p> Type Description <code>list[str]</code> <p>list of data files</p> Source code in <code>pyrevitlib/pyrevit/coreutils/appdata.py</code> <pre><code>def list_instance_data_files(file_ext):\n    \"\"\"List all data files associated with current session.\n\n    Args:\n        file_ext (str): data files with this extension will be listed only.\n\n    Returns:\n        (list[str]): list of data files\n\n    \"\"\"\n    return _list_app_files(pyrevit.PYREVIT_FILE_PREFIX_STAMPED, file_ext)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/appdata/#pyrevit.coreutils.appdata.find_data_files","title":"<code>find_data_files(file_ext)</code>","text":"<p>Find data files in all data files directories.</p> <p>Parameters:</p> Name Type Description Default <code>file_ext</code> <code>str</code> <p>data files with this extension will be listed only</p> required <p>Returns:</p> Type Description <code>list[str]</code> <p>list of files</p> Source code in <code>pyrevitlib/pyrevit/coreutils/appdata.py</code> <pre><code>def find_data_files(file_ext):\n    \"\"\"Find data files in all data files directories.\n\n    Args:\n        file_ext (str): data files with this extension will be listed only\n\n    Returns:\n        (list[str]): list of files\n    \"\"\"\n    all_datafiles = set()\n    for app_folder in _list_app_folders():\n        for appdata_file in os.listdir(app_folder):\n            file_naming_dict = _match_file(\n                op.basename(appdata_file)\n            )\n            if file_naming_dict \\\n                    and file_naming_dict['fname'].endswith(file_ext):\n                all_datafiles.add(\n                    op.join(app_folder, appdata_file)\n                    )\n    return all_datafiles\n</code></pre>"},{"location":"reference/pyrevit/coreutils/appdata/#pyrevit.coreutils.appdata.find_instance_data_files","title":"<code>find_instance_data_files(file_ext, instance_id)</code>","text":"<p>Find instance data files in all data files directories.</p> <p>Parameters:</p> Name Type Description Default <code>file_ext</code> <code>str</code> <p>data files with this extension will be listed only</p> required <code>instance_id</code> <code>int</code> <p>list data files for this instance id only</p> required <p>Returns:</p> Type Description <code>list[str]</code> <p>list of files</p> Source code in <code>pyrevitlib/pyrevit/coreutils/appdata.py</code> <pre><code>def find_instance_data_files(file_ext, instance_id):\n    \"\"\"Find instance data files in all data files directories.\n\n    Args:\n        file_ext (str): data files with this extension will be listed only\n        instance_id (int): list data files for this instance id only\n\n    Returns:\n        (list[str]): list of files\n    \"\"\"\n    # instance files names are like pyRevit_2018_14422_\n    instance_files = set()\n    for appdata_file in find_data_files(file_ext):\n        file_naming_dict = _match_file(\n            op.basename(appdata_file)\n        )\n        if 'pid' in file_naming_dict:\n            try:\n                pid = int(file_naming_dict['pid'])\n                if instance_id == pid:\n                    instance_files.add(appdata_file)\n            except Exception:\n                pass\n    return instance_files\n</code></pre>"},{"location":"reference/pyrevit/coreutils/appdata/#pyrevit.coreutils.appdata.garbage_data_file","title":"<code>garbage_data_file(file_path)</code>","text":"<p>Mark and remove the given appdata file.</p> <p>Current implementation removes the file immediately.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>path to the target file</p> required Source code in <code>pyrevitlib/pyrevit/coreutils/appdata.py</code> <pre><code>def garbage_data_file(file_path):\n    \"\"\"Mark and remove the given appdata file.\n\n    Current implementation removes the file immediately.\n\n    Args:\n        file_path (str): path to the target file\n    \"\"\"\n    _remove_app_file(file_path)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/appdata/#pyrevit.coreutils.appdata.cleanup_appdata_folder","title":"<code>cleanup_appdata_folder()</code>","text":"<p>Cleanup appdata folder of all temporary appdata files.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/appdata.py</code> <pre><code>def cleanup_appdata_folder():\n    \"\"\"Cleanup appdata folder of all temporary appdata files.\"\"\"\n    if EXEC_PARAMS.first_load:\n        hostapp_pids = \\\n            [x.ProcessId\n             for x in TargetApps.Revit.RevitController.ListRunningRevits()]\n        for appdata_file in os.listdir(pyrevit.PYREVIT_VERSION_APP_DIR):\n            file_naming_dict = _match_file(appdata_file)\n            if 'pid' in file_naming_dict:\n                try:\n                    pid = int(file_naming_dict['pid'])\n                    if pid not in hostapp_pids:\n                        _remove_app_file(\n                            op.join(pyrevit.PYREVIT_VERSION_APP_DIR,\n                                    appdata_file)\n                            )\n                except Exception:\n                    pass\n</code></pre>"},{"location":"reference/pyrevit/coreutils/applocales/","title":"applocales","text":"<p>Provide conversion services between python.locale and host languages.</p>"},{"location":"reference/pyrevit/coreutils/applocales/#pyrevit.coreutils.applocales-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/applocales/#pyrevit.coreutils.applocales.DEFAULT_LANG_DIR","title":"<code>DEFAULT_LANG_DIR = 'LTR'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/applocales/#pyrevit.coreutils.applocales.DEFAULT_LOCALE","title":"<code>DEFAULT_LOCALE = AppLocale(lang_type=ApplicationServices.LanguageType.English_USA, lang_name='English USA', locale_codes=['en_us', 'english'])</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/applocales/#pyrevit.coreutils.applocales.APP_LOCALES","title":"<code>APP_LOCALES = [DEFAULT_LOCALE, AppLocale(lang_type=ApplicationServices.LanguageType.German, lang_name='Deutsch', locale_codes=['de_de', 'german']), AppLocale(lang_type=ApplicationServices.LanguageType.Spanish, lang_name='espa\u00f1ol', locale_codes=['es_es', 'spanish']), AppLocale(lang_type=ApplicationServices.LanguageType.French, lang_name='fran\u00e7ais', locale_codes=['fr_fr', 'french']), AppLocale(lang_type=ApplicationServices.LanguageType.Italian, lang_name='italiano', locale_codes=['it_it', 'italian']), AppLocale(lang_type=ApplicationServices.LanguageType.Dutch, lang_name='Nederlands', locale_codes=['nl_nl', 'nl_be', 'dutch']), AppLocale(lang_type=ApplicationServices.LanguageType.Chinese_Simplified, lang_name='\u7b80\u4f53\u4e2d\u6587', locale_codes=['chinese_s', 'chinese']), AppLocale(lang_type=ApplicationServices.LanguageType.Chinese_Traditional, lang_name='\u7e41\u9ad4\u4e2d\u6587', locale_codes=['chinese_t', 'chinese']), AppLocale(lang_type=ApplicationServices.LanguageType.Japanese, lang_name='\u65e5\u672c\u8a9e', locale_codes=['ja', 'japanese']), AppLocale(lang_type=ApplicationServices.LanguageType.Korean, lang_name='\ud55c\uad6d\uc5b4', locale_codes=['ko', 'korean']), AppLocale(lang_type=ApplicationServices.LanguageType.Russian, lang_name='\u0420\u0443\u0441\u0441\u043a\u0438\u0439', locale_codes=['ru', 'russian']), AppLocale(lang_type=ApplicationServices.LanguageType.Czech, lang_name='\u010ce\u0161tina', locale_codes=['cs', 'czech']), AppLocale(lang_type=ApplicationServices.LanguageType.Polish, lang_name='Polski', locale_codes=['pl', 'polish']), AppLocale(lang_type=ApplicationServices.LanguageType.Hungarian, lang_name='Magyar', locale_codes=['hu', 'hungarian']), AppLocale(lang_type=ApplicationServices.LanguageType.Brazilian_Portuguese, lang_name='Portugu\u00eas do Brasil', locale_codes=['pt_br', 'portuguese_brazil', 'brazilian', 'portuguese', 'pt_pt'])]</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/applocales/#pyrevit.coreutils.applocales-classes","title":"Classes","text":""},{"location":"reference/pyrevit/coreutils/applocales/#pyrevit.coreutils.applocales.AppLocale","title":"<code>AppLocale(lang_type, locale_codes, lang_name=None, lang_dir=DEFAULT_LANG_DIR)</code>","text":"<p>               Bases: <code>object</code></p> <p>Type representing a language option.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/applocales.py</code> <pre><code>def __init__(self,\n             lang_type,\n             locale_codes,\n             lang_name=None,\n             lang_dir=DEFAULT_LANG_DIR):\n    if isinstance(lang_type, ApplicationServices.LanguageType):\n        self.lang_type = lang_type\n    elif isinstance(lang_type, str):\n        self.lang_type = lang_type\n    self.lang_name = lang_name\n    self.lang_dir = lang_dir\n    self.locale_codes = locale_codes\n    if self.locale_codes:\n        self.locale_code = self.locale_codes[0]\n</code></pre>"},{"location":"reference/pyrevit/coreutils/applocales/#pyrevit.coreutils.applocales.AppLocale-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/applocales/#pyrevit.coreutils.applocales.AppLocale.lang_type","title":"<code>lang_type = lang_type</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/applocales/#pyrevit.coreutils.applocales.AppLocale.lang_name","title":"<code>lang_name = lang_name</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/applocales/#pyrevit.coreutils.applocales.AppLocale.lang_dir","title":"<code>lang_dir = lang_dir</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/applocales/#pyrevit.coreutils.applocales.AppLocale.locale_codes","title":"<code>locale_codes = locale_codes</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/applocales/#pyrevit.coreutils.applocales.AppLocale.locale_code","title":"<code>locale_code = self.locale_codes[0]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/applocales/#pyrevit.coreutils.applocales-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/applocales/#pyrevit.coreutils.applocales.get_applocale_by_local_code","title":"<code>get_applocale_by_local_code(locale_code)</code>","text":"<p>Return application locale by locale code.</p> <p>Parameters:</p> Name Type Description Default <code>locale_code</code> <code>str</code> <p>locale code</p> required <p>Returns:</p> Type Description <code>AppLocale</code> <p>application locale</p> Source code in <code>pyrevitlib/pyrevit/coreutils/applocales.py</code> <pre><code>def get_applocale_by_local_code(locale_code):\n    \"\"\"Return application locale by locale code.\n\n    Args:\n        locale_code (str): locale code\n\n    Returns:\n        (AppLocale): application locale\n    \"\"\"\n    for applocale in APP_LOCALES:\n        if locale_code in applocale.locale_codes:\n            return applocale\n</code></pre>"},{"location":"reference/pyrevit/coreutils/applocales/#pyrevit.coreutils.applocales.get_applocale_by_lang_type","title":"<code>get_applocale_by_lang_type(lang_type)</code>","text":"<p>Return application locale by language type.</p> <p>Parameters:</p> Name Type Description Default <code>lang_type</code> <code>LanguageType | str</code> <p>language type</p> required <p>Returns:</p> Type Description <code>AppLocale</code> <p>application locale</p> Source code in <code>pyrevitlib/pyrevit/coreutils/applocales.py</code> <pre><code>def get_applocale_by_lang_type(lang_type):\n    \"\"\"Return application locale by language type.\n\n    Args:\n        lang_type (ApplicationServices.LanguageType | str): language type\n\n    Returns:\n        (AppLocale): application locale\n    \"\"\"\n    for applocale in APP_LOCALES:\n        if lang_type == applocale.lang_type:\n            return applocale\n</code></pre>"},{"location":"reference/pyrevit/coreutils/applocales/#pyrevit.coreutils.applocales.get_applocale_by_lang_name","title":"<code>get_applocale_by_lang_name(lang_name)</code>","text":"<p>Return application locale by language name.</p> <p>Parameters:</p> Name Type Description Default <code>lang_name</code> <code>str</code> <p>language name</p> required <p>Returns:</p> Type Description <code>AppLocale</code> <p>application locale</p> Source code in <code>pyrevitlib/pyrevit/coreutils/applocales.py</code> <pre><code>def get_applocale_by_lang_name(lang_name):\n    \"\"\"Return application locale by language name.\n\n    Args:\n        lang_name (str): language name\n\n    Returns:\n        (AppLocale): application locale\n    \"\"\"\n    for applocale in APP_LOCALES:\n        if lang_name in {applocale.lang_name, str(applocale.lang_type)}:\n            return applocale\n</code></pre>"},{"location":"reference/pyrevit/coreutils/applocales/#pyrevit.coreutils.applocales.get_current_applocale","title":"<code>get_current_applocale()</code>","text":"<p>Return the current locale.</p> <p>This is the user locale, if set, or the host application locale otherwise.</p> <p>Returns:</p> Type Description <code>AppLocale</code> <p>current locale</p> Source code in <code>pyrevitlib/pyrevit/coreutils/applocales.py</code> <pre><code>def get_current_applocale():\n    \"\"\"Return the current locale.\n\n    This is the user locale, if set, or the host application locale otherwise.\n\n    Returns:\n        (AppLocale): current locale\n    \"\"\"\n    if user_config.user_locale:\n        return get_applocale_by_local_code(user_config.user_locale)\n    return get_applocale_by_lang_type(HOST_APP.language)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/applocales/#pyrevit.coreutils.applocales.get_host_applocale","title":"<code>get_host_applocale()</code>","text":"<p>Return host application locale.</p> <p>Returns:</p> Type Description <code>AppLocale</code> <p>host application locale</p> Source code in <code>pyrevitlib/pyrevit/coreutils/applocales.py</code> <pre><code>def get_host_applocale():\n    \"\"\"Return host application locale.\n\n    Returns:\n        (AppLocale): host application locale\n    \"\"\"\n    return get_applocale_by_lang_type(HOST_APP.language)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/applocales/#pyrevit.coreutils.applocales.get_locale_string","title":"<code>get_locale_string(string_dict)</code>","text":"<p>Returns the correct string from given dict based on host language.</p> <p>Parameters:</p> Name Type Description Default <code>string_dict</code> <code>dict[str, str]</code> <p>dict of strings in various locales</p> required <p>Returns:</p> Type Description <code>str</code> <p>string in correct locale</p> <p>Examples:</p> <p><pre><code>data = {\"en_us\":\"Hello\", \"chinese_s\":\"\u4f60\u597d\"}\nfrom pyrevit.coreutils import applocales\n# assuming running Revit is Chinese\napplocales.get_locale_string(data)\n</code></pre> \"\u4f60\u597d\"</p> Source code in <code>pyrevitlib/pyrevit/coreutils/applocales.py</code> <pre><code>def get_locale_string(string_dict):\n    \"\"\"Returns the correct string from given dict based on host language.\n\n    Args:\n        string_dict (dict[str, str]): dict of strings in various locales\n\n    Returns:\n        (str): string in correct locale\n\n    Examples:\n        ```python\n        data = {\"en_us\":\"Hello\", \"chinese_s\":\"\u4f60\u597d\"}\n        from pyrevit.coreutils import applocales\n        # assuming running Revit is Chinese\n        applocales.get_locale_string(data)\n        ```\n        \"\u4f60\u597d\"\n    \"\"\"\n    applocale = get_applocale_by_local_code(user_config.user_locale)\n    if applocale:\n        local_codes = applocale.locale_codes + DEFAULT_LOCALE.locale_codes\n    else:\n        local_codes = DEFAULT_LOCALE.locale_codes\n    for locale_code in local_codes:\n        if locale_code in string_dict:\n            return string_dict[locale_code]\n</code></pre>"},{"location":"reference/pyrevit/coreutils/assmutils/","title":"assmutils","text":"<p>Utilities to load and manage assemblies.</p>"},{"location":"reference/pyrevit/coreutils/assmutils/#pyrevit.coreutils.assmutils-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/assmutils/#pyrevit.coreutils.assmutils.mlogger","title":"<code>mlogger = logger.get_logger(__name__)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/assmutils/#pyrevit.coreutils.assmutils-classes","title":"Classes","text":""},{"location":"reference/pyrevit/coreutils/assmutils/#pyrevit.coreutils.assmutils-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/assmutils/#pyrevit.coreutils.assmutils.load_asm","title":"<code>load_asm(asm_name)</code>","text":"<p>Load assembly by name into current domain.</p> <p>Parameters:</p> Name Type Description Default <code>asm_name</code> <code>str</code> <p>assembly name</p> required <p>Returns:</p> Type Description <code>Any</code> <p>the loaded assembly, None if not loaded.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/assmutils.py</code> <pre><code>def load_asm(asm_name):\n    \"\"\"Load assembly by name into current domain.\n\n    Args:\n        asm_name (str): assembly name\n\n    Returns:\n        (Any): the loaded assembly, None if not loaded.\n    \"\"\"\n    return framework.AppDomain.CurrentDomain.Load(asm_name)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/assmutils/#pyrevit.coreutils.assmutils.load_asm_file","title":"<code>load_asm_file(asm_file)</code>","text":"<p>Load assembly by file into current domain.</p> <p>Parameters:</p> Name Type Description Default <code>asm_file</code> <code>str</code> <p>assembly file path</p> required <p>Returns:</p> Type Description <code>Any</code> <p>loaded assembly, None if not loaded.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/assmutils.py</code> <pre><code>def load_asm_file(asm_file):\n    \"\"\"Load assembly by file into current domain.\n\n    Args:\n        asm_file (str): assembly file path\n\n    Returns:\n        (Any): loaded assembly, None if not loaded.\n    \"\"\"\n    try:\n        return framework.Assembly.LoadFrom(asm_file)\n    except Exception as load_ex:\n        mlogger.error(\"Error loading assembly @ %s | %s\", asm_file, load_ex)\n        return None\n</code></pre>"},{"location":"reference/pyrevit/coreutils/assmutils/#pyrevit.coreutils.assmutils.load_asm_files","title":"<code>load_asm_files(asm_files)</code>","text":"<p>Load assemblies by file into current domain.</p> <p>Parameters:</p> Name Type Description Default <code>asm_files</code> <code>list[str]</code> <p>list of assembly file paths</p> required Source code in <code>pyrevitlib/pyrevit/coreutils/assmutils.py</code> <pre><code>def load_asm_files(asm_files):\n    \"\"\"Load assemblies by file into current domain.\n\n    Args:\n        asm_files (list[str]): list of assembly file paths\n    \"\"\"\n    for asm_file in asm_files:\n        load_asm_file(asm_file)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/assmutils/#pyrevit.coreutils.assmutils.find_loaded_asm","title":"<code>find_loaded_asm(asm_info, by_partial_name=False, by_location=False)</code>","text":"<p>Find loaded assembly based on name, partial name, or location.</p> <p>Parameters:</p> Name Type Description Default <code>asm_info</code> <code>str</code> <p>name or location of the assembly</p> required <code>by_partial_name</code> <code>bool</code> <p>returns all assemblies that has the asm_info</p> <code>False</code> <code>by_location</code> <code>bool</code> <p>returns all assemblies matching location</p> <code>False</code> <p>Returns:</p> Type Description <code>list</code> <p>List of all loaded assemblies matching the provided info If only one assembly has been found, it returns the assembly. None will be returned if assembly is not loaded.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/assmutils.py</code> <pre><code>def find_loaded_asm(asm_info, by_partial_name=False, by_location=False):\n    \"\"\"Find loaded assembly based on name, partial name, or location.\n\n    Args:\n        asm_info (str): name or location of the assembly\n        by_partial_name (bool): returns all assemblies that has the asm_info\n        by_location (bool): returns all assemblies matching location\n\n    Returns:\n        (list): List of all loaded assemblies matching the provided info\n            If only one assembly has been found, it returns the assembly.\n            None will be returned if assembly is not loaded.\n    \"\"\"\n    loaded_asm_list = []\n    cleaned_asm_info = \\\n        asm_info.lower().replace('.' + framework.ASSEMBLY_FILE_TYPE, '')\n    for loaded_assembly in framework.AppDomain.CurrentDomain.GetAssemblies():\n        if by_partial_name:\n            if cleaned_asm_info in \\\n                    safe_strtype(loaded_assembly.GetName().Name).lower():\n                loaded_asm_list.append(loaded_assembly)\n        elif by_location:\n            try:\n                if op.normpath(loaded_assembly.Location) == \\\n                        op.normpath(asm_info):\n                    loaded_asm_list.append(loaded_assembly)\n            except Exception:\n                continue\n        elif cleaned_asm_info == \\\n                safe_strtype(loaded_assembly.GetName().Name).lower():\n            loaded_asm_list.append(loaded_assembly)\n\n    return loaded_asm_list\n</code></pre>"},{"location":"reference/pyrevit/coreutils/assmutils/#pyrevit.coreutils.assmutils.find_type_by_name","title":"<code>find_type_by_name(assembly, type_name)</code>","text":"<p>Find type by name in assembly.</p> <p>Parameters:</p> Name Type Description Default <code>assembly</code> <code>Assembly</code> <p>assembly to find the type in</p> required <code>type_name</code> <code>str</code> <p>type name</p> required <p>Returns:</p> Type Description <code>type</code> <p>type if found.</p> <p>Raises:</p> Type Description <code>PyRevitException</code> <p>if type not found.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/assmutils.py</code> <pre><code>def find_type_by_name(assembly, type_name):\n    \"\"\"Find type by name in assembly.\n\n    Args:\n        assembly (Assembly): assembly to find the type in\n        type_name (str): type name\n\n    Returns:\n        (type): type if found.\n\n    Raises:\n        PyRevitException: if type not found.\n    \"\"\"\n    base_class = assembly.GetType(type_name)\n    if base_class is not None:\n        return base_class\n    else:\n        raise PyRevitException('Can not find base class type: {}'\n                               .format(type_name))\n</code></pre>"},{"location":"reference/pyrevit/coreutils/charts/","title":"charts","text":"<p>Charts engine for output window.</p>"},{"location":"reference/pyrevit/coreutils/charts/#pyrevit.coreutils.charts-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/charts/#pyrevit.coreutils.charts.CHARTS_ENGINE","title":"<code>CHARTS_ENGINE = 'Chart.bundle.js'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/charts/#pyrevit.coreutils.charts.LINE_CHART","title":"<code>LINE_CHART = 'line'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/charts/#pyrevit.coreutils.charts.BAR_CHART","title":"<code>BAR_CHART = 'bar'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/charts/#pyrevit.coreutils.charts.RADAR_CHART","title":"<code>RADAR_CHART = 'radar'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/charts/#pyrevit.coreutils.charts.POLAR_CHART","title":"<code>POLAR_CHART = 'polarArea'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/charts/#pyrevit.coreutils.charts.PIE_CHART","title":"<code>PIE_CHART = 'pie'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/charts/#pyrevit.coreutils.charts.DOUGHNUT_CHART","title":"<code>DOUGHNUT_CHART = 'doughnut'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/charts/#pyrevit.coreutils.charts.BUBBLE_CHART","title":"<code>BUBBLE_CHART = 'bubble'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/charts/#pyrevit.coreutils.charts.CHARTS_JS_PATH","title":"<code>CHARTS_JS_PATH = 'https://cdnjs.cloudflare.com/ajax/libs/Chart.js/{version}/Chart.min.js'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/charts/#pyrevit.coreutils.charts.SCRIPT_TEMPLATE","title":"<code>SCRIPT_TEMPLATE = \"var ctx = document.getElementById('{canvas_id}').getContext('2d');var chart = new Chart(ctx, {canvas_code});\"</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/charts/#pyrevit.coreutils.charts-classes","title":"Classes","text":""},{"location":"reference/pyrevit/coreutils/charts/#pyrevit.coreutils.charts.PyRevitOutputChartOptions","title":"<code>PyRevitOutputChartOptions()</code>","text":"<p>               Bases: <code>object</code></p> <p>Chart options wrapper object.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/charts.py</code> <pre><code>def __init__(self):\n    pass\n</code></pre>"},{"location":"reference/pyrevit/coreutils/charts/#pyrevit.coreutils.charts.PyRevitOutputChartDataset","title":"<code>PyRevitOutputChartDataset(label)</code>","text":"<p>               Bases: <code>object</code></p> <p>Chart dataset wrapper object.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/charts.py</code> <pre><code>def __init__(self, label):\n    self.label = label\n    self.data = []\n    self.backgroundColor = ''\n</code></pre>"},{"location":"reference/pyrevit/coreutils/charts/#pyrevit.coreutils.charts.PyRevitOutputChartDataset-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/charts/#pyrevit.coreutils.charts.PyRevitOutputChartDataset.label","title":"<code>label = label</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/charts/#pyrevit.coreutils.charts.PyRevitOutputChartDataset.data","title":"<code>data = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/charts/#pyrevit.coreutils.charts.PyRevitOutputChartDataset.backgroundColor","title":"<code>backgroundColor = ''</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/charts/#pyrevit.coreutils.charts.PyRevitOutputChartDataset-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/charts/#pyrevit.coreutils.charts.PyRevitOutputChartDataset.set_color","title":"<code>set_color(*args)</code>","text":"<p>Set dataset color.</p> <p>Arguments are expected to be R, G, B, A values.</p> <p>Examples:</p> <pre><code>dataset_obj.set_color(0xFF, 0x8C, 0x8D, 0.8)\n</code></pre> Source code in <code>pyrevitlib/pyrevit/coreutils/charts.py</code> <pre><code>def set_color(self, *args):\n    \"\"\"Set dataset color.\n\n    Arguments are expected to be R, G, B, A values.\n\n    Examples:\n        ```python\n        dataset_obj.set_color(0xFF, 0x8C, 0x8D, 0.8)\n        ```\n    \"\"\"\n    if len(args) == 4:\n        self.backgroundColor = 'rgba({},{},{},{})'.format(args[0],\n                                                          args[1],\n                                                          args[2],\n                                                          args[3])\n    elif len(args) == 1:\n        self.backgroundColor = '{}'.format(args[0])\n</code></pre>"},{"location":"reference/pyrevit/coreutils/charts/#pyrevit.coreutils.charts.PyRevitOutputChartData","title":"<code>PyRevitOutputChartData()</code>","text":"<p>               Bases: <code>object</code></p> <p>Chart data wrapper object.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/charts.py</code> <pre><code>def __init__(self):\n    self.labels = ''\n    self.datasets = []\n</code></pre>"},{"location":"reference/pyrevit/coreutils/charts/#pyrevit.coreutils.charts.PyRevitOutputChartData-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/charts/#pyrevit.coreutils.charts.PyRevitOutputChartData.labels","title":"<code>labels = ''</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/charts/#pyrevit.coreutils.charts.PyRevitOutputChartData.datasets","title":"<code>datasets = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/charts/#pyrevit.coreutils.charts.PyRevitOutputChartData-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/charts/#pyrevit.coreutils.charts.PyRevitOutputChartData.new_dataset","title":"<code>new_dataset(dataset_label)</code>","text":"<p>Create new data set.</p> <p>Parameters:</p> Name Type Description Default <code>dataset_label</code> <code>str</code> <p>dataset label</p> required <p>Returns:</p> Type Description <code>PyRevitOutputChartDataset</code> <p>dataset wrapper object</p> <p>Examples:</p> <pre><code>chart.data.new_dataset('set_a')\n</code></pre> Source code in <code>pyrevitlib/pyrevit/coreutils/charts.py</code> <pre><code>def new_dataset(self, dataset_label):\n    \"\"\"Create new data set.\n\n    Args:\n        dataset_label (str): dataset label\n\n    Returns:\n        (PyRevitOutputChartDataset): dataset wrapper object\n\n    Examples:\n        ```python\n        chart.data.new_dataset('set_a')\n        ```\n    \"\"\"\n    new_dataset = PyRevitOutputChartDataset(dataset_label)\n    self.datasets.append(new_dataset)\n    return new_dataset\n</code></pre>"},{"location":"reference/pyrevit/coreutils/charts/#pyrevit.coreutils.charts.PyRevitOutputChart","title":"<code>PyRevitOutputChart(output, chart_type=LINE_CHART, version=None)</code>","text":"<p>               Bases: <code>object</code></p> <p>Chart wrapper object for output window.</p> <p>Attributes:</p> Name Type Description <code>output</code> <code>PyRevitOutputWindow</code> <p>output window wrapper object</p> <code>chart_type</code> <code>str</code> <p>chart type name</p> Source code in <code>pyrevitlib/pyrevit/coreutils/charts.py</code> <pre><code>def __init__(self, output, chart_type=LINE_CHART, version=None):\n    self._output = output\n    self._style = None\n    self._width = self._height = None\n    self._version = version or '2.8.0'\n\n    self.type = chart_type\n    self.data = PyRevitOutputChartData()\n\n    self.options = PyRevitOutputChartOptions()\n</code></pre>"},{"location":"reference/pyrevit/coreutils/charts/#pyrevit.coreutils.charts.PyRevitOutputChart-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/charts/#pyrevit.coreutils.charts.PyRevitOutputChart.type","title":"<code>type = chart_type</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/charts/#pyrevit.coreutils.charts.PyRevitOutputChart.data","title":"<code>data = PyRevitOutputChartData()</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/charts/#pyrevit.coreutils.charts.PyRevitOutputChart.options","title":"<code>options = PyRevitOutputChartOptions()</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/charts/#pyrevit.coreutils.charts.PyRevitOutputChart-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/charts/#pyrevit.coreutils.charts.PyRevitOutputChart.randomize_colors","title":"<code>randomize_colors()</code>","text":"<p>Randomize chart datasets colors.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/charts.py</code> <pre><code>def randomize_colors(self):\n    \"\"\"Randomize chart datasets colors.\"\"\"\n    if self.type in [POLAR_CHART, PIE_CHART, DOUGHNUT_CHART]:\n        for dataset in self.data.datasets:\n            dataset.backgroundColor = [random_rgba_color()\n                                       for _ in range(0, len(dataset.data))]\n    else:\n        for dataset in self.data.datasets:\n            dataset.backgroundColor = random_rgba_color()\n</code></pre>"},{"location":"reference/pyrevit/coreutils/charts/#pyrevit.coreutils.charts.PyRevitOutputChart.set_width","title":"<code>set_width(width)</code>","text":"<p>Set chart width on output window.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/charts.py</code> <pre><code>def set_width(self, width):\n    \"\"\"Set chart width on output window.\"\"\"\n    self._width = width\n</code></pre>"},{"location":"reference/pyrevit/coreutils/charts/#pyrevit.coreutils.charts.PyRevitOutputChart.set_height","title":"<code>set_height(height)</code>","text":"<p>Set chart height on output window.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/charts.py</code> <pre><code>def set_height(self, height):\n    \"\"\"Set chart height on output window.\"\"\"\n    self._height = height\n</code></pre>"},{"location":"reference/pyrevit/coreutils/charts/#pyrevit.coreutils.charts.PyRevitOutputChart.set_style","title":"<code>set_style(html_style)</code>","text":"<p>Set chart styling.</p> <p>Parameters:</p> Name Type Description Default <code>html_style</code> <code>str</code> <p>inline html css styling string</p> required <p>Examples:</p> <pre><code>chart.set_style('height:150px')\n</code></pre> Source code in <code>pyrevitlib/pyrevit/coreutils/charts.py</code> <pre><code>def set_style(self, html_style):\n    \"\"\"Set chart styling.\n\n    Args:\n        html_style (str): inline html css styling string\n\n    Examples:\n        ```python\n        chart.set_style('height:150px')\n        ```\n    \"\"\"\n    self._style = html_style\n</code></pre>"},{"location":"reference/pyrevit/coreutils/charts/#pyrevit.coreutils.charts.PyRevitOutputChart.draw","title":"<code>draw()</code>","text":"<p>Request chart to draw itself on output window.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/charts.py</code> <pre><code>def draw(self):\n    \"\"\"Request chart to draw itself on output window.\"\"\"\n    self._setup_charts()\n    # setup canvas\n    canvas_id = self._make_canvas_unique_id()\n    canvas_code = self._make_canvas_code(canvas_id)\n    self._output.print_html(canvas_code)\n    # make the code\n    js_code = self._make_charts_script(canvas_id)\n    self._output.inject_script(js_code, body=True)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/charts/#pyrevit.coreutils.charts-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/colors/","title":"colors","text":"<p>Colors constants.</p> <p>Provide RGB color constants and a colors dictionary with elements formatted: COLORS[colorname] = CONSTANT.</p> <p>Examples:</p> <p><pre><code>from pyrevit.coreutils import colors\ncolors.COLORS['black']\n</code></pre> <pre><code>colors.BLACK\n</code></pre>"},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.ALICEBLUE","title":"<code>ALICEBLUE = RGB(name='aliceblue', red=240, green=248, blue=255)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.ANTIQUEWHITE","title":"<code>ANTIQUEWHITE = RGB(name='antiquewhite', red=250, green=235, blue=215)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.ANTIQUEWHITE1","title":"<code>ANTIQUEWHITE1 = RGB(name='antiquewhite1', red=255, green=239, blue=219)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.ANTIQUEWHITE2","title":"<code>ANTIQUEWHITE2 = RGB(name='antiquewhite2', red=238, green=223, blue=204)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.ANTIQUEWHITE3","title":"<code>ANTIQUEWHITE3 = RGB(name='antiquewhite3', red=205, green=192, blue=176)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.ANTIQUEWHITE4","title":"<code>ANTIQUEWHITE4 = RGB(name='antiquewhite4', red=139, green=131, blue=120)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.AQUA","title":"<code>AQUA = RGB(name='aqua', red=0, green=255, blue=255)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.AQUAMARINE1","title":"<code>AQUAMARINE1 = RGB(name='aquamarine1', red=127, green=255, blue=212)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.AQUAMARINE2","title":"<code>AQUAMARINE2 = RGB(name='aquamarine2', red=118, green=238, blue=198)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.AQUAMARINE3","title":"<code>AQUAMARINE3 = RGB(name='aquamarine3', red=102, green=205, blue=170)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.AQUAMARINE4","title":"<code>AQUAMARINE4 = RGB(name='aquamarine4', red=69, green=139, blue=116)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.AZURE1","title":"<code>AZURE1 = RGB(name='azure1', red=240, green=255, blue=255)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.AZURE2","title":"<code>AZURE2 = RGB(name='azure2', red=224, green=238, blue=238)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.AZURE3","title":"<code>AZURE3 = RGB(name='azure3', red=193, green=205, blue=205)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.AZURE4","title":"<code>AZURE4 = RGB(name='azure4', red=131, green=139, blue=139)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.BANANA","title":"<code>BANANA = RGB(name='banana', red=227, green=207, blue=87)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.BEIGE","title":"<code>BEIGE = RGB(name='beige', red=245, green=245, blue=220)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.BISQUE1","title":"<code>BISQUE1 = RGB(name='bisque1', red=255, green=228, blue=196)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.BISQUE2","title":"<code>BISQUE2 = RGB(name='bisque2', red=238, green=213, blue=183)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.BISQUE3","title":"<code>BISQUE3 = RGB(name='bisque3', red=205, green=183, blue=158)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.BISQUE4","title":"<code>BISQUE4 = RGB(name='bisque4', red=139, green=125, blue=107)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.BLACK","title":"<code>BLACK = RGB(name='black', red=0, green=0, blue=0)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.BLANCHEDALMOND","title":"<code>BLANCHEDALMOND = RGB(name='blanchedalmond', red=255, green=235, blue=205)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.BLUE","title":"<code>BLUE = RGB(name='blue', red=0, green=0, blue=255)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.BLUE2","title":"<code>BLUE2 = RGB(name='blue2', red=0, green=0, blue=238)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.BLUE3","title":"<code>BLUE3 = RGB(name='blue3', red=0, green=0, blue=205)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.BLUE4","title":"<code>BLUE4 = RGB(name='blue4', red=0, green=0, blue=139)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.BLUEVIOLET","title":"<code>BLUEVIOLET = RGB(name='blueviolet', red=138, green=43, blue=226)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.BRICK","title":"<code>BRICK = RGB(name='brick', red=156, green=102, blue=31)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.BROWN","title":"<code>BROWN = RGB(name='brown', red=165, green=42, blue=42)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.BROWN1","title":"<code>BROWN1 = RGB(name='brown1', red=255, green=64, blue=64)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.BROWN2","title":"<code>BROWN2 = RGB(name='brown2', red=238, green=59, blue=59)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.BROWN3","title":"<code>BROWN3 = RGB(name='brown3', red=205, green=51, blue=51)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.BROWN4","title":"<code>BROWN4 = RGB(name='brown4', red=139, green=35, blue=35)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.BURLYWOOD","title":"<code>BURLYWOOD = RGB(name='burlywood', red=222, green=184, blue=135)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.BURLYWOOD1","title":"<code>BURLYWOOD1 = RGB(name='burlywood1', red=255, green=211, blue=155)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.BURLYWOOD2","title":"<code>BURLYWOOD2 = RGB(name='burlywood2', red=238, green=197, blue=145)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.BURLYWOOD3","title":"<code>BURLYWOOD3 = RGB(name='burlywood3', red=205, green=170, blue=125)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.BURLYWOOD4","title":"<code>BURLYWOOD4 = RGB(name='burlywood4', red=139, green=115, blue=85)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.BURNTSIENNA","title":"<code>BURNTSIENNA = RGB(name='burntsienna', red=138, green=54, blue=15)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.BURNTUMBER","title":"<code>BURNTUMBER = RGB(name='burntumber', red=138, green=51, blue=36)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.CADETBLUE","title":"<code>CADETBLUE = RGB(name='cadetblue', red=95, green=158, blue=160)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.CADETBLUE1","title":"<code>CADETBLUE1 = RGB(name='cadetblue1', red=152, green=245, blue=255)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.CADETBLUE2","title":"<code>CADETBLUE2 = RGB(name='cadetblue2', red=142, green=229, blue=238)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.CADETBLUE3","title":"<code>CADETBLUE3 = RGB(name='cadetblue3', red=122, green=197, blue=205)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.CADETBLUE4","title":"<code>CADETBLUE4 = RGB(name='cadetblue4', red=83, green=134, blue=139)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.CADMIUMORANGE","title":"<code>CADMIUMORANGE = RGB(name='cadmiumorange', red=255, green=97, blue=3)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.CADMIUMYELLOW","title":"<code>CADMIUMYELLOW = RGB(name='cadmiumyellow', red=255, green=153, blue=18)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.CARROT","title":"<code>CARROT = RGB(name='carrot', red=237, green=145, blue=33)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.CHARTREUSE1","title":"<code>CHARTREUSE1 = RGB(name='chartreuse1', red=127, green=255, blue=0)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.CHARTREUSE2","title":"<code>CHARTREUSE2 = RGB(name='chartreuse2', red=118, green=238, blue=0)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.CHARTREUSE3","title":"<code>CHARTREUSE3 = RGB(name='chartreuse3', red=102, green=205, blue=0)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.CHARTREUSE4","title":"<code>CHARTREUSE4 = RGB(name='chartreuse4', red=69, green=139, blue=0)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.CHOCOLATE","title":"<code>CHOCOLATE = RGB(name='chocolate', red=210, green=105, blue=30)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.CHOCOLATE1","title":"<code>CHOCOLATE1 = RGB(name='chocolate1', red=255, green=127, blue=36)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.CHOCOLATE2","title":"<code>CHOCOLATE2 = RGB(name='chocolate2', red=238, green=118, blue=33)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.CHOCOLATE3","title":"<code>CHOCOLATE3 = RGB(name='chocolate3', red=205, green=102, blue=29)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.CHOCOLATE4","title":"<code>CHOCOLATE4 = RGB(name='chocolate4', red=139, green=69, blue=19)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.COBALT","title":"<code>COBALT = RGB(name='cobalt', red=61, green=89, blue=171)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.COBALTGREEN","title":"<code>COBALTGREEN = RGB(name='cobaltgreen', red=61, green=145, blue=64)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.COLDGREY","title":"<code>COLDGREY = RGB(name='coldgrey', red=128, green=138, blue=135)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.CORAL","title":"<code>CORAL = RGB(name='coral', red=255, green=127, blue=80)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.CORAL1","title":"<code>CORAL1 = RGB(name='coral1', red=255, green=114, blue=86)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.CORAL2","title":"<code>CORAL2 = RGB(name='coral2', red=238, green=106, blue=80)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.CORAL3","title":"<code>CORAL3 = RGB(name='coral3', red=205, green=91, blue=69)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.CORAL4","title":"<code>CORAL4 = RGB(name='coral4', red=139, green=62, blue=47)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.CORNFLOWERBLUE","title":"<code>CORNFLOWERBLUE = RGB(name='cornflowerblue', red=100, green=149, blue=237)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.CORNSILK1","title":"<code>CORNSILK1 = RGB(name='cornsilk1', red=255, green=248, blue=220)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.CORNSILK2","title":"<code>CORNSILK2 = RGB(name='cornsilk2', red=238, green=232, blue=205)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.CORNSILK3","title":"<code>CORNSILK3 = RGB(name='cornsilk3', red=205, green=200, blue=177)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.CORNSILK4","title":"<code>CORNSILK4 = RGB(name='cornsilk4', red=139, green=136, blue=120)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.CRIMSON","title":"<code>CRIMSON = RGB(name='crimson', red=220, green=20, blue=60)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.CYAN2","title":"<code>CYAN2 = RGB(name='cyan2', red=0, green=238, blue=238)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.CYAN3","title":"<code>CYAN3 = RGB(name='cyan3', red=0, green=205, blue=205)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.CYAN4","title":"<code>CYAN4 = RGB(name='cyan4', red=0, green=139, blue=139)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.DARKGOLDENROD","title":"<code>DARKGOLDENROD = RGB(name='darkgoldenrod', red=184, green=134, blue=11)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.DARKGOLDENROD1","title":"<code>DARKGOLDENROD1 = RGB(name='darkgoldenrod1', red=255, green=185, blue=15)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.DARKGOLDENROD2","title":"<code>DARKGOLDENROD2 = RGB(name='darkgoldenrod2', red=238, green=173, blue=14)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.DARKGOLDENROD3","title":"<code>DARKGOLDENROD3 = RGB(name='darkgoldenrod3', red=205, green=149, blue=12)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.DARKGOLDENROD4","title":"<code>DARKGOLDENROD4 = RGB(name='darkgoldenrod4', red=139, green=101, blue=8)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.DARKGRAY","title":"<code>DARKGRAY = RGB(name='darkgray', red=169, green=169, blue=169)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.DARKGREEN","title":"<code>DARKGREEN = RGB(name='darkgreen', red=0, green=100, blue=0)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.DARKKHAKI","title":"<code>DARKKHAKI = RGB(name='darkkhaki', red=189, green=183, blue=107)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.DARKOLIVEGREEN","title":"<code>DARKOLIVEGREEN = RGB(name='darkolivegreen', red=85, green=107, blue=47)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.DARKOLIVEGREEN1","title":"<code>DARKOLIVEGREEN1 = RGB(name='darkolivegreen1', red=202, green=255, blue=112)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.DARKOLIVEGREEN2","title":"<code>DARKOLIVEGREEN2 = RGB(name='darkolivegreen2', red=188, green=238, blue=104)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.DARKOLIVEGREEN3","title":"<code>DARKOLIVEGREEN3 = RGB(name='darkolivegreen3', red=162, green=205, blue=90)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.DARKOLIVEGREEN4","title":"<code>DARKOLIVEGREEN4 = RGB(name='darkolivegreen4', red=110, green=139, blue=61)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.DARKORANGE","title":"<code>DARKORANGE = RGB(name='darkorange', red=255, green=140, blue=0)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.DARKORANGE1","title":"<code>DARKORANGE1 = RGB(name='darkorange1', red=255, green=127, blue=0)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.DARKORANGE2","title":"<code>DARKORANGE2 = RGB(name='darkorange2', red=238, green=118, blue=0)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.DARKORANGE3","title":"<code>DARKORANGE3 = RGB(name='darkorange3', red=205, green=102, blue=0)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.DARKORANGE4","title":"<code>DARKORANGE4 = RGB(name='darkorange4', red=139, green=69, blue=0)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.DARKORCHID","title":"<code>DARKORCHID = RGB(name='darkorchid', red=153, green=50, blue=204)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.DARKORCHID1","title":"<code>DARKORCHID1 = RGB(name='darkorchid1', red=191, green=62, blue=255)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.DARKORCHID2","title":"<code>DARKORCHID2 = RGB(name='darkorchid2', red=178, green=58, blue=238)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.DARKORCHID3","title":"<code>DARKORCHID3 = RGB(name='darkorchid3', red=154, green=50, blue=205)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.DARKORCHID4","title":"<code>DARKORCHID4 = RGB(name='darkorchid4', red=104, green=34, blue=139)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.DARKSALMON","title":"<code>DARKSALMON = RGB(name='darksalmon', red=233, green=150, blue=122)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.DARKSEAGREEN","title":"<code>DARKSEAGREEN = RGB(name='darkseagreen', red=143, green=188, blue=143)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.DARKSEAGREEN1","title":"<code>DARKSEAGREEN1 = RGB(name='darkseagreen1', red=193, green=255, blue=193)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.DARKSEAGREEN2","title":"<code>DARKSEAGREEN2 = RGB(name='darkseagreen2', red=180, green=238, blue=180)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.DARKSEAGREEN3","title":"<code>DARKSEAGREEN3 = RGB(name='darkseagreen3', red=155, green=205, blue=155)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.DARKSEAGREEN4","title":"<code>DARKSEAGREEN4 = RGB(name='darkseagreen4', red=105, green=139, blue=105)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.DARKSLATEBLUE","title":"<code>DARKSLATEBLUE = RGB(name='darkslateblue', red=72, green=61, blue=139)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.DARKSLATEGRAY","title":"<code>DARKSLATEGRAY = RGB(name='darkslategray', red=47, green=79, blue=79)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.DARKSLATEGRAY1","title":"<code>DARKSLATEGRAY1 = RGB(name='darkslategray1', red=151, green=255, blue=255)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.DARKSLATEGRAY2","title":"<code>DARKSLATEGRAY2 = RGB(name='darkslategray2', red=141, green=238, blue=238)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.DARKSLATEGRAY3","title":"<code>DARKSLATEGRAY3 = RGB(name='darkslategray3', red=121, green=205, blue=205)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.DARKSLATEGRAY4","title":"<code>DARKSLATEGRAY4 = RGB(name='darkslategray4', red=82, green=139, blue=139)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.DARKTURQUOISE","title":"<code>DARKTURQUOISE = RGB(name='darkturquoise', red=0, green=206, blue=209)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.DARKVIOLET","title":"<code>DARKVIOLET = RGB(name='darkviolet', red=148, green=0, blue=211)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.DEEPPINK1","title":"<code>DEEPPINK1 = RGB(name='deeppink1', red=255, green=20, blue=147)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.DEEPPINK2","title":"<code>DEEPPINK2 = RGB(name='deeppink2', red=238, green=18, blue=137)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.DEEPPINK3","title":"<code>DEEPPINK3 = RGB(name='deeppink3', red=205, green=16, blue=118)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.DEEPPINK4","title":"<code>DEEPPINK4 = RGB(name='deeppink4', red=139, green=10, blue=80)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.DEEPSKYBLUE1","title":"<code>DEEPSKYBLUE1 = RGB(name='deepskyblue1', red=0, green=191, blue=255)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.DEEPSKYBLUE2","title":"<code>DEEPSKYBLUE2 = RGB(name='deepskyblue2', red=0, green=178, blue=238)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.DEEPSKYBLUE3","title":"<code>DEEPSKYBLUE3 = RGB(name='deepskyblue3', red=0, green=154, blue=205)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.DEEPSKYBLUE4","title":"<code>DEEPSKYBLUE4 = RGB(name='deepskyblue4', red=0, green=104, blue=139)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.DIMGRAY","title":"<code>DIMGRAY = RGB(name='dimgray', red=105, green=105, blue=105)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.DODGERBLUE1","title":"<code>DODGERBLUE1 = RGB(name='dodgerblue1', red=30, green=144, blue=255)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.DODGERBLUE2","title":"<code>DODGERBLUE2 = RGB(name='dodgerblue2', red=28, green=134, blue=238)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.DODGERBLUE3","title":"<code>DODGERBLUE3 = RGB(name='dodgerblue3', red=24, green=116, blue=205)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.DODGERBLUE4","title":"<code>DODGERBLUE4 = RGB(name='dodgerblue4', red=16, green=78, blue=139)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.EGGSHELL","title":"<code>EGGSHELL = RGB(name='eggshell', red=252, green=230, blue=201)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.EMERALDGREEN","title":"<code>EMERALDGREEN = RGB(name='emeraldgreen', red=0, green=201, blue=87)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.FIREBRICK","title":"<code>FIREBRICK = RGB(name='firebrick', red=178, green=34, blue=34)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.FIREBRICK1","title":"<code>FIREBRICK1 = RGB(name='firebrick1', red=255, green=48, blue=48)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.FIREBRICK2","title":"<code>FIREBRICK2 = RGB(name='firebrick2', red=238, green=44, blue=44)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.FIREBRICK3","title":"<code>FIREBRICK3 = RGB(name='firebrick3', red=205, green=38, blue=38)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.FIREBRICK4","title":"<code>FIREBRICK4 = RGB(name='firebrick4', red=139, green=26, blue=26)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.FLESH","title":"<code>FLESH = RGB(name='flesh', red=255, green=125, blue=64)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.FLORALWHITE","title":"<code>FLORALWHITE = RGB(name='floralwhite', red=255, green=250, blue=240)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.FORESTGREEN","title":"<code>FORESTGREEN = RGB(name='forestgreen', red=34, green=139, blue=34)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GAINSBORO","title":"<code>GAINSBORO = RGB(name='gainsboro', red=220, green=220, blue=220)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GHOSTWHITE","title":"<code>GHOSTWHITE = RGB(name='ghostwhite', red=248, green=248, blue=255)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GOLD1","title":"<code>GOLD1 = RGB(name='gold1', red=255, green=215, blue=0)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GOLD2","title":"<code>GOLD2 = RGB(name='gold2', red=238, green=201, blue=0)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GOLD3","title":"<code>GOLD3 = RGB(name='gold3', red=205, green=173, blue=0)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GOLD4","title":"<code>GOLD4 = RGB(name='gold4', red=139, green=117, blue=0)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GOLDENROD","title":"<code>GOLDENROD = RGB(name='goldenrod', red=218, green=165, blue=32)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GOLDENROD1","title":"<code>GOLDENROD1 = RGB(name='goldenrod1', red=255, green=193, blue=37)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GOLDENROD2","title":"<code>GOLDENROD2 = RGB(name='goldenrod2', red=238, green=180, blue=34)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GOLDENROD3","title":"<code>GOLDENROD3 = RGB(name='goldenrod3', red=205, green=155, blue=29)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GOLDENROD4","title":"<code>GOLDENROD4 = RGB(name='goldenrod4', red=139, green=105, blue=20)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY","title":"<code>GRAY = RGB(name='gray', red=128, green=128, blue=128)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY1","title":"<code>GRAY1 = RGB(name='gray1', red=3, green=3, blue=3)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY10","title":"<code>GRAY10 = RGB(name='gray10', red=26, green=26, blue=26)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY11","title":"<code>GRAY11 = RGB(name='gray11', red=28, green=28, blue=28)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY12","title":"<code>GRAY12 = RGB(name='gray12', red=31, green=31, blue=31)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY13","title":"<code>GRAY13 = RGB(name='gray13', red=33, green=33, blue=33)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY14","title":"<code>GRAY14 = RGB(name='gray14', red=36, green=36, blue=36)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY15","title":"<code>GRAY15 = RGB(name='gray15', red=38, green=38, blue=38)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY16","title":"<code>GRAY16 = RGB(name='gray16', red=41, green=41, blue=41)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY17","title":"<code>GRAY17 = RGB(name='gray17', red=43, green=43, blue=43)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY18","title":"<code>GRAY18 = RGB(name='gray18', red=46, green=46, blue=46)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY19","title":"<code>GRAY19 = RGB(name='gray19', red=48, green=48, blue=48)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY2","title":"<code>GRAY2 = RGB(name='gray2', red=5, green=5, blue=5)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY20","title":"<code>GRAY20 = RGB(name='gray20', red=51, green=51, blue=51)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY21","title":"<code>GRAY21 = RGB(name='gray21', red=54, green=54, blue=54)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY22","title":"<code>GRAY22 = RGB(name='gray22', red=56, green=56, blue=56)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY23","title":"<code>GRAY23 = RGB(name='gray23', red=59, green=59, blue=59)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY24","title":"<code>GRAY24 = RGB(name='gray24', red=61, green=61, blue=61)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY25","title":"<code>GRAY25 = RGB(name='gray25', red=64, green=64, blue=64)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY26","title":"<code>GRAY26 = RGB(name='gray26', red=66, green=66, blue=66)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY27","title":"<code>GRAY27 = RGB(name='gray27', red=69, green=69, blue=69)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY28","title":"<code>GRAY28 = RGB(name='gray28', red=71, green=71, blue=71)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY29","title":"<code>GRAY29 = RGB(name='gray29', red=74, green=74, blue=74)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY3","title":"<code>GRAY3 = RGB(name='gray3', red=8, green=8, blue=8)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY30","title":"<code>GRAY30 = RGB(name='gray30', red=77, green=77, blue=77)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY31","title":"<code>GRAY31 = RGB(name='gray31', red=79, green=79, blue=79)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY32","title":"<code>GRAY32 = RGB(name='gray32', red=82, green=82, blue=82)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY33","title":"<code>GRAY33 = RGB(name='gray33', red=84, green=84, blue=84)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY34","title":"<code>GRAY34 = RGB(name='gray34', red=87, green=87, blue=87)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY35","title":"<code>GRAY35 = RGB(name='gray35', red=89, green=89, blue=89)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY36","title":"<code>GRAY36 = RGB(name='gray36', red=92, green=92, blue=92)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY37","title":"<code>GRAY37 = RGB(name='gray37', red=94, green=94, blue=94)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY38","title":"<code>GRAY38 = RGB(name='gray38', red=97, green=97, blue=97)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY39","title":"<code>GRAY39 = RGB(name='gray39', red=99, green=99, blue=99)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY4","title":"<code>GRAY4 = RGB(name='gray4', red=10, green=10, blue=10)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY40","title":"<code>GRAY40 = RGB(name='gray40', red=102, green=102, blue=102)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY42","title":"<code>GRAY42 = RGB(name='gray42', red=107, green=107, blue=107)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY43","title":"<code>GRAY43 = RGB(name='gray43', red=110, green=110, blue=110)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY44","title":"<code>GRAY44 = RGB(name='gray44', red=112, green=112, blue=112)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY45","title":"<code>GRAY45 = RGB(name='gray45', red=115, green=115, blue=115)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY46","title":"<code>GRAY46 = RGB(name='gray46', red=117, green=117, blue=117)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY47","title":"<code>GRAY47 = RGB(name='gray47', red=120, green=120, blue=120)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY48","title":"<code>GRAY48 = RGB(name='gray48', red=122, green=122, blue=122)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY49","title":"<code>GRAY49 = RGB(name='gray49', red=125, green=125, blue=125)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY5","title":"<code>GRAY5 = RGB(name='gray5', red=13, green=13, blue=13)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY50","title":"<code>GRAY50 = RGB(name='gray50', red=127, green=127, blue=127)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY51","title":"<code>GRAY51 = RGB(name='gray51', red=130, green=130, blue=130)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY52","title":"<code>GRAY52 = RGB(name='gray52', red=133, green=133, blue=133)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY53","title":"<code>GRAY53 = RGB(name='gray53', red=135, green=135, blue=135)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY54","title":"<code>GRAY54 = RGB(name='gray54', red=138, green=138, blue=138)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY55","title":"<code>GRAY55 = RGB(name='gray55', red=140, green=140, blue=140)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY56","title":"<code>GRAY56 = RGB(name='gray56', red=143, green=143, blue=143)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY57","title":"<code>GRAY57 = RGB(name='gray57', red=145, green=145, blue=145)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY58","title":"<code>GRAY58 = RGB(name='gray58', red=148, green=148, blue=148)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY59","title":"<code>GRAY59 = RGB(name='gray59', red=150, green=150, blue=150)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY6","title":"<code>GRAY6 = RGB(name='gray6', red=15, green=15, blue=15)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY60","title":"<code>GRAY60 = RGB(name='gray60', red=153, green=153, blue=153)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY61","title":"<code>GRAY61 = RGB(name='gray61', red=156, green=156, blue=156)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY62","title":"<code>GRAY62 = RGB(name='gray62', red=158, green=158, blue=158)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY63","title":"<code>GRAY63 = RGB(name='gray63', red=161, green=161, blue=161)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY64","title":"<code>GRAY64 = RGB(name='gray64', red=163, green=163, blue=163)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY65","title":"<code>GRAY65 = RGB(name='gray65', red=166, green=166, blue=166)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY66","title":"<code>GRAY66 = RGB(name='gray66', red=168, green=168, blue=168)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY67","title":"<code>GRAY67 = RGB(name='gray67', red=171, green=171, blue=171)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY68","title":"<code>GRAY68 = RGB(name='gray68', red=173, green=173, blue=173)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY69","title":"<code>GRAY69 = RGB(name='gray69', red=176, green=176, blue=176)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY7","title":"<code>GRAY7 = RGB(name='gray7', red=18, green=18, blue=18)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY70","title":"<code>GRAY70 = RGB(name='gray70', red=179, green=179, blue=179)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY71","title":"<code>GRAY71 = RGB(name='gray71', red=181, green=181, blue=181)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY72","title":"<code>GRAY72 = RGB(name='gray72', red=184, green=184, blue=184)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY73","title":"<code>GRAY73 = RGB(name='gray73', red=186, green=186, blue=186)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY74","title":"<code>GRAY74 = RGB(name='gray74', red=189, green=189, blue=189)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY75","title":"<code>GRAY75 = RGB(name='gray75', red=191, green=191, blue=191)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY76","title":"<code>GRAY76 = RGB(name='gray76', red=194, green=194, blue=194)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY77","title":"<code>GRAY77 = RGB(name='gray77', red=196, green=196, blue=196)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY78","title":"<code>GRAY78 = RGB(name='gray78', red=199, green=199, blue=199)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY79","title":"<code>GRAY79 = RGB(name='gray79', red=201, green=201, blue=201)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY8","title":"<code>GRAY8 = RGB(name='gray8', red=20, green=20, blue=20)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY80","title":"<code>GRAY80 = RGB(name='gray80', red=204, green=204, blue=204)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY81","title":"<code>GRAY81 = RGB(name='gray81', red=207, green=207, blue=207)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY82","title":"<code>GRAY82 = RGB(name='gray82', red=209, green=209, blue=209)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY83","title":"<code>GRAY83 = RGB(name='gray83', red=212, green=212, blue=212)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY84","title":"<code>GRAY84 = RGB(name='gray84', red=214, green=214, blue=214)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY85","title":"<code>GRAY85 = RGB(name='gray85', red=217, green=217, blue=217)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY86","title":"<code>GRAY86 = RGB(name='gray86', red=219, green=219, blue=219)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY87","title":"<code>GRAY87 = RGB(name='gray87', red=222, green=222, blue=222)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY88","title":"<code>GRAY88 = RGB(name='gray88', red=224, green=224, blue=224)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY89","title":"<code>GRAY89 = RGB(name='gray89', red=227, green=227, blue=227)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY9","title":"<code>GRAY9 = RGB(name='gray9', red=23, green=23, blue=23)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY90","title":"<code>GRAY90 = RGB(name='gray90', red=229, green=229, blue=229)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY91","title":"<code>GRAY91 = RGB(name='gray91', red=232, green=232, blue=232)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY92","title":"<code>GRAY92 = RGB(name='gray92', red=235, green=235, blue=235)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY93","title":"<code>GRAY93 = RGB(name='gray93', red=237, green=237, blue=237)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY94","title":"<code>GRAY94 = RGB(name='gray94', red=240, green=240, blue=240)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY95","title":"<code>GRAY95 = RGB(name='gray95', red=242, green=242, blue=242)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY97","title":"<code>GRAY97 = RGB(name='gray97', red=247, green=247, blue=247)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY98","title":"<code>GRAY98 = RGB(name='gray98', red=250, green=250, blue=250)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GRAY99","title":"<code>GRAY99 = RGB(name='gray99', red=252, green=252, blue=252)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GREEN","title":"<code>GREEN = RGB(name='green', red=0, green=128, blue=0)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GREEN1","title":"<code>GREEN1 = RGB(name='green1', red=0, green=255, blue=0)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GREEN2","title":"<code>GREEN2 = RGB(name='green2', red=0, green=238, blue=0)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GREEN3","title":"<code>GREEN3 = RGB(name='green3', red=0, green=205, blue=0)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GREEN4","title":"<code>GREEN4 = RGB(name='green4', red=0, green=139, blue=0)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.GREENYELLOW","title":"<code>GREENYELLOW = RGB(name='greenyellow', red=173, green=255, blue=47)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.HONEYDEW1","title":"<code>HONEYDEW1 = RGB(name='honeydew1', red=240, green=255, blue=240)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.HONEYDEW2","title":"<code>HONEYDEW2 = RGB(name='honeydew2', red=224, green=238, blue=224)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.HONEYDEW3","title":"<code>HONEYDEW3 = RGB(name='honeydew3', red=193, green=205, blue=193)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.HONEYDEW4","title":"<code>HONEYDEW4 = RGB(name='honeydew4', red=131, green=139, blue=131)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.HOTPINK","title":"<code>HOTPINK = RGB(name='hotpink', red=255, green=105, blue=180)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.HOTPINK1","title":"<code>HOTPINK1 = RGB(name='hotpink1', red=255, green=110, blue=180)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.HOTPINK2","title":"<code>HOTPINK2 = RGB(name='hotpink2', red=238, green=106, blue=167)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.HOTPINK3","title":"<code>HOTPINK3 = RGB(name='hotpink3', red=205, green=96, blue=144)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.HOTPINK4","title":"<code>HOTPINK4 = RGB(name='hotpink4', red=139, green=58, blue=98)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.INDIANRED","title":"<code>INDIANRED = RGB(name='indianred', red=205, green=92, blue=92)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.INDIANRED1","title":"<code>INDIANRED1 = RGB(name='indianred1', red=255, green=106, blue=106)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.INDIANRED2","title":"<code>INDIANRED2 = RGB(name='indianred2', red=238, green=99, blue=99)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.INDIANRED3","title":"<code>INDIANRED3 = RGB(name='indianred3', red=205, green=85, blue=85)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.INDIANRED4","title":"<code>INDIANRED4 = RGB(name='indianred4', red=139, green=58, blue=58)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.INDIGO","title":"<code>INDIGO = RGB(name='indigo', red=75, green=0, blue=130)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.IVORY1","title":"<code>IVORY1 = RGB(name='ivory1', red=255, green=255, blue=240)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.IVORY2","title":"<code>IVORY2 = RGB(name='ivory2', red=238, green=238, blue=224)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.IVORY3","title":"<code>IVORY3 = RGB(name='ivory3', red=205, green=205, blue=193)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.IVORY4","title":"<code>IVORY4 = RGB(name='ivory4', red=139, green=139, blue=131)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.IVORYBLACK","title":"<code>IVORYBLACK = RGB(name='ivoryblack', red=41, green=36, blue=33)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.KHAKI","title":"<code>KHAKI = RGB(name='khaki', red=240, green=230, blue=140)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.KHAKI1","title":"<code>KHAKI1 = RGB(name='khaki1', red=255, green=246, blue=143)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.KHAKI2","title":"<code>KHAKI2 = RGB(name='khaki2', red=238, green=230, blue=133)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.KHAKI3","title":"<code>KHAKI3 = RGB(name='khaki3', red=205, green=198, blue=115)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.KHAKI4","title":"<code>KHAKI4 = RGB(name='khaki4', red=139, green=134, blue=78)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.LAVENDER","title":"<code>LAVENDER = RGB(name='lavender', red=230, green=230, blue=250)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.LAVENDERBLUSH1","title":"<code>LAVENDERBLUSH1 = RGB(name='lavenderblush1', red=255, green=240, blue=245)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.LAVENDERBLUSH2","title":"<code>LAVENDERBLUSH2 = RGB(name='lavenderblush2', red=238, green=224, blue=229)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.LAVENDERBLUSH3","title":"<code>LAVENDERBLUSH3 = RGB(name='lavenderblush3', red=205, green=193, blue=197)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.LAVENDERBLUSH4","title":"<code>LAVENDERBLUSH4 = RGB(name='lavenderblush4', red=139, green=131, blue=134)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.LAWNGREEN","title":"<code>LAWNGREEN = RGB(name='lawngreen', red=124, green=252, blue=0)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.LEMONCHIFFON1","title":"<code>LEMONCHIFFON1 = RGB(name='lemonchiffon1', red=255, green=250, blue=205)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.LEMONCHIFFON2","title":"<code>LEMONCHIFFON2 = RGB(name='lemonchiffon2', red=238, green=233, blue=191)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.LEMONCHIFFON3","title":"<code>LEMONCHIFFON3 = RGB(name='lemonchiffon3', red=205, green=201, blue=165)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.LEMONCHIFFON4","title":"<code>LEMONCHIFFON4 = RGB(name='lemonchiffon4', red=139, green=137, blue=112)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.LIGHTBLUE","title":"<code>LIGHTBLUE = RGB(name='lightblue', red=173, green=216, blue=230)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.LIGHTBLUE1","title":"<code>LIGHTBLUE1 = RGB(name='lightblue1', red=191, green=239, blue=255)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.LIGHTBLUE2","title":"<code>LIGHTBLUE2 = RGB(name='lightblue2', red=178, green=223, blue=238)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.LIGHTBLUE3","title":"<code>LIGHTBLUE3 = RGB(name='lightblue3', red=154, green=192, blue=205)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.LIGHTBLUE4","title":"<code>LIGHTBLUE4 = RGB(name='lightblue4', red=104, green=131, blue=139)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.LIGHTCORAL","title":"<code>LIGHTCORAL = RGB(name='lightcoral', red=240, green=128, blue=128)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.LIGHTCYAN1","title":"<code>LIGHTCYAN1 = RGB(name='lightcyan1', red=224, green=255, blue=255)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.LIGHTCYAN2","title":"<code>LIGHTCYAN2 = RGB(name='lightcyan2', red=209, green=238, blue=238)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.LIGHTCYAN3","title":"<code>LIGHTCYAN3 = RGB(name='lightcyan3', red=180, green=205, blue=205)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.LIGHTCYAN4","title":"<code>LIGHTCYAN4 = RGB(name='lightcyan4', red=122, green=139, blue=139)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.LIGHTGOLDENROD1","title":"<code>LIGHTGOLDENROD1 = RGB(name='lightgoldenrod1', red=255, green=236, blue=139)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.LIGHTGOLDENROD2","title":"<code>LIGHTGOLDENROD2 = RGB(name='lightgoldenrod2', red=238, green=220, blue=130)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.LIGHTGOLDENROD3","title":"<code>LIGHTGOLDENROD3 = RGB(name='lightgoldenrod3', red=205, green=190, blue=112)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.LIGHTGOLDENROD4","title":"<code>LIGHTGOLDENROD4 = RGB(name='lightgoldenrod4', red=139, green=129, blue=76)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.LIGHTGOLDENRODYELLOW","title":"<code>LIGHTGOLDENRODYELLOW = RGB(name='lightgoldenrodyellow', red=250, green=250, blue=210)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.LIGHTGREY","title":"<code>LIGHTGREY = RGB(name='lightgrey', red=211, green=211, blue=211)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.LIGHTPINK","title":"<code>LIGHTPINK = RGB(name='lightpink', red=255, green=182, blue=193)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.LIGHTPINK1","title":"<code>LIGHTPINK1 = RGB(name='lightpink1', red=255, green=174, blue=185)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.LIGHTPINK2","title":"<code>LIGHTPINK2 = RGB(name='lightpink2', red=238, green=162, blue=173)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.LIGHTPINK3","title":"<code>LIGHTPINK3 = RGB(name='lightpink3', red=205, green=140, blue=149)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.LIGHTPINK4","title":"<code>LIGHTPINK4 = RGB(name='lightpink4', red=139, green=95, blue=101)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.LIGHTSALMON1","title":"<code>LIGHTSALMON1 = RGB(name='lightsalmon1', red=255, green=160, blue=122)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.LIGHTSALMON2","title":"<code>LIGHTSALMON2 = RGB(name='lightsalmon2', red=238, green=149, blue=114)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.LIGHTSALMON3","title":"<code>LIGHTSALMON3 = RGB(name='lightsalmon3', red=205, green=129, blue=98)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.LIGHTSALMON4","title":"<code>LIGHTSALMON4 = RGB(name='lightsalmon4', red=139, green=87, blue=66)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.LIGHTSEAGREEN","title":"<code>LIGHTSEAGREEN = RGB(name='lightseagreen', red=32, green=178, blue=170)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.LIGHTSKYBLUE","title":"<code>LIGHTSKYBLUE = RGB(name='lightskyblue', red=135, green=206, blue=250)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.LIGHTSKYBLUE1","title":"<code>LIGHTSKYBLUE1 = RGB(name='lightskyblue1', red=176, green=226, blue=255)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.LIGHTSKYBLUE2","title":"<code>LIGHTSKYBLUE2 = RGB(name='lightskyblue2', red=164, green=211, blue=238)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.LIGHTSKYBLUE3","title":"<code>LIGHTSKYBLUE3 = RGB(name='lightskyblue3', red=141, green=182, blue=205)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.LIGHTSKYBLUE4","title":"<code>LIGHTSKYBLUE4 = RGB(name='lightskyblue4', red=96, green=123, blue=139)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.LIGHTSLATEBLUE","title":"<code>LIGHTSLATEBLUE = RGB(name='lightslateblue', red=132, green=112, blue=255)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.LIGHTSLATEGRAY","title":"<code>LIGHTSLATEGRAY = RGB(name='lightslategray', red=119, green=136, blue=153)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.LIGHTSTEELBLUE","title":"<code>LIGHTSTEELBLUE = RGB(name='lightsteelblue', red=176, green=196, blue=222)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.LIGHTSTEELBLUE1","title":"<code>LIGHTSTEELBLUE1 = RGB(name='lightsteelblue1', red=202, green=225, blue=255)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.LIGHTSTEELBLUE2","title":"<code>LIGHTSTEELBLUE2 = RGB(name='lightsteelblue2', red=188, green=210, blue=238)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.LIGHTSTEELBLUE3","title":"<code>LIGHTSTEELBLUE3 = RGB(name='lightsteelblue3', red=162, green=181, blue=205)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.LIGHTSTEELBLUE4","title":"<code>LIGHTSTEELBLUE4 = RGB(name='lightsteelblue4', red=110, green=123, blue=139)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.LIGHTYELLOW1","title":"<code>LIGHTYELLOW1 = RGB(name='lightyellow1', red=255, green=255, blue=224)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.LIGHTYELLOW2","title":"<code>LIGHTYELLOW2 = RGB(name='lightyellow2', red=238, green=238, blue=209)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.LIGHTYELLOW3","title":"<code>LIGHTYELLOW3 = RGB(name='lightyellow3', red=205, green=205, blue=180)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.LIGHTYELLOW4","title":"<code>LIGHTYELLOW4 = RGB(name='lightyellow4', red=139, green=139, blue=122)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.LIMEGREEN","title":"<code>LIMEGREEN = RGB(name='limegreen', red=50, green=205, blue=50)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.LINEN","title":"<code>LINEN = RGB(name='linen', red=250, green=240, blue=230)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.MAGENTA","title":"<code>MAGENTA = RGB(name='magenta', red=255, green=0, blue=255)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.MAGENTA2","title":"<code>MAGENTA2 = RGB(name='magenta2', red=238, green=0, blue=238)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.MAGENTA3","title":"<code>MAGENTA3 = RGB(name='magenta3', red=205, green=0, blue=205)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.MAGENTA4","title":"<code>MAGENTA4 = RGB(name='magenta4', red=139, green=0, blue=139)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.MANGANESEBLUE","title":"<code>MANGANESEBLUE = RGB(name='manganeseblue', red=3, green=168, blue=158)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.MAROON","title":"<code>MAROON = RGB(name='maroon', red=128, green=0, blue=0)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.MAROON1","title":"<code>MAROON1 = RGB(name='maroon1', red=255, green=52, blue=179)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.MAROON2","title":"<code>MAROON2 = RGB(name='maroon2', red=238, green=48, blue=167)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.MAROON3","title":"<code>MAROON3 = RGB(name='maroon3', red=205, green=41, blue=144)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.MAROON4","title":"<code>MAROON4 = RGB(name='maroon4', red=139, green=28, blue=98)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.MEDIUMORCHID","title":"<code>MEDIUMORCHID = RGB(name='mediumorchid', red=186, green=85, blue=211)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.MEDIUMORCHID1","title":"<code>MEDIUMORCHID1 = RGB(name='mediumorchid1', red=224, green=102, blue=255)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.MEDIUMORCHID2","title":"<code>MEDIUMORCHID2 = RGB(name='mediumorchid2', red=209, green=95, blue=238)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.MEDIUMORCHID3","title":"<code>MEDIUMORCHID3 = RGB(name='mediumorchid3', red=180, green=82, blue=205)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.MEDIUMORCHID4","title":"<code>MEDIUMORCHID4 = RGB(name='mediumorchid4', red=122, green=55, blue=139)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.MEDIUMPURPLE","title":"<code>MEDIUMPURPLE = RGB(name='mediumpurple', red=147, green=112, blue=219)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.MEDIUMPURPLE1","title":"<code>MEDIUMPURPLE1 = RGB(name='mediumpurple1', red=171, green=130, blue=255)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.MEDIUMPURPLE2","title":"<code>MEDIUMPURPLE2 = RGB(name='mediumpurple2', red=159, green=121, blue=238)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.MEDIUMPURPLE3","title":"<code>MEDIUMPURPLE3 = RGB(name='mediumpurple3', red=137, green=104, blue=205)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.MEDIUMPURPLE4","title":"<code>MEDIUMPURPLE4 = RGB(name='mediumpurple4', red=93, green=71, blue=139)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.MEDIUMSEAGREEN","title":"<code>MEDIUMSEAGREEN = RGB(name='mediumseagreen', red=60, green=179, blue=113)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.MEDIUMSLATEBLUE","title":"<code>MEDIUMSLATEBLUE = RGB(name='mediumslateblue', red=123, green=104, blue=238)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.MEDIUMSPRINGGREEN","title":"<code>MEDIUMSPRINGGREEN = RGB(name='mediumspringgreen', red=0, green=250, blue=154)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.MEDIUMTURQUOISE","title":"<code>MEDIUMTURQUOISE = RGB(name='mediumturquoise', red=72, green=209, blue=204)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.MEDIUMVIOLETRED","title":"<code>MEDIUMVIOLETRED = RGB(name='mediumvioletred', red=199, green=21, blue=133)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.MELON","title":"<code>MELON = RGB(name='melon', red=227, green=168, blue=105)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.MIDNIGHTBLUE","title":"<code>MIDNIGHTBLUE = RGB(name='midnightblue', red=25, green=25, blue=112)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.MINT","title":"<code>MINT = RGB(name='mint', red=189, green=252, blue=201)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.MINTCREAM","title":"<code>MINTCREAM = RGB(name='mintcream', red=245, green=255, blue=250)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.MISTYROSE1","title":"<code>MISTYROSE1 = RGB(name='mistyrose1', red=255, green=228, blue=225)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.MISTYROSE2","title":"<code>MISTYROSE2 = RGB(name='mistyrose2', red=238, green=213, blue=210)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.MISTYROSE3","title":"<code>MISTYROSE3 = RGB(name='mistyrose3', red=205, green=183, blue=181)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.MISTYROSE4","title":"<code>MISTYROSE4 = RGB(name='mistyrose4', red=139, green=125, blue=123)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.MOCCASIN","title":"<code>MOCCASIN = RGB(name='moccasin', red=255, green=228, blue=181)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.NAVAJOWHITE1","title":"<code>NAVAJOWHITE1 = RGB(name='navajowhite1', red=255, green=222, blue=173)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.NAVAJOWHITE2","title":"<code>NAVAJOWHITE2 = RGB(name='navajowhite2', red=238, green=207, blue=161)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.NAVAJOWHITE3","title":"<code>NAVAJOWHITE3 = RGB(name='navajowhite3', red=205, green=179, blue=139)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.NAVAJOWHITE4","title":"<code>NAVAJOWHITE4 = RGB(name='navajowhite4', red=139, green=121, blue=94)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.NAVY","title":"<code>NAVY = RGB(name='navy', red=0, green=0, blue=128)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.OLDLACE","title":"<code>OLDLACE = RGB(name='oldlace', red=253, green=245, blue=230)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.OLIVE","title":"<code>OLIVE = RGB(name='olive', red=128, green=128, blue=0)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.OLIVEDRAB","title":"<code>OLIVEDRAB = RGB(name='olivedrab', red=107, green=142, blue=35)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.OLIVEDRAB1","title":"<code>OLIVEDRAB1 = RGB(name='olivedrab1', red=192, green=255, blue=62)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.OLIVEDRAB2","title":"<code>OLIVEDRAB2 = RGB(name='olivedrab2', red=179, green=238, blue=58)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.OLIVEDRAB3","title":"<code>OLIVEDRAB3 = RGB(name='olivedrab3', red=154, green=205, blue=50)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.OLIVEDRAB4","title":"<code>OLIVEDRAB4 = RGB(name='olivedrab4', red=105, green=139, blue=34)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.ORANGE","title":"<code>ORANGE = RGB(name='orange', red=255, green=128, blue=0)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.ORANGE1","title":"<code>ORANGE1 = RGB(name='orange1', red=255, green=165, blue=0)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.ORANGE2","title":"<code>ORANGE2 = RGB(name='orange2', red=238, green=154, blue=0)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.ORANGE3","title":"<code>ORANGE3 = RGB(name='orange3', red=205, green=133, blue=0)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.ORANGE4","title":"<code>ORANGE4 = RGB(name='orange4', red=139, green=90, blue=0)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.ORANGERED1","title":"<code>ORANGERED1 = RGB(name='orangered1', red=255, green=69, blue=0)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.ORANGERED2","title":"<code>ORANGERED2 = RGB(name='orangered2', red=238, green=64, blue=0)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.ORANGERED3","title":"<code>ORANGERED3 = RGB(name='orangered3', red=205, green=55, blue=0)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.ORANGERED4","title":"<code>ORANGERED4 = RGB(name='orangered4', red=139, green=37, blue=0)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.ORCHID","title":"<code>ORCHID = RGB(name='orchid', red=218, green=112, blue=214)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.ORCHID1","title":"<code>ORCHID1 = RGB(name='orchid1', red=255, green=131, blue=250)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.ORCHID2","title":"<code>ORCHID2 = RGB(name='orchid2', red=238, green=122, blue=233)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.ORCHID3","title":"<code>ORCHID3 = RGB(name='orchid3', red=205, green=105, blue=201)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.ORCHID4","title":"<code>ORCHID4 = RGB(name='orchid4', red=139, green=71, blue=137)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.PALEGOLDENROD","title":"<code>PALEGOLDENROD = RGB(name='palegoldenrod', red=238, green=232, blue=170)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.PALEGREEN","title":"<code>PALEGREEN = RGB(name='palegreen', red=152, green=251, blue=152)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.PALEGREEN1","title":"<code>PALEGREEN1 = RGB(name='palegreen1', red=154, green=255, blue=154)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.PALEGREEN2","title":"<code>PALEGREEN2 = RGB(name='palegreen2', red=144, green=238, blue=144)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.PALEGREEN3","title":"<code>PALEGREEN3 = RGB(name='palegreen3', red=124, green=205, blue=124)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.PALEGREEN4","title":"<code>PALEGREEN4 = RGB(name='palegreen4', red=84, green=139, blue=84)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.PALETURQUOISE1","title":"<code>PALETURQUOISE1 = RGB(name='paleturquoise1', red=187, green=255, blue=255)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.PALETURQUOISE2","title":"<code>PALETURQUOISE2 = RGB(name='paleturquoise2', red=174, green=238, blue=238)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.PALETURQUOISE3","title":"<code>PALETURQUOISE3 = RGB(name='paleturquoise3', red=150, green=205, blue=205)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.PALETURQUOISE4","title":"<code>PALETURQUOISE4 = RGB(name='paleturquoise4', red=102, green=139, blue=139)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.PALEVIOLETRED","title":"<code>PALEVIOLETRED = RGB(name='palevioletred', red=219, green=112, blue=147)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.PALEVIOLETRED1","title":"<code>PALEVIOLETRED1 = RGB(name='palevioletred1', red=255, green=130, blue=171)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.PALEVIOLETRED2","title":"<code>PALEVIOLETRED2 = RGB(name='palevioletred2', red=238, green=121, blue=159)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.PALEVIOLETRED3","title":"<code>PALEVIOLETRED3 = RGB(name='palevioletred3', red=205, green=104, blue=137)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.PALEVIOLETRED4","title":"<code>PALEVIOLETRED4 = RGB(name='palevioletred4', red=139, green=71, blue=93)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.PAPAYAWHIP","title":"<code>PAPAYAWHIP = RGB(name='papayawhip', red=255, green=239, blue=213)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.PEACHPUFF1","title":"<code>PEACHPUFF1 = RGB(name='peachpuff1', red=255, green=218, blue=185)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.PEACHPUFF2","title":"<code>PEACHPUFF2 = RGB(name='peachpuff2', red=238, green=203, blue=173)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.PEACHPUFF3","title":"<code>PEACHPUFF3 = RGB(name='peachpuff3', red=205, green=175, blue=149)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.PEACHPUFF4","title":"<code>PEACHPUFF4 = RGB(name='peachpuff4', red=139, green=119, blue=101)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.PEACOCK","title":"<code>PEACOCK = RGB(name='peacock', red=51, green=161, blue=201)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.PINK","title":"<code>PINK = RGB(name='pink', red=255, green=192, blue=203)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.PINK1","title":"<code>PINK1 = RGB(name='pink1', red=255, green=181, blue=197)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.PINK2","title":"<code>PINK2 = RGB(name='pink2', red=238, green=169, blue=184)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.PINK3","title":"<code>PINK3 = RGB(name='pink3', red=205, green=145, blue=158)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.PINK4","title":"<code>PINK4 = RGB(name='pink4', red=139, green=99, blue=108)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.PLUM","title":"<code>PLUM = RGB(name='plum', red=221, green=160, blue=221)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.PLUM1","title":"<code>PLUM1 = RGB(name='plum1', red=255, green=187, blue=255)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.PLUM2","title":"<code>PLUM2 = RGB(name='plum2', red=238, green=174, blue=238)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.PLUM3","title":"<code>PLUM3 = RGB(name='plum3', red=205, green=150, blue=205)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.PLUM4","title":"<code>PLUM4 = RGB(name='plum4', red=139, green=102, blue=139)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.POWDERBLUE","title":"<code>POWDERBLUE = RGB(name='powderblue', red=176, green=224, blue=230)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.PURPLE","title":"<code>PURPLE = RGB(name='purple', red=128, green=0, blue=128)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.PURPLE1","title":"<code>PURPLE1 = RGB(name='purple1', red=155, green=48, blue=255)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.PURPLE2","title":"<code>PURPLE2 = RGB(name='purple2', red=145, green=44, blue=238)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.PURPLE3","title":"<code>PURPLE3 = RGB(name='purple3', red=125, green=38, blue=205)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.PURPLE4","title":"<code>PURPLE4 = RGB(name='purple4', red=85, green=26, blue=139)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.RASPBERRY","title":"<code>RASPBERRY = RGB(name='raspberry', red=135, green=38, blue=87)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.RAWSIENNA","title":"<code>RAWSIENNA = RGB(name='rawsienna', red=199, green=97, blue=20)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.RED1","title":"<code>RED1 = RGB(name='red1', red=255, green=0, blue=0)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.RED2","title":"<code>RED2 = RGB(name='red2', red=238, green=0, blue=0)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.RED3","title":"<code>RED3 = RGB(name='red3', red=205, green=0, blue=0)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.RED4","title":"<code>RED4 = RGB(name='red4', red=139, green=0, blue=0)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.ROSYBROWN","title":"<code>ROSYBROWN = RGB(name='rosybrown', red=188, green=143, blue=143)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.ROSYBROWN1","title":"<code>ROSYBROWN1 = RGB(name='rosybrown1', red=255, green=193, blue=193)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.ROSYBROWN2","title":"<code>ROSYBROWN2 = RGB(name='rosybrown2', red=238, green=180, blue=180)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.ROSYBROWN3","title":"<code>ROSYBROWN3 = RGB(name='rosybrown3', red=205, green=155, blue=155)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.ROSYBROWN4","title":"<code>ROSYBROWN4 = RGB(name='rosybrown4', red=139, green=105, blue=105)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.ROYALBLUE","title":"<code>ROYALBLUE = RGB(name='royalblue', red=65, green=105, blue=225)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.ROYALBLUE1","title":"<code>ROYALBLUE1 = RGB(name='royalblue1', red=72, green=118, blue=255)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.ROYALBLUE2","title":"<code>ROYALBLUE2 = RGB(name='royalblue2', red=67, green=110, blue=238)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.ROYALBLUE3","title":"<code>ROYALBLUE3 = RGB(name='royalblue3', red=58, green=95, blue=205)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.ROYALBLUE4","title":"<code>ROYALBLUE4 = RGB(name='royalblue4', red=39, green=64, blue=139)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.SALMON","title":"<code>SALMON = RGB(name='salmon', red=250, green=128, blue=114)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.SALMON1","title":"<code>SALMON1 = RGB(name='salmon1', red=255, green=140, blue=105)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.SALMON2","title":"<code>SALMON2 = RGB(name='salmon2', red=238, green=130, blue=98)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.SALMON3","title":"<code>SALMON3 = RGB(name='salmon3', red=205, green=112, blue=84)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.SALMON4","title":"<code>SALMON4 = RGB(name='salmon4', red=139, green=76, blue=57)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.SANDYBROWN","title":"<code>SANDYBROWN = RGB(name='sandybrown', red=244, green=164, blue=96)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.SAPGREEN","title":"<code>SAPGREEN = RGB(name='sapgreen', red=48, green=128, blue=20)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.SEAGREEN1","title":"<code>SEAGREEN1 = RGB(name='seagreen1', red=84, green=255, blue=159)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.SEAGREEN2","title":"<code>SEAGREEN2 = RGB(name='seagreen2', red=78, green=238, blue=148)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.SEAGREEN3","title":"<code>SEAGREEN3 = RGB(name='seagreen3', red=67, green=205, blue=128)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.SEAGREEN4","title":"<code>SEAGREEN4 = RGB(name='seagreen4', red=46, green=139, blue=87)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.SEASHELL1","title":"<code>SEASHELL1 = RGB(name='seashell1', red=255, green=245, blue=238)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.SEASHELL2","title":"<code>SEASHELL2 = RGB(name='seashell2', red=238, green=229, blue=222)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.SEASHELL3","title":"<code>SEASHELL3 = RGB(name='seashell3', red=205, green=197, blue=191)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.SEASHELL4","title":"<code>SEASHELL4 = RGB(name='seashell4', red=139, green=134, blue=130)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.SEPIA","title":"<code>SEPIA = RGB(name='sepia', red=94, green=38, blue=18)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.SGIBEET","title":"<code>SGIBEET = RGB(name='sgibeet', red=142, green=56, blue=142)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.SGIBRIGHTGRAY","title":"<code>SGIBRIGHTGRAY = RGB(name='sgibrightgray', red=197, green=193, blue=170)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.SGICHARTREUSE","title":"<code>SGICHARTREUSE = RGB(name='sgichartreuse', red=113, green=198, blue=113)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.SGIDARKGRAY","title":"<code>SGIDARKGRAY = RGB(name='sgidarkgray', red=85, green=85, blue=85)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.SGIGRAY12","title":"<code>SGIGRAY12 = RGB(name='sgigray12', red=30, green=30, blue=30)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.SGIGRAY16","title":"<code>SGIGRAY16 = RGB(name='sgigray16', red=40, green=40, blue=40)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.SGIGRAY32","title":"<code>SGIGRAY32 = RGB(name='sgigray32', red=81, green=81, blue=81)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.SGIGRAY36","title":"<code>SGIGRAY36 = RGB(name='sgigray36', red=91, green=91, blue=91)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.SGIGRAY52","title":"<code>SGIGRAY52 = RGB(name='sgigray52', red=132, green=132, blue=132)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.SGIGRAY56","title":"<code>SGIGRAY56 = RGB(name='sgigray56', red=142, green=142, blue=142)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.SGIGRAY72","title":"<code>SGIGRAY72 = RGB(name='sgigray72', red=183, green=183, blue=183)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.SGIGRAY76","title":"<code>SGIGRAY76 = RGB(name='sgigray76', red=193, green=193, blue=193)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.SGIGRAY92","title":"<code>SGIGRAY92 = RGB(name='sgigray92', red=234, green=234, blue=234)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.SGIGRAY96","title":"<code>SGIGRAY96 = RGB(name='sgigray96', red=244, green=244, blue=244)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.SGILIGHTBLUE","title":"<code>SGILIGHTBLUE = RGB(name='sgilightblue', red=125, green=158, blue=192)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.SGILIGHTGRAY","title":"<code>SGILIGHTGRAY = RGB(name='sgilightgray', red=170, green=170, blue=170)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.SGIOLIVEDRAB","title":"<code>SGIOLIVEDRAB = RGB(name='sgiolivedrab', red=142, green=142, blue=56)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.SGISALMON","title":"<code>SGISALMON = RGB(name='sgisalmon', red=198, green=113, blue=113)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.SGISLATEBLUE","title":"<code>SGISLATEBLUE = RGB(name='sgislateblue', red=113, green=113, blue=198)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.SGITEAL","title":"<code>SGITEAL = RGB(name='sgiteal', red=56, green=142, blue=142)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.SIENNA","title":"<code>SIENNA = RGB(name='sienna', red=160, green=82, blue=45)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.SIENNA1","title":"<code>SIENNA1 = RGB(name='sienna1', red=255, green=130, blue=71)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.SIENNA2","title":"<code>SIENNA2 = RGB(name='sienna2', red=238, green=121, blue=66)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.SIENNA3","title":"<code>SIENNA3 = RGB(name='sienna3', red=205, green=104, blue=57)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.SIENNA4","title":"<code>SIENNA4 = RGB(name='sienna4', red=139, green=71, blue=38)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.SILVER","title":"<code>SILVER = RGB(name='silver', red=192, green=192, blue=192)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.SKYBLUE","title":"<code>SKYBLUE = RGB(name='skyblue', red=135, green=206, blue=235)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.SKYBLUE1","title":"<code>SKYBLUE1 = RGB(name='skyblue1', red=135, green=206, blue=255)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.SKYBLUE2","title":"<code>SKYBLUE2 = RGB(name='skyblue2', red=126, green=192, blue=238)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.SKYBLUE3","title":"<code>SKYBLUE3 = RGB(name='skyblue3', red=108, green=166, blue=205)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.SKYBLUE4","title":"<code>SKYBLUE4 = RGB(name='skyblue4', red=74, green=112, blue=139)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.SLATEBLUE","title":"<code>SLATEBLUE = RGB(name='slateblue', red=106, green=90, blue=205)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.SLATEBLUE1","title":"<code>SLATEBLUE1 = RGB(name='slateblue1', red=131, green=111, blue=255)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.SLATEBLUE2","title":"<code>SLATEBLUE2 = RGB(name='slateblue2', red=122, green=103, blue=238)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.SLATEBLUE3","title":"<code>SLATEBLUE3 = RGB(name='slateblue3', red=105, green=89, blue=205)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.SLATEBLUE4","title":"<code>SLATEBLUE4 = RGB(name='slateblue4', red=71, green=60, blue=139)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.SLATEGRAY","title":"<code>SLATEGRAY = RGB(name='slategray', red=112, green=128, blue=144)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.SLATEGRAY1","title":"<code>SLATEGRAY1 = RGB(name='slategray1', red=198, green=226, blue=255)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.SLATEGRAY2","title":"<code>SLATEGRAY2 = RGB(name='slategray2', red=185, green=211, blue=238)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.SLATEGRAY3","title":"<code>SLATEGRAY3 = RGB(name='slategray3', red=159, green=182, blue=205)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.SLATEGRAY4","title":"<code>SLATEGRAY4 = RGB(name='slategray4', red=108, green=123, blue=139)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.SNOW1","title":"<code>SNOW1 = RGB(name='snow1', red=255, green=250, blue=250)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.SNOW2","title":"<code>SNOW2 = RGB(name='snow2', red=238, green=233, blue=233)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.SNOW3","title":"<code>SNOW3 = RGB(name='snow3', red=205, green=201, blue=201)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.SNOW4","title":"<code>SNOW4 = RGB(name='snow4', red=139, green=137, blue=137)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.SPRINGGREEN","title":"<code>SPRINGGREEN = RGB(name='springgreen', red=0, green=255, blue=127)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.SPRINGGREEN1","title":"<code>SPRINGGREEN1 = RGB(name='springgreen1', red=0, green=238, blue=118)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.SPRINGGREEN2","title":"<code>SPRINGGREEN2 = RGB(name='springgreen2', red=0, green=205, blue=102)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.SPRINGGREEN3","title":"<code>SPRINGGREEN3 = RGB(name='springgreen3', red=0, green=139, blue=69)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.STEELBLUE","title":"<code>STEELBLUE = RGB(name='steelblue', red=70, green=130, blue=180)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.STEELBLUE1","title":"<code>STEELBLUE1 = RGB(name='steelblue1', red=99, green=184, blue=255)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.STEELBLUE2","title":"<code>STEELBLUE2 = RGB(name='steelblue2', red=92, green=172, blue=238)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.STEELBLUE3","title":"<code>STEELBLUE3 = RGB(name='steelblue3', red=79, green=148, blue=205)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.STEELBLUE4","title":"<code>STEELBLUE4 = RGB(name='steelblue4', red=54, green=100, blue=139)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.TAN","title":"<code>TAN = RGB(name='tan', red=210, green=180, blue=140)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.TAN1","title":"<code>TAN1 = RGB(name='tan1', red=255, green=165, blue=79)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.TAN2","title":"<code>TAN2 = RGB(name='tan2', red=238, green=154, blue=73)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.TAN3","title":"<code>TAN3 = RGB(name='tan3', red=205, green=133, blue=63)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.TAN4","title":"<code>TAN4 = RGB(name='tan4', red=139, green=90, blue=43)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.TEAL","title":"<code>TEAL = RGB(name='teal', red=0, green=128, blue=128)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.THISTLE","title":"<code>THISTLE = RGB(name='thistle', red=216, green=191, blue=216)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.THISTLE1","title":"<code>THISTLE1 = RGB(name='thistle1', red=255, green=225, blue=255)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.THISTLE2","title":"<code>THISTLE2 = RGB(name='thistle2', red=238, green=210, blue=238)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.THISTLE3","title":"<code>THISTLE3 = RGB(name='thistle3', red=205, green=181, blue=205)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.THISTLE4","title":"<code>THISTLE4 = RGB(name='thistle4', red=139, green=123, blue=139)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.TOMATO1","title":"<code>TOMATO1 = RGB(name='tomato1', red=255, green=99, blue=71)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.TOMATO2","title":"<code>TOMATO2 = RGB(name='tomato2', red=238, green=92, blue=66)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.TOMATO3","title":"<code>TOMATO3 = RGB(name='tomato3', red=205, green=79, blue=57)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.TOMATO4","title":"<code>TOMATO4 = RGB(name='tomato4', red=139, green=54, blue=38)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.TURQUOISE","title":"<code>TURQUOISE = RGB(name='turquoise', red=64, green=224, blue=208)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.TURQUOISE1","title":"<code>TURQUOISE1 = RGB(name='turquoise1', red=0, green=245, blue=255)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.TURQUOISE2","title":"<code>TURQUOISE2 = RGB(name='turquoise2', red=0, green=229, blue=238)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.TURQUOISE3","title":"<code>TURQUOISE3 = RGB(name='turquoise3', red=0, green=197, blue=205)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.TURQUOISE4","title":"<code>TURQUOISE4 = RGB(name='turquoise4', red=0, green=134, blue=139)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.TURQUOISEBLUE","title":"<code>TURQUOISEBLUE = RGB(name='turquoiseblue', red=0, green=199, blue=140)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.VIOLET","title":"<code>VIOLET = RGB(name='violet', red=238, green=130, blue=238)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.VIOLETRED","title":"<code>VIOLETRED = RGB(name='violetred', red=208, green=32, blue=144)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.VIOLETRED1","title":"<code>VIOLETRED1 = RGB(name='violetred1', red=255, green=62, blue=150)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.VIOLETRED2","title":"<code>VIOLETRED2 = RGB(name='violetred2', red=238, green=58, blue=140)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.VIOLETRED3","title":"<code>VIOLETRED3 = RGB(name='violetred3', red=205, green=50, blue=120)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.VIOLETRED4","title":"<code>VIOLETRED4 = RGB(name='violetred4', red=139, green=34, blue=82)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.WARMGREY","title":"<code>WARMGREY = RGB(name='warmgrey', red=128, green=128, blue=105)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.WHEAT","title":"<code>WHEAT = RGB(name='wheat', red=245, green=222, blue=179)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.WHEAT1","title":"<code>WHEAT1 = RGB(name='wheat1', red=255, green=231, blue=186)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.WHEAT2","title":"<code>WHEAT2 = RGB(name='wheat2', red=238, green=216, blue=174)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.WHEAT3","title":"<code>WHEAT3 = RGB(name='wheat3', red=205, green=186, blue=150)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.WHEAT4","title":"<code>WHEAT4 = RGB(name='wheat4', red=139, green=126, blue=102)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.WHITE","title":"<code>WHITE = RGB(name='white', red=255, green=255, blue=255)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.WHITESMOKE","title":"<code>WHITESMOKE = RGB(name='whitesmoke', red=245, green=245, blue=245)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.YELLOW1","title":"<code>YELLOW1 = RGB(name='yellow1', red=255, green=255, blue=0)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.YELLOW2","title":"<code>YELLOW2 = RGB(name='yellow2', red=238, green=238, blue=0)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.YELLOW3","title":"<code>YELLOW3 = RGB(name='yellow3', red=205, green=205, blue=0)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.YELLOW4","title":"<code>YELLOW4 = RGB(name='yellow4', red=139, green=139, blue=0)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.COLORS","title":"<code>COLORS = OrderedDict(sorted(COLORS.items(), key=lambda t: t[0]))</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors-classes","title":"Classes","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.RGB","title":"<code>RGB(name='default', red=0, green=0, blue=0)</code>","text":"<p>               Bases: <code>object</code></p> <p>RGB named color object.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>color name</p> <code>red</code> <code>int</code> <p>value for red component (0-255)</p> <code>green</code> <code>int</code> <p>value for green component (0-255)</p> <code>blue</code> <code>int</code> <p>value for blue component (0-255)</p> Source code in <code>pyrevitlib/pyrevit/coreutils/colors.py</code> <pre><code>def __init__(self, name='default', red=0, green=0, blue=0):\n    self.name = name\n    self.red, self.green, self.blue = red, green, blue\n</code></pre>"},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.RGB-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.RGB.name","title":"<code>name = name</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.RGB.hex_color","title":"<code>hex_color</code>  <code>property</code>","text":"<p>Return color in hex format.</p>"},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.RGB.luminance","title":"<code>luminance</code>  <code>property</code>","text":"<p>Return color luminance (preceived).</p>"},{"location":"reference/pyrevit/coreutils/colors/#pyrevit.coreutils.colors.RGB.safe_text_color","title":"<code>safe_text_color</code>  <code>property</code>","text":"<p>Return text color that is safe to overlap this color.</p>"},{"location":"reference/pyrevit/coreutils/configparser/","title":"configparser","text":"<p>Base module for pyRevit config parsing.</p>"},{"location":"reference/pyrevit/coreutils/configparser/#pyrevit.coreutils.configparser-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/configparser/#pyrevit.coreutils.configparser.KEY_VALUE_TRUE","title":"<code>KEY_VALUE_TRUE = 'True'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/configparser/#pyrevit.coreutils.configparser.KEY_VALUE_FALSE","title":"<code>KEY_VALUE_FALSE = 'False'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/configparser/#pyrevit.coreutils.configparser-classes","title":"Classes","text":""},{"location":"reference/pyrevit/coreutils/configparser/#pyrevit.coreutils.configparser.PyRevitConfigSectionParser","title":"<code>PyRevitConfigSectionParser(config_parser, section_name)</code>","text":"<p>               Bases: <code>object</code></p> <p>Config section parser object. Handle section options.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/configparser.py</code> <pre><code>def __init__(self, config_parser, section_name):\n    self._parser = config_parser\n    self._section_name = section_name\n</code></pre>"},{"location":"reference/pyrevit/coreutils/configparser/#pyrevit.coreutils.configparser.PyRevitConfigSectionParser-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/configparser/#pyrevit.coreutils.configparser.PyRevitConfigSectionParser.header","title":"<code>header</code>  <code>property</code>","text":"<p>Section header.</p>"},{"location":"reference/pyrevit/coreutils/configparser/#pyrevit.coreutils.configparser.PyRevitConfigSectionParser.subheader","title":"<code>subheader</code>  <code>property</code>","text":"<p>Section sub-header e.g. Section.SubSection.</p>"},{"location":"reference/pyrevit/coreutils/configparser/#pyrevit.coreutils.configparser.PyRevitConfigSectionParser-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/configparser/#pyrevit.coreutils.configparser.PyRevitConfigSectionParser.has_option","title":"<code>has_option(option_name)</code>","text":"<p>Check if section contains given option.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/configparser.py</code> <pre><code>def has_option(self, option_name):\n    \"\"\"Check if section contains given option.\"\"\"\n    return self._parser.has_option(self._section_name, option_name)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/configparser/#pyrevit.coreutils.configparser.PyRevitConfigSectionParser.get_option","title":"<code>get_option(op_name, default_value=None)</code>","text":"<p>Get option value or return default.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/configparser.py</code> <pre><code>def get_option(self, op_name, default_value=None):\n    \"\"\"Get option value or return default.\"\"\"\n    try:\n        return self.__getattr__(op_name)\n    except Exception as opt_get_err:\n        if default_value is not None:\n            return default_value\n        else:\n            raise opt_get_err\n</code></pre>"},{"location":"reference/pyrevit/coreutils/configparser/#pyrevit.coreutils.configparser.PyRevitConfigSectionParser.set_option","title":"<code>set_option(op_name, value)</code>","text":"<p>Set value of given option.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/configparser.py</code> <pre><code>def set_option(self, op_name, value):\n    \"\"\"Set value of given option.\"\"\"\n    self.__setattr__(op_name, value)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/configparser/#pyrevit.coreutils.configparser.PyRevitConfigSectionParser.remove_option","title":"<code>remove_option(option_name)</code>","text":"<p>Remove given option from section.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/configparser.py</code> <pre><code>def remove_option(self, option_name):\n    \"\"\"Remove given option from section.\"\"\"\n    return self._parser.remove_option(self._section_name, option_name)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/configparser/#pyrevit.coreutils.configparser.PyRevitConfigSectionParser.has_subsection","title":"<code>has_subsection(section_name)</code>","text":"<p>Check if section has any subsections.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/configparser.py</code> <pre><code>def has_subsection(self, section_name):\n    \"\"\"Check if section has any subsections.\"\"\"\n    return True if self.get_subsection(section_name) else False\n</code></pre>"},{"location":"reference/pyrevit/coreutils/configparser/#pyrevit.coreutils.configparser.PyRevitConfigSectionParser.add_subsection","title":"<code>add_subsection(section_name)</code>","text":"<p>Add subsection to section.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/configparser.py</code> <pre><code>def add_subsection(self, section_name):\n    \"\"\"Add subsection to section.\"\"\"\n    return self._parser.add_section(\n        coreutils.make_canonical_name(self._section_name, section_name)\n    )\n</code></pre>"},{"location":"reference/pyrevit/coreutils/configparser/#pyrevit.coreutils.configparser.PyRevitConfigSectionParser.get_subsections","title":"<code>get_subsections()</code>","text":"<p>Get all subsections.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/configparser.py</code> <pre><code>def get_subsections(self):\n    \"\"\"Get all subsections.\"\"\"\n    subsections = []\n    for section_name in self._parser.sections():\n        if section_name.startswith(self._section_name + '.'):\n            subsec = PyRevitConfigSectionParser(self._parser, section_name)\n            subsections.append(subsec)\n    return subsections\n</code></pre>"},{"location":"reference/pyrevit/coreutils/configparser/#pyrevit.coreutils.configparser.PyRevitConfigSectionParser.get_subsection","title":"<code>get_subsection(section_name)</code>","text":"<p>Get subsection with given name.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/configparser.py</code> <pre><code>def get_subsection(self, section_name):\n    \"\"\"Get subsection with given name.\"\"\"\n    for subsection in self.get_subsections():\n        if subsection.subheader == section_name:\n            return subsection\n</code></pre>"},{"location":"reference/pyrevit/coreutils/configparser/#pyrevit.coreutils.configparser.PyRevitConfigParser","title":"<code>PyRevitConfigParser(cfg_file_path=None)</code>","text":"<p>               Bases: <code>object</code></p> <p>Config parser object. Handle config sections and io.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/configparser.py</code> <pre><code>def __init__(self, cfg_file_path=None):\n    self._cfg_file_path = cfg_file_path\n    self._parser = configparser.ConfigParser()\n    if self._cfg_file_path:\n        try:\n            with codecs.open(self._cfg_file_path, 'r', 'utf-8') as cfg_file:\n                try:\n                    self._parser.readfp(cfg_file)\n                except AttributeError:\n                    self._parser.read_file(cfg_file)\n        except (OSError, IOError):\n            raise PyRevitIOError()\n        except Exception as read_err:\n            raise PyRevitException(read_err)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/configparser/#pyrevit.coreutils.configparser.PyRevitConfigParser-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/configparser/#pyrevit.coreutils.configparser.PyRevitConfigParser.get_config_file_hash","title":"<code>get_config_file_hash()</code>","text":"<p>Get calculated unique hash for this config.</p> <p>Returns:</p> Type Description <code>str</code> <p>hash of the config.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/configparser.py</code> <pre><code>def get_config_file_hash(self):\n    \"\"\"Get calculated unique hash for this config.\n\n    Returns:\n        (str): hash of the config.\n    \"\"\"\n    with codecs.open(self._cfg_file_path, 'r', 'utf-8') as cfg_file:\n        cfg_hash = coreutils.get_str_hash(cfg_file.read())\n\n    return cfg_hash\n</code></pre>"},{"location":"reference/pyrevit/coreutils/configparser/#pyrevit.coreutils.configparser.PyRevitConfigParser.has_section","title":"<code>has_section(section_name)</code>","text":"<p>Check if config contains given section.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/configparser.py</code> <pre><code>def has_section(self, section_name):\n    \"\"\"Check if config contains given section.\"\"\"\n    try:\n        self.get_section(section_name)\n        return True\n    except Exception:\n        return False\n</code></pre>"},{"location":"reference/pyrevit/coreutils/configparser/#pyrevit.coreutils.configparser.PyRevitConfigParser.add_section","title":"<code>add_section(section_name)</code>","text":"<p>Add section with given name to config.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/configparser.py</code> <pre><code>def add_section(self, section_name):\n    \"\"\"Add section with given name to config.\"\"\"\n    self._parser.add_section(section_name)\n    return PyRevitConfigSectionParser(self._parser, section_name)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/configparser/#pyrevit.coreutils.configparser.PyRevitConfigParser.get_section","title":"<code>get_section(section_name)</code>","text":"<p>Get section with given name.</p> <p>Raises:</p> Type Description <code>AttributeError</code> <p>if section is missing</p> Source code in <code>pyrevitlib/pyrevit/coreutils/configparser.py</code> <pre><code>def get_section(self, section_name):\n    \"\"\"Get section with given name.\n\n    Raises:\n        AttributeError: if section is missing\n    \"\"\"\n    # check is section with full name is available\n    if self._parser.has_section(section_name):\n        return PyRevitConfigSectionParser(self._parser, section_name)\n\n    # if not try to match with section_name.subsection\n    # if there is a section_name.subsection defined, that should be\n    # the sign that the section exists\n    # section obj then supports getting all subsections\n    for cfg_section_name in self._parser.sections():\n        master_section = coreutils.get_canonical_parts(cfg_section_name)[0]\n        if section_name == master_section:\n            return PyRevitConfigSectionParser(self._parser,\n                                              master_section)\n\n    # if no match happened then raise exception\n    raise AttributeError('Section does not exist in config file.')\n</code></pre>"},{"location":"reference/pyrevit/coreutils/configparser/#pyrevit.coreutils.configparser.PyRevitConfigParser.remove_section","title":"<code>remove_section(section_name)</code>","text":"<p>Remove section from config.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/configparser.py</code> <pre><code>def remove_section(self, section_name):\n    \"\"\"Remove section from config.\"\"\"\n    cfg_section = self.get_section(section_name)\n    for cfg_subsection in cfg_section.get_subsections():\n        self._parser.remove_section(cfg_subsection.header)\n    self._parser.remove_section(cfg_section.header)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/configparser/#pyrevit.coreutils.configparser.PyRevitConfigParser.reload","title":"<code>reload(cfg_file_path=None)</code>","text":"<p>Reload config from original or given file.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/configparser.py</code> <pre><code>def reload(self, cfg_file_path=None):\n    \"\"\"Reload config from original or given file.\"\"\"\n    try:\n        with codecs.open(cfg_file_path \\\n                or self._cfg_file_path, 'r', 'utf-8') as cfg_file:\n            try:\n                self._parser.readfp(cfg_file)\n            except AttributeError:\n                self._parser.read_file(cfg_file)\n    except (OSError, IOError):\n        raise PyRevitIOError()\n</code></pre>"},{"location":"reference/pyrevit/coreutils/configparser/#pyrevit.coreutils.configparser.PyRevitConfigParser.save","title":"<code>save(cfg_file_path=None)</code>","text":"<p>Save config to original or given file.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/configparser.py</code> <pre><code>def save(self, cfg_file_path=None):\n    \"\"\"Save config to original or given file.\"\"\"\n    try:\n        with codecs.open(cfg_file_path \\\n                or self._cfg_file_path, 'w', 'utf-8') as cfg_file:\n            self._parser.write(cfg_file)\n    except (OSError, IOError):\n        raise PyRevitIOError()\n</code></pre>"},{"location":"reference/pyrevit/coreutils/envvars/","title":"envvars","text":"<p>pyRevit managed environment variables framework.</p> <p>pyRevit provides the environment variables framework to the pyRevit core and all pyRevit tools so they can store arbitary data withing the running host session and share small data quickly between script runs.</p> <p>Some settings needs to be set for the current session and might need to affect the behaviour of all individual scripts inside the extensions. (e.g. If user activates the <code>DEBUG</code> mode, all scripts should follow and log the debug entries.) The information is saved using <code>AppDomain.GetData</code> and <code>SetData</code> in a dictionary parameter. The dictionary is used to minimize the addition of named parameters to the AppDomain. The dictionary then includes all the internal parameters and their associated value. This way each script does not need to read the usersettings data which reduces io and saves time.</p> <p>pyRevit uses environment variables extensively at its core and making changes to the core environment variables (starting with <code>PYREVIT_</code>) through scripts is strongly prohibited.</p> <p>Examples:</p> <pre><code>from pyrevit.coreutils import envvars\nenvvars.set_pyrevit_env_var('MY_SCRIPT_STATUS', True)\nenvvars.set_pyrevit_env_var('MY_SCRIPT_CONFIG', {'someconfig': True})\n</code></pre> <p>Then another script or same script when executed later within the same session can query the shared environment variable:</p> <p><pre><code>envvars.get_pyrevit_env_vars('MY_SCRIPT_STATUS')\n</code></pre> True <pre><code>envvars.get_pyrevit_env_vars('MY_SCRIPT_CONFIG')\n</code></pre> {'someconfig': True}</p>"},{"location":"reference/pyrevit/coreutils/envvars/#pyrevit.coreutils.envvars-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/envvars/#pyrevit.coreutils.envvars.PRODUCT_NAME","title":"<code>PRODUCT_NAME = str(Common.PyRevitLabsConsts.ProductName).upper()</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/envvars/#pyrevit.coreutils.envvars.ENV_VAR_DICT_NAME","title":"<code>ENV_VAR_DICT_NAME = PRODUCT_NAME + 'EnvVarsDict'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/envvars/#pyrevit.coreutils.envvars.SESSIONUUID_ENVVAR","title":"<code>SESSIONUUID_ENVVAR = PRODUCT_NAME + '_UUID'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/envvars/#pyrevit.coreutils.envvars.APPVERSION_ENVVAR","title":"<code>APPVERSION_ENVVAR = PRODUCT_NAME + '_APPVERSION'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/envvars/#pyrevit.coreutils.envvars.VERSION_ENVVAR","title":"<code>VERSION_ENVVAR = PRODUCT_NAME + '_VERSION'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/envvars/#pyrevit.coreutils.envvars.CLONENAME_ENVVAR","title":"<code>CLONENAME_ENVVAR = PRODUCT_NAME + '_CLONE'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/envvars/#pyrevit.coreutils.envvars.IPYVERSION_ENVVAR","title":"<code>IPYVERSION_ENVVAR = PRODUCT_NAME + '_IPYVERSION'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/envvars/#pyrevit.coreutils.envvars.CPYVERSION_ENVVAR","title":"<code>CPYVERSION_ENVVAR = PRODUCT_NAME + '_CPYVERSION'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/envvars/#pyrevit.coreutils.envvars.LOGGING_LEVEL_ENVVAR","title":"<code>LOGGING_LEVEL_ENVVAR = PRODUCT_NAME + '_LOGGINGLEVEL'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/envvars/#pyrevit.coreutils.envvars.FILELOGGING_ENVVAR","title":"<code>FILELOGGING_ENVVAR = PRODUCT_NAME + '_FILELOGGING'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/envvars/#pyrevit.coreutils.envvars.LOADEDASSMS_ENVVAR","title":"<code>LOADEDASSMS_ENVVAR = PRODUCT_NAME + '_LOADEDASSMS'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/envvars/#pyrevit.coreutils.envvars.REFEDASSMS_ENVVAR","title":"<code>REFEDASSMS_ENVVAR = PRODUCT_NAME + '_REFEDASSMS'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/envvars/#pyrevit.coreutils.envvars.TELEMETRYSTATE_ENVVAR","title":"<code>TELEMETRYSTATE_ENVVAR = PRODUCT_NAME + '_TELEMETRYSTATE'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/envvars/#pyrevit.coreutils.envvars.TELEMETRYUTCTIMESTAMPS_ENVVAR","title":"<code>TELEMETRYUTCTIMESTAMPS_ENVVAR = PRODUCT_NAME + '_TELEMETRYUTCTIMESTAMPS'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/envvars/#pyrevit.coreutils.envvars.TELEMETRYDIR_ENVVAR","title":"<code>TELEMETRYDIR_ENVVAR = PRODUCT_NAME + '_TELEMETRYDIR'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/envvars/#pyrevit.coreutils.envvars.TELEMETRYFILE_ENVVAR","title":"<code>TELEMETRYFILE_ENVVAR = PRODUCT_NAME + '_TELEMETRYFILE'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/envvars/#pyrevit.coreutils.envvars.TELEMETRYSERVER_ENVVAR","title":"<code>TELEMETRYSERVER_ENVVAR = PRODUCT_NAME + '_TELEMETRYSERVER'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/envvars/#pyrevit.coreutils.envvars.TELEMETRYINCLUDEHOOKS_ENVVAR","title":"<code>TELEMETRYINCLUDEHOOKS_ENVVAR = PRODUCT_NAME + '_TELEMETRYINCLUDEHOOKS'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/envvars/#pyrevit.coreutils.envvars.APPTELEMETRYSTATE_ENVVAR","title":"<code>APPTELEMETRYSTATE_ENVVAR = PRODUCT_NAME + '_APPTELEMETRYSTATE'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/envvars/#pyrevit.coreutils.envvars.APPTELEMETRYHANDLER_ENVVAR","title":"<code>APPTELEMETRYHANDLER_ENVVAR = PRODUCT_NAME + '_APPTELEMETRYHANDLER'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/envvars/#pyrevit.coreutils.envvars.APPTELEMETRYSERVER_ENVVAR","title":"<code>APPTELEMETRYSERVER_ENVVAR = PRODUCT_NAME + '_APPTELEMETRYSERVER'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/envvars/#pyrevit.coreutils.envvars.APPTELEMETRYEVENTFLAGS_ENVVAR","title":"<code>APPTELEMETRYEVENTFLAGS_ENVVAR = PRODUCT_NAME + '_APPTELEMETRYEVENTFLAGS'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/envvars/#pyrevit.coreutils.envvars.ROUTES_SERVER","title":"<code>ROUTES_SERVER = PRODUCT_NAME + '_ROUTESSERVER'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/envvars/#pyrevit.coreutils.envvars.ROUTES_ROUTES","title":"<code>ROUTES_ROUTES = PRODUCT_NAME + '_ROUTESROUTES'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/envvars/#pyrevit.coreutils.envvars.HOOKS_ENVVAR","title":"<code>HOOKS_ENVVAR = PRODUCT_NAME + '_HOOKS'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/envvars/#pyrevit.coreutils.envvars.HOOKSHANDLER_ENVVAR","title":"<code>HOOKSHANDLER_ENVVAR = PRODUCT_NAME + '_HOOKSHANDLER'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/envvars/#pyrevit.coreutils.envvars.AUTOUPDATING_ENVVAR","title":"<code>AUTOUPDATING_ENVVAR = PRODUCT_NAME + '_AUTOUPDATE'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/envvars/#pyrevit.coreutils.envvars.OUTPUT_STYLESHEET_ENVVAR","title":"<code>OUTPUT_STYLESHEET_ENVVAR = PRODUCT_NAME + '_STYLESHEET'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/envvars/#pyrevit.coreutils.envvars.RIBBONUPDATOR_ENVVAR","title":"<code>RIBBONUPDATOR_ENVVAR = PRODUCT_NAME + '_RIBBONUPDATOR'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/envvars/#pyrevit.coreutils.envvars.TABCOLORIZER_ENVVAR","title":"<code>TABCOLORIZER_ENVVAR = PRODUCT_NAME + '_TABCOLORIZER'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/envvars/#pyrevit.coreutils.envvars-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/envvars/#pyrevit.coreutils.envvars.get_pyrevit_env_vars","title":"<code>get_pyrevit_env_vars()</code>","text":"<p>Get the root dictionary, holding all environment variables.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/envvars.py</code> <pre><code>def get_pyrevit_env_vars():\n    \"\"\"Get the root dictionary, holding all environment variables.\"\"\"\n    return AppDomain.CurrentDomain.GetData(ENV_VAR_DICT_NAME)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/envvars/#pyrevit.coreutils.envvars.get_pyrevit_env_var","title":"<code>get_pyrevit_env_var(param_name)</code>","text":"<p>Get value of a parameter shared between all scripts.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>name of environment variable</p> required <p>Returns:</p> Type Description <code>object</code> <p>any object stored as the environment variable value</p> Source code in <code>pyrevitlib/pyrevit/coreutils/envvars.py</code> <pre><code>def get_pyrevit_env_var(param_name):\n    \"\"\"Get value of a parameter shared between all scripts.\n\n    Args:\n        param_name (str): name of environment variable\n\n    Returns:\n        (object): any object stored as the environment variable value\n    \"\"\"\n    # This function returns None if it can not find the parameter.\n    # Thus value of None should not be used for params\n\n    data_dict = get_pyrevit_env_vars()\n    return data_dict.get(param_name) if data_dict else None\n</code></pre>"},{"location":"reference/pyrevit/coreutils/envvars/#pyrevit.coreutils.envvars.set_pyrevit_env_var","title":"<code>set_pyrevit_env_var(param_name, param_value)</code>","text":"<p>Set value of a parameter shared between all scripts.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>name of environment variable</p> required <code>param_value</code> <code>object</code> <p>any python object</p> required Source code in <code>pyrevitlib/pyrevit/coreutils/envvars.py</code> <pre><code>def set_pyrevit_env_var(param_name, param_value):\n    \"\"\"Set value of a parameter shared between all scripts.\n\n    Args:\n        param_name (str): name of environment variable\n        param_value (object): any python object\n    \"\"\"\n    # Get function returns None if it can not find the parameter.\n    # Thus value of None should not be used for params\n    data_dict = get_pyrevit_env_vars() or {}\n    data_dict[param_name] = param_value\n    AppDomain.CurrentDomain.SetData(ENV_VAR_DICT_NAME, data_dict)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/git/","title":"git","text":"<p>LibGit2Sharp wrapper module for pyRevit.</p> Documentation <p>https://github.com/libgit2/libgit2sharp/wiki</p>"},{"location":"reference/pyrevit/coreutils/git/#pyrevit.coreutils.git-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/git/#pyrevit.coreutils.git.mlogger","title":"<code>mlogger = get_logger(__name__)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/git/#pyrevit.coreutils.git.GIT_LIB","title":"<code>GIT_LIB = 'LibGit2Sharp'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/git/#pyrevit.coreutils.git.LIBGIT_DLL","title":"<code>LIBGIT_DLL = framework.get_dll_file(GIT_LIB)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/git/#pyrevit.coreutils.git-classes","title":"Classes","text":""},{"location":"reference/pyrevit/coreutils/git/#pyrevit.coreutils.git.PyRevitGitAuthenticationError","title":"<code>PyRevitGitAuthenticationError</code>","text":"<p>               Bases: <code>PyRevitException</code></p> <p>Git authentication error.</p>"},{"location":"reference/pyrevit/coreutils/git/#pyrevit.coreutils.git.PyRevitGitAuthenticationError-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/git/#pyrevit.coreutils.git.PyRevitGitAuthenticationError.msg","title":"<code>msg</code>  <code>property</code>","text":"<p>Return exception message.</p>"},{"location":"reference/pyrevit/coreutils/git/#pyrevit.coreutils.git.RepoInfo","title":"<code>RepoInfo(repo)</code>","text":"<p>               Bases: <code>object</code></p> <p>Repo wrapper for passing around repository information.</p> <p>Attributes:</p> Name Type Description <code>directory</code> <code>str</code> <p>repo directory</p> <code>name</code> <code>str</code> <p>repo name</p> <code>head_name</code> <code>str</code> <p>head branch name</p> <code>last_commit_hash</code> <code>str</code> <p>hash of head commit</p> <code>repo</code> <code>str</code> <p><code>LibGit2Sharp.Repository</code> object</p> <code>branch</code> <code>str</code> <p>current branch name</p> <code>username</code> <code>str</code> <p>credentials - username</p> <code>password</code> <code>str</code> <p>credentials - password</p> Source code in <code>pyrevitlib/pyrevit/coreutils/git.py</code> <pre><code>def __init__(self, repo):\n    self.directory = repo.Info.WorkingDirectory\n    self.name = op.basename(op.normpath(self.directory))\n    self.head_name = repo.Head.FriendlyName\n    self.last_commit_hash = repo.Head.Tip.Id.Sha\n    self.repo = repo\n    self.branch = repo.Head.FriendlyName\n    self.username = self.password = None\n</code></pre>"},{"location":"reference/pyrevit/coreutils/git/#pyrevit.coreutils.git.RepoInfo-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/git/#pyrevit.coreutils.git.RepoInfo.directory","title":"<code>directory = repo.Info.WorkingDirectory</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/git/#pyrevit.coreutils.git.RepoInfo.name","title":"<code>name = op.basename(op.normpath(self.directory))</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/git/#pyrevit.coreutils.git.RepoInfo.head_name","title":"<code>head_name = repo.Head.FriendlyName</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/git/#pyrevit.coreutils.git.RepoInfo.last_commit_hash","title":"<code>last_commit_hash = repo.Head.Tip.Id.Sha</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/git/#pyrevit.coreutils.git.RepoInfo.repo","title":"<code>repo = repo</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/git/#pyrevit.coreutils.git.RepoInfo.branch","title":"<code>branch = repo.Head.FriendlyName</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/git/#pyrevit.coreutils.git.RepoInfo.username","title":"<code>username = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/git/#pyrevit.coreutils.git.RepoInfo.password","title":"<code>password = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/git/#pyrevit.coreutils.git-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/git/#pyrevit.coreutils.git.get_repo","title":"<code>get_repo(repo_dir)</code>","text":"<p>Return repo object for given git repo directory.</p> <p>Parameters:</p> Name Type Description Default <code>repo_dir</code> <code>str</code> <p>full path of git repo directory</p> required <p>Returns:</p> Type Description <code>RepoInfo</code> <p>repo object</p> Source code in <code>pyrevitlib/pyrevit/coreutils/git.py</code> <pre><code>def get_repo(repo_dir):\n    \"\"\"Return repo object for given git repo directory.\n\n    Args:\n        repo_dir (str): full path of git repo directory\n\n    Returns:\n        (RepoInfo): repo object\n    \"\"\"\n    repo = libgit.Repository(repo_dir)\n    return RepoInfo(repo)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/git/#pyrevit.coreutils.git.git_pull","title":"<code>git_pull(repo_info)</code>","text":"<p>Pull the current head of given repo.</p> <p>Parameters:</p> Name Type Description Default <code>repo_info</code> <code>RepoInfo</code> <p>target repo object</p> required <p>Returns:</p> Type Description <code>RepoInfo</code> <p>repo object with updated head</p> Source code in <code>pyrevitlib/pyrevit/coreutils/git.py</code> <pre><code>def git_pull(repo_info):\n    \"\"\"Pull the current head of given repo.\n\n    Args:\n        repo_info (RepoInfo): target repo object\n\n    Returns:\n        (RepoInfo): repo object with updated head\n    \"\"\"\n    repo = repo_info.repo\n    try:\n        libgit.Commands.Pull(repo,\n                             _make_pull_signature(),\n                             _make_pull_options(repo_info))\n\n        mlogger.debug('Successfully pulled repo: %s', repo_info.directory)\n        head_msg = safe_strtype(repo.Head.Tip.Message).replace('\\n', '')\n\n        mlogger.debug('New head is: %s &gt; %s', repo.Head.Tip.Id.Sha, head_msg)\n        return RepoInfo(repo)\n\n    except Exception as pull_err:\n        mlogger.debug('Failed git pull: %s | %s', repo_info.directory, pull_err)\n        _process_git_error(pull_err)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/git/#pyrevit.coreutils.git.git_fetch","title":"<code>git_fetch(repo_info)</code>","text":"<p>Fetch current branch of given repo.</p> <p>Parameters:</p> Name Type Description Default <code>repo_info</code> <code>RepoInfo</code> <p>target repo object</p> required <p>Returns:</p> Type Description <code>RepoInfo</code> <p>repo object with updated head</p> Source code in <code>pyrevitlib/pyrevit/coreutils/git.py</code> <pre><code>def git_fetch(repo_info):\n    \"\"\"Fetch current branch of given repo.\n\n    Args:\n        repo_info (RepoInfo): target repo object\n\n    Returns:\n        (RepoInfo): repo object with updated head\n    \"\"\"\n    repo = repo_info.repo\n    try:\n        libgit.Commands.Fetch(repo,\n                              repo.Head.TrackedBranch.RemoteName,\n                              [],\n                              _make_fetch_options(repo_info),\n                              'fetching pyrevit updates')\n\n        mlogger.debug('Successfully pulled repo: %s', repo_info.directory)\n        head_msg = safe_strtype(repo.Head.Tip.Message).replace('\\n', '')\n\n        mlogger.debug('New head is: %s &gt; %s', repo.Head.Tip.Id.Sha, head_msg)\n        return RepoInfo(repo)\n\n    except Exception as fetch_err:\n        mlogger.debug('Failed git fetch: %s | %s',\n                      repo_info.directory, fetch_err)\n        _process_git_error(fetch_err)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/git/#pyrevit.coreutils.git.git_clone","title":"<code>git_clone(repo_url, clone_dir, username=None, password=None)</code>","text":"<p>Clone git repository to given location.</p> <p>Parameters:</p> Name Type Description Default <code>repo_url</code> <code>str</code> <p>repo .git url</p> required <code>clone_dir</code> <code>str</code> <p>destination path</p> required <code>username</code> <code>str</code> <p>credentials - username</p> <code>None</code> <code>password</code> <code>str</code> <p>credentials - password</p> <code>None</code> Source code in <code>pyrevitlib/pyrevit/coreutils/git.py</code> <pre><code>def git_clone(repo_url, clone_dir, username=None, password=None):\n    \"\"\"Clone git repository to given location.\n\n    Args:\n        repo_url (str): repo .git url\n        clone_dir (str): destination path\n        username (str): credentials - username\n        password (str): credentials - password\n    \"\"\"\n    try:\n        libgit.Repository.Clone(repo_url,\n                                clone_dir,\n                                _make_clone_options(username=username,\n                                                    password=password))\n\n        mlogger.debug('Completed git clone: %s @ %s', repo_url, clone_dir)\n\n    except Exception as clone_err:\n        mlogger.debug('Error cloning repo: %s to %s | %s',\n                      repo_url, clone_dir, clone_err)\n        _process_git_error(clone_err)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/git/#pyrevit.coreutils.git.compare_branch_heads","title":"<code>compare_branch_heads(repo_info)</code>","text":"<p>Compare local and remote branch heads and return ???</p> <p>Parameters:</p> Name Type Description Default <code>repo_info</code> <code>RepoInfo</code> <p>target repo object</p> required Source code in <code>pyrevitlib/pyrevit/coreutils/git.py</code> <pre><code>def compare_branch_heads(repo_info):\n    \"\"\"Compare local and remote branch heads and return ???\n\n    Args:\n        repo_info (RepoInfo): target repo object\n    \"\"\"\n    # FIXME: need return type. possibly simplify\n    repo = repo_info.repo\n    repo_branches = repo.Branches\n\n    mlogger.debug('Repo branches: %s', [b.FriendlyName for b in repo_branches])\n\n    for branch in repo_branches:\n        if branch.FriendlyName == repo_info.branch and not branch.IsRemote:\n            try:\n                if branch.TrackedBranch:\n                    mlogger.debug('Comparing heads: %s of %s',\n                                  branch.CanonicalName,\n                                  branch.TrackedBranch.CanonicalName)\n\n                    hist_div = repo.ObjectDatabase. \\\n                        CalculateHistoryDivergence(branch.Tip,\n                                                   branch.TrackedBranch.Tip)\n                    return hist_div\n            except Exception as compare_err:\n                mlogger.error('Can not compare branch %s in repo: %s | %s',\n                              branch,\n                              repo,\n                              safe_strtype(compare_err).replace('\\n', ''))\n        else:\n            mlogger.debug('Skipping remote branch: %s', branch.CanonicalName)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/git/#pyrevit.coreutils.git.get_all_new_commits","title":"<code>get_all_new_commits(repo_info)</code>","text":"<p>Fetch and return new commits ahead of current head.</p> <p>Parameters:</p> Name Type Description Default <code>repo_info</code> <code>RepoInfo</code> <p>target repo object</p> required <p>Returns:</p> Type Description <code>OrderedDict[str, str]</code> <p>ordered dict of commit hash:message</p> Source code in <code>pyrevitlib/pyrevit/coreutils/git.py</code> <pre><code>def get_all_new_commits(repo_info):\n    \"\"\"Fetch and return new commits ahead of current head.\n\n    Args:\n        repo_info (RepoInfo): target repo object\n\n    Returns:\n        (OrderedDict[str, str]): ordered dict of commit hash:message\n    \"\"\"\n    repo = repo_info.repo\n    current_commit = repo_info.last_commit_hash\n\n    ref_commit = repo.Lookup(libgit.ObjectId(current_commit),\n                             libgit.ObjectType.Commit)\n\n    # Let's only consider the refs that lead to this commit...\n    refs = repo.Refs.ReachableFrom([ref_commit])\n\n    # ...and create a filter that will retrieve all the commits...\n    commit_filter = libgit.CommitFilter()\n    commit_filter.IncludeReachableFrom = refs\n    commit_filter.ExcludeReachableFrom = ref_commit\n    commit_filter.SortBy = libgit.CommitSortStrategies.Time\n\n    commits = repo.Commits.QueryBy(commit_filter)\n    commitsdict = OrderedDict()\n    for commit in commits:\n        if commit in repo.Head.Commits \\\n                or commit in repo.Head.TrackedBranch.Commits:\n            commitsdict[commit.Id.ToString()] = commit.MessageShort\n\n    return commitsdict\n</code></pre>"},{"location":"reference/pyrevit/coreutils/logger/","title":"logger","text":"<p>Core logging module for pyRevit.</p>"},{"location":"reference/pyrevit/coreutils/logger/#pyrevit.coreutils.logger-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/logger/#pyrevit.coreutils.logger.LOG_REC_FORMAT","title":"<code>LOG_REC_FORMAT = '%(levelname)s [%(name)s] %(message)s'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/logger/#pyrevit.coreutils.logger.LOG_REC_FORMAT_HEADER","title":"<code>LOG_REC_FORMAT_HEADER = coreutils.prepare_html_str('&lt;strong&gt;%(levelname)s&lt;/strong&gt; [%(name)s] %(message)s')</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/logger/#pyrevit.coreutils.logger.LOG_REC_FORMAT_HEADER_NO_NAME","title":"<code>LOG_REC_FORMAT_HEADER_NO_NAME = coreutils.prepare_html_str('&lt;strong&gt;%(levelname)s&lt;/strong&gt;\\n%(message)s')</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/logger/#pyrevit.coreutils.logger.LOG_REC_FORMAT_EMOJI","title":"<code>LOG_REC_FORMAT_EMOJI = '{emoji} %(levelname)s [%(name)s] %(message)s'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/logger/#pyrevit.coreutils.logger.LOG_REC_FORMAT_FILE","title":"<code>LOG_REC_FORMAT_FILE = '%(asctime)s %(levelname)s [%(name)s] %(message)s'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/logger/#pyrevit.coreutils.logger.LOG_REC_FORMAT_FILE_C","title":"<code>LOG_REC_FORMAT_FILE_C = '%(asctime)s %(levelname)s [&lt;{}&gt; %(name)s] %(message)s'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/logger/#pyrevit.coreutils.logger.LOG_REC_FORMAT_HTML","title":"<code>LOG_REC_FORMAT_HTML = coreutils.prepare_html_str('&lt;div class=\"logdefault {style}\"&gt;{message}&lt;/div&gt;')</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/logger/#pyrevit.coreutils.logger.LOG_REC_CLASS_ERROR","title":"<code>LOG_REC_CLASS_ERROR = 'logerror'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/logger/#pyrevit.coreutils.logger.LOG_REC_FORMAT_ERROR","title":"<code>LOG_REC_FORMAT_ERROR = LOG_REC_FORMAT_HTML.format(style=LOG_REC_CLASS_ERROR, message=LOG_REC_FORMAT_HEADER)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/logger/#pyrevit.coreutils.logger.LOG_REC_CLASS_WARNING","title":"<code>LOG_REC_CLASS_WARNING = 'logwarning'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/logger/#pyrevit.coreutils.logger.LOG_REC_FORMAT_WARNING","title":"<code>LOG_REC_FORMAT_WARNING = LOG_REC_FORMAT_HTML.format(style=LOG_REC_CLASS_WARNING, message=LOG_REC_FORMAT_HEADER)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/logger/#pyrevit.coreutils.logger.LOG_REC_CLASS_CRITICAL","title":"<code>LOG_REC_CLASS_CRITICAL = 'logcritical'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/logger/#pyrevit.coreutils.logger.LOG_REC_FORMAT_CRITICAL","title":"<code>LOG_REC_FORMAT_CRITICAL = LOG_REC_FORMAT_HTML.format(style=LOG_REC_CLASS_CRITICAL, message=LOG_REC_FORMAT_HEADER)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/logger/#pyrevit.coreutils.logger.LOG_REC_CLASS_SUCCESS","title":"<code>LOG_REC_CLASS_SUCCESS = 'logsuccess'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/logger/#pyrevit.coreutils.logger.LOG_REC_FORMAT_SUCCESS","title":"<code>LOG_REC_FORMAT_SUCCESS = LOG_REC_FORMAT_HTML.format(style=LOG_REC_CLASS_SUCCESS, message=LOG_REC_FORMAT_HEADER_NO_NAME)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/logger/#pyrevit.coreutils.logger.LOG_REC_CLASS_DEPRECATE","title":"<code>LOG_REC_CLASS_DEPRECATE = 'logdeprecate'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/logger/#pyrevit.coreutils.logger.LOG_REC_FORMAT_DEPRECATE","title":"<code>LOG_REC_FORMAT_DEPRECATE = LOG_REC_FORMAT_HTML.format(style=LOG_REC_CLASS_DEPRECATE, message=LOG_REC_FORMAT_HEADER_NO_NAME)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/logger/#pyrevit.coreutils.logger.DEFAULT_LOGGING_LEVEL","title":"<code>DEFAULT_LOGGING_LEVEL = logging.WARNING</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/logger/#pyrevit.coreutils.logger.DEPRECATE_LOG_LEVEL","title":"<code>DEPRECATE_LOG_LEVEL = 25</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/logger/#pyrevit.coreutils.logger.SUCCESS_LOG_LEVEL","title":"<code>SUCCESS_LOG_LEVEL = 80</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/logger/#pyrevit.coreutils.logger.FILE_LOG_FILENAME","title":"<code>FILE_LOG_FILENAME = '{}runtime.log'.format(PYREVIT_FILE_PREFIX_STAMPED)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/logger/#pyrevit.coreutils.logger.FILE_LOG_FILEPATH","title":"<code>FILE_LOG_FILEPATH = op.join(PYREVIT_VERSION_APP_DIR, FILE_LOG_FILENAME)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/logger/#pyrevit.coreutils.logger.FILE_LOGGING_DEFAULT_STATE","title":"<code>FILE_LOGGING_DEFAULT_STATE = False</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/logger/#pyrevit.coreutils.logger.stdout_hndlr","title":"<code>stdout_hndlr = logging.StreamHandler(sys.stdout)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/logger/#pyrevit.coreutils.logger.default_formatter","title":"<code>default_formatter = logging.Formatter(LOG_REC_FORMAT)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/logger/#pyrevit.coreutils.logger.formatters","title":"<code>formatters = {SUCCESS_LOG_LEVEL: logging.Formatter(LOG_REC_FORMAT_SUCCESS), logging.ERROR: logging.Formatter(LOG_REC_FORMAT_ERROR), logging.WARNING: logging.Formatter(LOG_REC_FORMAT_WARNING), logging.CRITICAL: logging.Formatter(LOG_REC_FORMAT_CRITICAL), DEPRECATE_LOG_LEVEL: logging.Formatter(LOG_REC_FORMAT_DEPRECATE)}</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/logger/#pyrevit.coreutils.logger.file_hndlr","title":"<code>file_hndlr = logging.FileHandler(FILE_LOG_FILEPATH, mode='a', delay=True)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/logger/#pyrevit.coreutils.logger.file_formatter","title":"<code>file_formatter = logging.Formatter(LOG_REC_FORMAT_FILE)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/logger/#pyrevit.coreutils.logger.loggers","title":"<code>loggers = {}</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/logger/#pyrevit.coreutils.logger-classes","title":"Classes","text":""},{"location":"reference/pyrevit/coreutils/logger/#pyrevit.coreutils.logger.DispatchingFormatter","title":"<code>DispatchingFormatter(log_formatters, log_default_formatter)</code>","text":"<p>               Bases: <code>object</code></p> <p>Dispatching formatter to format by log level.</p> <p>Parameters:</p> Name Type Description Default <code>log_formatters</code> <code>dict[int</code> <p>logging.Formatter]): dict of level:formatter key pairs</p> required <code>log_default_formatter</code> <code>Formatter</code> <p>default formatter</p> required Source code in <code>pyrevitlib/pyrevit/coreutils/logger.py</code> <pre><code>def __init__(self, log_formatters, log_default_formatter):\n    self._formatters = log_formatters\n    self._default_formatter = log_default_formatter\n</code></pre>"},{"location":"reference/pyrevit/coreutils/logger/#pyrevit.coreutils.logger.DispatchingFormatter-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/logger/#pyrevit.coreutils.logger.DispatchingFormatter.format","title":"<code>format(record)</code>","text":"<p>Format given record by log level.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/logger.py</code> <pre><code>def format(self, record):\n    \"\"\"Format given record by log level.\"\"\"\n    formatter = self._formatters.get(record.levelno,\n                                     self._default_formatter)\n    return formatter.format(record)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/logger/#pyrevit.coreutils.logger.LoggerWrapper","title":"<code>LoggerWrapper(*args)</code>","text":"<p>               Bases: <code>Logger</code></p> <p>Custom logging object.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/logger.py</code> <pre><code>def __init__(self, *args):\n    logging.Logger.__init__(self, *args)\n    self._has_errors = False\n    self._filelogstate = False\n    self._curlevel = DEFAULT_LOGGING_LEVEL\n</code></pre>"},{"location":"reference/pyrevit/coreutils/logger/#pyrevit.coreutils.logger.LoggerWrapper-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/logger/#pyrevit.coreutils.logger.LoggerWrapper.callHandlers","title":"<code>callHandlers(record)</code>","text":"<p>Override logging.Logger.callHandlers.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/logger.py</code> <pre><code>def callHandlers(self, record):\n    \"\"\"Override logging.Logger.callHandlers.\"\"\"\n    for hdlr in self.handlers:\n        # stream-handler only records based on current level\n        if isinstance(hdlr, logging.StreamHandler) \\\n                and record.levelno &gt;= self._curlevel:\n            hdlr.handle(record)\n        # file-handler must record everything\n        elif isinstance(hdlr, logging.FileHandler) \\\n                and self._filelogstate:\n            hdlr.handle(record)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/logger/#pyrevit.coreutils.logger.LoggerWrapper.isEnabledFor","title":"<code>isEnabledFor(level)</code>","text":"<p>Override logging.Logger.isEnabledFor.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/logger.py</code> <pre><code>def isEnabledFor(self, level):\n    \"\"\"Override logging.Logger.isEnabledFor.\"\"\"\n    # update current logging level and file logging state\n    self._filelogstate = \\\n        envvars.get_pyrevit_env_var(envvars.FILELOGGING_ENVVAR)\n    self._curlevel = \\\n        envvars.get_pyrevit_env_var(envvars.LOGGING_LEVEL_ENVVAR)\n\n    # the loader assembly sets EXEC_PARAMS.debug_mode to true if\n    # user Ctrl-clicks on the button at script runtime.\n    if EXEC_PARAMS.debug_mode:\n        self._curlevel = logging.DEBUG\n\n    # if file logging is disabled, return the current logging level\n    # but if it's enabled, return the file logging level so the record\n    # is generated and logged by file-handler. The stream-handler still\n    # outputs the record based on the current logging level\n    if self._filelogstate:\n        return level &gt;= logging.DEBUG\n\n    return level &gt;= self._curlevel\n</code></pre>"},{"location":"reference/pyrevit/coreutils/logger/#pyrevit.coreutils.logger.LoggerWrapper.is_enabled_for","title":"<code>is_enabled_for(level)</code>","text":"<p>Check if logger is enabled for level in pyRevit environment.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/logger.py</code> <pre><code>def is_enabled_for(self, level):\n    \"\"\"Check if logger is enabled for level in pyRevit environment.\"\"\"\n    self._curlevel = \\\n        envvars.get_pyrevit_env_var(envvars.LOGGING_LEVEL_ENVVAR)\n\n    # the loader assembly sets EXEC_PARAMS.debug_mode to true if\n    # user Ctrl-clicks on the button at script runtime.\n    if EXEC_PARAMS.debug_mode:\n        self._curlevel = logging.DEBUG\n\n    return level &gt;= self._curlevel\n</code></pre>"},{"location":"reference/pyrevit/coreutils/logger/#pyrevit.coreutils.logger.LoggerWrapper.has_errors","title":"<code>has_errors()</code>","text":"<p>Check if logger has reported any errors.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/logger.py</code> <pre><code>def has_errors(self):\n    \"\"\"Check if logger has reported any errors.\"\"\"\n    return self._has_errors\n</code></pre>"},{"location":"reference/pyrevit/coreutils/logger/#pyrevit.coreutils.logger.LoggerWrapper.set_level","title":"<code>set_level(level)</code>","text":"<p>Set logging level to level.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/logger.py</code> <pre><code>def set_level(self, level):\n    \"\"\"Set logging level to level.\"\"\"\n    self._reset_logger_env_vars(level)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/logger/#pyrevit.coreutils.logger.LoggerWrapper.set_quiet_mode","title":"<code>set_quiet_mode()</code>","text":"<p>Activate quiet mode. All log levels are disabled.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/logger.py</code> <pre><code>def set_quiet_mode(self):\n    \"\"\"Activate quiet mode. All log levels are disabled.\"\"\"\n    self._reset_logger_env_vars(logging.CRITICAL)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/logger/#pyrevit.coreutils.logger.LoggerWrapper.set_verbose_mode","title":"<code>set_verbose_mode()</code>","text":"<p>Activate verbose mode. Log levels &gt;= INFO are enabled.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/logger.py</code> <pre><code>def set_verbose_mode(self):\n    \"\"\"Activate verbose mode. Log levels &gt;= INFO are enabled.\"\"\"\n    self._reset_logger_env_vars(logging.INFO)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/logger/#pyrevit.coreutils.logger.LoggerWrapper.set_debug_mode","title":"<code>set_debug_mode()</code>","text":"<p>Activate debug mode. Log levels &gt;= DEBUG are enabled.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/logger.py</code> <pre><code>def set_debug_mode(self):\n    \"\"\"Activate debug mode. Log levels &gt;= DEBUG are enabled.\"\"\"\n    self._reset_logger_env_vars(logging.DEBUG)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/logger/#pyrevit.coreutils.logger.LoggerWrapper.reset_level","title":"<code>reset_level()</code>","text":"<p>Reset logging level back to default.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/logger.py</code> <pre><code>def reset_level(self):\n    \"\"\"Reset logging level back to default.\"\"\"\n    self._reset_logger_env_vars(DEFAULT_LOGGING_LEVEL)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/logger/#pyrevit.coreutils.logger.LoggerWrapper.get_level","title":"<code>get_level()</code>","text":"<p>Return current logging level.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/logger.py</code> <pre><code>def get_level(self):\n    \"\"\"Return current logging level.\"\"\"\n    return envvars.get_pyrevit_env_var(envvars.LOGGING_LEVEL_ENVVAR)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/logger/#pyrevit.coreutils.logger.LoggerWrapper.log_parse_except","title":"<code>log_parse_except(parsed_file, parse_ex)</code>","text":"<p>Logs a file parsing exception.</p> <p>Parameters:</p> Name Type Description Default <code>parsed_file</code> <code>str</code> <p>File path that failed the parsing</p> required <code>parse_ex</code> <code>Exception</code> <p>Parsing exception</p> required Source code in <code>pyrevitlib/pyrevit/coreutils/logger.py</code> <pre><code>def log_parse_except(self, parsed_file, parse_ex):\n    \"\"\"Logs a file parsing exception.\n\n    Args:\n        parsed_file (str): File path that failed the parsing\n        parse_ex (Exception): Parsing exception\n    \"\"\"\n    err_msg = '&lt;strong&gt;Error while parsing file:&lt;/strong&gt;\\n{file}\\n' \\\n              '&lt;strong&gt;Error type:&lt;/strong&gt; {type}\\n' \\\n              '&lt;strong&gt;Error Message:&lt;/strong&gt; {errmsg}\\n' \\\n              '&lt;strong&gt;Line/Column:&lt;/strong&gt; {lineno}/{colno}\\n' \\\n              '&lt;strong&gt;Line Text:&lt;/strong&gt; {linetext}' \\\n              .format(file=parsed_file,\n                      type=parse_ex.__class__.__name__,\n                      errmsg=parse_ex.msg if hasattr(parse_ex, 'msg') else \"\",\n                      lineno=parse_ex.lineno if hasattr(parse_ex, 'lineno') else 0,\n                      colno=parse_ex.offset if hasattr(parse_ex, 'offset') else 0,\n                      linetext=parse_ex.text if hasattr(parse_ex, 'text') else \"\",\n                      )\n    self.error(coreutils.prepare_html_str(err_msg))\n</code></pre>"},{"location":"reference/pyrevit/coreutils/logger/#pyrevit.coreutils.logger.LoggerWrapper.success","title":"<code>success(message, *args, **kws)</code>","text":"<p>Log a success message.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>success message</p> required <code>*args</code> <code>Any</code> <p>extra agruments passed to the log function</p> <code>()</code> <code>**kws</code> <code>Any</code> <p>extra agruments passed to the log function</p> <code>{}</code> Source code in <code>pyrevitlib/pyrevit/coreutils/logger.py</code> <pre><code>def success(self, message, *args, **kws):\n    \"\"\"Log a success message.\n\n    Args:\n        message (str): success message\n        *args (Any): extra agruments passed to the log function\n        **kws (Any): extra agruments passed to the log function\n    \"\"\"\n    if self.isEnabledFor(SUCCESS_LOG_LEVEL):\n        # Yes, logger takes its '*args' as 'args'.\n        self._log(SUCCESS_LOG_LEVEL, message, args, **kws)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/logger/#pyrevit.coreutils.logger.LoggerWrapper.deprecate","title":"<code>deprecate(message, *args, **kws)</code>","text":"<p>Log a deprecation message.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>deprecation message</p> required <code>*args</code> <code>Any</code> <p>extra agruments passed to the log function</p> <code>()</code> <code>**kws</code> <code>Any</code> <p>extra agruments passed to the log function</p> <code>{}</code> Source code in <code>pyrevitlib/pyrevit/coreutils/logger.py</code> <pre><code>def deprecate(self, message, *args, **kws):\n    \"\"\"Log a deprecation message.\n\n    Args:\n        message (str): deprecation message\n        *args (Any): extra agruments passed to the log function\n        **kws (Any): extra agruments passed to the log function\n    \"\"\"\n    if self.isEnabledFor(DEPRECATE_LOG_LEVEL):\n        # Yes, logger takes its '*args' as 'args'.\n        self._log(DEPRECATE_LOG_LEVEL, message, args, **kws)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/logger/#pyrevit.coreutils.logger.LoggerWrapper.dev_log","title":"<code>dev_log(source, message='')</code>","text":"<p>Appends a message to a log file.</p> <p>Parameters:</p> Name Type Description Default <code>source</code> <code>str</code> <p>source of the message</p> required <code>message</code> <code>str</code> <p>message to log</p> <code>''</code> Source code in <code>pyrevitlib/pyrevit/coreutils/logger.py</code> <pre><code>def dev_log(self, source, message=''):\n    \"\"\"Appends a message to a log file.\n\n    Args:\n        source (str): source of the message\n        message (str): message to log\n    \"\"\"\n    devlog_fname = \\\n        '{}.log'.format(EXEC_PARAMS.command_uniqueid or self.name)\n    with open(op.join(USER_DESKTOP, devlog_fname), 'a') as devlog_file:\n        devlog_file.writelines('{tstamp} [{exid}] {src}: {msg}\\n'.format(\n            tstamp=EXEC_PARAMS.exec_timestamp,\n            exid=EXEC_PARAMS.exec_id,\n            src=source,\n            msg=message,\n            ))\n</code></pre>"},{"location":"reference/pyrevit/coreutils/logger/#pyrevit.coreutils.logger-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/logger/#pyrevit.coreutils.logger.get_stdout_hndlr","title":"<code>get_stdout_hndlr()</code>","text":"<p>Return stdout logging handler object.</p> <p>Returns:</p> Type Description <code>StreamHandler</code> <p>configured instance of python's native stream handler</p> Source code in <code>pyrevitlib/pyrevit/coreutils/logger.py</code> <pre><code>def get_stdout_hndlr():\n    \"\"\"Return stdout logging handler object.\n\n    Returns:\n        (logging.StreamHandler):\n            configured instance of python's native stream handler\n    \"\"\"\n    global stdout_hndlr     #pylint: disable=W0603\n\n    return stdout_hndlr\n</code></pre>"},{"location":"reference/pyrevit/coreutils/logger/#pyrevit.coreutils.logger.get_file_hndlr","title":"<code>get_file_hndlr()</code>","text":"<p>Return file logging handler object.</p> <p>Returns:</p> Type Description <code>FileHandler</code> <p>configured instance of python's native stream handler</p> Source code in <code>pyrevitlib/pyrevit/coreutils/logger.py</code> <pre><code>def get_file_hndlr():\n    \"\"\"Return file logging handler object.\n\n    Returns:\n        (logging.FileHandler):\n            configured instance of python's native stream handler\n    \"\"\"\n    global file_hndlr       #pylint: disable=W0603\n\n    if EXEC_PARAMS.command_mode:\n        cmd_file_hndlr = logging.FileHandler(FILE_LOG_FILEPATH,\n                                             mode='a', delay=True)\n        logformat = LOG_REC_FORMAT_FILE_C.format(EXEC_PARAMS.command_name)\n        formatter = logging.Formatter(logformat)\n        cmd_file_hndlr.setFormatter(formatter)\n        return cmd_file_hndlr\n    else:\n        return file_hndlr\n</code></pre>"},{"location":"reference/pyrevit/coreutils/logger/#pyrevit.coreutils.logger.get_logger","title":"<code>get_logger(logger_name)</code>","text":"<p>Register and return a logger with given name.</p> <p>Caches all registered loggers and returns the same logger object on second call with the same logger name.</p> <p>Parameters:</p> Name Type Description Default <code>logger_name</code> <code>str</code> <p>logger name</p> required <p>Returns:</p> Type Description <code>LoggerWrapper</code> <p>logger object wrapper python's native logger</p> <p>Examples:</p> <p><pre><code>get_logger('my command')\n</code></pre> Source code in <code>pyrevitlib/pyrevit/coreutils/logger.py</code> <pre><code>def get_logger(logger_name):\n    \"\"\"Register and return a logger with given name.\n\n    Caches all registered loggers and returns the same logger object on\n    second call with the same logger name.\n\n    Args:\n        logger_name (str): logger name\n\n    Returns:\n        (LoggerWrapper): logger object wrapper python's native logger\n\n    Examples:\n        ```python\n        get_logger('my command')\n        ```\n        &lt;LoggerWrapper ...&gt;\n    \"\"\"\n    if loggers.get(logger_name):\n        return loggers.get(logger_name)\n    else:\n        logger = logging.getLogger(logger_name)    # type: LoggerWrapper\n        logger.addHandler(get_stdout_hndlr())\n        logger.propagate = False\n        logger.addHandler(get_file_hndlr())\n\n        loggers.update({logger_name: logger})\n        return logger\n</code></pre>"},{"location":"reference/pyrevit/coreutils/logger/#pyrevit.coreutils.logger.set_file_logging","title":"<code>set_file_logging(status)</code>","text":"<p>Set file logging status (enable/disable).</p> <p>Parameters:</p> Name Type Description Default <code>status</code> <code>bool</code> <p>True to enable, False to disable</p> required Source code in <code>pyrevitlib/pyrevit/coreutils/logger.py</code> <pre><code>def set_file_logging(status):\n    \"\"\"Set file logging status (enable/disable).\n\n    Args:\n        status (bool): True to enable, False to disable\n    \"\"\"\n    envvars.set_pyrevit_env_var(envvars.FILELOGGING_ENVVAR, status)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/logger/#pyrevit.coreutils.logger.loggers_have_errors","title":"<code>loggers_have_errors()</code>","text":"<p>Check if any errors have been reported by any of registered loggers.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/logger.py</code> <pre><code>def loggers_have_errors():\n    \"\"\"Check if any errors have been reported by any of registered loggers.\"\"\"\n    for logger in loggers.values():\n        if logger.has_errors():\n            return True\n    return False\n</code></pre>"},{"location":"reference/pyrevit/coreutils/mathnet/","title":"mathnet","text":"<p>MathNet importer module.</p> <p>See https://www.mathdotnet.com for documentation.</p> <p>Examples:</p> <pre><code>from pyrevit.coreutils.mathnet import MathNet\n</code></pre>"},{"location":"reference/pyrevit/coreutils/mathnet/#pyrevit.coreutils.mathnet-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/mathnet/#pyrevit.coreutils.mathnet.mlogger","title":"<code>mlogger = get_logger(__name__)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/mathnet/#pyrevit.coreutils.mathnet.MATHNET_LIB","title":"<code>MATHNET_LIB = 'MathNet.Numerics'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/mathnet/#pyrevit.coreutils.mathnet.mathnet_dll","title":"<code>mathnet_dll = framework.get_dll_file(MATHNET_LIB)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/mathnet/#pyrevit.coreutils.mathnet-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/moduleutils/","title":"moduleutils","text":"<p>Utility fuctions to support smart modules.</p>"},{"location":"reference/pyrevit/coreutils/moduleutils/#pyrevit.coreutils.moduleutils-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/moduleutils/#pyrevit.coreutils.moduleutils.copy_func","title":"<code>copy_func(func, func_name, doc_string=None, arg_list=None)</code>","text":"<p>Copy a function object to create a new function.</p> <p>This is used inside smart modules that auto-generate functions based on context.</p> <p>Parameters:</p> Name Type Description Default <code>func</code> <code>object</code> <p>python source function object</p> required <code>func_name</code> <code>str</code> <p>new function name</p> required <code>doc_string</code> <code>str</code> <p>new function docstring</p> <code>None</code> <code>arg_list</code> <code>list</code> <p>list of default values for function arguments</p> <code>None</code> <p>Returns:</p> Type Description <code>object</code> <p>new python function objects</p> Source code in <code>pyrevitlib/pyrevit/coreutils/moduleutils.py</code> <pre><code>def copy_func(func, func_name, doc_string=None, arg_list=None):\n    \"\"\"Copy a function object to create a new function.\n\n    This is used inside smart modules that auto-generate functions based on\n    context.\n\n    Args:\n        func (object): python source function object\n        func_name (str): new function name\n        doc_string (str): new function docstring\n        arg_list (list): list of default values for function arguments\n\n    Returns:\n        (object): new python function objects\n    \"\"\"\n    new_func = types.FunctionType(func.func_code, func.func_globals,\n                                  func_name, tuple(arg_list), func.func_closure)\n    new_func.__doc__ = doc_string\n    return new_func\n</code></pre>"},{"location":"reference/pyrevit/coreutils/moduleutils/#pyrevit.coreutils.moduleutils.mark","title":"<code>mark(prop_name)</code>","text":"<p>Decorator function to add a marker property to the given type.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/moduleutils.py</code> <pre><code>def mark(prop_name):\n    \"\"\"Decorator function to add a marker property to the given type.\"\"\"\n    def setter_decorator(type_obj):\n        setattr(type_obj, prop_name, True)\n        return type_obj\n    return setter_decorator\n</code></pre>"},{"location":"reference/pyrevit/coreutils/moduleutils/#pyrevit.coreutils.moduleutils.collect_marked","title":"<code>collect_marked(module_obj, prop_name)</code>","text":"<p>Collect module objects that are marked with given property.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/moduleutils.py</code> <pre><code>def collect_marked(module_obj, prop_name):\n    \"\"\"Collect module objects that are marked with given property.\"\"\"\n    marked_objs = []\n    for member in inspect.getmembers(module_obj):\n        _, type_obj = member\n        if (inspect.isclass(type_obj) or inspect.isfunction(type_obj)) \\\n                and getattr(type_obj, prop_name, False):\n            marked_objs.append(type_obj)\n    return marked_objs\n</code></pre>"},{"location":"reference/pyrevit/coreutils/moduleutils/#pyrevit.coreutils.moduleutils.has_argument","title":"<code>has_argument(function_obj, arg_name)</code>","text":"<p>Check if given function object has argument matching arg_name.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/moduleutils.py</code> <pre><code>def has_argument(function_obj, arg_name):\n    \"\"\"Check if given function object has argument matching arg_name.\"\"\"\n    return arg_name in inspect.getargspec(function_obj)[0] #pylint: disable=deprecated-method\n</code></pre>"},{"location":"reference/pyrevit/coreutils/moduleutils/#pyrevit.coreutils.moduleutils.has_any_arguments","title":"<code>has_any_arguments(function_obj, arg_name_list)</code>","text":"<p>Check if given function object has any of given arguments.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/moduleutils.py</code> <pre><code>def has_any_arguments(function_obj, arg_name_list):\n    \"\"\"Check if given function object has any of given arguments.\"\"\"\n    args = inspect.getargspec(function_obj)[0] #pylint: disable=deprecated-method\n    if arg_name_list:\n        return any(x in args for x in arg_name_list)\n    return False\n</code></pre>"},{"location":"reference/pyrevit/coreutils/moduleutils/#pyrevit.coreutils.moduleutils.filter_kwargs","title":"<code>filter_kwargs(function_obj, kwargs)</code>","text":"<p>Filter given arguments dict for function_obj arguments.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/moduleutils.py</code> <pre><code>def filter_kwargs(function_obj, kwargs):\n    \"\"\"Filter given arguments dict for function_obj arguments.\"\"\"\n    filtered_kwargs = {}\n    for arg_name in inspect.getargspec(function_obj)[0]: #pylint: disable=deprecated-method\n        filtered_kwargs[arg_name] = kwargs.get(arg_name, None)\n    return filtered_kwargs\n</code></pre>"},{"location":"reference/pyrevit/coreutils/pyutils/","title":"pyutils","text":"<p>Helper functions for python.</p> <p>Examples:</p> <pre><code>from pyrevit.coreutils import pyutils\npyutils.safe_cast('string', int, 0)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/pyutils/#pyrevit.coreutils.pyutils-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/pyutils/#pyrevit.coreutils.pyutils-classes","title":"Classes","text":""},{"location":"reference/pyrevit/coreutils/pyutils/#pyrevit.coreutils.pyutils.DefaultOrderedDict","title":"<code>DefaultOrderedDict(default_factory=None, *a, **kw)</code>","text":"<p>               Bases: <code>OrderedDict</code></p> <p>Ordered dictionary with default type.</p> <p>This is similar to defaultdict and maintains the order of items added to it so in that regards it functions similar to OrderedDict.</p> <p>Examples:</p> <p><pre><code>from pyrevit.coreutils import pyutils\nod = pyutils.DefaultOrderedDict(list)\nod['A'] = [1, 2, 3]\nod['B'] = [4, 5, 6]\nod['C'].extend([7, 8, 9])\nfor k, v in od.items():\n    print(k, v)\n</code></pre> ('A', [1, 2, 3]) ('B', [4, 5, 6]) ('C', [7, 8, 9])</p> Source code in <code>pyrevitlib/pyrevit/coreutils/pyutils.py</code> <pre><code>def __init__(self, default_factory=None, *a, **kw): #pylint: disable=W1113\n\n    if (default_factory is not None \\\n            and not isinstance(default_factory, Callable)):\n        raise TypeError('first argument must be callable')\n    OrderedDict.__init__(self, *a, **kw)\n    self.default_factory = default_factory\n</code></pre>"},{"location":"reference/pyrevit/coreutils/pyutils/#pyrevit.coreutils.pyutils.DefaultOrderedDict-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/pyutils/#pyrevit.coreutils.pyutils.DefaultOrderedDict.default_factory","title":"<code>default_factory = default_factory</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/pyutils/#pyrevit.coreutils.pyutils.DefaultOrderedDict-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/pyutils/#pyrevit.coreutils.pyutils.DefaultOrderedDict.copy","title":"<code>copy()</code>","text":"<p>Copy the dictionary.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/pyutils.py</code> <pre><code>def copy(self):\n    \"\"\"Copy the dictionary.\"\"\"\n    return self.__copy__()\n</code></pre>"},{"location":"reference/pyrevit/coreutils/pyutils/#pyrevit.coreutils.pyutils-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/pyutils/#pyrevit.coreutils.pyutils.pairwise","title":"<code>pairwise(iterable, step=2)</code>","text":"<p>Iterate through items in pairs.</p> <p>Parameters:</p> Name Type Description Default <code>iterable</code> <code>iterable</code> <p>any iterable object</p> required <code>step</code> <code>int</code> <p>number of steps to move when making pairs</p> <code>2</code> <p>Returns:</p> Type Description <code>Iterable[Any]</code> <p>list of pairs</p> <p>Examples:</p> <p><pre><code>pairwise([1, 2, 3, 4, 5])\n</code></pre> [(1, 2), (3, 4)]    # 5 can not be paired <pre><code>pairwise([1, 2, 3, 4, 5, 6])\n</code></pre> [(1, 2), (3, 4), (5, 6)] <pre><code>pairwise([1, 2, 3, 4, 5, 6], step=1)\n</code></pre> [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]</p> Source code in <code>pyrevitlib/pyrevit/coreutils/pyutils.py</code> <pre><code>def pairwise(iterable, step=2):\n    \"\"\"Iterate through items in pairs.\n\n    Args:\n        iterable (iterable): any iterable object\n        step (int): number of steps to move when making pairs\n\n    Returns:\n        (Iterable[Any]): list of pairs\n\n    Examples:\n        ```python\n        pairwise([1, 2, 3, 4, 5])\n        ```\n        [(1, 2), (3, 4)]    # 5 can not be paired\n        ```python\n        pairwise([1, 2, 3, 4, 5, 6])\n        ```\n        [(1, 2), (3, 4), (5, 6)]\n        ```python\n        pairwise([1, 2, 3, 4, 5, 6], step=1)\n        ```\n        [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]\n    \"\"\"\n    if step == 1:\n        a, b = tee(iterable)\n        next(b, None)\n        return zip(a, b)\n    elif step == 2:\n        a = iter(iterable)\n        return zip(a, a)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/pyutils/#pyrevit.coreutils.pyutils.safe_cast","title":"<code>safe_cast(val, to_type, default=None)</code>","text":"<p>Convert value to type gracefully.</p> <p>This method basically calls to_type(value) and returns the default if exception occurs.</p> <p>Parameters:</p> Name Type Description Default <code>val</code> <code>any</code> <p>value to be converted</p> required <code>to_type</code> <code>type</code> <p>target type</p> required <code>default</code> <code>any</code> <p>value to rerun on conversion exception</p> <code>None</code> <p>Examples:</p> <p><pre><code>safe_cast('name', int, default=0)\n</code></pre> 0</p> Source code in <code>pyrevitlib/pyrevit/coreutils/pyutils.py</code> <pre><code>def safe_cast(val, to_type, default=None):\n    \"\"\"Convert value to type gracefully.\n\n    This method basically calls to_type(value) and returns the default\n    if exception occurs.\n\n    Args:\n        val (any): value to be converted\n        to_type (type): target type\n        default (any): value to rerun on conversion exception\n\n    Examples:\n        ```python\n        safe_cast('name', int, default=0)\n        ```\n        0\n    \"\"\"\n    try:\n        return to_type(val)\n    except (ValueError, TypeError):\n        return default\n</code></pre>"},{"location":"reference/pyrevit/coreutils/pyutils/#pyrevit.coreutils.pyutils.isnumber","title":"<code>isnumber(token)</code>","text":"<p>Verify if given string token is int or float.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>str</code> <p>string value</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True of token is int or float</p> <p>Examples:</p> <p><pre><code>isnumber('12.3')\n</code></pre> True</p> Source code in <code>pyrevitlib/pyrevit/coreutils/pyutils.py</code> <pre><code>def isnumber(token):\n    \"\"\"Verify if given string token is int or float.\n\n    Args:\n        token (str): string value\n\n    Returns:\n        (bool): True of token is int or float\n\n    Examples:\n        ```python\n        isnumber('12.3')\n        ```\n        True\n    \"\"\"\n    if token:\n        return re.match(\"^-*[0-9.]+?$\", token) is not None\n    else:\n        return False\n</code></pre>"},{"location":"reference/pyrevit/coreutils/pyutils/#pyrevit.coreutils.pyutils.compare_lists","title":"<code>compare_lists(x, y)</code>","text":"<p>Compare two lists.</p> <p>See: https://stackoverflow.com/a/10872313/2350244</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>list</code> <p>first list</p> required <code>y</code> <code>list</code> <p>second list</p> required Source code in <code>pyrevitlib/pyrevit/coreutils/pyutils.py</code> <pre><code>def compare_lists(x, y):\n    \"\"\"Compare two lists.\n\n    See: https://stackoverflow.com/a/10872313/2350244\n\n    Args:\n        x (list): first list\n        y (list): second list\n    \"\"\"\n    return len(frozenset(x).difference(y)) == 0\n</code></pre>"},{"location":"reference/pyrevit/coreutils/pyutils/#pyrevit.coreutils.pyutils.merge","title":"<code>merge(d1, d2)</code>","text":"<p>Merge d2 into d1.</p> <p>d2 dict values are recursively merged into d1 dict values other d2 values are added to d1 dict values with the same key new d2 values are added to d1 d2 values override other d1 values</p> <p>Parameters:</p> Name Type Description Default <code>d1</code> <code>dict</code> <p>dict to be updated</p> required <code>d2</code> <code>dict</code> <p>dict to be merge into d1</p> required <p>Returns:</p> Type Description <code>dict[Any, Any]</code> <p>updated d1</p> <p>Examples:</p> <p><pre><code>d1 = {1: 1, 2: \"B\"    , 3: {1:\"A\", 2:\"B\"}, 4: \"b\"  , 5: [\"a\", \"b\"]}\nd2 = {1: 1, 2: {1:\"A\"}, 3: {1:\"S\", 3:\"C\"}, 4: [\"a\"], 5: [\"c\"]}\nmerge(d1, d2)\n</code></pre> { 1:1,   2:{1:'A', 2:'B'},   3:{1:'S', 2:'B', 3:'C'},   4:['a','b'],   5: ['c', 'a', 'b'] }</p> Source code in <code>pyrevitlib/pyrevit/coreutils/pyutils.py</code> <pre><code>def merge(d1, d2):\n    \"\"\"Merge d2 into d1.\n\n    d2 dict values are recursively merged into d1 dict values\n    other d2 values are added to d1 dict values with the same key\n    new d2 values are added to d1\n    d2 values override other d1 values\n\n    Args:\n        d1 (dict): dict to be updated\n        d2 (dict): dict to be merge into d1\n\n    Returns:\n        (dict[Any, Any]): updated d1\n\n    Examples:\n        ```python\n        d1 = {1: 1, 2: \"B\"    , 3: {1:\"A\", 2:\"B\"}, 4: \"b\"  , 5: [\"a\", \"b\"]}\n        d2 = {1: 1, 2: {1:\"A\"}, 3: {1:\"S\", 3:\"C\"}, 4: [\"a\"], 5: [\"c\"]}\n        merge(d1, d2)\n        ```\n        { 1:1,\n          2:{1:'A', 2:'B'},\n          3:{1:'S', 2:'B', 3:'C'},\n          4:['a','b'],\n          5: ['c', 'a', 'b']\n        }\n    \"\"\"\n    if not (isinstance(d1, dict) and isinstance(d2, dict)):\n        raise Exception('Both inputs must be of type dict')\n\n    for key, new_value in d2.items():\n        if key in d1:\n            old_value = d1[key]\n            if isinstance(new_value, dict):\n                if isinstance(old_value, dict):\n                    merge(old_value, new_value)\n                else:\n                    new_dict = copy.deepcopy(new_value)\n                    new_dict[key] = old_value\n                    d1[key] = new_dict\n            elif isinstance(old_value, dict):\n                old_value[key] = new_value\n            elif isinstance(new_value, list):\n                new_list = copy.deepcopy(new_value)\n                if isinstance(old_value, list):\n                    new_list.extend(old_value)\n                else:\n                    if old_value not in new_value:\n                        new_list.append(old_value)\n                d1[key] = new_list\n            elif isinstance(old_value, list):\n                if new_value not in old_value:\n                    old_value.append(new_value)\n            else:\n                d1[key] = new_value\n        else:\n            d1[key] = new_value\n    return d1\n</code></pre>"},{"location":"reference/pyrevit/coreutils/pyutils/#pyrevit.coreutils.pyutils.almost_equal","title":"<code>almost_equal(a, b, rnd=5)</code>","text":"<p>Check if two numerical values almost equal.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>float</code> <p>value a</p> required <code>b</code> <code>float</code> <p>value b</p> required <code>rnd</code> <code>int</code> <p>n digits after comma. Defaults to 5.</p> <code>5</code> <p>Returns:</p> Type Description <code>bool</code> <p>True if almost equal</p> Source code in <code>pyrevitlib/pyrevit/coreutils/pyutils.py</code> <pre><code>def almost_equal(a, b, rnd=5):\n    \"\"\"Check if two numerical values almost equal.\n\n    Args:\n        a (float): value a\n        b (float): value b\n        rnd (int, optional): n digits after comma. Defaults to 5.\n\n    Returns:\n        (bool): True if almost equal\n    \"\"\"\n    return a == b or int(a*10**rnd) == int(b*10**rnd)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/","title":"ribbon","text":"<p>Base module to interact with Revit ribbon.</p>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.mlogger","title":"<code>mlogger = get_logger(__name__)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.PYREVIT_TAB_IDENTIFIER","title":"<code>PYREVIT_TAB_IDENTIFIER = 'pyrevit_tab'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.ICON_SMALL","title":"<code>ICON_SMALL = 16</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.ICON_MEDIUM","title":"<code>ICON_MEDIUM = 24</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.ICON_LARGE","title":"<code>ICON_LARGE = 32</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.DEFAULT_DPI","title":"<code>DEFAULT_DPI = 96</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.DEFAULT_TOOLTIP_IMAGE_FORMAT","title":"<code>DEFAULT_TOOLTIP_IMAGE_FORMAT = '.png'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.DEFAULT_TOOLTIP_VIDEO_FORMAT","title":"<code>DEFAULT_TOOLTIP_VIDEO_FORMAT = '.swf'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon-classes","title":"Classes","text":""},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.PyRevitUIError","title":"<code>PyRevitUIError</code>","text":"<p>               Bases: <code>PyRevitException</code></p> <p>Common base class for all pyRevit ui-related exceptions.</p>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.PyRevitUIError-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.PyRevitUIError.msg","title":"<code>msg</code>  <code>property</code>","text":"<p>Return exception message.</p>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.ButtonIcons","title":"<code>ButtonIcons(image_file)</code>","text":"<p>               Bases: <code>object</code></p> <p>pyRevit ui element icon.</p> <p>Upon init, this type reads the given image file into an io stream and releases the os lock on the file.</p> <p>Parameters:</p> Name Type Description Default <code>image_file</code> <code>str</code> <p>image file path to be used as icon</p> required <p>Attributes:</p> Name Type Description <code>icon_file_path</code> <code>str</code> <p>icon image file path</p> <code>filestream</code> <code>FileStream</code> <p>io stream containing image binary data</p> Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def __init__(self, image_file):\n    self.icon_file_path = image_file\n    self.check_icon_size()\n    self.filestream = IO.FileStream(image_file,\n                                    IO.FileMode.Open,\n                                    IO.FileAccess.Read)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.ButtonIcons-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.ButtonIcons.icon_file_path","title":"<code>icon_file_path = image_file</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.ButtonIcons.filestream","title":"<code>filestream = IO.FileStream(image_file, IO.FileMode.Open, IO.FileAccess.Read)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.ButtonIcons.small_bitmap","title":"<code>small_bitmap</code>  <code>property</code>","text":"<p>Resamples image and creates bitmap for size :obj:<code>ICON_SMALL</code>.</p> <p>Returns:</p> Type Description <code>BitmapSource</code> <p>object containing image data at given size</p>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.ButtonIcons.medium_bitmap","title":"<code>medium_bitmap</code>  <code>property</code>","text":"<p>Resamples image and creates bitmap for size :obj:<code>ICON_MEDIUM</code>.</p> <p>Returns:</p> Type Description <code>BitmapSource</code> <p>object containing image data at given size</p>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.ButtonIcons.large_bitmap","title":"<code>large_bitmap</code>  <code>property</code>","text":"<p>Resamples image and creates bitmap for size :obj:<code>ICON_LARGE</code>.</p> <p>Returns:</p> Type Description <code>BitmapSource</code> <p>object containing image data at given size</p>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.ButtonIcons-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.ButtonIcons.recolour","title":"<code>recolour(image_data, size, stride, color)</code>  <code>staticmethod</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>@staticmethod\ndef recolour(image_data, size, stride, color):\n    # FIXME: needs doc, and argument types\n    # ButtonIcons.recolour(image_data, image_size, stride, 0x8e44ad)\n    step = stride / size\n    for i in range(0, stride, step):\n        for j in range(0, stride, step):\n            idx = (i * size) + j\n            # R = image_data[idx+2]\n            # G = image_data[idx+1]\n            # B = image_data[idx]\n            # luminance = (0.299*R + 0.587*G + 0.114*B)\n            image_data[idx] = color &gt;&gt; 0 &amp; 0xff       # blue\n            image_data[idx+1] = color &gt;&gt; 8 &amp; 0xff     # green\n            image_data[idx+2] = color &gt;&gt; 16 &amp; 0xff    # red\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.ButtonIcons.check_icon_size","title":"<code>check_icon_size()</code>","text":"<p>Verify icon size is within acceptable range.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def check_icon_size(self):\n    \"\"\"Verify icon size is within acceptable range.\"\"\"\n    image = System.Drawing.Image.FromFile(self.icon_file_path)\n    image_size = max(image.Width, image.Height)\n    if image_size &gt; 96:\n        mlogger.warning('Icon file is too large. Large icons adversely '\n                        'affect the load time since they need to be '\n                        'processed and adjusted for screen scaling. '\n                        'Keep icons at max 96x96 pixels: %s',\n                        self.icon_file_path)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.ButtonIcons.create_bitmap","title":"<code>create_bitmap(icon_size)</code>","text":"<p>Resamples image and creates bitmap for the given size.</p> <p>Icons are assumed to be square.</p> <p>Parameters:</p> Name Type Description Default <code>icon_size</code> <code>int</code> <p>icon size (width or height)</p> required <p>Returns:</p> Type Description <code>BitmapSource</code> <p>object containing image data at given size</p> Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def create_bitmap(self, icon_size):\n    \"\"\"Resamples image and creates bitmap for the given size.\n\n    Icons are assumed to be square.\n\n    Args:\n        icon_size (int): icon size (width or height)\n\n    Returns:\n        (Imaging.BitmapSource): object containing image data at given size\n    \"\"\"\n    mlogger.debug('Creating %sx%s bitmap from: %s',\n                  icon_size, icon_size, self.icon_file_path)\n    adjusted_icon_size = icon_size * 2\n    adjusted_dpi = DEFAULT_DPI * 2\n    screen_scaling = HOST_APP.proc_screen_scalefactor\n\n    self.filestream.Seek(0, IO.SeekOrigin.Begin)\n    base_image = Imaging.BitmapImage()\n    base_image.BeginInit()\n    base_image.StreamSource = self.filestream\n    base_image.DecodePixelHeight = int(adjusted_icon_size * screen_scaling)\n    base_image.EndInit()\n    self.filestream.Seek(0, IO.SeekOrigin.Begin)\n\n    image_size = base_image.PixelWidth\n    image_format = base_image.Format\n    image_byte_per_pixel = int(base_image.Format.BitsPerPixel / 8)\n    palette = base_image.Palette\n\n    stride = int(image_size * image_byte_per_pixel)\n    array_size = stride * image_size\n    image_data = System.Array.CreateInstance(System.Byte, array_size)\n    base_image.CopyPixels(image_data, stride, 0)\n\n    scaled_size = int(adjusted_icon_size * screen_scaling)\n    scaled_dpi = int(adjusted_dpi * screen_scaling)\n    bitmap_source = \\\n        Imaging.BitmapSource.Create(scaled_size, scaled_size,\n                                    scaled_dpi, scaled_dpi,\n                                    image_format,\n                                    palette,\n                                    image_data,\n                                    stride)\n    return bitmap_source\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.GenericPyRevitUIContainer","title":"<code>GenericPyRevitUIContainer()</code>","text":"<p>               Bases: <code>object</code></p> <p>Common type for all pyRevit ui containers.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>container name</p> <code>itemdata_mode</code> <code>bool</code> <p>if container is wrapping UI.*ItemData</p> Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def __init__(self):\n    self.name = ''\n    self._rvtapi_object = None\n    self._sub_pyrvt_components = OrderedDict()\n    self.itemdata_mode = False\n    self._dirty = False\n    self._visible = None\n    self._enabled = None\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.GenericPyRevitUIContainer-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.GenericPyRevitUIContainer.name","title":"<code>name = ''</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.GenericPyRevitUIContainer.itemdata_mode","title":"<code>itemdata_mode = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.GenericPyRevitUIContainer.visible","title":"<code>visible</code>  <code>property</code> <code>writable</code>","text":"<p>Is container visible.</p>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.GenericPyRevitUIContainer.enabled","title":"<code>enabled</code>  <code>property</code> <code>writable</code>","text":"<p>Is container enabled.</p>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.GenericPyRevitUIContainer-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.GenericPyRevitUIContainer.process_deferred","title":"<code>process_deferred()</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def process_deferred(self):\n    try:\n        if self._visible is not None:\n            self.visible = self._visible\n    except Exception as visible_err:\n        raise PyRevitUIError('Error setting .visible {} | {} '\n                             .format(self, visible_err))\n\n    try:\n        if self._enabled is not None:\n            self.enabled = self._enabled\n    except Exception as enable_err:\n        raise PyRevitUIError('Error setting .enabled {} | {} '\n                             .format(self, enable_err))\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.GenericPyRevitUIContainer.get_rvtapi_object","title":"<code>get_rvtapi_object()</code>","text":"<p>Return underlying Revit API object for this container.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def get_rvtapi_object(self):\n    \"\"\"Return underlying Revit API object for this container.\"\"\"\n    # FIXME: return type\n    return self._rvtapi_object\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.GenericPyRevitUIContainer.set_rvtapi_object","title":"<code>set_rvtapi_object(rvtapi_obj)</code>","text":"<p>Set underlying Revit API object for this container.</p> <p>Parameters:</p> Name Type Description Default <code>rvtapi_obj</code> <code>obj</code> <p>Revit API container object</p> required Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def set_rvtapi_object(self, rvtapi_obj):\n    \"\"\"Set underlying Revit API object for this container.\n\n    Args:\n        rvtapi_obj (obj): Revit API container object\n    \"\"\"\n    # FIXME: rvtapi_obj type\n    self._rvtapi_object = rvtapi_obj\n    self.itemdata_mode = False\n    self._dirty = True\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.GenericPyRevitUIContainer.get_adwindows_object","title":"<code>get_adwindows_object()</code>","text":"<p>Return underlying AdWindows API object for this container.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def get_adwindows_object(self):\n    \"\"\"Return underlying AdWindows API object for this container.\"\"\"\n    # FIXME: return type\n    rvtapi_obj = self._rvtapi_object\n    getRibbonItemMethod = \\\n        rvtapi_obj.GetType().GetMethod(\n            'getRibbonItem',\n            BindingFlags.NonPublic | BindingFlags.Instance\n            )\n    if getRibbonItemMethod:\n        return getRibbonItemMethod.Invoke(rvtapi_obj, None)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.GenericPyRevitUIContainer.get_flagged_children","title":"<code>get_flagged_children(state=True)</code>","text":"<p>Get all children with their flag equal to given state.</p> <p>Flagging is a mechanism to mark certain containers. There are various reasons that container flagging might be used e.g. marking updated containers or the ones in need of an update or removal.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>flag state to filter children</p> <code>True</code> <p>Returns:</p> Type Description <code>list[*]</code> <p>list of filtered child objects</p> Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def get_flagged_children(self, state=True):\n    \"\"\"Get all children with their flag equal to given state.\n\n    Flagging is a mechanism to mark certain containers. There are various\n    reasons that container flagging might be used e.g. marking updated\n    containers or the ones in need of an update or removal.\n\n    Args:\n        state (bool): flag state to filter children\n\n    Returns:\n        (list[*]): list of filtered child objects\n    \"\"\"\n    # FIXME: return type\n    flagged_cmps = []\n    for component in self:\n        flagged_cmps.extend(component.get_flagged_children(state))\n        if component.is_dirty() == state:\n            flagged_cmps.append(component)\n    return flagged_cmps\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.GenericPyRevitUIContainer.keys","title":"<code>keys()</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def keys(self):\n    # FIXME: what does this do?\n    list(self._sub_pyrvt_components.keys())\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.GenericPyRevitUIContainer.values","title":"<code>values()</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def values(self):\n    # FIXME: what does this do?\n    list(self._sub_pyrvt_components.values())\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.GenericPyRevitUIContainer.is_native","title":"<code>is_native()</code>  <code>staticmethod</code>","text":"<p>Is this container generated by pyRevit or is native.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>@staticmethod\ndef is_native():\n    \"\"\"Is this container generated by pyRevit or is native.\"\"\"\n    return False\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.GenericPyRevitUIContainer.is_dirty","title":"<code>is_dirty()</code>","text":"<p>Is dirty flag set.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def is_dirty(self):\n    \"\"\"Is dirty flag set.\"\"\"\n    if self._dirty:\n        return self._dirty\n    else:\n        # check if there is any dirty child\n        for component in self:\n            if component.is_dirty():\n                return True\n        return False\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.GenericPyRevitUIContainer.set_dirty_flag","title":"<code>set_dirty_flag(state=True)</code>","text":"<p>Set dirty flag to given state.</p> <p>See .get_flagged_children()</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>state to set flag</p> <code>True</code> Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def set_dirty_flag(self, state=True):\n    \"\"\"Set dirty flag to given state.\n\n    See .get_flagged_children()\n\n    Args:\n        state (bool): state to set flag\n    \"\"\"\n    self._dirty = state\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.GenericPyRevitUIContainer.contains","title":"<code>contains(pyrvt_cmp_name)</code>","text":"<p>Check if container contains a component with given name.</p> <p>Parameters:</p> Name Type Description Default <code>pyrvt_cmp_name</code> <code>str</code> <p>target component name</p> required Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def contains(self, pyrvt_cmp_name):\n    \"\"\"Check if container contains a component with given name.\n\n    Args:\n        pyrvt_cmp_name (str): target component name\n    \"\"\"\n    return pyrvt_cmp_name in self._sub_pyrvt_components.keys()\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.GenericPyRevitUIContainer.find_child","title":"<code>find_child(child_name)</code>","text":"<p>Find a component with given name in children.</p> <p>Parameters:</p> Name Type Description Default <code>child_name</code> <code>str</code> <p>target component name</p> required <p>Returns:</p> Type Description <code>Any</code> <p>component object if found, otherwise None</p> Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def find_child(self, child_name):\n    \"\"\"Find a component with given name in children.\n\n    Args:\n        child_name (str): target component name\n\n    Returns:\n        (Any): component object if found, otherwise None\n    \"\"\"\n    for sub_cmp in self._sub_pyrvt_components.values():\n        if child_name == sub_cmp.name:\n            return sub_cmp\n        elif hasattr(sub_cmp, 'ui_title') \\\n                and child_name == sub_cmp.ui_title:\n            return sub_cmp\n\n        component = sub_cmp.find_child(child_name)\n        if component:\n            return component\n\n    return None\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.GenericPyRevitUIContainer.activate","title":"<code>activate()</code>","text":"<p>Activate this container in ui.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def activate(self):\n    \"\"\"Activate this container in ui.\"\"\"\n    try:\n        self.enabled = True\n        self.visible = True\n        self._dirty = True\n    except Exception:\n        raise PyRevitUIError('Can not activate: {}'.format(self))\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.GenericPyRevitUIContainer.deactivate","title":"<code>deactivate()</code>","text":"<p>Deactivate this container in ui.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def deactivate(self):\n    \"\"\"Deactivate this container in ui.\"\"\"\n    try:\n        self.enabled = False\n        self.visible = False\n        self._dirty = True\n    except Exception:\n        raise PyRevitUIError('Can not deactivate: {}'.format(self))\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.GenericPyRevitUIContainer.get_updated_items","title":"<code>get_updated_items()</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def get_updated_items(self):\n    # FIXME: reduntant, this is a use case and should be on uimaker side?\n    return self.get_flagged_children()\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.GenericPyRevitUIContainer.get_unchanged_items","title":"<code>get_unchanged_items()</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def get_unchanged_items(self):\n    # FIXME: reduntant, this is a use case and should be on uimaker side?\n    return self.get_flagged_children(state=False)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.GenericPyRevitUIContainer.reorder_before","title":"<code>reorder_before(item_name, ritem_name)</code>","text":"<p>Reorder and place item_name before ritem_name.</p> <p>Parameters:</p> Name Type Description Default <code>item_name</code> <code>str</code> <p>name of component to be moved</p> required <code>ritem_name</code> <code>str</code> <p>name of component that should be on the right</p> required Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def reorder_before(self, item_name, ritem_name):\n    \"\"\"Reorder and place item_name before ritem_name.\n\n    Args:\n        item_name (str): name of component to be moved\n        ritem_name (str): name of component that should be on the right\n    \"\"\"\n    apiobj = self.get_rvtapi_object()\n    litem_idx = ritem_idx = None\n    if hasattr(apiobj, 'Panels'):\n        for item in apiobj.Panels:\n            if item.Source.AutomationName == item_name:\n                litem_idx = apiobj.Panels.IndexOf(item)\n            elif item.Source.AutomationName == ritem_name:\n                ritem_idx = apiobj.Panels.IndexOf(item)\n        if litem_idx and ritem_idx:\n            if litem_idx &lt; ritem_idx:\n                apiobj.Panels.Move(litem_idx, ritem_idx - 1)\n            elif litem_idx &gt; ritem_idx:\n                apiobj.Panels.Move(litem_idx, ritem_idx)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.GenericPyRevitUIContainer.reorder_beforeall","title":"<code>reorder_beforeall(item_name)</code>","text":"<p>Reorder and place item_name before all others.</p> <p>Parameters:</p> Name Type Description Default <code>item_name</code> <code>str</code> <p>name of component to be moved</p> required Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def reorder_beforeall(self, item_name):\n    \"\"\"Reorder and place item_name before all others.\n\n    Args:\n        item_name (str): name of component to be moved\n    \"\"\"\n    # FIXME: verify docs description is correct\n    apiobj = self.get_rvtapi_object()\n    litem_idx = None\n    if hasattr(apiobj, 'Panels'):\n        for item in apiobj.Panels:\n            if item.Source.AutomationName == item_name:\n                litem_idx = apiobj.Panels.IndexOf(item)\n        if litem_idx:\n            apiobj.Panels.Move(litem_idx, 0)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.GenericPyRevitUIContainer.reorder_after","title":"<code>reorder_after(item_name, ritem_name)</code>","text":"<p>Reorder and place item_name after ritem_name.</p> <p>Parameters:</p> Name Type Description Default <code>item_name</code> <code>str</code> <p>name of component to be moved</p> required <code>ritem_name</code> <code>str</code> <p>name of component that should be on the left</p> required Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def reorder_after(self, item_name, ritem_name):\n    \"\"\"Reorder and place item_name after ritem_name.\n\n    Args:\n        item_name (str): name of component to be moved\n        ritem_name (str): name of component that should be on the left\n    \"\"\"\n    apiobj = self.get_rvtapi_object()\n    litem_idx = ritem_idx = None\n    if hasattr(apiobj, 'Panels'):\n        for item in apiobj.Panels:\n            if item.Source.AutomationName == item_name:\n                litem_idx = apiobj.Panels.IndexOf(item)\n            elif item.Source.AutomationName == ritem_name:\n                ritem_idx = apiobj.Panels.IndexOf(item)\n        if litem_idx and ritem_idx:\n            if litem_idx &lt; ritem_idx:\n                apiobj.Panels.Move(litem_idx, ritem_idx)\n            elif litem_idx &gt; ritem_idx:\n                apiobj.Panels.Move(litem_idx, ritem_idx + 1)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.GenericPyRevitUIContainer.reorder_afterall","title":"<code>reorder_afterall(item_name)</code>","text":"<p>Reorder and place item_name after all others.</p> <p>Parameters:</p> Name Type Description Default <code>item_name</code> <code>str</code> <p>name of component to be moved</p> required Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def reorder_afterall(self, item_name):\n    \"\"\"Reorder and place item_name after all others.\n\n    Args:\n        item_name (str): name of component to be moved\n    \"\"\"\n    apiobj = self.get_rvtapi_object()\n    litem_idx = None\n    if hasattr(apiobj, 'Panels'):\n        for item in apiobj.Panels:\n            if item.Source.AutomationName == item_name:\n                litem_idx = apiobj.Panels.IndexOf(item)\n        if litem_idx:\n            max_idx = len(apiobj.Panels) - 1\n            apiobj.Panels.Move(litem_idx, max_idx)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.GenericRevitNativeUIContainer","title":"<code>GenericRevitNativeUIContainer()</code>","text":"<p>               Bases: <code>GenericPyRevitUIContainer</code></p> <p>Common base type for native Revit API UI containers.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def __init__(self):\n    GenericPyRevitUIContainer.__init__(self)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.GenericRevitNativeUIContainer-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.GenericRevitNativeUIContainer.name","title":"<code>name = ''</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.GenericRevitNativeUIContainer.itemdata_mode","title":"<code>itemdata_mode = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.GenericRevitNativeUIContainer.visible","title":"<code>visible</code>  <code>property</code> <code>writable</code>","text":"<p>Is container visible.</p>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.GenericRevitNativeUIContainer.enabled","title":"<code>enabled</code>  <code>property</code> <code>writable</code>","text":"<p>Is container enabled.</p>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.GenericRevitNativeUIContainer-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.GenericRevitNativeUIContainer.process_deferred","title":"<code>process_deferred()</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def process_deferred(self):\n    try:\n        if self._visible is not None:\n            self.visible = self._visible\n    except Exception as visible_err:\n        raise PyRevitUIError('Error setting .visible {} | {} '\n                             .format(self, visible_err))\n\n    try:\n        if self._enabled is not None:\n            self.enabled = self._enabled\n    except Exception as enable_err:\n        raise PyRevitUIError('Error setting .enabled {} | {} '\n                             .format(self, enable_err))\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.GenericRevitNativeUIContainer.get_rvtapi_object","title":"<code>get_rvtapi_object()</code>","text":"<p>Return underlying Revit API object for this container.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def get_rvtapi_object(self):\n    \"\"\"Return underlying Revit API object for this container.\"\"\"\n    # FIXME: return type\n    return self._rvtapi_object\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.GenericRevitNativeUIContainer.set_rvtapi_object","title":"<code>set_rvtapi_object(rvtapi_obj)</code>","text":"<p>Set underlying Revit API object for this container.</p> <p>Parameters:</p> Name Type Description Default <code>rvtapi_obj</code> <code>obj</code> <p>Revit API container object</p> required Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def set_rvtapi_object(self, rvtapi_obj):\n    \"\"\"Set underlying Revit API object for this container.\n\n    Args:\n        rvtapi_obj (obj): Revit API container object\n    \"\"\"\n    # FIXME: rvtapi_obj type\n    self._rvtapi_object = rvtapi_obj\n    self.itemdata_mode = False\n    self._dirty = True\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.GenericRevitNativeUIContainer.get_adwindows_object","title":"<code>get_adwindows_object()</code>","text":"<p>Return underlying AdWindows API object for this container.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def get_adwindows_object(self):\n    \"\"\"Return underlying AdWindows API object for this container.\"\"\"\n    # FIXME: return type\n    rvtapi_obj = self._rvtapi_object\n    getRibbonItemMethod = \\\n        rvtapi_obj.GetType().GetMethod(\n            'getRibbonItem',\n            BindingFlags.NonPublic | BindingFlags.Instance\n            )\n    if getRibbonItemMethod:\n        return getRibbonItemMethod.Invoke(rvtapi_obj, None)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.GenericRevitNativeUIContainer.get_flagged_children","title":"<code>get_flagged_children(state=True)</code>","text":"<p>Get all children with their flag equal to given state.</p> <p>Flagging is a mechanism to mark certain containers. There are various reasons that container flagging might be used e.g. marking updated containers or the ones in need of an update or removal.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>flag state to filter children</p> <code>True</code> <p>Returns:</p> Type Description <code>list[*]</code> <p>list of filtered child objects</p> Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def get_flagged_children(self, state=True):\n    \"\"\"Get all children with their flag equal to given state.\n\n    Flagging is a mechanism to mark certain containers. There are various\n    reasons that container flagging might be used e.g. marking updated\n    containers or the ones in need of an update or removal.\n\n    Args:\n        state (bool): flag state to filter children\n\n    Returns:\n        (list[*]): list of filtered child objects\n    \"\"\"\n    # FIXME: return type\n    flagged_cmps = []\n    for component in self:\n        flagged_cmps.extend(component.get_flagged_children(state))\n        if component.is_dirty() == state:\n            flagged_cmps.append(component)\n    return flagged_cmps\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.GenericRevitNativeUIContainer.keys","title":"<code>keys()</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def keys(self):\n    # FIXME: what does this do?\n    list(self._sub_pyrvt_components.keys())\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.GenericRevitNativeUIContainer.values","title":"<code>values()</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def values(self):\n    # FIXME: what does this do?\n    list(self._sub_pyrvt_components.values())\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.GenericRevitNativeUIContainer.is_dirty","title":"<code>is_dirty()</code>","text":"<p>Is dirty flag set.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def is_dirty(self):\n    \"\"\"Is dirty flag set.\"\"\"\n    if self._dirty:\n        return self._dirty\n    else:\n        # check if there is any dirty child\n        for component in self:\n            if component.is_dirty():\n                return True\n        return False\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.GenericRevitNativeUIContainer.set_dirty_flag","title":"<code>set_dirty_flag(state=True)</code>","text":"<p>Set dirty flag to given state.</p> <p>See .get_flagged_children()</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>state to set flag</p> <code>True</code> Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def set_dirty_flag(self, state=True):\n    \"\"\"Set dirty flag to given state.\n\n    See .get_flagged_children()\n\n    Args:\n        state (bool): state to set flag\n    \"\"\"\n    self._dirty = state\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.GenericRevitNativeUIContainer.contains","title":"<code>contains(pyrvt_cmp_name)</code>","text":"<p>Check if container contains a component with given name.</p> <p>Parameters:</p> Name Type Description Default <code>pyrvt_cmp_name</code> <code>str</code> <p>target component name</p> required Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def contains(self, pyrvt_cmp_name):\n    \"\"\"Check if container contains a component with given name.\n\n    Args:\n        pyrvt_cmp_name (str): target component name\n    \"\"\"\n    return pyrvt_cmp_name in self._sub_pyrvt_components.keys()\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.GenericRevitNativeUIContainer.find_child","title":"<code>find_child(child_name)</code>","text":"<p>Find a component with given name in children.</p> <p>Parameters:</p> Name Type Description Default <code>child_name</code> <code>str</code> <p>target component name</p> required <p>Returns:</p> Type Description <code>Any</code> <p>component object if found, otherwise None</p> Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def find_child(self, child_name):\n    \"\"\"Find a component with given name in children.\n\n    Args:\n        child_name (str): target component name\n\n    Returns:\n        (Any): component object if found, otherwise None\n    \"\"\"\n    for sub_cmp in self._sub_pyrvt_components.values():\n        if child_name == sub_cmp.name:\n            return sub_cmp\n        elif hasattr(sub_cmp, 'ui_title') \\\n                and child_name == sub_cmp.ui_title:\n            return sub_cmp\n\n        component = sub_cmp.find_child(child_name)\n        if component:\n            return component\n\n    return None\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.GenericRevitNativeUIContainer.get_updated_items","title":"<code>get_updated_items()</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def get_updated_items(self):\n    # FIXME: reduntant, this is a use case and should be on uimaker side?\n    return self.get_flagged_children()\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.GenericRevitNativeUIContainer.get_unchanged_items","title":"<code>get_unchanged_items()</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def get_unchanged_items(self):\n    # FIXME: reduntant, this is a use case and should be on uimaker side?\n    return self.get_flagged_children(state=False)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.GenericRevitNativeUIContainer.reorder_before","title":"<code>reorder_before(item_name, ritem_name)</code>","text":"<p>Reorder and place item_name before ritem_name.</p> <p>Parameters:</p> Name Type Description Default <code>item_name</code> <code>str</code> <p>name of component to be moved</p> required <code>ritem_name</code> <code>str</code> <p>name of component that should be on the right</p> required Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def reorder_before(self, item_name, ritem_name):\n    \"\"\"Reorder and place item_name before ritem_name.\n\n    Args:\n        item_name (str): name of component to be moved\n        ritem_name (str): name of component that should be on the right\n    \"\"\"\n    apiobj = self.get_rvtapi_object()\n    litem_idx = ritem_idx = None\n    if hasattr(apiobj, 'Panels'):\n        for item in apiobj.Panels:\n            if item.Source.AutomationName == item_name:\n                litem_idx = apiobj.Panels.IndexOf(item)\n            elif item.Source.AutomationName == ritem_name:\n                ritem_idx = apiobj.Panels.IndexOf(item)\n        if litem_idx and ritem_idx:\n            if litem_idx &lt; ritem_idx:\n                apiobj.Panels.Move(litem_idx, ritem_idx - 1)\n            elif litem_idx &gt; ritem_idx:\n                apiobj.Panels.Move(litem_idx, ritem_idx)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.GenericRevitNativeUIContainer.reorder_beforeall","title":"<code>reorder_beforeall(item_name)</code>","text":"<p>Reorder and place item_name before all others.</p> <p>Parameters:</p> Name Type Description Default <code>item_name</code> <code>str</code> <p>name of component to be moved</p> required Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def reorder_beforeall(self, item_name):\n    \"\"\"Reorder and place item_name before all others.\n\n    Args:\n        item_name (str): name of component to be moved\n    \"\"\"\n    # FIXME: verify docs description is correct\n    apiobj = self.get_rvtapi_object()\n    litem_idx = None\n    if hasattr(apiobj, 'Panels'):\n        for item in apiobj.Panels:\n            if item.Source.AutomationName == item_name:\n                litem_idx = apiobj.Panels.IndexOf(item)\n        if litem_idx:\n            apiobj.Panels.Move(litem_idx, 0)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.GenericRevitNativeUIContainer.reorder_after","title":"<code>reorder_after(item_name, ritem_name)</code>","text":"<p>Reorder and place item_name after ritem_name.</p> <p>Parameters:</p> Name Type Description Default <code>item_name</code> <code>str</code> <p>name of component to be moved</p> required <code>ritem_name</code> <code>str</code> <p>name of component that should be on the left</p> required Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def reorder_after(self, item_name, ritem_name):\n    \"\"\"Reorder and place item_name after ritem_name.\n\n    Args:\n        item_name (str): name of component to be moved\n        ritem_name (str): name of component that should be on the left\n    \"\"\"\n    apiobj = self.get_rvtapi_object()\n    litem_idx = ritem_idx = None\n    if hasattr(apiobj, 'Panels'):\n        for item in apiobj.Panels:\n            if item.Source.AutomationName == item_name:\n                litem_idx = apiobj.Panels.IndexOf(item)\n            elif item.Source.AutomationName == ritem_name:\n                ritem_idx = apiobj.Panels.IndexOf(item)\n        if litem_idx and ritem_idx:\n            if litem_idx &lt; ritem_idx:\n                apiobj.Panels.Move(litem_idx, ritem_idx)\n            elif litem_idx &gt; ritem_idx:\n                apiobj.Panels.Move(litem_idx, ritem_idx + 1)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.GenericRevitNativeUIContainer.reorder_afterall","title":"<code>reorder_afterall(item_name)</code>","text":"<p>Reorder and place item_name after all others.</p> <p>Parameters:</p> Name Type Description Default <code>item_name</code> <code>str</code> <p>name of component to be moved</p> required Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def reorder_afterall(self, item_name):\n    \"\"\"Reorder and place item_name after all others.\n\n    Args:\n        item_name (str): name of component to be moved\n    \"\"\"\n    apiobj = self.get_rvtapi_object()\n    litem_idx = None\n    if hasattr(apiobj, 'Panels'):\n        for item in apiobj.Panels:\n            if item.Source.AutomationName == item_name:\n                litem_idx = apiobj.Panels.IndexOf(item)\n        if litem_idx:\n            max_idx = len(apiobj.Panels) - 1\n            apiobj.Panels.Move(litem_idx, max_idx)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.GenericRevitNativeUIContainer.is_native","title":"<code>is_native()</code>  <code>staticmethod</code>","text":"<p>Is this container generated by pyRevit or is native.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>@staticmethod\ndef is_native():\n    \"\"\"Is this container generated by pyRevit or is native.\"\"\"\n    return True\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.GenericRevitNativeUIContainer.activate","title":"<code>activate()</code>","text":"<p>Activate this container in ui.</p> <p>Under current implementation, raises PyRevitUIError exception as native Revit API UI components should not be changed.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def activate(self):\n    \"\"\"Activate this container in ui.\n\n    Under current implementation, raises PyRevitUIError exception as\n    native Revit API UI components should not be changed.\n    \"\"\"\n    return self.deactivate()\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.GenericRevitNativeUIContainer.deactivate","title":"<code>deactivate()</code>","text":"<p>Deactivate this container in ui.</p> <p>Under current implementation, raises PyRevitUIError exception as native Revit API UI components should not be changed.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def deactivate(self):\n    \"\"\"Deactivate this container in ui.\n\n    Under current implementation, raises PyRevitUIError exception as\n    native Revit API UI components should not be changed.\n    \"\"\"\n    raise PyRevitUIError('Can not de/activate native item: {}'\n                         .format(self))\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonButton","title":"<code>RevitNativeRibbonButton(adwnd_ribbon_button)</code>","text":"<p>               Bases: <code>GenericRevitNativeUIContainer</code></p> <p>Revit API UI native ribbon button.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def __init__(self, adwnd_ribbon_button):\n    GenericRevitNativeUIContainer.__init__(self)\n\n    self.name = \\\n        safe_strtype(adwnd_ribbon_button.AutomationName)\\\n        .replace('\\r\\n', ' ')\n    self._rvtapi_object = adwnd_ribbon_button\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonButton-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonButton.itemdata_mode","title":"<code>itemdata_mode = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonButton.visible","title":"<code>visible</code>  <code>property</code> <code>writable</code>","text":"<p>Is container visible.</p>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonButton.enabled","title":"<code>enabled</code>  <code>property</code> <code>writable</code>","text":"<p>Is container enabled.</p>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonButton.name","title":"<code>name = safe_strtype(adwnd_ribbon_button.AutomationName).replace('\\r\\n', ' ')</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonButton-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonButton.process_deferred","title":"<code>process_deferred()</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def process_deferred(self):\n    try:\n        if self._visible is not None:\n            self.visible = self._visible\n    except Exception as visible_err:\n        raise PyRevitUIError('Error setting .visible {} | {} '\n                             .format(self, visible_err))\n\n    try:\n        if self._enabled is not None:\n            self.enabled = self._enabled\n    except Exception as enable_err:\n        raise PyRevitUIError('Error setting .enabled {} | {} '\n                             .format(self, enable_err))\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonButton.get_rvtapi_object","title":"<code>get_rvtapi_object()</code>","text":"<p>Return underlying Revit API object for this container.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def get_rvtapi_object(self):\n    \"\"\"Return underlying Revit API object for this container.\"\"\"\n    # FIXME: return type\n    return self._rvtapi_object\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonButton.set_rvtapi_object","title":"<code>set_rvtapi_object(rvtapi_obj)</code>","text":"<p>Set underlying Revit API object for this container.</p> <p>Parameters:</p> Name Type Description Default <code>rvtapi_obj</code> <code>obj</code> <p>Revit API container object</p> required Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def set_rvtapi_object(self, rvtapi_obj):\n    \"\"\"Set underlying Revit API object for this container.\n\n    Args:\n        rvtapi_obj (obj): Revit API container object\n    \"\"\"\n    # FIXME: rvtapi_obj type\n    self._rvtapi_object = rvtapi_obj\n    self.itemdata_mode = False\n    self._dirty = True\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonButton.get_adwindows_object","title":"<code>get_adwindows_object()</code>","text":"<p>Return underlying AdWindows API object for this container.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def get_adwindows_object(self):\n    \"\"\"Return underlying AdWindows API object for this container.\"\"\"\n    # FIXME: return type\n    rvtapi_obj = self._rvtapi_object\n    getRibbonItemMethod = \\\n        rvtapi_obj.GetType().GetMethod(\n            'getRibbonItem',\n            BindingFlags.NonPublic | BindingFlags.Instance\n            )\n    if getRibbonItemMethod:\n        return getRibbonItemMethod.Invoke(rvtapi_obj, None)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonButton.get_flagged_children","title":"<code>get_flagged_children(state=True)</code>","text":"<p>Get all children with their flag equal to given state.</p> <p>Flagging is a mechanism to mark certain containers. There are various reasons that container flagging might be used e.g. marking updated containers or the ones in need of an update or removal.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>flag state to filter children</p> <code>True</code> <p>Returns:</p> Type Description <code>list[*]</code> <p>list of filtered child objects</p> Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def get_flagged_children(self, state=True):\n    \"\"\"Get all children with their flag equal to given state.\n\n    Flagging is a mechanism to mark certain containers. There are various\n    reasons that container flagging might be used e.g. marking updated\n    containers or the ones in need of an update or removal.\n\n    Args:\n        state (bool): flag state to filter children\n\n    Returns:\n        (list[*]): list of filtered child objects\n    \"\"\"\n    # FIXME: return type\n    flagged_cmps = []\n    for component in self:\n        flagged_cmps.extend(component.get_flagged_children(state))\n        if component.is_dirty() == state:\n            flagged_cmps.append(component)\n    return flagged_cmps\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonButton.keys","title":"<code>keys()</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def keys(self):\n    # FIXME: what does this do?\n    list(self._sub_pyrvt_components.keys())\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonButton.values","title":"<code>values()</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def values(self):\n    # FIXME: what does this do?\n    list(self._sub_pyrvt_components.values())\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonButton.is_native","title":"<code>is_native()</code>  <code>staticmethod</code>","text":"<p>Is this container generated by pyRevit or is native.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>@staticmethod\ndef is_native():\n    \"\"\"Is this container generated by pyRevit or is native.\"\"\"\n    return True\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonButton.is_dirty","title":"<code>is_dirty()</code>","text":"<p>Is dirty flag set.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def is_dirty(self):\n    \"\"\"Is dirty flag set.\"\"\"\n    if self._dirty:\n        return self._dirty\n    else:\n        # check if there is any dirty child\n        for component in self:\n            if component.is_dirty():\n                return True\n        return False\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonButton.set_dirty_flag","title":"<code>set_dirty_flag(state=True)</code>","text":"<p>Set dirty flag to given state.</p> <p>See .get_flagged_children()</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>state to set flag</p> <code>True</code> Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def set_dirty_flag(self, state=True):\n    \"\"\"Set dirty flag to given state.\n\n    See .get_flagged_children()\n\n    Args:\n        state (bool): state to set flag\n    \"\"\"\n    self._dirty = state\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonButton.contains","title":"<code>contains(pyrvt_cmp_name)</code>","text":"<p>Check if container contains a component with given name.</p> <p>Parameters:</p> Name Type Description Default <code>pyrvt_cmp_name</code> <code>str</code> <p>target component name</p> required Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def contains(self, pyrvt_cmp_name):\n    \"\"\"Check if container contains a component with given name.\n\n    Args:\n        pyrvt_cmp_name (str): target component name\n    \"\"\"\n    return pyrvt_cmp_name in self._sub_pyrvt_components.keys()\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonButton.find_child","title":"<code>find_child(child_name)</code>","text":"<p>Find a component with given name in children.</p> <p>Parameters:</p> Name Type Description Default <code>child_name</code> <code>str</code> <p>target component name</p> required <p>Returns:</p> Type Description <code>Any</code> <p>component object if found, otherwise None</p> Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def find_child(self, child_name):\n    \"\"\"Find a component with given name in children.\n\n    Args:\n        child_name (str): target component name\n\n    Returns:\n        (Any): component object if found, otherwise None\n    \"\"\"\n    for sub_cmp in self._sub_pyrvt_components.values():\n        if child_name == sub_cmp.name:\n            return sub_cmp\n        elif hasattr(sub_cmp, 'ui_title') \\\n                and child_name == sub_cmp.ui_title:\n            return sub_cmp\n\n        component = sub_cmp.find_child(child_name)\n        if component:\n            return component\n\n    return None\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonButton.activate","title":"<code>activate()</code>","text":"<p>Activate this container in ui.</p> <p>Under current implementation, raises PyRevitUIError exception as native Revit API UI components should not be changed.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def activate(self):\n    \"\"\"Activate this container in ui.\n\n    Under current implementation, raises PyRevitUIError exception as\n    native Revit API UI components should not be changed.\n    \"\"\"\n    return self.deactivate()\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonButton.deactivate","title":"<code>deactivate()</code>","text":"<p>Deactivate this container in ui.</p> <p>Under current implementation, raises PyRevitUIError exception as native Revit API UI components should not be changed.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def deactivate(self):\n    \"\"\"Deactivate this container in ui.\n\n    Under current implementation, raises PyRevitUIError exception as\n    native Revit API UI components should not be changed.\n    \"\"\"\n    raise PyRevitUIError('Can not de/activate native item: {}'\n                         .format(self))\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonButton.get_updated_items","title":"<code>get_updated_items()</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def get_updated_items(self):\n    # FIXME: reduntant, this is a use case and should be on uimaker side?\n    return self.get_flagged_children()\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonButton.get_unchanged_items","title":"<code>get_unchanged_items()</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def get_unchanged_items(self):\n    # FIXME: reduntant, this is a use case and should be on uimaker side?\n    return self.get_flagged_children(state=False)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonButton.reorder_before","title":"<code>reorder_before(item_name, ritem_name)</code>","text":"<p>Reorder and place item_name before ritem_name.</p> <p>Parameters:</p> Name Type Description Default <code>item_name</code> <code>str</code> <p>name of component to be moved</p> required <code>ritem_name</code> <code>str</code> <p>name of component that should be on the right</p> required Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def reorder_before(self, item_name, ritem_name):\n    \"\"\"Reorder and place item_name before ritem_name.\n\n    Args:\n        item_name (str): name of component to be moved\n        ritem_name (str): name of component that should be on the right\n    \"\"\"\n    apiobj = self.get_rvtapi_object()\n    litem_idx = ritem_idx = None\n    if hasattr(apiobj, 'Panels'):\n        for item in apiobj.Panels:\n            if item.Source.AutomationName == item_name:\n                litem_idx = apiobj.Panels.IndexOf(item)\n            elif item.Source.AutomationName == ritem_name:\n                ritem_idx = apiobj.Panels.IndexOf(item)\n        if litem_idx and ritem_idx:\n            if litem_idx &lt; ritem_idx:\n                apiobj.Panels.Move(litem_idx, ritem_idx - 1)\n            elif litem_idx &gt; ritem_idx:\n                apiobj.Panels.Move(litem_idx, ritem_idx)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonButton.reorder_beforeall","title":"<code>reorder_beforeall(item_name)</code>","text":"<p>Reorder and place item_name before all others.</p> <p>Parameters:</p> Name Type Description Default <code>item_name</code> <code>str</code> <p>name of component to be moved</p> required Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def reorder_beforeall(self, item_name):\n    \"\"\"Reorder and place item_name before all others.\n\n    Args:\n        item_name (str): name of component to be moved\n    \"\"\"\n    # FIXME: verify docs description is correct\n    apiobj = self.get_rvtapi_object()\n    litem_idx = None\n    if hasattr(apiobj, 'Panels'):\n        for item in apiobj.Panels:\n            if item.Source.AutomationName == item_name:\n                litem_idx = apiobj.Panels.IndexOf(item)\n        if litem_idx:\n            apiobj.Panels.Move(litem_idx, 0)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonButton.reorder_after","title":"<code>reorder_after(item_name, ritem_name)</code>","text":"<p>Reorder and place item_name after ritem_name.</p> <p>Parameters:</p> Name Type Description Default <code>item_name</code> <code>str</code> <p>name of component to be moved</p> required <code>ritem_name</code> <code>str</code> <p>name of component that should be on the left</p> required Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def reorder_after(self, item_name, ritem_name):\n    \"\"\"Reorder and place item_name after ritem_name.\n\n    Args:\n        item_name (str): name of component to be moved\n        ritem_name (str): name of component that should be on the left\n    \"\"\"\n    apiobj = self.get_rvtapi_object()\n    litem_idx = ritem_idx = None\n    if hasattr(apiobj, 'Panels'):\n        for item in apiobj.Panels:\n            if item.Source.AutomationName == item_name:\n                litem_idx = apiobj.Panels.IndexOf(item)\n            elif item.Source.AutomationName == ritem_name:\n                ritem_idx = apiobj.Panels.IndexOf(item)\n        if litem_idx and ritem_idx:\n            if litem_idx &lt; ritem_idx:\n                apiobj.Panels.Move(litem_idx, ritem_idx)\n            elif litem_idx &gt; ritem_idx:\n                apiobj.Panels.Move(litem_idx, ritem_idx + 1)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonButton.reorder_afterall","title":"<code>reorder_afterall(item_name)</code>","text":"<p>Reorder and place item_name after all others.</p> <p>Parameters:</p> Name Type Description Default <code>item_name</code> <code>str</code> <p>name of component to be moved</p> required Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def reorder_afterall(self, item_name):\n    \"\"\"Reorder and place item_name after all others.\n\n    Args:\n        item_name (str): name of component to be moved\n    \"\"\"\n    apiobj = self.get_rvtapi_object()\n    litem_idx = None\n    if hasattr(apiobj, 'Panels'):\n        for item in apiobj.Panels:\n            if item.Source.AutomationName == item_name:\n                litem_idx = apiobj.Panels.IndexOf(item)\n        if litem_idx:\n            max_idx = len(apiobj.Panels) - 1\n            apiobj.Panels.Move(litem_idx, max_idx)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonGroupItem","title":"<code>RevitNativeRibbonGroupItem(adwnd_ribbon_item)</code>","text":"<p>               Bases: <code>GenericRevitNativeUIContainer</code></p> <p>Revit API UI native ribbon button.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def __init__(self, adwnd_ribbon_item):\n    GenericRevitNativeUIContainer.__init__(self)\n\n    self.name = adwnd_ribbon_item.Source.Title\n    self._rvtapi_object = adwnd_ribbon_item\n\n    # finding children on this button group\n    for adwnd_ribbon_button in adwnd_ribbon_item.Items:\n        self._add_component(RevitNativeRibbonButton(adwnd_ribbon_button))\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonGroupItem-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonGroupItem.itemdata_mode","title":"<code>itemdata_mode = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonGroupItem.visible","title":"<code>visible</code>  <code>property</code> <code>writable</code>","text":"<p>Is container visible.</p>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonGroupItem.enabled","title":"<code>enabled</code>  <code>property</code> <code>writable</code>","text":"<p>Is container enabled.</p>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonGroupItem.name","title":"<code>name = adwnd_ribbon_item.Source.Title</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonGroupItem-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonGroupItem.process_deferred","title":"<code>process_deferred()</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def process_deferred(self):\n    try:\n        if self._visible is not None:\n            self.visible = self._visible\n    except Exception as visible_err:\n        raise PyRevitUIError('Error setting .visible {} | {} '\n                             .format(self, visible_err))\n\n    try:\n        if self._enabled is not None:\n            self.enabled = self._enabled\n    except Exception as enable_err:\n        raise PyRevitUIError('Error setting .enabled {} | {} '\n                             .format(self, enable_err))\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonGroupItem.get_rvtapi_object","title":"<code>get_rvtapi_object()</code>","text":"<p>Return underlying Revit API object for this container.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def get_rvtapi_object(self):\n    \"\"\"Return underlying Revit API object for this container.\"\"\"\n    # FIXME: return type\n    return self._rvtapi_object\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonGroupItem.set_rvtapi_object","title":"<code>set_rvtapi_object(rvtapi_obj)</code>","text":"<p>Set underlying Revit API object for this container.</p> <p>Parameters:</p> Name Type Description Default <code>rvtapi_obj</code> <code>obj</code> <p>Revit API container object</p> required Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def set_rvtapi_object(self, rvtapi_obj):\n    \"\"\"Set underlying Revit API object for this container.\n\n    Args:\n        rvtapi_obj (obj): Revit API container object\n    \"\"\"\n    # FIXME: rvtapi_obj type\n    self._rvtapi_object = rvtapi_obj\n    self.itemdata_mode = False\n    self._dirty = True\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonGroupItem.get_adwindows_object","title":"<code>get_adwindows_object()</code>","text":"<p>Return underlying AdWindows API object for this container.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def get_adwindows_object(self):\n    \"\"\"Return underlying AdWindows API object for this container.\"\"\"\n    # FIXME: return type\n    rvtapi_obj = self._rvtapi_object\n    getRibbonItemMethod = \\\n        rvtapi_obj.GetType().GetMethod(\n            'getRibbonItem',\n            BindingFlags.NonPublic | BindingFlags.Instance\n            )\n    if getRibbonItemMethod:\n        return getRibbonItemMethod.Invoke(rvtapi_obj, None)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonGroupItem.get_flagged_children","title":"<code>get_flagged_children(state=True)</code>","text":"<p>Get all children with their flag equal to given state.</p> <p>Flagging is a mechanism to mark certain containers. There are various reasons that container flagging might be used e.g. marking updated containers or the ones in need of an update or removal.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>flag state to filter children</p> <code>True</code> <p>Returns:</p> Type Description <code>list[*]</code> <p>list of filtered child objects</p> Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def get_flagged_children(self, state=True):\n    \"\"\"Get all children with their flag equal to given state.\n\n    Flagging is a mechanism to mark certain containers. There are various\n    reasons that container flagging might be used e.g. marking updated\n    containers or the ones in need of an update or removal.\n\n    Args:\n        state (bool): flag state to filter children\n\n    Returns:\n        (list[*]): list of filtered child objects\n    \"\"\"\n    # FIXME: return type\n    flagged_cmps = []\n    for component in self:\n        flagged_cmps.extend(component.get_flagged_children(state))\n        if component.is_dirty() == state:\n            flagged_cmps.append(component)\n    return flagged_cmps\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonGroupItem.keys","title":"<code>keys()</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def keys(self):\n    # FIXME: what does this do?\n    list(self._sub_pyrvt_components.keys())\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonGroupItem.values","title":"<code>values()</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def values(self):\n    # FIXME: what does this do?\n    list(self._sub_pyrvt_components.values())\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonGroupItem.is_native","title":"<code>is_native()</code>  <code>staticmethod</code>","text":"<p>Is this container generated by pyRevit or is native.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>@staticmethod\ndef is_native():\n    \"\"\"Is this container generated by pyRevit or is native.\"\"\"\n    return True\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonGroupItem.is_dirty","title":"<code>is_dirty()</code>","text":"<p>Is dirty flag set.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def is_dirty(self):\n    \"\"\"Is dirty flag set.\"\"\"\n    if self._dirty:\n        return self._dirty\n    else:\n        # check if there is any dirty child\n        for component in self:\n            if component.is_dirty():\n                return True\n        return False\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonGroupItem.set_dirty_flag","title":"<code>set_dirty_flag(state=True)</code>","text":"<p>Set dirty flag to given state.</p> <p>See .get_flagged_children()</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>state to set flag</p> <code>True</code> Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def set_dirty_flag(self, state=True):\n    \"\"\"Set dirty flag to given state.\n\n    See .get_flagged_children()\n\n    Args:\n        state (bool): state to set flag\n    \"\"\"\n    self._dirty = state\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonGroupItem.contains","title":"<code>contains(pyrvt_cmp_name)</code>","text":"<p>Check if container contains a component with given name.</p> <p>Parameters:</p> Name Type Description Default <code>pyrvt_cmp_name</code> <code>str</code> <p>target component name</p> required Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def contains(self, pyrvt_cmp_name):\n    \"\"\"Check if container contains a component with given name.\n\n    Args:\n        pyrvt_cmp_name (str): target component name\n    \"\"\"\n    return pyrvt_cmp_name in self._sub_pyrvt_components.keys()\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonGroupItem.find_child","title":"<code>find_child(child_name)</code>","text":"<p>Find a component with given name in children.</p> <p>Parameters:</p> Name Type Description Default <code>child_name</code> <code>str</code> <p>target component name</p> required <p>Returns:</p> Type Description <code>Any</code> <p>component object if found, otherwise None</p> Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def find_child(self, child_name):\n    \"\"\"Find a component with given name in children.\n\n    Args:\n        child_name (str): target component name\n\n    Returns:\n        (Any): component object if found, otherwise None\n    \"\"\"\n    for sub_cmp in self._sub_pyrvt_components.values():\n        if child_name == sub_cmp.name:\n            return sub_cmp\n        elif hasattr(sub_cmp, 'ui_title') \\\n                and child_name == sub_cmp.ui_title:\n            return sub_cmp\n\n        component = sub_cmp.find_child(child_name)\n        if component:\n            return component\n\n    return None\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonGroupItem.activate","title":"<code>activate()</code>","text":"<p>Activate this container in ui.</p> <p>Under current implementation, raises PyRevitUIError exception as native Revit API UI components should not be changed.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def activate(self):\n    \"\"\"Activate this container in ui.\n\n    Under current implementation, raises PyRevitUIError exception as\n    native Revit API UI components should not be changed.\n    \"\"\"\n    return self.deactivate()\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonGroupItem.deactivate","title":"<code>deactivate()</code>","text":"<p>Deactivate this container in ui.</p> <p>Under current implementation, raises PyRevitUIError exception as native Revit API UI components should not be changed.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def deactivate(self):\n    \"\"\"Deactivate this container in ui.\n\n    Under current implementation, raises PyRevitUIError exception as\n    native Revit API UI components should not be changed.\n    \"\"\"\n    raise PyRevitUIError('Can not de/activate native item: {}'\n                         .format(self))\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonGroupItem.get_updated_items","title":"<code>get_updated_items()</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def get_updated_items(self):\n    # FIXME: reduntant, this is a use case and should be on uimaker side?\n    return self.get_flagged_children()\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonGroupItem.get_unchanged_items","title":"<code>get_unchanged_items()</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def get_unchanged_items(self):\n    # FIXME: reduntant, this is a use case and should be on uimaker side?\n    return self.get_flagged_children(state=False)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonGroupItem.reorder_before","title":"<code>reorder_before(item_name, ritem_name)</code>","text":"<p>Reorder and place item_name before ritem_name.</p> <p>Parameters:</p> Name Type Description Default <code>item_name</code> <code>str</code> <p>name of component to be moved</p> required <code>ritem_name</code> <code>str</code> <p>name of component that should be on the right</p> required Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def reorder_before(self, item_name, ritem_name):\n    \"\"\"Reorder and place item_name before ritem_name.\n\n    Args:\n        item_name (str): name of component to be moved\n        ritem_name (str): name of component that should be on the right\n    \"\"\"\n    apiobj = self.get_rvtapi_object()\n    litem_idx = ritem_idx = None\n    if hasattr(apiobj, 'Panels'):\n        for item in apiobj.Panels:\n            if item.Source.AutomationName == item_name:\n                litem_idx = apiobj.Panels.IndexOf(item)\n            elif item.Source.AutomationName == ritem_name:\n                ritem_idx = apiobj.Panels.IndexOf(item)\n        if litem_idx and ritem_idx:\n            if litem_idx &lt; ritem_idx:\n                apiobj.Panels.Move(litem_idx, ritem_idx - 1)\n            elif litem_idx &gt; ritem_idx:\n                apiobj.Panels.Move(litem_idx, ritem_idx)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonGroupItem.reorder_beforeall","title":"<code>reorder_beforeall(item_name)</code>","text":"<p>Reorder and place item_name before all others.</p> <p>Parameters:</p> Name Type Description Default <code>item_name</code> <code>str</code> <p>name of component to be moved</p> required Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def reorder_beforeall(self, item_name):\n    \"\"\"Reorder and place item_name before all others.\n\n    Args:\n        item_name (str): name of component to be moved\n    \"\"\"\n    # FIXME: verify docs description is correct\n    apiobj = self.get_rvtapi_object()\n    litem_idx = None\n    if hasattr(apiobj, 'Panels'):\n        for item in apiobj.Panels:\n            if item.Source.AutomationName == item_name:\n                litem_idx = apiobj.Panels.IndexOf(item)\n        if litem_idx:\n            apiobj.Panels.Move(litem_idx, 0)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonGroupItem.reorder_after","title":"<code>reorder_after(item_name, ritem_name)</code>","text":"<p>Reorder and place item_name after ritem_name.</p> <p>Parameters:</p> Name Type Description Default <code>item_name</code> <code>str</code> <p>name of component to be moved</p> required <code>ritem_name</code> <code>str</code> <p>name of component that should be on the left</p> required Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def reorder_after(self, item_name, ritem_name):\n    \"\"\"Reorder and place item_name after ritem_name.\n\n    Args:\n        item_name (str): name of component to be moved\n        ritem_name (str): name of component that should be on the left\n    \"\"\"\n    apiobj = self.get_rvtapi_object()\n    litem_idx = ritem_idx = None\n    if hasattr(apiobj, 'Panels'):\n        for item in apiobj.Panels:\n            if item.Source.AutomationName == item_name:\n                litem_idx = apiobj.Panels.IndexOf(item)\n            elif item.Source.AutomationName == ritem_name:\n                ritem_idx = apiobj.Panels.IndexOf(item)\n        if litem_idx and ritem_idx:\n            if litem_idx &lt; ritem_idx:\n                apiobj.Panels.Move(litem_idx, ritem_idx)\n            elif litem_idx &gt; ritem_idx:\n                apiobj.Panels.Move(litem_idx, ritem_idx + 1)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonGroupItem.reorder_afterall","title":"<code>reorder_afterall(item_name)</code>","text":"<p>Reorder and place item_name after all others.</p> <p>Parameters:</p> Name Type Description Default <code>item_name</code> <code>str</code> <p>name of component to be moved</p> required Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def reorder_afterall(self, item_name):\n    \"\"\"Reorder and place item_name after all others.\n\n    Args:\n        item_name (str): name of component to be moved\n    \"\"\"\n    apiobj = self.get_rvtapi_object()\n    litem_idx = None\n    if hasattr(apiobj, 'Panels'):\n        for item in apiobj.Panels:\n            if item.Source.AutomationName == item_name:\n                litem_idx = apiobj.Panels.IndexOf(item)\n        if litem_idx:\n            max_idx = len(apiobj.Panels) - 1\n            apiobj.Panels.Move(litem_idx, max_idx)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonGroupItem.button","title":"<code>button(name)</code>","text":"<p>Get button item with given name.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of button item to find</p> required <p>Returns:</p> Type Description <code>RevitNativeRibbonButton</code> <p>button object if found</p> Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def button(self, name):\n    \"\"\"Get button item with given name.\n\n    Args:\n        name (str): name of button item to find\n\n    Returns:\n        (RevitNativeRibbonButton): button object if found\n    \"\"\"\n    return super(RevitNativeRibbonGroupItem, self)._get_component(name)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonPanel","title":"<code>RevitNativeRibbonPanel(adwnd_ribbon_panel)</code>","text":"<p>               Bases: <code>GenericRevitNativeUIContainer</code></p> <p>Revit API UI native ribbon button.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def __init__(self, adwnd_ribbon_panel):\n    GenericRevitNativeUIContainer.__init__(self)\n\n    self.name = adwnd_ribbon_panel.Source.Title\n    self._rvtapi_object = adwnd_ribbon_panel\n\n    all_adwnd_ribbon_items = []\n    # getting a list of existing items under this panel\n    # RibbonFoldPanel items are not visible. they automatically fold\n    # buttons into stack on revit ui resize since RibbonFoldPanel are\n    # not visible it does not make sense to create objects for them.\n    # This pre-cleaner loop, finds the RibbonFoldPanel items and\n    # adds the children to the main list\n    for adwnd_ribbon_item in adwnd_ribbon_panel.Source.Items:\n        if isinstance(adwnd_ribbon_item, AdWindows.RibbonFoldPanel):\n            try:\n                for sub_rvtapi_item in adwnd_ribbon_item.Items:\n                    all_adwnd_ribbon_items.append(sub_rvtapi_item)\n            except Exception as append_err:\n                mlogger.debug('Can not get RibbonFoldPanel children: %s '\n                              '| %s', adwnd_ribbon_item, append_err)\n        else:\n            all_adwnd_ribbon_items.append(adwnd_ribbon_item)\n\n    # processing the panel slideout for exising ribbon items\n    for adwnd_slideout_item \\\n            in adwnd_ribbon_panel.Source.SlideOutPanelItemsView:\n        all_adwnd_ribbon_items.append(adwnd_slideout_item)\n\n    # processing the cleaned children list and\n    # creating pyRevit native ribbon objects\n    for adwnd_ribbon_item in all_adwnd_ribbon_items:\n        try:\n            if isinstance(adwnd_ribbon_item,\n                          AdWindows.RibbonButton) \\\n                    or isinstance(adwnd_ribbon_item,\n                                  AdWindows.RibbonToggleButton):\n                self._add_component(\n                    RevitNativeRibbonButton(adwnd_ribbon_item))\n            elif isinstance(adwnd_ribbon_item,\n                            AdWindows.RibbonSplitButton):\n                self._add_component(\n                    RevitNativeRibbonGroupItem(adwnd_ribbon_item))\n\n        except Exception as append_err:\n            mlogger.debug('Can not create native ribbon item: %s '\n                          '| %s', adwnd_ribbon_item, append_err)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonPanel-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonPanel.itemdata_mode","title":"<code>itemdata_mode = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonPanel.visible","title":"<code>visible</code>  <code>property</code> <code>writable</code>","text":"<p>Is container visible.</p>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonPanel.enabled","title":"<code>enabled</code>  <code>property</code> <code>writable</code>","text":"<p>Is container enabled.</p>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonPanel.name","title":"<code>name = adwnd_ribbon_panel.Source.Title</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonPanel-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonPanel.process_deferred","title":"<code>process_deferred()</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def process_deferred(self):\n    try:\n        if self._visible is not None:\n            self.visible = self._visible\n    except Exception as visible_err:\n        raise PyRevitUIError('Error setting .visible {} | {} '\n                             .format(self, visible_err))\n\n    try:\n        if self._enabled is not None:\n            self.enabled = self._enabled\n    except Exception as enable_err:\n        raise PyRevitUIError('Error setting .enabled {} | {} '\n                             .format(self, enable_err))\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonPanel.get_rvtapi_object","title":"<code>get_rvtapi_object()</code>","text":"<p>Return underlying Revit API object for this container.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def get_rvtapi_object(self):\n    \"\"\"Return underlying Revit API object for this container.\"\"\"\n    # FIXME: return type\n    return self._rvtapi_object\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonPanel.set_rvtapi_object","title":"<code>set_rvtapi_object(rvtapi_obj)</code>","text":"<p>Set underlying Revit API object for this container.</p> <p>Parameters:</p> Name Type Description Default <code>rvtapi_obj</code> <code>obj</code> <p>Revit API container object</p> required Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def set_rvtapi_object(self, rvtapi_obj):\n    \"\"\"Set underlying Revit API object for this container.\n\n    Args:\n        rvtapi_obj (obj): Revit API container object\n    \"\"\"\n    # FIXME: rvtapi_obj type\n    self._rvtapi_object = rvtapi_obj\n    self.itemdata_mode = False\n    self._dirty = True\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonPanel.get_adwindows_object","title":"<code>get_adwindows_object()</code>","text":"<p>Return underlying AdWindows API object for this container.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def get_adwindows_object(self):\n    \"\"\"Return underlying AdWindows API object for this container.\"\"\"\n    # FIXME: return type\n    rvtapi_obj = self._rvtapi_object\n    getRibbonItemMethod = \\\n        rvtapi_obj.GetType().GetMethod(\n            'getRibbonItem',\n            BindingFlags.NonPublic | BindingFlags.Instance\n            )\n    if getRibbonItemMethod:\n        return getRibbonItemMethod.Invoke(rvtapi_obj, None)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonPanel.get_flagged_children","title":"<code>get_flagged_children(state=True)</code>","text":"<p>Get all children with their flag equal to given state.</p> <p>Flagging is a mechanism to mark certain containers. There are various reasons that container flagging might be used e.g. marking updated containers or the ones in need of an update or removal.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>flag state to filter children</p> <code>True</code> <p>Returns:</p> Type Description <code>list[*]</code> <p>list of filtered child objects</p> Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def get_flagged_children(self, state=True):\n    \"\"\"Get all children with their flag equal to given state.\n\n    Flagging is a mechanism to mark certain containers. There are various\n    reasons that container flagging might be used e.g. marking updated\n    containers or the ones in need of an update or removal.\n\n    Args:\n        state (bool): flag state to filter children\n\n    Returns:\n        (list[*]): list of filtered child objects\n    \"\"\"\n    # FIXME: return type\n    flagged_cmps = []\n    for component in self:\n        flagged_cmps.extend(component.get_flagged_children(state))\n        if component.is_dirty() == state:\n            flagged_cmps.append(component)\n    return flagged_cmps\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonPanel.keys","title":"<code>keys()</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def keys(self):\n    # FIXME: what does this do?\n    list(self._sub_pyrvt_components.keys())\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonPanel.values","title":"<code>values()</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def values(self):\n    # FIXME: what does this do?\n    list(self._sub_pyrvt_components.values())\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonPanel.is_native","title":"<code>is_native()</code>  <code>staticmethod</code>","text":"<p>Is this container generated by pyRevit or is native.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>@staticmethod\ndef is_native():\n    \"\"\"Is this container generated by pyRevit or is native.\"\"\"\n    return True\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonPanel.is_dirty","title":"<code>is_dirty()</code>","text":"<p>Is dirty flag set.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def is_dirty(self):\n    \"\"\"Is dirty flag set.\"\"\"\n    if self._dirty:\n        return self._dirty\n    else:\n        # check if there is any dirty child\n        for component in self:\n            if component.is_dirty():\n                return True\n        return False\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonPanel.set_dirty_flag","title":"<code>set_dirty_flag(state=True)</code>","text":"<p>Set dirty flag to given state.</p> <p>See .get_flagged_children()</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>state to set flag</p> <code>True</code> Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def set_dirty_flag(self, state=True):\n    \"\"\"Set dirty flag to given state.\n\n    See .get_flagged_children()\n\n    Args:\n        state (bool): state to set flag\n    \"\"\"\n    self._dirty = state\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonPanel.contains","title":"<code>contains(pyrvt_cmp_name)</code>","text":"<p>Check if container contains a component with given name.</p> <p>Parameters:</p> Name Type Description Default <code>pyrvt_cmp_name</code> <code>str</code> <p>target component name</p> required Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def contains(self, pyrvt_cmp_name):\n    \"\"\"Check if container contains a component with given name.\n\n    Args:\n        pyrvt_cmp_name (str): target component name\n    \"\"\"\n    return pyrvt_cmp_name in self._sub_pyrvt_components.keys()\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonPanel.find_child","title":"<code>find_child(child_name)</code>","text":"<p>Find a component with given name in children.</p> <p>Parameters:</p> Name Type Description Default <code>child_name</code> <code>str</code> <p>target component name</p> required <p>Returns:</p> Type Description <code>Any</code> <p>component object if found, otherwise None</p> Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def find_child(self, child_name):\n    \"\"\"Find a component with given name in children.\n\n    Args:\n        child_name (str): target component name\n\n    Returns:\n        (Any): component object if found, otherwise None\n    \"\"\"\n    for sub_cmp in self._sub_pyrvt_components.values():\n        if child_name == sub_cmp.name:\n            return sub_cmp\n        elif hasattr(sub_cmp, 'ui_title') \\\n                and child_name == sub_cmp.ui_title:\n            return sub_cmp\n\n        component = sub_cmp.find_child(child_name)\n        if component:\n            return component\n\n    return None\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonPanel.activate","title":"<code>activate()</code>","text":"<p>Activate this container in ui.</p> <p>Under current implementation, raises PyRevitUIError exception as native Revit API UI components should not be changed.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def activate(self):\n    \"\"\"Activate this container in ui.\n\n    Under current implementation, raises PyRevitUIError exception as\n    native Revit API UI components should not be changed.\n    \"\"\"\n    return self.deactivate()\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonPanel.deactivate","title":"<code>deactivate()</code>","text":"<p>Deactivate this container in ui.</p> <p>Under current implementation, raises PyRevitUIError exception as native Revit API UI components should not be changed.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def deactivate(self):\n    \"\"\"Deactivate this container in ui.\n\n    Under current implementation, raises PyRevitUIError exception as\n    native Revit API UI components should not be changed.\n    \"\"\"\n    raise PyRevitUIError('Can not de/activate native item: {}'\n                         .format(self))\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonPanel.get_updated_items","title":"<code>get_updated_items()</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def get_updated_items(self):\n    # FIXME: reduntant, this is a use case and should be on uimaker side?\n    return self.get_flagged_children()\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonPanel.get_unchanged_items","title":"<code>get_unchanged_items()</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def get_unchanged_items(self):\n    # FIXME: reduntant, this is a use case and should be on uimaker side?\n    return self.get_flagged_children(state=False)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonPanel.reorder_before","title":"<code>reorder_before(item_name, ritem_name)</code>","text":"<p>Reorder and place item_name before ritem_name.</p> <p>Parameters:</p> Name Type Description Default <code>item_name</code> <code>str</code> <p>name of component to be moved</p> required <code>ritem_name</code> <code>str</code> <p>name of component that should be on the right</p> required Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def reorder_before(self, item_name, ritem_name):\n    \"\"\"Reorder and place item_name before ritem_name.\n\n    Args:\n        item_name (str): name of component to be moved\n        ritem_name (str): name of component that should be on the right\n    \"\"\"\n    apiobj = self.get_rvtapi_object()\n    litem_idx = ritem_idx = None\n    if hasattr(apiobj, 'Panels'):\n        for item in apiobj.Panels:\n            if item.Source.AutomationName == item_name:\n                litem_idx = apiobj.Panels.IndexOf(item)\n            elif item.Source.AutomationName == ritem_name:\n                ritem_idx = apiobj.Panels.IndexOf(item)\n        if litem_idx and ritem_idx:\n            if litem_idx &lt; ritem_idx:\n                apiobj.Panels.Move(litem_idx, ritem_idx - 1)\n            elif litem_idx &gt; ritem_idx:\n                apiobj.Panels.Move(litem_idx, ritem_idx)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonPanel.reorder_beforeall","title":"<code>reorder_beforeall(item_name)</code>","text":"<p>Reorder and place item_name before all others.</p> <p>Parameters:</p> Name Type Description Default <code>item_name</code> <code>str</code> <p>name of component to be moved</p> required Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def reorder_beforeall(self, item_name):\n    \"\"\"Reorder and place item_name before all others.\n\n    Args:\n        item_name (str): name of component to be moved\n    \"\"\"\n    # FIXME: verify docs description is correct\n    apiobj = self.get_rvtapi_object()\n    litem_idx = None\n    if hasattr(apiobj, 'Panels'):\n        for item in apiobj.Panels:\n            if item.Source.AutomationName == item_name:\n                litem_idx = apiobj.Panels.IndexOf(item)\n        if litem_idx:\n            apiobj.Panels.Move(litem_idx, 0)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonPanel.reorder_after","title":"<code>reorder_after(item_name, ritem_name)</code>","text":"<p>Reorder and place item_name after ritem_name.</p> <p>Parameters:</p> Name Type Description Default <code>item_name</code> <code>str</code> <p>name of component to be moved</p> required <code>ritem_name</code> <code>str</code> <p>name of component that should be on the left</p> required Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def reorder_after(self, item_name, ritem_name):\n    \"\"\"Reorder and place item_name after ritem_name.\n\n    Args:\n        item_name (str): name of component to be moved\n        ritem_name (str): name of component that should be on the left\n    \"\"\"\n    apiobj = self.get_rvtapi_object()\n    litem_idx = ritem_idx = None\n    if hasattr(apiobj, 'Panels'):\n        for item in apiobj.Panels:\n            if item.Source.AutomationName == item_name:\n                litem_idx = apiobj.Panels.IndexOf(item)\n            elif item.Source.AutomationName == ritem_name:\n                ritem_idx = apiobj.Panels.IndexOf(item)\n        if litem_idx and ritem_idx:\n            if litem_idx &lt; ritem_idx:\n                apiobj.Panels.Move(litem_idx, ritem_idx)\n            elif litem_idx &gt; ritem_idx:\n                apiobj.Panels.Move(litem_idx, ritem_idx + 1)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonPanel.reorder_afterall","title":"<code>reorder_afterall(item_name)</code>","text":"<p>Reorder and place item_name after all others.</p> <p>Parameters:</p> Name Type Description Default <code>item_name</code> <code>str</code> <p>name of component to be moved</p> required Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def reorder_afterall(self, item_name):\n    \"\"\"Reorder and place item_name after all others.\n\n    Args:\n        item_name (str): name of component to be moved\n    \"\"\"\n    apiobj = self.get_rvtapi_object()\n    litem_idx = None\n    if hasattr(apiobj, 'Panels'):\n        for item in apiobj.Panels:\n            if item.Source.AutomationName == item_name:\n                litem_idx = apiobj.Panels.IndexOf(item)\n        if litem_idx:\n            max_idx = len(apiobj.Panels) - 1\n            apiobj.Panels.Move(litem_idx, max_idx)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonPanel.ribbon_item","title":"<code>ribbon_item(item_name)</code>","text":"<p>Get panel item with given name.</p> <p>Parameters:</p> Name Type Description Default <code>item_name</code> <code>str</code> <p>name of panel item to find</p> required <p>Returns:</p> Type Description <code>object</code> <p>panel item if found, could be :obj:<code>RevitNativeRibbonButton</code> or :obj:<code>RevitNativeRibbonGroupItem</code></p> Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def ribbon_item(self, item_name):\n    \"\"\"Get panel item with given name.\n\n    Args:\n        item_name (str): name of panel item to find\n\n    Returns:\n        (object):\n            panel item if found, could be :obj:`RevitNativeRibbonButton`\n            or :obj:`RevitNativeRibbonGroupItem`\n    \"\"\"\n    return super(RevitNativeRibbonPanel, self)._get_component(item_name)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonTab","title":"<code>RevitNativeRibbonTab(adwnd_ribbon_tab)</code>","text":"<p>               Bases: <code>GenericRevitNativeUIContainer</code></p> <p>Revit API UI native ribbon tab.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def __init__(self, adwnd_ribbon_tab):\n    GenericRevitNativeUIContainer.__init__(self)\n\n    self.name = adwnd_ribbon_tab.Title\n    self._rvtapi_object = adwnd_ribbon_tab\n\n    # getting a list of existing panels under this tab\n    try:\n        for adwnd_ribbon_panel in adwnd_ribbon_tab.Panels:\n            # only listing visible panels\n            if adwnd_ribbon_panel.IsVisible:\n                self._add_component(\n                    RevitNativeRibbonPanel(adwnd_ribbon_panel)\n                )\n    except Exception as append_err:\n        mlogger.debug('Can not get native panels for this native tab: %s '\n                      '| %s', adwnd_ribbon_tab, append_err)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonTab-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonTab.itemdata_mode","title":"<code>itemdata_mode = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonTab.visible","title":"<code>visible</code>  <code>property</code> <code>writable</code>","text":"<p>Is container visible.</p>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonTab.enabled","title":"<code>enabled</code>  <code>property</code> <code>writable</code>","text":"<p>Is container enabled.</p>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonTab.name","title":"<code>name = adwnd_ribbon_tab.Title</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonTab-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonTab.process_deferred","title":"<code>process_deferred()</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def process_deferred(self):\n    try:\n        if self._visible is not None:\n            self.visible = self._visible\n    except Exception as visible_err:\n        raise PyRevitUIError('Error setting .visible {} | {} '\n                             .format(self, visible_err))\n\n    try:\n        if self._enabled is not None:\n            self.enabled = self._enabled\n    except Exception as enable_err:\n        raise PyRevitUIError('Error setting .enabled {} | {} '\n                             .format(self, enable_err))\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonTab.get_rvtapi_object","title":"<code>get_rvtapi_object()</code>","text":"<p>Return underlying Revit API object for this container.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def get_rvtapi_object(self):\n    \"\"\"Return underlying Revit API object for this container.\"\"\"\n    # FIXME: return type\n    return self._rvtapi_object\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonTab.set_rvtapi_object","title":"<code>set_rvtapi_object(rvtapi_obj)</code>","text":"<p>Set underlying Revit API object for this container.</p> <p>Parameters:</p> Name Type Description Default <code>rvtapi_obj</code> <code>obj</code> <p>Revit API container object</p> required Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def set_rvtapi_object(self, rvtapi_obj):\n    \"\"\"Set underlying Revit API object for this container.\n\n    Args:\n        rvtapi_obj (obj): Revit API container object\n    \"\"\"\n    # FIXME: rvtapi_obj type\n    self._rvtapi_object = rvtapi_obj\n    self.itemdata_mode = False\n    self._dirty = True\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonTab.get_adwindows_object","title":"<code>get_adwindows_object()</code>","text":"<p>Return underlying AdWindows API object for this container.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def get_adwindows_object(self):\n    \"\"\"Return underlying AdWindows API object for this container.\"\"\"\n    # FIXME: return type\n    rvtapi_obj = self._rvtapi_object\n    getRibbonItemMethod = \\\n        rvtapi_obj.GetType().GetMethod(\n            'getRibbonItem',\n            BindingFlags.NonPublic | BindingFlags.Instance\n            )\n    if getRibbonItemMethod:\n        return getRibbonItemMethod.Invoke(rvtapi_obj, None)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonTab.get_flagged_children","title":"<code>get_flagged_children(state=True)</code>","text":"<p>Get all children with their flag equal to given state.</p> <p>Flagging is a mechanism to mark certain containers. There are various reasons that container flagging might be used e.g. marking updated containers or the ones in need of an update or removal.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>flag state to filter children</p> <code>True</code> <p>Returns:</p> Type Description <code>list[*]</code> <p>list of filtered child objects</p> Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def get_flagged_children(self, state=True):\n    \"\"\"Get all children with their flag equal to given state.\n\n    Flagging is a mechanism to mark certain containers. There are various\n    reasons that container flagging might be used e.g. marking updated\n    containers or the ones in need of an update or removal.\n\n    Args:\n        state (bool): flag state to filter children\n\n    Returns:\n        (list[*]): list of filtered child objects\n    \"\"\"\n    # FIXME: return type\n    flagged_cmps = []\n    for component in self:\n        flagged_cmps.extend(component.get_flagged_children(state))\n        if component.is_dirty() == state:\n            flagged_cmps.append(component)\n    return flagged_cmps\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonTab.keys","title":"<code>keys()</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def keys(self):\n    # FIXME: what does this do?\n    list(self._sub_pyrvt_components.keys())\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonTab.values","title":"<code>values()</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def values(self):\n    # FIXME: what does this do?\n    list(self._sub_pyrvt_components.values())\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonTab.is_native","title":"<code>is_native()</code>  <code>staticmethod</code>","text":"<p>Is this container generated by pyRevit or is native.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>@staticmethod\ndef is_native():\n    \"\"\"Is this container generated by pyRevit or is native.\"\"\"\n    return True\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonTab.is_dirty","title":"<code>is_dirty()</code>","text":"<p>Is dirty flag set.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def is_dirty(self):\n    \"\"\"Is dirty flag set.\"\"\"\n    if self._dirty:\n        return self._dirty\n    else:\n        # check if there is any dirty child\n        for component in self:\n            if component.is_dirty():\n                return True\n        return False\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonTab.set_dirty_flag","title":"<code>set_dirty_flag(state=True)</code>","text":"<p>Set dirty flag to given state.</p> <p>See .get_flagged_children()</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>state to set flag</p> <code>True</code> Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def set_dirty_flag(self, state=True):\n    \"\"\"Set dirty flag to given state.\n\n    See .get_flagged_children()\n\n    Args:\n        state (bool): state to set flag\n    \"\"\"\n    self._dirty = state\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonTab.contains","title":"<code>contains(pyrvt_cmp_name)</code>","text":"<p>Check if container contains a component with given name.</p> <p>Parameters:</p> Name Type Description Default <code>pyrvt_cmp_name</code> <code>str</code> <p>target component name</p> required Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def contains(self, pyrvt_cmp_name):\n    \"\"\"Check if container contains a component with given name.\n\n    Args:\n        pyrvt_cmp_name (str): target component name\n    \"\"\"\n    return pyrvt_cmp_name in self._sub_pyrvt_components.keys()\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonTab.find_child","title":"<code>find_child(child_name)</code>","text":"<p>Find a component with given name in children.</p> <p>Parameters:</p> Name Type Description Default <code>child_name</code> <code>str</code> <p>target component name</p> required <p>Returns:</p> Type Description <code>Any</code> <p>component object if found, otherwise None</p> Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def find_child(self, child_name):\n    \"\"\"Find a component with given name in children.\n\n    Args:\n        child_name (str): target component name\n\n    Returns:\n        (Any): component object if found, otherwise None\n    \"\"\"\n    for sub_cmp in self._sub_pyrvt_components.values():\n        if child_name == sub_cmp.name:\n            return sub_cmp\n        elif hasattr(sub_cmp, 'ui_title') \\\n                and child_name == sub_cmp.ui_title:\n            return sub_cmp\n\n        component = sub_cmp.find_child(child_name)\n        if component:\n            return component\n\n    return None\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonTab.activate","title":"<code>activate()</code>","text":"<p>Activate this container in ui.</p> <p>Under current implementation, raises PyRevitUIError exception as native Revit API UI components should not be changed.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def activate(self):\n    \"\"\"Activate this container in ui.\n\n    Under current implementation, raises PyRevitUIError exception as\n    native Revit API UI components should not be changed.\n    \"\"\"\n    return self.deactivate()\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonTab.deactivate","title":"<code>deactivate()</code>","text":"<p>Deactivate this container in ui.</p> <p>Under current implementation, raises PyRevitUIError exception as native Revit API UI components should not be changed.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def deactivate(self):\n    \"\"\"Deactivate this container in ui.\n\n    Under current implementation, raises PyRevitUIError exception as\n    native Revit API UI components should not be changed.\n    \"\"\"\n    raise PyRevitUIError('Can not de/activate native item: {}'\n                         .format(self))\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonTab.get_updated_items","title":"<code>get_updated_items()</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def get_updated_items(self):\n    # FIXME: reduntant, this is a use case and should be on uimaker side?\n    return self.get_flagged_children()\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonTab.get_unchanged_items","title":"<code>get_unchanged_items()</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def get_unchanged_items(self):\n    # FIXME: reduntant, this is a use case and should be on uimaker side?\n    return self.get_flagged_children(state=False)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonTab.reorder_before","title":"<code>reorder_before(item_name, ritem_name)</code>","text":"<p>Reorder and place item_name before ritem_name.</p> <p>Parameters:</p> Name Type Description Default <code>item_name</code> <code>str</code> <p>name of component to be moved</p> required <code>ritem_name</code> <code>str</code> <p>name of component that should be on the right</p> required Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def reorder_before(self, item_name, ritem_name):\n    \"\"\"Reorder and place item_name before ritem_name.\n\n    Args:\n        item_name (str): name of component to be moved\n        ritem_name (str): name of component that should be on the right\n    \"\"\"\n    apiobj = self.get_rvtapi_object()\n    litem_idx = ritem_idx = None\n    if hasattr(apiobj, 'Panels'):\n        for item in apiobj.Panels:\n            if item.Source.AutomationName == item_name:\n                litem_idx = apiobj.Panels.IndexOf(item)\n            elif item.Source.AutomationName == ritem_name:\n                ritem_idx = apiobj.Panels.IndexOf(item)\n        if litem_idx and ritem_idx:\n            if litem_idx &lt; ritem_idx:\n                apiobj.Panels.Move(litem_idx, ritem_idx - 1)\n            elif litem_idx &gt; ritem_idx:\n                apiobj.Panels.Move(litem_idx, ritem_idx)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonTab.reorder_beforeall","title":"<code>reorder_beforeall(item_name)</code>","text":"<p>Reorder and place item_name before all others.</p> <p>Parameters:</p> Name Type Description Default <code>item_name</code> <code>str</code> <p>name of component to be moved</p> required Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def reorder_beforeall(self, item_name):\n    \"\"\"Reorder and place item_name before all others.\n\n    Args:\n        item_name (str): name of component to be moved\n    \"\"\"\n    # FIXME: verify docs description is correct\n    apiobj = self.get_rvtapi_object()\n    litem_idx = None\n    if hasattr(apiobj, 'Panels'):\n        for item in apiobj.Panels:\n            if item.Source.AutomationName == item_name:\n                litem_idx = apiobj.Panels.IndexOf(item)\n        if litem_idx:\n            apiobj.Panels.Move(litem_idx, 0)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonTab.reorder_after","title":"<code>reorder_after(item_name, ritem_name)</code>","text":"<p>Reorder and place item_name after ritem_name.</p> <p>Parameters:</p> Name Type Description Default <code>item_name</code> <code>str</code> <p>name of component to be moved</p> required <code>ritem_name</code> <code>str</code> <p>name of component that should be on the left</p> required Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def reorder_after(self, item_name, ritem_name):\n    \"\"\"Reorder and place item_name after ritem_name.\n\n    Args:\n        item_name (str): name of component to be moved\n        ritem_name (str): name of component that should be on the left\n    \"\"\"\n    apiobj = self.get_rvtapi_object()\n    litem_idx = ritem_idx = None\n    if hasattr(apiobj, 'Panels'):\n        for item in apiobj.Panels:\n            if item.Source.AutomationName == item_name:\n                litem_idx = apiobj.Panels.IndexOf(item)\n            elif item.Source.AutomationName == ritem_name:\n                ritem_idx = apiobj.Panels.IndexOf(item)\n        if litem_idx and ritem_idx:\n            if litem_idx &lt; ritem_idx:\n                apiobj.Panels.Move(litem_idx, ritem_idx)\n            elif litem_idx &gt; ritem_idx:\n                apiobj.Panels.Move(litem_idx, ritem_idx + 1)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonTab.reorder_afterall","title":"<code>reorder_afterall(item_name)</code>","text":"<p>Reorder and place item_name after all others.</p> <p>Parameters:</p> Name Type Description Default <code>item_name</code> <code>str</code> <p>name of component to be moved</p> required Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def reorder_afterall(self, item_name):\n    \"\"\"Reorder and place item_name after all others.\n\n    Args:\n        item_name (str): name of component to be moved\n    \"\"\"\n    apiobj = self.get_rvtapi_object()\n    litem_idx = None\n    if hasattr(apiobj, 'Panels'):\n        for item in apiobj.Panels:\n            if item.Source.AutomationName == item_name:\n                litem_idx = apiobj.Panels.IndexOf(item)\n        if litem_idx:\n            max_idx = len(apiobj.Panels) - 1\n            apiobj.Panels.Move(litem_idx, max_idx)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonTab.ribbon_panel","title":"<code>ribbon_panel(panel_name)</code>","text":"<p>Get panel with given name.</p> <p>Parameters:</p> Name Type Description Default <code>panel_name</code> <code>str</code> <p>name of panel to find</p> required <p>Returns:</p> Type Description <code>RevitNativeRibbonPanel</code> <p>panel if found</p> Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def ribbon_panel(self, panel_name):\n    \"\"\"Get panel with given name.\n\n    Args:\n        panel_name (str): name of panel to find\n\n    Returns:\n        (RevitNativeRibbonPanel): panel if found\n    \"\"\"\n    return super(RevitNativeRibbonTab, self)._get_component(panel_name)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.RevitNativeRibbonTab.is_pyrevit_tab","title":"<code>is_pyrevit_tab()</code>  <code>staticmethod</code>","text":"<p>Is this tab generated by pyRevit.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>@staticmethod\ndef is_pyrevit_tab():\n    \"\"\"Is this tab generated by pyRevit.\"\"\"\n    return False\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.argb_to_brush","title":"<code>argb_to_brush(argb_color)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def argb_to_brush(argb_color):\n    # argb_color is formatted as #AARRGGBB\n    a = r = g = b = \"FF\"\n    try:\n        b = argb_color[-2:]\n        g = argb_color[-4:-2]\n        r = argb_color[-6:-4]\n        if len(argb_color) &gt; 7:\n            a = argb_color[-8:-6]\n        return Media.SolidColorBrush(Media.Color.FromArgb(\n                Convert.ToInt32(\"0x\" + a, 16),\n                Convert.ToInt32(\"0x\" + r, 16),\n                Convert.ToInt32(\"0x\" + g, 16),\n                Convert.ToInt32(\"0x\" + b, 16)\n                )\n            )\n    except Exception as color_ex:\n        mlogger.error(\"Bad color format %s | %s\", argb_color, color_ex)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.load_bitmapimage","title":"<code>load_bitmapimage(image_file)</code>","text":"<p>Load given png file.</p> <p>Parameters:</p> Name Type Description Default <code>image_file</code> <code>str</code> <p>image file path</p> required <p>Returns:</p> Type Description <code>BitmapImage</code> <p>bitmap image object</p> Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def load_bitmapimage(image_file):\n    \"\"\"Load given png file.\n\n    Args:\n        image_file (str): image file path\n\n    Returns:\n        (Imaging.BitmapImage): bitmap image object\n    \"\"\"\n    bitmap = Imaging.BitmapImage()\n    bitmap.BeginInit()\n    bitmap.UriSource = Uri(image_file)\n    bitmap.CacheOption = Imaging.BitmapCacheOption.OnLoad\n    bitmap.CreateOptions = Imaging.BitmapCreateOptions.IgnoreImageCache\n    bitmap.EndInit()\n    bitmap.Freeze()\n    return bitmap\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.get_current_ui","title":"<code>get_current_ui(all_native=False)</code>","text":"<p>Revit UI Wrapper class for interacting with current pyRevit UI.</p> <p>Returned class provides min required functionality for user interaction</p> <p>Examples:</p> <pre><code>current_ui = pyrevit.session.current_ui()\nthis_script = pyrevit.session.get_this_command()\ncurrent_ui.update_button_icon(this_script, new_icon)\n</code></pre> <p>Returns:</p> Type Description <code>_PyRevitUI</code> <p>wrapper around active ribbon gui</p> Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def get_current_ui(all_native=False):\n    \"\"\"Revit UI Wrapper class for interacting with current pyRevit UI.\n\n    Returned class provides min required functionality for user interaction\n\n    Examples:\n        ```python\n        current_ui = pyrevit.session.current_ui()\n        this_script = pyrevit.session.get_this_command()\n        current_ui.update_button_icon(this_script, new_icon)\n        ```\n\n    Returns:\n        (_PyRevitUI): wrapper around active ribbon gui\n    \"\"\"\n    return _PyRevitUI(all_native=all_native)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/ribbon/#pyrevit.coreutils.ribbon.get_uibutton","title":"<code>get_uibutton(command_unique_name)</code>","text":"<p>Find and return ribbon ui button with given unique id.</p> <p>Parameters:</p> Name Type Description Default <code>command_unique_name</code> <code>str</code> <p>unique id of pyRevit command</p> required <p>Returns:</p> Type Description <code>_PyRevitRibbonButton</code> <p>ui button wrapper object</p> Source code in <code>pyrevitlib/pyrevit/coreutils/ribbon.py</code> <pre><code>def get_uibutton(command_unique_name):\n    \"\"\"Find and return ribbon ui button with given unique id.\n\n    Args:\n        command_unique_name (str): unique id of pyRevit command\n\n    Returns:\n        (_PyRevitRibbonButton): ui button wrapper object\n    \"\"\"\n    # FIXME: verify return type\n    pyrvt_tabs = get_current_ui().get_pyrevit_tabs()\n    for tab in pyrvt_tabs:\n        button = tab.find_child(command_unique_name)\n        if button:\n            return button\n    return None\n</code></pre>"},{"location":"reference/pyrevit/coreutils/yaml/","title":"yaml","text":"<p>Wrapper for YamlDotNet.</p>"},{"location":"reference/pyrevit/coreutils/yaml/#pyrevit.coreutils.yaml-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/yaml/#pyrevit.coreutils.yaml-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/yaml/#pyrevit.coreutils.yaml.load","title":"<code>load(yaml_file)</code>","text":"<p>Load Yaml file into YamlDotNet object.</p> <p>Parameters:</p> Name Type Description Default <code>yaml_file</code> <code>str</code> <p>file path to yaml file</p> required <p>Returns:</p> Type Description <code>YamlMappingNode</code> <p>yaml node</p> Source code in <code>pyrevitlib/pyrevit/coreutils/yaml.py</code> <pre><code>def load(yaml_file):\n    \"\"\"Load Yaml file into YamlDotNet object.\n\n    Args:\n        yaml_file (str): file path to yaml file\n\n    Returns:\n        (YamlDotNet.RepresentationModel.YamlMappingNode): yaml node\n    \"\"\"\n    if PY3:\n        with open(yaml_file, 'r', encoding=\"utf8\") as yamlfile:\n            yamlstr = libyaml.RepresentationModel.YamlStream()\n            yamldata = yamlfile.read()\n            yamlstr.Load(StringReader(yamldata))\n            if yamlstr.Documents.Count &gt;= 1:\n                return yamlstr.Documents[0].RootNode\n    else:\n        with open(yaml_file, 'r') as yamlfile:\n            yamlstr = libyaml.RepresentationModel.YamlStream()\n            yamldata = yamlfile.read().decode('utf-8')\n            yamlstr.Load(StringReader(yamldata))\n            if yamlstr.Documents.Count &gt;= 1:\n                return yamlstr.Documents[0].RootNode\n</code></pre>"},{"location":"reference/pyrevit/coreutils/yaml/#pyrevit.coreutils.yaml.load_as_dict","title":"<code>load_as_dict(yaml_file)</code>","text":"<p>Load Yaml file into python dict object.</p> <p>Parameters:</p> Name Type Description Default <code>yaml_file</code> <code>str</code> <p>file path to yaml file</p> required <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dictionary representing yaml data</p> Source code in <code>pyrevitlib/pyrevit/coreutils/yaml.py</code> <pre><code>def load_as_dict(yaml_file):\n    \"\"\"Load Yaml file into python dict object.\n\n    Args:\n        yaml_file (str): file path to yaml file\n\n    Returns:\n        (dict[str, Any]): dictionary representing yaml data\n    \"\"\"\n    return _convert_yamldotnet_to_dict(load(yaml_file))\n</code></pre>"},{"location":"reference/pyrevit/coreutils/yaml/#pyrevit.coreutils.yaml.dump_dict","title":"<code>dump_dict(dict_object, yaml_file)</code>","text":"<p>Save YamlDotNet object to Yaml file.</p> <p>Parameters:</p> Name Type Description Default <code>dict_object</code> <code>dict</code> <p>dict object to be serialized into yaml</p> required <code>yaml_file</code> <code>str</code> <p>file path to yaml file</p> required Source code in <code>pyrevitlib/pyrevit/coreutils/yaml.py</code> <pre><code>def dump_dict(dict_object, yaml_file):\n    \"\"\"Save YamlDotNet object to Yaml file.\n\n    Args:\n        dict_object (dict): dict object to be serialized into yaml\n        yaml_file (str): file path to yaml file\n    \"\"\"\n    ybuilder = libyaml.Serialization.SerializerBuilder().Build()\n    serialized_yaml = ybuilder.Serialize(dict_object)\n    with codecs.open(yaml_file, 'w', 'utf-8') as yamlfile:\n        yamlfile.write(serialized_yaml.replace('\\r\\n', '\\n'))\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/","title":"markdown","text":"<p>Python Markdown.</p> <p>Python Markdown converts Markdown to HTML and can be used as a library or called from the command line.</p>"},{"location":"reference/pyrevit/coreutils/markdown/#pyrevit.coreutils.markdown--basic-usage-as-a-module","title":"Basic usage as a module:","text":"<pre><code>import markdown\nhtml = markdown.markdown(your_text_string)\n</code></pre> <p>See https://pythonhosted.org/Markdown/ for more information and instructions on how to extend the functionality of Python Markdown.  Read that before you try modifying this file.</p>"},{"location":"reference/pyrevit/coreutils/markdown/#pyrevit.coreutils.markdown--authors-and-license","title":"Authors and License","text":"<p>Started by Manfred Stienstra.  Continued and maintained  by Yuri Takhteyev, Waylan Limberg and Artem Yunusov.</p> <p>Contact: markdown@freewisdom.org</p> <p>Copyright 2007-2013 The Python Markdown Project (v. 1.7 and later) Copyright 200? Django Software Foundation (OrderedDict implementation) Copyright 2004, 2005, 2006 Yuri Takhteyev (v. 0.2-1.6b) Copyright 2004 Manfred Stienstra (the original version)</p> <p>License: BSD (see LICENSE for details).</p>"},{"location":"reference/pyrevit/coreutils/markdown/#pyrevit.coreutils.markdown-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/#pyrevit.coreutils.markdown.logger","title":"<code>logger = logging.getLogger('MARKDOWN')</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/#pyrevit.coreutils.markdown-classes","title":"Classes","text":""},{"location":"reference/pyrevit/coreutils/markdown/#pyrevit.coreutils.markdown.Markdown","title":"<code>Markdown(*args, **kwargs)</code>","text":"<p>               Bases: <code>object</code></p> <p>Convert Markdown to HTML.</p> <p>Creates a new Markdown instance.</p> <p>Parameters:</p> Name Type Description Default <code>*args</code> <code>Any</code> <p>positional args</p> <code>()</code> <code>**kwargs</code> <code>Any</code> <p>keyword args</p> <code>{}</code> <p>Other Parameters:</p> Name Type Description <code>extensions</code> <code>list[Extension | str]</code> <p>A list of extensions. If they are of type string, the module mdx_name.py will be loaded. If they are a subclass of markdown.Extension, they will be used as-is.</p> <code>extension_configs</code> <code>dict[str, Any]</code> <p>Configuration settings for extensions.</p> <code>output_format</code> <code>str</code> <p>Format of output. Supported formats are: * \"xhtml1\": Outputs XHTML 1.x. Default. * \"xhtml5\": Outputs XHTML style tags of HTML 5 * \"xhtml\": Outputs latest supported version of XHTML   (currently XHTML 1.1). * \"html4\": Outputs HTML 4 * \"html5\": Outputs HTML style tags of HTML 5 * \"html\": Outputs latest supported version of HTML   (currently HTML 4). Note that it is suggested that the more specific formats (\"xhtml1\" and \"html4\") be used as \"xhtml\" or \"html\" may change in the future if it makes sense at that time.</p> <code>safe_mode</code> <code>str</code> <p>Deprecated! Disallow raw html. One of \"remove\", \"replace\" or \"escape\".</p> <code>html_replacement_text</code> <code>str</code> <p>Deprecated! Text used when safe_mode is set to \"replace\".</p> <code>tab_length</code> <code>int</code> <p>Length of tabs in the source. Default: 4</p> <code>enable_attributes</code> <code>bool</code> <p>Enable the conversion of attributes. Default: True</p> <code>smart_emphasis</code> <code>bool</code> <p>Treat <code>_connected_words_</code> intelligently Default: True</p> <code>lazy_ol</code> <code>bool</code> <p>Ignore number of first item of ordered lists. Default: True</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/__init__.py</code> <pre><code>def __init__(self, *args, **kwargs):\n    \"\"\"Creates a new Markdown instance.\n\n    Args:\n        *args (Any): positional args\n        **kwargs (Any): keyword args\n\n    Keyword Args:\n        extensions (list[Extension | str]): A list of extensions.\n            If they are of type string, the module mdx_name.py will be loaded.\n            If they are a subclass of markdown.Extension, they will be used\n            as-is.\n        extension_configs (dict[str, Any]): Configuration settings for extensions.\n        output_format (str): Format of output. Supported formats are:\n            * \"xhtml1\": Outputs XHTML 1.x. Default.\n            * \"xhtml5\": Outputs XHTML style tags of HTML 5\n            * \"xhtml\": Outputs latest supported version of XHTML\n              (currently XHTML 1.1).\n            * \"html4\": Outputs HTML 4\n            * \"html5\": Outputs HTML style tags of HTML 5\n            * \"html\": Outputs latest supported version of HTML\n              (currently HTML 4).\n            Note that it is suggested that the more specific formats (\"xhtml1\"\n            and \"html4\") be used as \"xhtml\" or \"html\" may change in the future\n            if it makes sense at that time.\n        safe_mode (str): Deprecated! Disallow raw html.\n            One of \"remove\", \"replace\" or \"escape\".\n        html_replacement_text (str): Deprecated! Text used when safe_mode\n            is set to \"replace\".\n        tab_length (int): Length of tabs in the source. Default: 4\n        enable_attributes (bool): Enable the conversion of attributes.\n            Default: True\n        smart_emphasis (bool): Treat `_connected_words_` intelligently\n            Default: True\n        lazy_ol (bool): Ignore number of first item of ordered lists.\n            Default: True\n    \"\"\"\n    # For backward compatibility, loop through old positional args\n    pos = ['extensions', 'extension_configs', 'safe_mode', 'output_format']\n    for c, arg in enumerate(args):\n        if pos[c] not in kwargs:\n            kwargs[pos[c]] = arg\n        if c+1 == len(pos):  # pragma: no cover\n            # ignore any additional args\n            break\n    if len(args):\n        warnings.warn('Positional arguments are deprecated in Markdown. '\n                      'Use keyword arguments only.',\n                      DeprecationWarning)\n\n    # Loop through kwargs and assign defaults\n    for option, default in self.option_defaults.items():\n        setattr(self, option, kwargs.get(option, default))\n\n    self.safeMode = kwargs.get('safe_mode', False)\n    if self.safeMode and 'enable_attributes' not in kwargs:\n        # Disable attributes in safeMode when not explicitly set\n        self.enable_attributes = False\n\n    if 'safe_mode' in kwargs:\n        warnings.warn('\"safe_mode\" is deprecated in Python-Markdown. '\n                      'Use an HTML sanitizer (like '\n                      'Bleach https://bleach.readthedocs.io/) '\n                      'if you are parsing untrusted markdown text. '\n                      'See the 2.6 release notes for more info',\n                      DeprecationWarning)\n\n    if 'html_replacement_text' in kwargs:\n        warnings.warn('The \"html_replacement_text\" keyword is '\n                      'deprecated along with \"safe_mode\".',\n                      DeprecationWarning)\n\n    self.ESCAPED_CHARS = ['\\\\', '`', '*', '_', '{', '}', '[', ']',\n                          '(', ')', '&gt;', '#', '+', '-', '.', '!']\n\n    self.registeredExtensions = []\n    self.docType = \"\"\n    self.stripTopLevelTags = True\n\n    self.build_parser()\n\n    self.references = {}\n    self.htmlStash = util.HtmlStash()\n    self.registerExtensions(extensions=kwargs.get('extensions', []),\n                            configs=kwargs.get('extension_configs', {}))\n    self.set_output_format(kwargs.get('output_format', 'xhtml1'))\n    self.reset()\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/#pyrevit.coreutils.markdown.Markdown-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/#pyrevit.coreutils.markdown.Markdown.doc_tag","title":"<code>doc_tag = 'div'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/#pyrevit.coreutils.markdown.Markdown.option_defaults","title":"<code>option_defaults = {'html_replacement_text': '[HTML_REMOVED]', 'tab_length': 4, 'enable_attributes': True, 'smart_emphasis': True, 'lazy_ol': True}</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/#pyrevit.coreutils.markdown.Markdown.output_formats","title":"<code>output_formats = {'html': to_html_string, 'html4': to_html_string, 'html5': to_html_string, 'xhtml': to_xhtml_string, 'xhtml1': to_xhtml_string, 'xhtml5': to_xhtml_string}</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/#pyrevit.coreutils.markdown.Markdown.safeMode","title":"<code>safeMode = kwargs.get('safe_mode', False)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/#pyrevit.coreutils.markdown.Markdown.enable_attributes","title":"<code>enable_attributes = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/#pyrevit.coreutils.markdown.Markdown.ESCAPED_CHARS","title":"<code>ESCAPED_CHARS = ['\\\\', '`', '*', '_', '{', '}', '[', ']', '(', ')', '&gt;', '#', '+', '-', '.', '!']</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/#pyrevit.coreutils.markdown.Markdown.registeredExtensions","title":"<code>registeredExtensions = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/#pyrevit.coreutils.markdown.Markdown.docType","title":"<code>docType = ''</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/#pyrevit.coreutils.markdown.Markdown.stripTopLevelTags","title":"<code>stripTopLevelTags = True</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/#pyrevit.coreutils.markdown.Markdown.references","title":"<code>references = {}</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/#pyrevit.coreutils.markdown.Markdown.htmlStash","title":"<code>htmlStash = util.HtmlStash()</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/#pyrevit.coreutils.markdown.Markdown-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/#pyrevit.coreutils.markdown.Markdown.build_parser","title":"<code>build_parser()</code>","text":"<p>Build the parser from the various parts.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/__init__.py</code> <pre><code>def build_parser(self):\n    \"\"\"Build the parser from the various parts.\"\"\"\n    self.preprocessors = build_preprocessors(self)\n    self.parser = build_block_parser(self)\n    self.inlinePatterns = build_inlinepatterns(self)\n    self.treeprocessors = build_treeprocessors(self)\n    self.postprocessors = build_postprocessors(self)\n    return self\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/#pyrevit.coreutils.markdown.Markdown.registerExtensions","title":"<code>registerExtensions(extensions, configs)</code>","text":"<p>Register extensions with this instance of Markdown.</p> <p>Parameters:</p> Name Type Description Default <code>extensions</code> <code>list[Extension]</code> <p>extensions strings or objects. See the docstring on Markdown.</p> required <code>configs</code> <code>dict[str, Any]</code> <p>A dictionary mapping module names to config options.</p> required Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/__init__.py</code> <pre><code>def registerExtensions(self, extensions, configs):\n    \"\"\"Register extensions with this instance of Markdown.\n\n    Args:\n        extensions (list[Extension]): extensions strings or objects.\n            See the docstring on Markdown.\n        configs (dict[str, Any]): A dictionary mapping module names to config options.\n\n    \"\"\"\n    for ext in extensions:\n        if isinstance(ext, util.string_type):\n            ext = self.build_extension(ext, configs.get(ext, {}))\n        if isinstance(ext, Extension):\n            ext.extendMarkdown(self, globals())\n            logger.debug(\n                'Successfully loaded extension \"%s.%s\".'\n                % (ext.__class__.__module__, ext.__class__.__name__)\n            )\n        elif ext is not None:\n            raise TypeError(\n                'Extension \"%s.%s\" must be of type: \"markdown.Extension\"'\n                % (ext.__class__.__module__, ext.__class__.__name__))\n\n    return self\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/#pyrevit.coreutils.markdown.Markdown.build_extension","title":"<code>build_extension(ext_name, configs)</code>","text":"<p>Build extension by name, then return the module.</p> <p>The extension name may contain arguments as part of the string in the following format: \"extname(key1=value1,key2=value2)\"</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/__init__.py</code> <pre><code>def build_extension(self, ext_name, configs):\n    \"\"\"Build extension by name, then return the module.\n\n    The extension name may contain arguments as part of the string in the\n    following format: \"extname(key1=value1,key2=value2)\"\n\n    \"\"\"\n    configs = dict(configs)\n\n    # Parse extensions config params (ignore the order)\n    pos = ext_name.find(\"(\")  # find the first \"(\"\n    if pos &gt; 0:\n        ext_args = ext_name[pos+1:-1]\n        ext_name = ext_name[:pos]\n        pairs = [x.split(\"=\") for x in ext_args.split(\",\")]\n        configs.update([(x.strip(), y.strip()) for (x, y) in pairs])\n        warnings.warn('Setting configs in the Named Extension string is '\n                      'deprecated. It is recommended that you '\n                      'pass an instance of the extension class to '\n                      'Markdown or use the \"extension_configs\" keyword. '\n                      'The current behavior will raise an error in version 2.7. '\n                      'See the Release Notes for Python-Markdown version '\n                      '2.6 for more info.', DeprecationWarning)\n\n    # Get class name (if provided): `path.to.module:ClassName`\n    ext_name, class_name = ext_name.split(':', 1) \\\n        if ':' in ext_name else (ext_name, '')\n\n    # Try loading the extension first from one place, then another\n    try:\n        # Assume string uses dot syntax (`path.to.some.module`)\n        module = importlib.import_module(ext_name)\n        logger.debug(\n            'Successfuly imported extension module \"%s\".' % ext_name\n        )\n        # For backward compat (until deprecation)\n        # check that this is an extension.\n        if ('.' not in ext_name and not (hasattr(module, 'makeExtension') or\n           (class_name and hasattr(module, class_name)))):\n            # We have a name conflict\n            # eg: extensions=['tables'] and PyTables is installed\n            raise ImportError\n    except ImportError:\n        # Preppend `markdown.extensions.` to name\n        module_name = '.'.join(['markdown.extensions', ext_name])\n        try:\n            module = importlib.import_module(module_name)\n            logger.debug(\n                'Successfuly imported extension module \"%s\".' %\n                module_name\n            )\n            warnings.warn('Using short names for Markdown\\'s builtin '\n                          'extensions is deprecated. Use the '\n                          'full path to the extension with Python\\'s dot '\n                          'notation (eg: \"%s\" instead of \"%s\"). The '\n                          'current behavior will raise an error in version '\n                          '2.7. See the Release Notes for '\n                          'Python-Markdown version 2.6 for more info.' %\n                          (module_name, ext_name),\n                          DeprecationWarning)\n        except ImportError:\n            # Preppend `mdx_` to name\n            module_name_old_style = '_'.join(['mdx', ext_name])\n            try:\n                module = importlib.import_module(module_name_old_style)\n                logger.debug(\n                    'Successfuly imported extension module \"%s\".' %\n                    module_name_old_style)\n                warnings.warn('Markdown\\'s behavior of prepending \"mdx_\" '\n                              'to an extension name is deprecated. '\n                              'Use the full path to the '\n                              'extension with Python\\'s dot notation '\n                              '(eg: \"%s\" instead of \"%s\"). The current '\n                              'behavior will raise an error in version 2.7. '\n                              'See the Release Notes for Python-Markdown '\n                              'version 2.6 for more info.' %\n                              (module_name_old_style, ext_name),\n                              DeprecationWarning)\n            except ImportError as e:\n                message = \"Failed loading extension '%s' from '%s', '%s' \" \\\n                    \"or '%s'\" % (ext_name, ext_name, module_name,\n                                 module_name_old_style)\n                e.args = (message,) + e.args[1:]\n                raise\n\n    if class_name:\n        # Load given class name from module.\n        return getattr(module, class_name)(**configs)\n    else:\n        # Expect  makeExtension() function to return a class.\n        try:\n            return module.makeExtension(**configs)\n        except AttributeError as e:\n            message = e.args[0]\n            message = \"Failed to initiate extension \" \\\n                      \"'%s': %s\" % (ext_name, message)\n            e.args = (message,) + e.args[1:]\n            raise\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/#pyrevit.coreutils.markdown.Markdown.registerExtension","title":"<code>registerExtension(extension)</code>","text":"<p>This gets called by the extension.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/__init__.py</code> <pre><code>def registerExtension(self, extension):\n    \"\"\"This gets called by the extension.\"\"\"\n    self.registeredExtensions.append(extension)\n    return self\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/#pyrevit.coreutils.markdown.Markdown.reset","title":"<code>reset()</code>","text":"<p>Resets all state variables so that we can start with a new text.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/__init__.py</code> <pre><code>def reset(self):\n    \"\"\"Resets all state variables so that we can start with a new text.\"\"\"\n    self.htmlStash.reset()\n    self.references.clear()\n\n    for extension in self.registeredExtensions:\n        if hasattr(extension, 'reset'):\n            extension.reset()\n\n    return self\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/#pyrevit.coreutils.markdown.Markdown.set_output_format","title":"<code>set_output_format(format)</code>","text":"<p>Set the output format for the class instance.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/__init__.py</code> <pre><code>def set_output_format(self, format):\n    \"\"\"Set the output format for the class instance.\"\"\"\n    self.output_format = format.lower()\n    try:\n        self.serializer = self.output_formats[self.output_format]\n    except KeyError as e:\n        valid_formats = list(self.output_formats.keys())\n        valid_formats.sort()\n        message = 'Invalid Output Format: \"%s\". Use one of %s.' \\\n            % (self.output_format,\n               '\"' + '\", \"'.join(valid_formats) + '\"')\n        e.args = (message,) + e.args[1:]\n        raise\n    return self\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/#pyrevit.coreutils.markdown.Markdown.convert","title":"<code>convert(source)</code>","text":"<p>Convert markdown to serialized XHTML or HTML.</p> <p>Parameters:</p> Name Type Description Default <code>source</code> <code>str</code> <p>Source text as a Unicode string.</p> required <p>Markdown processing takes place in five steps:</p> <ol> <li>A bunch of \"preprocessors\" munge the input text.</li> <li>BlockParser() parses the high-level structural elements of the    pre-processed text into an ElementTree.</li> <li>A bunch of \"treeprocessors\" are run against the ElementTree. One    such treeprocessor runs InlinePatterns against the ElementTree,    detecting inline markup.</li> <li>Some post-processors are run against the text after the ElementTree    has been serialized into text.</li> <li>The output is written to a string.</li> </ol> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/__init__.py</code> <pre><code>def convert(self, source):\n    \"\"\"Convert markdown to serialized XHTML or HTML.\n\n    Args:\n        source (str): Source text as a Unicode string.\n\n    Markdown processing takes place in five steps:\n\n    1. A bunch of \"preprocessors\" munge the input text.\n    2. BlockParser() parses the high-level structural elements of the\n       pre-processed text into an ElementTree.\n    3. A bunch of \"treeprocessors\" are run against the ElementTree. One\n       such treeprocessor runs InlinePatterns against the ElementTree,\n       detecting inline markup.\n    4. Some post-processors are run against the text after the ElementTree\n       has been serialized into text.\n    5. The output is written to a string.\n    \"\"\"\n    # Fixup the source text\n    if not source.strip():\n        return ''  # a blank unicode string\n\n    try:\n        source = unicode(source)\n    except UnicodeDecodeError as e:\n        # Customise error message while maintaining original trackback\n        e.reason += '. -- Note: Markdown only accepts unicode input!'\n        raise\n\n    # Split into lines and run the line preprocessors.\n    self.lines = source.split(\"\\n\")\n    for prep in self.preprocessors.values():\n        self.lines = prep.run(self.lines)\n\n    # Parse the high-level elements.\n    root = self.parser.parseDocument(self.lines).getroot()\n\n    # Run the tree-processors\n    for treeprocessor in self.treeprocessors.values():\n        newRoot = treeprocessor.run(root)\n        if newRoot is not None:\n            root = newRoot\n\n    # Serialize _properly_.  Strip top-level tags.\n    output = self.serializer(root)\n    if self.stripTopLevelTags:\n        try:\n            start = output.index(\n                '&lt;%s&gt;' % self.doc_tag) + len(self.doc_tag) + 2\n            end = output.rindex('&lt;/%s&gt;' % self.doc_tag)\n            output = output[start:end].strip()\n        except ValueError:  # pragma: no cover\n            if output.strip().endswith('&lt;%s /&gt;' % self.doc_tag):\n                # We have an empty document\n                output = ''\n            else:\n                # We have a serious problem\n                raise ValueError('Markdown failed to strip top-level '\n                                 'tags. Document=%r' % output.strip())\n\n    # Run the text post-processors\n    for pp in self.postprocessors.values():\n        output = pp.run(output)\n\n    return output.strip()\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/#pyrevit.coreutils.markdown.Markdown.convertFile","title":"<code>convertFile(input=None, output=None, encoding=None)</code>","text":"<p>Converts a Markdown file and returns the HTML as a Unicode string.</p> <p>Decodes the file using the provided encoding (defaults to utf-8), passes the file content to markdown, and outputs the html to either the provided stream or the file with provided name, using the same encoding as the source file. The 'xmlcharrefreplace' error handler is used when encoding the output.</p> <p>Note: This is the only place that decoding and encoding of Unicode takes place in Python-Markdown.  (All other code is Unicode-in / Unicode-out.)</p> <p>Parameters:</p> Name Type Description Default <code>input</code> <code>str | None</code> <p>File object or path. Reads from stdin if <code>None</code>.</p> <code>None</code> <code>output</code> <code>str | None</code> <p>File object or path. Writes to stdout if <code>None</code>.</p> <code>None</code> <code>encoding</code> <code>str</code> <p>Encoding of input and output files. Defaults to utf-8.</p> <code>None</code> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/__init__.py</code> <pre><code>def convertFile(self, input=None, output=None, encoding=None):\n    \"\"\"Converts a Markdown file and returns the HTML as a Unicode string.\n\n    Decodes the file using the provided encoding (defaults to utf-8),\n    passes the file content to markdown, and outputs the html to either\n    the provided stream or the file with provided name, using the same\n    encoding as the source file. The 'xmlcharrefreplace' error handler is\n    used when encoding the output.\n\n    **Note:** This is the only place that decoding and encoding of Unicode\n    takes place in Python-Markdown.  (All other code is Unicode-in /\n    Unicode-out.)\n\n    Args:\n        input (str | None): File object or path. Reads from stdin if `None`.\n        output (str | None): File object or path. Writes to stdout if `None`.\n        encoding (str): Encoding of input and output files. Defaults to utf-8.\n    \"\"\"\n    encoding = encoding or \"utf-8\"\n\n    # Read the source\n    if input:\n        if isinstance(input, util.string_type):\n            input_file = codecs.open(input, mode=\"r\", encoding=encoding)\n        else:\n            input_file = codecs.getreader(encoding)(input)\n        text = input_file.read()\n        input_file.close()\n    else:\n        text = sys.stdin.read()\n        if not isinstance(text, util.text_type):\n            text = text.decode(encoding)\n\n    text = text.lstrip('\\ufeff')  # remove the byte-order mark\n\n    # Convert\n    html = self.convert(text)\n\n    # Write to file or stdout\n    if output:\n        if isinstance(output, util.string_type):\n            output_file = codecs.open(output, \"w\",\n                                      encoding=encoding,\n                                      errors=\"xmlcharrefreplace\")\n            output_file.write(html)\n            output_file.close()\n        else:\n            writer = codecs.getwriter(encoding)\n            output_file = writer(output, errors=\"xmlcharrefreplace\")\n            output_file.write(html)\n            # Don't close here. User may want to write more.\n    else:\n        # Encode manually and write bytes to stdout.\n        html = html.encode(encoding, \"xmlcharrefreplace\")\n        try:\n            # Write bytes directly to buffer (Python 3).\n            sys.stdout.buffer.write(html)\n        except AttributeError:\n            # Probably Python 2, which works with bytes by default.\n            sys.stdout.write(html)\n\n    return self\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/#pyrevit.coreutils.markdown-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/#pyrevit.coreutils.markdown.markdown","title":"<code>markdown(text, *args, **kwargs)</code>","text":"<p>Convert a Markdown string to HTML and return HTML as a Unicode string.</p> <p>This is a shortcut function for <code>Markdown</code> class to cover the most basic use case.  It initializes an instance of Markdown, loads the necessary extensions and runs the parser on the given text.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Markdown formatted text as Unicode or ASCII string.</p> required <code>*args</code> <code>Any</code> <p>Any arguments accepted by the Markdown class.</p> <code>()</code> <code>**kwargs</code> <code>Any</code> <p>Any arguments accepted by the Markdown class.</p> <code>{}</code> <p>Returns:</p> Type Description <code>str</code> <p>An HTML document as a string.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/__init__.py</code> <pre><code>def markdown(text, *args, **kwargs):\n    \"\"\"Convert a Markdown string to HTML and return HTML as a Unicode string.\n\n    This is a shortcut function for `Markdown` class to cover the most\n    basic use case.  It initializes an instance of Markdown, loads the\n    necessary extensions and runs the parser on the given text.\n\n    Args:\n        text (str): Markdown formatted text as Unicode or ASCII string.\n        *args (Any): Any arguments accepted by the Markdown class.\n        **kwargs (Any): Any arguments accepted by the Markdown class.\n\n    Returns:\n        (str): An HTML document as a string.\n\n    \"\"\"\n    md = Markdown(*args, **kwargs)\n    return md.convert(text)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/#pyrevit.coreutils.markdown.markdownFromFile","title":"<code>markdownFromFile(*args, **kwargs)</code>","text":"<p>Read markdown code from a file and write it to a file or a stream.</p> <p>This is a shortcut function which initializes an instance of Markdown, and calls the convertFile method rather than convert.</p> <p>Parameters:</p> Name Type Description Default <code>*args</code> <code>Any</code> <p>Any arguments accepted by the Markdown class. input (str): a file name or readable object. output (str): a file name or writable object. encoding (str): Encoding of input and output.</p> <code>()</code> <code>**kwargs</code> <code>Any</code> <p>Any arguments accepted by the Markdown class.</p> <code>{}</code> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/__init__.py</code> <pre><code>def markdownFromFile(*args, **kwargs):\n    \"\"\"Read markdown code from a file and write it to a file or a stream.\n\n    This is a shortcut function which initializes an instance of Markdown,\n    and calls the convertFile method rather than convert.\n\n    Args:\n        *args (Any): Any arguments accepted by the Markdown class.\n            input (str): a file name or readable object.\n            output (str): a file name or writable object.\n            encoding (str): Encoding of input and output.\n        **kwargs (Any): Any arguments accepted by the Markdown class.\n\n    \"\"\"\n    # For backward compatibility loop through positional args\n    pos = ['input', 'output', 'extensions', 'encoding']\n    c = 0\n    for arg in args:\n        if pos[c] not in kwargs:\n            kwargs[pos[c]] = arg\n        c += 1\n        if c == len(pos):\n            break\n    if len(args):\n        warnings.warn('Positional arguments are depreacted in '\n                      'Markdown and will raise an error in version 2.7. '\n                      'Use keyword arguments only.',\n                      DeprecationWarning)\n\n    md = Markdown(**kwargs)\n    md.convertFile(kwargs.get('input', None),\n                   kwargs.get('output', None),\n                   kwargs.get('encoding', None))\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/__version__/","title":"__version__","text":"<p>Markdown version.</p>"},{"location":"reference/pyrevit/coreutils/markdown/__version__/#pyrevit.coreutils.markdown.__version__-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/__version__/#pyrevit.coreutils.markdown.__version__.version_info","title":"<code>version_info = (2, 6, 8, 'final', 0)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/__version__/#pyrevit.coreutils.markdown.__version__.version","title":"<code>version = _get_version()</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/blockparser/","title":"blockparser","text":"<p>Markdown blocks parser.</p>"},{"location":"reference/pyrevit/coreutils/markdown/blockparser/#pyrevit.coreutils.markdown.blockparser-classes","title":"Classes","text":""},{"location":"reference/pyrevit/coreutils/markdown/blockparser/#pyrevit.coreutils.markdown.blockparser.State","title":"<code>State</code>","text":"<p>               Bases: <code>list</code></p> <p>Track the current and nested state of the parser.</p> <p>This utility class is used to track the state of the BlockParser and support multiple levels if nesting. It's just a simple API wrapped around a list. Each time a state is set, that state is appended to the end of the list. Each time a state is reset, that state is removed from the end of the list.</p> <p>Therefore, each time a state is set for a nested block, that state must be reset when we back out of that level of nesting or the state could be corrupted.</p> <p>While all the methods of a list object are available, only the three defined below need be used.</p>"},{"location":"reference/pyrevit/coreutils/markdown/blockparser/#pyrevit.coreutils.markdown.blockparser.State-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/blockparser/#pyrevit.coreutils.markdown.blockparser.State.set","title":"<code>set(state)</code>","text":"<p>Set a new state.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockparser.py</code> <pre><code>def set(self, state):\n    \"\"\"Set a new state.\"\"\"\n    self.append(state)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/blockparser/#pyrevit.coreutils.markdown.blockparser.State.reset","title":"<code>reset()</code>","text":"<p>Step back one step in nested state.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockparser.py</code> <pre><code>def reset(self):\n    \"\"\"Step back one step in nested state.\"\"\"\n    self.pop()\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/blockparser/#pyrevit.coreutils.markdown.blockparser.State.isstate","title":"<code>isstate(state)</code>","text":"<p>Test that top (current) level is of given state.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockparser.py</code> <pre><code>def isstate(self, state):\n    \"\"\"Test that top (current) level is of given state.\"\"\"\n    if len(self):\n        return self[-1] == state\n    else:\n        return False\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/blockparser/#pyrevit.coreutils.markdown.blockparser.BlockParser","title":"<code>BlockParser(markdown)</code>","text":"<p>Parse Markdown blocks into an ElementTree object.</p> <p>A wrapper class that stitches the various BlockProcessors together, looping through them and creating an ElementTree object.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockparser.py</code> <pre><code>def __init__(self, markdown):\n    self.blockprocessors = odict.OrderedDict()\n    self.state = State()\n    self.markdown = markdown\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/blockparser/#pyrevit.coreutils.markdown.blockparser.BlockParser-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/blockparser/#pyrevit.coreutils.markdown.blockparser.BlockParser.blockprocessors","title":"<code>blockprocessors = odict.OrderedDict()</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/blockparser/#pyrevit.coreutils.markdown.blockparser.BlockParser.state","title":"<code>state = State()</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/blockparser/#pyrevit.coreutils.markdown.blockparser.BlockParser.markdown","title":"<code>markdown = markdown</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/blockparser/#pyrevit.coreutils.markdown.blockparser.BlockParser-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/blockparser/#pyrevit.coreutils.markdown.blockparser.BlockParser.parseDocument","title":"<code>parseDocument(lines)</code>","text":"<p>Parse a markdown document into an ElementTree.</p> <p>Given a list of lines, an ElementTree object (not just a parent Element) is created and the root element is passed to the parser as the parent. The ElementTree object is returned.</p> <p>This should only be called on an entire document, not pieces.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockparser.py</code> <pre><code>def parseDocument(self, lines):\n    \"\"\"Parse a markdown document into an ElementTree.\n\n    Given a list of lines, an ElementTree object (not just a parent\n    Element) is created and the root element is passed to the parser\n    as the parent. The ElementTree object is returned.\n\n    This should only be called on an entire document, not pieces.\n\n    \"\"\"\n    # Create a ElementTree from the lines\n    self.root = util.etree.Element(self.markdown.doc_tag)\n    self.parseChunk(self.root, '\\n'.join(lines))\n    return util.etree.ElementTree(self.root)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/blockparser/#pyrevit.coreutils.markdown.blockparser.BlockParser.parseChunk","title":"<code>parseChunk(parent, text)</code>","text":"<p>Parse a chunk of markdown text and attach to given etree node.</p> <p>While the <code>text</code> argument is generally assumed to contain multiple blocks which will be split on blank lines, it could contain only one block. Generally, this method would be called by extensions when block parsing is required.</p> <p>The <code>parent</code> etree Element passed in is altered in place. Nothing is returned.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockparser.py</code> <pre><code>def parseChunk(self, parent, text):\n    \"\"\"Parse a chunk of markdown text and attach to given etree node.\n\n    While the ``text`` argument is generally assumed to contain multiple\n    blocks which will be split on blank lines, it could contain only one\n    block. Generally, this method would be called by extensions when\n    block parsing is required.\n\n    The ``parent`` etree Element passed in is altered in place.\n    Nothing is returned.\n\n    \"\"\"\n    self.parseBlocks(parent, text.split('\\n\\n'))\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/blockparser/#pyrevit.coreutils.markdown.blockparser.BlockParser.parseBlocks","title":"<code>parseBlocks(parent, blocks)</code>","text":"<p>Process blocks of markdown text and attach to given etree node.</p> <p>Given a list of <code>blocks</code>, each blockprocessor is stepped through until there are no blocks left. While an extension could potentially call this method directly, it's generally expected to be used internally.</p> <p>This is a public method as an extension may need to add/alter additional BlockProcessors which call this method to recursively parse a nested block.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockparser.py</code> <pre><code>def parseBlocks(self, parent, blocks):\n    \"\"\"Process blocks of markdown text and attach to given etree node.\n\n    Given a list of ``blocks``, each blockprocessor is stepped through\n    until there are no blocks left. While an extension could potentially\n    call this method directly, it's generally expected to be used\n    internally.\n\n    This is a public method as an extension may need to add/alter\n    additional BlockProcessors which call this method to recursively\n    parse a nested block.\n\n    \"\"\"\n    while blocks:\n        for processor in self.blockprocessors.values():\n            if processor.test(parent, blocks[0]):\n                if processor.run(parent, blocks) is not False:\n                    # run returns True or None\n                    break\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/","title":"blockprocessors","text":"<p>CORE MARKDOWN BLOCKPARSER.</p> <p>This parser handles basic parsing of Markdown blocks.  It doesn't concern itself with inline elements such as bold or italics, but rather just catches blocks, lists, quotes, etc.</p> <p>The BlockParser is made up of a bunch of BlockProssors, each handling a different type of block. Extensions may add/replace/remove BlockProcessors as they need to alter how markdown blocks are parsed.</p>"},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.logger","title":"<code>logger = logging.getLogger('MARKDOWN')</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors-classes","title":"Classes","text":""},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.BlockProcessor","title":"<code>BlockProcessor(parser)</code>","text":"<p>               Bases: <code>object</code></p> <p>Base class for block processors.</p> <p>Each subclass will provide the methods below to work with the source and tree. Each processor will need to define it's own <code>test</code> and <code>run</code> methods. The <code>test</code> method should return True or False, to indicate whether the current block should be processed by this processor. If the test passes, the parser will call the processors <code>run</code> method.</p> <p>Parameters:</p> Name Type Description Default <code>parser</code> <code>BlockParser</code> <p>BlockParser instance</p> required Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def __init__(self, parser):\n    self.parser = parser\n    self.tab_length = parser.markdown.tab_length\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.BlockProcessor-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.BlockProcessor.parser","title":"<code>parser = parser</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.BlockProcessor.tab_length","title":"<code>tab_length = parser.markdown.tab_length</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.BlockProcessor-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.BlockProcessor.lastChild","title":"<code>lastChild(parent)</code>","text":"<p>Return the last child of an etree element.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def lastChild(self, parent):\n    \"\"\"Return the last child of an etree element.\"\"\"\n    if len(parent):\n        return parent[-1]\n    else:\n        return None\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.BlockProcessor.detab","title":"<code>detab(text)</code>","text":"<p>Remove a tab from the front of each line of the given text.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def detab(self, text):\n    \"\"\"Remove a tab from the front of each line of the given text.\"\"\"\n    newtext = []\n    lines = text.split('\\n')\n    for line in lines:\n        if line.startswith(' '*self.tab_length):\n            newtext.append(line[self.tab_length:])\n        elif not line.strip():\n            newtext.append('')\n        else:\n            break\n    return '\\n'.join(newtext), '\\n'.join(lines[len(newtext):])\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.BlockProcessor.looseDetab","title":"<code>looseDetab(text, level=1)</code>","text":"<p>Remove a tab from front of lines but allowing dedented lines.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def looseDetab(self, text, level=1):\n    \"\"\"Remove a tab from front of lines but allowing dedented lines.\"\"\"\n    lines = text.split('\\n')\n    for i in range(len(lines)):\n        if lines[i].startswith(' '*self.tab_length*level):\n            lines[i] = lines[i][self.tab_length*level:]\n    return '\\n'.join(lines)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.BlockProcessor.test","title":"<code>test(parent, block)</code>","text":"<p>Test for block type. Must be overridden by subclasses.</p> <p>As the parser loops through processors, it will call the <code>test</code> method on each to determine if the given block of text is of that type. This method must return a boolean <code>True</code> or <code>False</code>. The actual method of testing is left to the needs of that particular block type. It could be as simple as <code>block.startswith(some_string)</code> or a complex regular expression. As the block type may be different depending on the parent of the block (i.e. inside a list), the parent etree element is also provided and may be used as part of the test.</p> <p>Parameters:</p> Name Type Description Default <code>parent</code> <code>Element</code> <p>A etree element which will be the parent of the block.</p> required <code>block</code> <code>list[Element]</code> <p>A block of text from the source which has been split at blank lines.</p> required Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def test(self, parent, block):\n    \"\"\"Test for block type. Must be overridden by subclasses.\n\n    As the parser loops through processors, it will call the ``test``\n    method on each to determine if the given block of text is of that\n    type. This method must return a boolean ``True`` or ``False``. The\n    actual method of testing is left to the needs of that particular\n    block type. It could be as simple as ``block.startswith(some_string)``\n    or a complex regular expression. As the block type may be different\n    depending on the parent of the block (i.e. inside a list), the parent\n    etree element is also provided and may be used as part of the test.\n\n    Args:\n        parent (Element): A etree element which will be the parent of the block.\n        block (list[Element]): A block of text from the source\n            which has been split at blank lines.\n    \"\"\"\n    pass  # pragma: no cover\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.BlockProcessor.run","title":"<code>run(parent, blocks)</code>","text":"<p>Run processor. Must be overridden by subclasses.</p> <p>When the parser determines the appropriate type of a block, the parser will call the corresponding processor's <code>run</code> method. This method should parse the individual lines of the block and append them to the etree.</p> <p>Note that both the <code>parent</code> and <code>etree</code> keywords are pointers to instances of the objects which should be edited in place. Each processor must make changes to the existing objects as there is no mechanism to return new/different objects to replace them.</p> <p>This means that this method should be adding SubElements or adding text to the parent, and should remove (<code>pop</code>) or add (<code>insert</code>) items to the list of blocks.</p> <p>Other Parameters:</p> Name Type Description <code>parent</code> <code>Element</code> <p>A etree element which is the parent of the current block.</p> <code>blocks</code> <code>list[Element]</code> <p>A list of all remaining blocks of the document.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def run(self, parent, blocks):\n    \"\"\"Run processor. Must be overridden by subclasses.\n\n    When the parser determines the appropriate type of a block, the parser\n    will call the corresponding processor's ``run`` method. This method\n    should parse the individual lines of the block and append them to\n    the etree.\n\n    Note that both the ``parent`` and ``etree`` keywords are pointers\n    to instances of the objects which should be edited in place. Each\n    processor must make changes to the existing objects as there is no\n    mechanism to return new/different objects to replace them.\n\n    This means that this method should be adding SubElements or adding text\n    to the parent, and should remove (``pop``) or add (``insert``) items to\n    the list of blocks.\n\n    Keyword Args:\n        parent (Element): A etree element which is the parent of the current block.\n        blocks (list[Element]): A list of all remaining blocks of the document.\n    \"\"\"\n    pass  # pragma: no cover\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.ListIndentProcessor","title":"<code>ListIndentProcessor(*args)</code>","text":"<p>               Bases: <code>BlockProcessor</code></p> <p>Process children of list items.</p> <p>Examples:</p> <ul> <li> <p>a list item     process this part</p> <p>or this part</p> </li> </ul> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def __init__(self, *args):\n    super(ListIndentProcessor, self).__init__(*args)\n    self.INDENT_RE = re.compile(r'^(([ ]{%s})+)' % self.tab_length)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.ListIndentProcessor-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.ListIndentProcessor.parser","title":"<code>parser = parser</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.ListIndentProcessor.tab_length","title":"<code>tab_length = parser.markdown.tab_length</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.ListIndentProcessor.ITEM_TYPES","title":"<code>ITEM_TYPES = ['li']</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.ListIndentProcessor.LIST_TYPES","title":"<code>LIST_TYPES = ['ul', 'ol']</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.ListIndentProcessor.INDENT_RE","title":"<code>INDENT_RE = re.compile('^(([ ]{%s})+)' % self.tab_length)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.ListIndentProcessor-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.ListIndentProcessor.lastChild","title":"<code>lastChild(parent)</code>","text":"<p>Return the last child of an etree element.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def lastChild(self, parent):\n    \"\"\"Return the last child of an etree element.\"\"\"\n    if len(parent):\n        return parent[-1]\n    else:\n        return None\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.ListIndentProcessor.detab","title":"<code>detab(text)</code>","text":"<p>Remove a tab from the front of each line of the given text.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def detab(self, text):\n    \"\"\"Remove a tab from the front of each line of the given text.\"\"\"\n    newtext = []\n    lines = text.split('\\n')\n    for line in lines:\n        if line.startswith(' '*self.tab_length):\n            newtext.append(line[self.tab_length:])\n        elif not line.strip():\n            newtext.append('')\n        else:\n            break\n    return '\\n'.join(newtext), '\\n'.join(lines[len(newtext):])\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.ListIndentProcessor.looseDetab","title":"<code>looseDetab(text, level=1)</code>","text":"<p>Remove a tab from front of lines but allowing dedented lines.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def looseDetab(self, text, level=1):\n    \"\"\"Remove a tab from front of lines but allowing dedented lines.\"\"\"\n    lines = text.split('\\n')\n    for i in range(len(lines)):\n        if lines[i].startswith(' '*self.tab_length*level):\n            lines[i] = lines[i][self.tab_length*level:]\n    return '\\n'.join(lines)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.ListIndentProcessor.test","title":"<code>test(parent, block)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def test(self, parent, block):\n    return block.startswith(' '*self.tab_length) and \\\n        not self.parser.state.isstate('detabbed') and \\\n        (parent.tag in self.ITEM_TYPES or\n            (len(parent) and parent[-1] is not None and\n                (parent[-1].tag in self.LIST_TYPES)))\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.ListIndentProcessor.run","title":"<code>run(parent, blocks)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def run(self, parent, blocks):\n    block = blocks.pop(0)\n    level, sibling = self.get_level(parent, block)\n    block = self.looseDetab(block, level)\n\n    self.parser.state.set('detabbed')\n    if parent.tag in self.ITEM_TYPES:\n        # It's possible that this parent has a 'ul' or 'ol' child list\n        # with a member.  If that is the case, then that should be the\n        # parent.  This is intended to catch the edge case of an indented\n        # list whose first member was parsed previous to this point\n        # see OListProcessor\n        if len(parent) and parent[-1].tag in self.LIST_TYPES:\n            self.parser.parseBlocks(parent[-1], [block])\n        else:\n            # The parent is already a li. Just parse the child block.\n            self.parser.parseBlocks(parent, [block])\n    elif sibling.tag in self.ITEM_TYPES:\n        # The sibling is a li. Use it as parent.\n        self.parser.parseBlocks(sibling, [block])\n    elif len(sibling) and sibling[-1].tag in self.ITEM_TYPES:\n        # The parent is a list (``ol`` or ``ul``) which has children.\n        # Assume the last child li is the parent of this block.\n        if sibling[-1].text:\n            # If the parent li has text, that text needs to be moved to a p\n            # The p must be 'inserted' at beginning of list in the event\n            # that other children already exist i.e.; a nested sublist.\n            p = util.etree.Element('p')\n            p.text = sibling[-1].text\n            sibling[-1].text = ''\n            sibling[-1].insert(0, p)\n        self.parser.parseChunk(sibling[-1], block)\n    else:\n        self.create_item(sibling, block)\n    self.parser.state.reset()\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.ListIndentProcessor.create_item","title":"<code>create_item(parent, block)</code>","text":"<p>Create a new li and parse the block with it as the parent.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def create_item(self, parent, block):\n    \"\"\"Create a new li and parse the block with it as the parent.\"\"\"\n    li = util.etree.SubElement(parent, 'li')\n    self.parser.parseBlocks(li, [block])\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.ListIndentProcessor.get_level","title":"<code>get_level(parent, block)</code>","text":"<p>Get level of indent based on list level.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def get_level(self, parent, block):\n    \"\"\"Get level of indent based on list level.\"\"\"\n    # Get indent level\n    m = self.INDENT_RE.match(block)\n    if m:\n        indent_level = len(m.group(1))/self.tab_length\n    else:\n        indent_level = 0\n    if self.parser.state.isstate('list'):\n        # We're in a tightlist - so we already are at correct parent.\n        level = 1\n    else:\n        # We're in a looselist - so we need to find parent.\n        level = 0\n    # Step through children of tree to find matching indent level.\n    while indent_level &gt; level:\n        child = self.lastChild(parent)\n        if (child is not None and\n           (child.tag in self.LIST_TYPES or child.tag in self.ITEM_TYPES)):\n            if child.tag in self.LIST_TYPES:\n                level += 1\n            parent = child\n        else:\n            # No more child levels. If we're short of indent_level,\n            # we have a code block. So we stop here.\n            break\n    return level, parent\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.CodeBlockProcessor","title":"<code>CodeBlockProcessor(parser)</code>","text":"<p>               Bases: <code>BlockProcessor</code></p> <p>Process code blocks.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def __init__(self, parser):\n    self.parser = parser\n    self.tab_length = parser.markdown.tab_length\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.CodeBlockProcessor-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.CodeBlockProcessor.parser","title":"<code>parser = parser</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.CodeBlockProcessor.tab_length","title":"<code>tab_length = parser.markdown.tab_length</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.CodeBlockProcessor-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.CodeBlockProcessor.lastChild","title":"<code>lastChild(parent)</code>","text":"<p>Return the last child of an etree element.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def lastChild(self, parent):\n    \"\"\"Return the last child of an etree element.\"\"\"\n    if len(parent):\n        return parent[-1]\n    else:\n        return None\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.CodeBlockProcessor.detab","title":"<code>detab(text)</code>","text":"<p>Remove a tab from the front of each line of the given text.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def detab(self, text):\n    \"\"\"Remove a tab from the front of each line of the given text.\"\"\"\n    newtext = []\n    lines = text.split('\\n')\n    for line in lines:\n        if line.startswith(' '*self.tab_length):\n            newtext.append(line[self.tab_length:])\n        elif not line.strip():\n            newtext.append('')\n        else:\n            break\n    return '\\n'.join(newtext), '\\n'.join(lines[len(newtext):])\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.CodeBlockProcessor.looseDetab","title":"<code>looseDetab(text, level=1)</code>","text":"<p>Remove a tab from front of lines but allowing dedented lines.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def looseDetab(self, text, level=1):\n    \"\"\"Remove a tab from front of lines but allowing dedented lines.\"\"\"\n    lines = text.split('\\n')\n    for i in range(len(lines)):\n        if lines[i].startswith(' '*self.tab_length*level):\n            lines[i] = lines[i][self.tab_length*level:]\n    return '\\n'.join(lines)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.CodeBlockProcessor.test","title":"<code>test(parent, block)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def test(self, parent, block):\n    return block.startswith(' '*self.tab_length)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.CodeBlockProcessor.run","title":"<code>run(parent, blocks)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def run(self, parent, blocks):\n    sibling = self.lastChild(parent)\n    block = blocks.pop(0)\n    theRest = ''\n    if (sibling is not None and sibling.tag == \"pre\" and\n       len(sibling) and sibling[0].tag == \"code\"):\n        # The previous block was a code block. As blank lines do not start\n        # new code blocks, append this block to the previous, adding back\n        # linebreaks removed from the split into a list.\n        code = sibling[0]\n        block, theRest = self.detab(block)\n        code.text = util.AtomicString(\n            '%s\\n%s\\n' % (code.text, block.rstrip())\n        )\n    else:\n        # This is a new codeblock. Create the elements and insert text.\n        pre = util.etree.SubElement(parent, 'pre')\n        code = util.etree.SubElement(pre, 'code')\n        block, theRest = self.detab(block)\n        code.text = util.AtomicString('%s\\n' % block.rstrip())\n    if theRest:\n        # This block contained unindented line(s) after the first indented\n        # line. Insert these lines as the first block of the master blocks\n        # list for future processing.\n        blocks.insert(0, theRest)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.BlockQuoteProcessor","title":"<code>BlockQuoteProcessor(parser)</code>","text":"<p>               Bases: <code>BlockProcessor</code></p> <p>Blockquote processor.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def __init__(self, parser):\n    self.parser = parser\n    self.tab_length = parser.markdown.tab_length\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.BlockQuoteProcessor-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.BlockQuoteProcessor.parser","title":"<code>parser = parser</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.BlockQuoteProcessor.tab_length","title":"<code>tab_length = parser.markdown.tab_length</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.BlockQuoteProcessor.RE","title":"<code>RE = re.compile('(^|\\\\n)[ ]{0,3}&gt;[ ]?(.*)')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.BlockQuoteProcessor-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.BlockQuoteProcessor.lastChild","title":"<code>lastChild(parent)</code>","text":"<p>Return the last child of an etree element.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def lastChild(self, parent):\n    \"\"\"Return the last child of an etree element.\"\"\"\n    if len(parent):\n        return parent[-1]\n    else:\n        return None\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.BlockQuoteProcessor.detab","title":"<code>detab(text)</code>","text":"<p>Remove a tab from the front of each line of the given text.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def detab(self, text):\n    \"\"\"Remove a tab from the front of each line of the given text.\"\"\"\n    newtext = []\n    lines = text.split('\\n')\n    for line in lines:\n        if line.startswith(' '*self.tab_length):\n            newtext.append(line[self.tab_length:])\n        elif not line.strip():\n            newtext.append('')\n        else:\n            break\n    return '\\n'.join(newtext), '\\n'.join(lines[len(newtext):])\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.BlockQuoteProcessor.looseDetab","title":"<code>looseDetab(text, level=1)</code>","text":"<p>Remove a tab from front of lines but allowing dedented lines.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def looseDetab(self, text, level=1):\n    \"\"\"Remove a tab from front of lines but allowing dedented lines.\"\"\"\n    lines = text.split('\\n')\n    for i in range(len(lines)):\n        if lines[i].startswith(' '*self.tab_length*level):\n            lines[i] = lines[i][self.tab_length*level:]\n    return '\\n'.join(lines)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.BlockQuoteProcessor.test","title":"<code>test(parent, block)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def test(self, parent, block):\n    return bool(self.RE.search(block))\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.BlockQuoteProcessor.run","title":"<code>run(parent, blocks)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def run(self, parent, blocks):\n    block = blocks.pop(0)\n    m = self.RE.search(block)\n    if m:\n        before = block[:m.start()]  # Lines before blockquote\n        # Pass lines before blockquote in recursively for parsing forst.\n        self.parser.parseBlocks(parent, [before])\n        # Remove ``&gt; `` from begining of each line.\n        block = '\\n'.join(\n            [self.clean(line) for line in block[m.start():].split('\\n')]\n        )\n    sibling = self.lastChild(parent)\n    if sibling is not None and sibling.tag == \"blockquote\":\n        # Previous block was a blockquote so set that as this blocks parent\n        quote = sibling\n    else:\n        # This is a new blockquote. Create a new parent element.\n        quote = util.etree.SubElement(parent, 'blockquote')\n    # Recursively parse block with blockquote as parent.\n    # change parser state so blockquotes embedded in lists use p tags\n    self.parser.state.set('blockquote')\n    self.parser.parseChunk(quote, block)\n    self.parser.state.reset()\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.BlockQuoteProcessor.clean","title":"<code>clean(line)</code>","text":"<p>Remove <code>&gt;</code> from beginning of a line.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def clean(self, line):\n    \"\"\"Remove ``&gt;`` from beginning of a line.\"\"\"\n    m = self.RE.match(line)\n    if line.strip() == \"&gt;\":\n        return \"\"\n    elif m:\n        return m.group(2)\n    else:\n        return line\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.OListProcessor","title":"<code>OListProcessor(parser)</code>","text":"<p>               Bases: <code>BlockProcessor</code></p> <p>Process ordered list blocks.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def __init__(self, parser):\n    super(OListProcessor, self).__init__(parser)\n    # Detect an item (``1. item``). ``group(1)`` contains contents of item.\n    self.RE = re.compile(r'^[ ]{0,%d}\\d+\\.[ ]+(.*)' % (self.tab_length - 1))\n    # Detect items on secondary lines. they can be of either list type.\n    self.CHILD_RE = re.compile(r'^[ ]{0,%d}((\\d+\\.)|[*+-])[ ]+(.*)' %\n                               (self.tab_length - 1))\n    # Detect indented (nested) items of either type\n    self.INDENT_RE = re.compile(r'^[ ]{%d,%d}((\\d+\\.)|[*+-])[ ]+.*' %\n                                (self.tab_length, self.tab_length * 2 - 1))\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.OListProcessor-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.OListProcessor.parser","title":"<code>parser = parser</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.OListProcessor.tab_length","title":"<code>tab_length = parser.markdown.tab_length</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.OListProcessor.TAG","title":"<code>TAG = 'ol'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.OListProcessor.STARTSWITH","title":"<code>STARTSWITH = '1'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.OListProcessor.SIBLING_TAGS","title":"<code>SIBLING_TAGS = ['ol', 'ul']</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.OListProcessor.RE","title":"<code>RE = re.compile('^[ ]{0,%d}\\\\d+\\\\.[ ]+(.*)' % self.tab_length - 1)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.OListProcessor.CHILD_RE","title":"<code>CHILD_RE = re.compile('^[ ]{0,%d}((\\\\d+\\\\.)|[*+-])[ ]+(.*)' % self.tab_length - 1)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.OListProcessor.INDENT_RE","title":"<code>INDENT_RE = re.compile('^[ ]{%d,%d}((\\\\d+\\\\.)|[*+-])[ ]+.*' % (self.tab_length, self.tab_length * 2 - 1))</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.OListProcessor-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.OListProcessor.lastChild","title":"<code>lastChild(parent)</code>","text":"<p>Return the last child of an etree element.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def lastChild(self, parent):\n    \"\"\"Return the last child of an etree element.\"\"\"\n    if len(parent):\n        return parent[-1]\n    else:\n        return None\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.OListProcessor.detab","title":"<code>detab(text)</code>","text":"<p>Remove a tab from the front of each line of the given text.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def detab(self, text):\n    \"\"\"Remove a tab from the front of each line of the given text.\"\"\"\n    newtext = []\n    lines = text.split('\\n')\n    for line in lines:\n        if line.startswith(' '*self.tab_length):\n            newtext.append(line[self.tab_length:])\n        elif not line.strip():\n            newtext.append('')\n        else:\n            break\n    return '\\n'.join(newtext), '\\n'.join(lines[len(newtext):])\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.OListProcessor.looseDetab","title":"<code>looseDetab(text, level=1)</code>","text":"<p>Remove a tab from front of lines but allowing dedented lines.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def looseDetab(self, text, level=1):\n    \"\"\"Remove a tab from front of lines but allowing dedented lines.\"\"\"\n    lines = text.split('\\n')\n    for i in range(len(lines)):\n        if lines[i].startswith(' '*self.tab_length*level):\n            lines[i] = lines[i][self.tab_length*level:]\n    return '\\n'.join(lines)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.OListProcessor.test","title":"<code>test(parent, block)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def test(self, parent, block):\n    return bool(self.RE.match(block))\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.OListProcessor.run","title":"<code>run(parent, blocks)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def run(self, parent, blocks):\n    # Check fr multiple items in one block.\n    items = self.get_items(blocks.pop(0))\n    sibling = self.lastChild(parent)\n\n    if sibling is not None and sibling.tag in self.SIBLING_TAGS:\n        # Previous block was a list item, so set that as parent\n        lst = sibling\n        # make sure previous item is in a p- if the item has text,\n        # then it isn't in a p\n        if lst[-1].text:\n            # since it's possible there are other children for this\n            # sibling, we can't just SubElement the p, we need to\n            # insert it as the first item.\n            p = util.etree.Element('p')\n            p.text = lst[-1].text\n            lst[-1].text = ''\n            lst[-1].insert(0, p)\n        # if the last item has a tail, then the tail needs to be put in a p\n        # likely only when a header is not followed by a blank line\n        lch = self.lastChild(lst[-1])\n        if lch is not None and lch.tail:\n            p = util.etree.SubElement(lst[-1], 'p')\n            p.text = lch.tail.lstrip()\n            lch.tail = ''\n\n        # parse first block differently as it gets wrapped in a p.\n        li = util.etree.SubElement(lst, 'li')\n        self.parser.state.set('looselist')\n        firstitem = items.pop(0)\n        self.parser.parseBlocks(li, [firstitem])\n        self.parser.state.reset()\n    elif parent.tag in ['ol', 'ul']:\n        # this catches the edge case of a multi-item indented list whose\n        # first item is in a blank parent-list item:\n        # * * subitem1\n        #     * subitem2\n        # see also ListIndentProcessor\n        lst = parent\n    else:\n        # This is a new list so create parent with appropriate tag.\n        lst = util.etree.SubElement(parent, self.TAG)\n        # Check if a custom start integer is set\n        if not self.parser.markdown.lazy_ol and self.STARTSWITH != '1':\n            lst.attrib['start'] = self.STARTSWITH\n\n    self.parser.state.set('list')\n    # Loop through items in block, recursively parsing each with the\n    # appropriate parent.\n    for item in items:\n        if item.startswith(' '*self.tab_length):\n            # Item is indented. Parse with last item as parent\n            self.parser.parseBlocks(lst[-1], [item])\n        else:\n            # New item. Create li and parse with it as parent\n            li = util.etree.SubElement(lst, 'li')\n            self.parser.parseBlocks(li, [item])\n    self.parser.state.reset()\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.OListProcessor.get_items","title":"<code>get_items(block)</code>","text":"<p>Break a block into list items.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def get_items(self, block):\n    \"\"\"Break a block into list items.\"\"\"\n    items = []\n    for line in block.split('\\n'):\n        m = self.CHILD_RE.match(line)\n        if m:\n            # This is a new list item\n            # Check first item for the start index\n            if not items and self.TAG == 'ol':\n                # Detect the integer value of first list item\n                INTEGER_RE = re.compile(r'(\\d+)')\n                self.STARTSWITH = INTEGER_RE.match(m.group(1)).group()\n            # Append to the list\n            items.append(m.group(3))\n        elif self.INDENT_RE.match(line):\n            # This is an indented (possibly nested) item.\n            if items[-1].startswith(' '*self.tab_length):\n                # Previous item was indented. Append to that item.\n                items[-1] = '%s\\n%s' % (items[-1], line)\n            else:\n                items.append(line)\n        else:\n            # This is another line of previous item. Append to that item.\n            items[-1] = '%s\\n%s' % (items[-1], line)\n    return items\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.UListProcessor","title":"<code>UListProcessor(parser)</code>","text":"<p>               Bases: <code>OListProcessor</code></p> <p>Process unordered list blocks.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def __init__(self, parser):\n    super(UListProcessor, self).__init__(parser)\n    # Detect an item (``1. item``). ``group(1)`` contains contents of item.\n    self.RE = re.compile(r'^[ ]{0,%d}[*+-][ ]+(.*)' % (self.tab_length - 1))\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.UListProcessor-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.UListProcessor.parser","title":"<code>parser = parser</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.UListProcessor.tab_length","title":"<code>tab_length = parser.markdown.tab_length</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.UListProcessor.STARTSWITH","title":"<code>STARTSWITH = '1'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.UListProcessor.SIBLING_TAGS","title":"<code>SIBLING_TAGS = ['ol', 'ul']</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.UListProcessor.CHILD_RE","title":"<code>CHILD_RE = re.compile('^[ ]{0,%d}((\\\\d+\\\\.)|[*+-])[ ]+(.*)' % self.tab_length - 1)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.UListProcessor.INDENT_RE","title":"<code>INDENT_RE = re.compile('^[ ]{%d,%d}((\\\\d+\\\\.)|[*+-])[ ]+.*' % (self.tab_length, self.tab_length * 2 - 1))</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.UListProcessor.TAG","title":"<code>TAG = 'ul'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.UListProcessor.RE","title":"<code>RE = re.compile('^[ ]{0,%d}[*+-][ ]+(.*)' % self.tab_length - 1)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.UListProcessor-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.UListProcessor.lastChild","title":"<code>lastChild(parent)</code>","text":"<p>Return the last child of an etree element.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def lastChild(self, parent):\n    \"\"\"Return the last child of an etree element.\"\"\"\n    if len(parent):\n        return parent[-1]\n    else:\n        return None\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.UListProcessor.detab","title":"<code>detab(text)</code>","text":"<p>Remove a tab from the front of each line of the given text.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def detab(self, text):\n    \"\"\"Remove a tab from the front of each line of the given text.\"\"\"\n    newtext = []\n    lines = text.split('\\n')\n    for line in lines:\n        if line.startswith(' '*self.tab_length):\n            newtext.append(line[self.tab_length:])\n        elif not line.strip():\n            newtext.append('')\n        else:\n            break\n    return '\\n'.join(newtext), '\\n'.join(lines[len(newtext):])\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.UListProcessor.looseDetab","title":"<code>looseDetab(text, level=1)</code>","text":"<p>Remove a tab from front of lines but allowing dedented lines.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def looseDetab(self, text, level=1):\n    \"\"\"Remove a tab from front of lines but allowing dedented lines.\"\"\"\n    lines = text.split('\\n')\n    for i in range(len(lines)):\n        if lines[i].startswith(' '*self.tab_length*level):\n            lines[i] = lines[i][self.tab_length*level:]\n    return '\\n'.join(lines)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.UListProcessor.test","title":"<code>test(parent, block)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def test(self, parent, block):\n    return bool(self.RE.match(block))\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.UListProcessor.run","title":"<code>run(parent, blocks)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def run(self, parent, blocks):\n    # Check fr multiple items in one block.\n    items = self.get_items(blocks.pop(0))\n    sibling = self.lastChild(parent)\n\n    if sibling is not None and sibling.tag in self.SIBLING_TAGS:\n        # Previous block was a list item, so set that as parent\n        lst = sibling\n        # make sure previous item is in a p- if the item has text,\n        # then it isn't in a p\n        if lst[-1].text:\n            # since it's possible there are other children for this\n            # sibling, we can't just SubElement the p, we need to\n            # insert it as the first item.\n            p = util.etree.Element('p')\n            p.text = lst[-1].text\n            lst[-1].text = ''\n            lst[-1].insert(0, p)\n        # if the last item has a tail, then the tail needs to be put in a p\n        # likely only when a header is not followed by a blank line\n        lch = self.lastChild(lst[-1])\n        if lch is not None and lch.tail:\n            p = util.etree.SubElement(lst[-1], 'p')\n            p.text = lch.tail.lstrip()\n            lch.tail = ''\n\n        # parse first block differently as it gets wrapped in a p.\n        li = util.etree.SubElement(lst, 'li')\n        self.parser.state.set('looselist')\n        firstitem = items.pop(0)\n        self.parser.parseBlocks(li, [firstitem])\n        self.parser.state.reset()\n    elif parent.tag in ['ol', 'ul']:\n        # this catches the edge case of a multi-item indented list whose\n        # first item is in a blank parent-list item:\n        # * * subitem1\n        #     * subitem2\n        # see also ListIndentProcessor\n        lst = parent\n    else:\n        # This is a new list so create parent with appropriate tag.\n        lst = util.etree.SubElement(parent, self.TAG)\n        # Check if a custom start integer is set\n        if not self.parser.markdown.lazy_ol and self.STARTSWITH != '1':\n            lst.attrib['start'] = self.STARTSWITH\n\n    self.parser.state.set('list')\n    # Loop through items in block, recursively parsing each with the\n    # appropriate parent.\n    for item in items:\n        if item.startswith(' '*self.tab_length):\n            # Item is indented. Parse with last item as parent\n            self.parser.parseBlocks(lst[-1], [item])\n        else:\n            # New item. Create li and parse with it as parent\n            li = util.etree.SubElement(lst, 'li')\n            self.parser.parseBlocks(li, [item])\n    self.parser.state.reset()\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.UListProcessor.get_items","title":"<code>get_items(block)</code>","text":"<p>Break a block into list items.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def get_items(self, block):\n    \"\"\"Break a block into list items.\"\"\"\n    items = []\n    for line in block.split('\\n'):\n        m = self.CHILD_RE.match(line)\n        if m:\n            # This is a new list item\n            # Check first item for the start index\n            if not items and self.TAG == 'ol':\n                # Detect the integer value of first list item\n                INTEGER_RE = re.compile(r'(\\d+)')\n                self.STARTSWITH = INTEGER_RE.match(m.group(1)).group()\n            # Append to the list\n            items.append(m.group(3))\n        elif self.INDENT_RE.match(line):\n            # This is an indented (possibly nested) item.\n            if items[-1].startswith(' '*self.tab_length):\n                # Previous item was indented. Append to that item.\n                items[-1] = '%s\\n%s' % (items[-1], line)\n            else:\n                items.append(line)\n        else:\n            # This is another line of previous item. Append to that item.\n            items[-1] = '%s\\n%s' % (items[-1], line)\n    return items\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.HashHeaderProcessor","title":"<code>HashHeaderProcessor(parser)</code>","text":"<p>               Bases: <code>BlockProcessor</code></p> <p>Process Hash Headers.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def __init__(self, parser):\n    self.parser = parser\n    self.tab_length = parser.markdown.tab_length\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.HashHeaderProcessor-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.HashHeaderProcessor.parser","title":"<code>parser = parser</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.HashHeaderProcessor.tab_length","title":"<code>tab_length = parser.markdown.tab_length</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.HashHeaderProcessor.RE","title":"<code>RE = re.compile('(^|\\\\n)(?P&lt;level&gt;#{1,6})(?P&lt;header&gt;.*?)#*(\\\\n|$)')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.HashHeaderProcessor-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.HashHeaderProcessor.lastChild","title":"<code>lastChild(parent)</code>","text":"<p>Return the last child of an etree element.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def lastChild(self, parent):\n    \"\"\"Return the last child of an etree element.\"\"\"\n    if len(parent):\n        return parent[-1]\n    else:\n        return None\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.HashHeaderProcessor.detab","title":"<code>detab(text)</code>","text":"<p>Remove a tab from the front of each line of the given text.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def detab(self, text):\n    \"\"\"Remove a tab from the front of each line of the given text.\"\"\"\n    newtext = []\n    lines = text.split('\\n')\n    for line in lines:\n        if line.startswith(' '*self.tab_length):\n            newtext.append(line[self.tab_length:])\n        elif not line.strip():\n            newtext.append('')\n        else:\n            break\n    return '\\n'.join(newtext), '\\n'.join(lines[len(newtext):])\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.HashHeaderProcessor.looseDetab","title":"<code>looseDetab(text, level=1)</code>","text":"<p>Remove a tab from front of lines but allowing dedented lines.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def looseDetab(self, text, level=1):\n    \"\"\"Remove a tab from front of lines but allowing dedented lines.\"\"\"\n    lines = text.split('\\n')\n    for i in range(len(lines)):\n        if lines[i].startswith(' '*self.tab_length*level):\n            lines[i] = lines[i][self.tab_length*level:]\n    return '\\n'.join(lines)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.HashHeaderProcessor.test","title":"<code>test(parent, block)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def test(self, parent, block):\n    return bool(self.RE.search(block))\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.HashHeaderProcessor.run","title":"<code>run(parent, blocks)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def run(self, parent, blocks):\n    block = blocks.pop(0)\n    m = self.RE.search(block)\n    if m:\n        before = block[:m.start()]  # All lines before header\n        after = block[m.end():]     # All lines after header\n        if before:\n            # As the header was not the first line of the block and the\n            # lines before the header must be parsed first,\n            # recursively parse this lines as a block.\n            self.parser.parseBlocks(parent, [before])\n        # Create header using named groups from RE\n        h = util.etree.SubElement(parent, 'h%d' % len(m.group('level')))\n        h.text = m.group('header').strip()\n        if after:\n            # Insert remaining lines as first block for future parsing.\n            blocks.insert(0, after)\n    else:  # pragma: no cover\n        # This should never happen, but just in case...\n        logger.warn(\"We've got a problem header: %r\" % block)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.SetextHeaderProcessor","title":"<code>SetextHeaderProcessor(parser)</code>","text":"<p>               Bases: <code>BlockProcessor</code></p> <p>Process Setext-style Headers.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def __init__(self, parser):\n    self.parser = parser\n    self.tab_length = parser.markdown.tab_length\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.SetextHeaderProcessor-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.SetextHeaderProcessor.parser","title":"<code>parser = parser</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.SetextHeaderProcessor.tab_length","title":"<code>tab_length = parser.markdown.tab_length</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.SetextHeaderProcessor.RE","title":"<code>RE = re.compile('^.*?\\\\n[=-]+[ ]*(\\\\n|$)', re.MULTILINE)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.SetextHeaderProcessor-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.SetextHeaderProcessor.lastChild","title":"<code>lastChild(parent)</code>","text":"<p>Return the last child of an etree element.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def lastChild(self, parent):\n    \"\"\"Return the last child of an etree element.\"\"\"\n    if len(parent):\n        return parent[-1]\n    else:\n        return None\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.SetextHeaderProcessor.detab","title":"<code>detab(text)</code>","text":"<p>Remove a tab from the front of each line of the given text.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def detab(self, text):\n    \"\"\"Remove a tab from the front of each line of the given text.\"\"\"\n    newtext = []\n    lines = text.split('\\n')\n    for line in lines:\n        if line.startswith(' '*self.tab_length):\n            newtext.append(line[self.tab_length:])\n        elif not line.strip():\n            newtext.append('')\n        else:\n            break\n    return '\\n'.join(newtext), '\\n'.join(lines[len(newtext):])\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.SetextHeaderProcessor.looseDetab","title":"<code>looseDetab(text, level=1)</code>","text":"<p>Remove a tab from front of lines but allowing dedented lines.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def looseDetab(self, text, level=1):\n    \"\"\"Remove a tab from front of lines but allowing dedented lines.\"\"\"\n    lines = text.split('\\n')\n    for i in range(len(lines)):\n        if lines[i].startswith(' '*self.tab_length*level):\n            lines[i] = lines[i][self.tab_length*level:]\n    return '\\n'.join(lines)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.SetextHeaderProcessor.test","title":"<code>test(parent, block)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def test(self, parent, block):\n    return bool(self.RE.match(block))\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.SetextHeaderProcessor.run","title":"<code>run(parent, blocks)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def run(self, parent, blocks):\n    lines = blocks.pop(0).split('\\n')\n    # Determine level. ``=`` is 1 and ``-`` is 2.\n    if lines[1].startswith('='):\n        level = 1\n    else:\n        level = 2\n    h = util.etree.SubElement(parent, 'h%d' % level)\n    h.text = lines[0].strip()\n    if len(lines) &gt; 2:\n        # Block contains additional lines. Add to  master blocks for later.\n        blocks.insert(0, '\\n'.join(lines[2:]))\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.HRProcessor","title":"<code>HRProcessor(parser)</code>","text":"<p>               Bases: <code>BlockProcessor</code></p> <p>Process Horizontal Rules.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def __init__(self, parser):\n    self.parser = parser\n    self.tab_length = parser.markdown.tab_length\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.HRProcessor-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.HRProcessor.parser","title":"<code>parser = parser</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.HRProcessor.tab_length","title":"<code>tab_length = parser.markdown.tab_length</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.HRProcessor.RE","title":"<code>RE = '^[ ]{0,3}((-+[ ]{0,2}){3,}|(_+[ ]{0,2}){3,}|(\\\\*+[ ]{0,2}){3,})[ ]*'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.HRProcessor.SEARCH_RE","title":"<code>SEARCH_RE = re.compile(RE, re.MULTILINE)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.HRProcessor-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.HRProcessor.lastChild","title":"<code>lastChild(parent)</code>","text":"<p>Return the last child of an etree element.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def lastChild(self, parent):\n    \"\"\"Return the last child of an etree element.\"\"\"\n    if len(parent):\n        return parent[-1]\n    else:\n        return None\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.HRProcessor.detab","title":"<code>detab(text)</code>","text":"<p>Remove a tab from the front of each line of the given text.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def detab(self, text):\n    \"\"\"Remove a tab from the front of each line of the given text.\"\"\"\n    newtext = []\n    lines = text.split('\\n')\n    for line in lines:\n        if line.startswith(' '*self.tab_length):\n            newtext.append(line[self.tab_length:])\n        elif not line.strip():\n            newtext.append('')\n        else:\n            break\n    return '\\n'.join(newtext), '\\n'.join(lines[len(newtext):])\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.HRProcessor.looseDetab","title":"<code>looseDetab(text, level=1)</code>","text":"<p>Remove a tab from front of lines but allowing dedented lines.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def looseDetab(self, text, level=1):\n    \"\"\"Remove a tab from front of lines but allowing dedented lines.\"\"\"\n    lines = text.split('\\n')\n    for i in range(len(lines)):\n        if lines[i].startswith(' '*self.tab_length*level):\n            lines[i] = lines[i][self.tab_length*level:]\n    return '\\n'.join(lines)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.HRProcessor.test","title":"<code>test(parent, block)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def test(self, parent, block):\n    m = self.SEARCH_RE.search(block)\n    # No atomic grouping in python so we simulate it here for performance.\n    # The regex only matches what would be in the atomic group - the HR.\n    # Then check if we are at end of block or if next char is a newline.\n    if m and (m.end() == len(block) or block[m.end()] == '\\n'):\n        # Save match object on class instance so we can use it later.\n        self.match = m\n        return True\n    return False\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.HRProcessor.run","title":"<code>run(parent, blocks)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def run(self, parent, blocks):\n    block = blocks.pop(0)\n    match = self.match\n    # Check for lines in block before hr.\n    prelines = block[:match.start()].rstrip('\\n')\n    if prelines:\n        # Recursively parse lines before hr so they get parsed first.\n        self.parser.parseBlocks(parent, [prelines])\n    # create hr\n    util.etree.SubElement(parent, 'hr')\n    # check for lines in block after hr.\n    postlines = block[match.end():].lstrip('\\n')\n    if postlines:\n        # Add lines after hr to master blocks for later parsing.\n        blocks.insert(0, postlines)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.EmptyBlockProcessor","title":"<code>EmptyBlockProcessor(parser)</code>","text":"<p>               Bases: <code>BlockProcessor</code></p> <p>Process blocks that are empty or start with an empty line.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def __init__(self, parser):\n    self.parser = parser\n    self.tab_length = parser.markdown.tab_length\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.EmptyBlockProcessor-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.EmptyBlockProcessor.parser","title":"<code>parser = parser</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.EmptyBlockProcessor.tab_length","title":"<code>tab_length = parser.markdown.tab_length</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.EmptyBlockProcessor-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.EmptyBlockProcessor.lastChild","title":"<code>lastChild(parent)</code>","text":"<p>Return the last child of an etree element.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def lastChild(self, parent):\n    \"\"\"Return the last child of an etree element.\"\"\"\n    if len(parent):\n        return parent[-1]\n    else:\n        return None\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.EmptyBlockProcessor.detab","title":"<code>detab(text)</code>","text":"<p>Remove a tab from the front of each line of the given text.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def detab(self, text):\n    \"\"\"Remove a tab from the front of each line of the given text.\"\"\"\n    newtext = []\n    lines = text.split('\\n')\n    for line in lines:\n        if line.startswith(' '*self.tab_length):\n            newtext.append(line[self.tab_length:])\n        elif not line.strip():\n            newtext.append('')\n        else:\n            break\n    return '\\n'.join(newtext), '\\n'.join(lines[len(newtext):])\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.EmptyBlockProcessor.looseDetab","title":"<code>looseDetab(text, level=1)</code>","text":"<p>Remove a tab from front of lines but allowing dedented lines.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def looseDetab(self, text, level=1):\n    \"\"\"Remove a tab from front of lines but allowing dedented lines.\"\"\"\n    lines = text.split('\\n')\n    for i in range(len(lines)):\n        if lines[i].startswith(' '*self.tab_length*level):\n            lines[i] = lines[i][self.tab_length*level:]\n    return '\\n'.join(lines)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.EmptyBlockProcessor.test","title":"<code>test(parent, block)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def test(self, parent, block):\n    return not block or block.startswith('\\n')\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.EmptyBlockProcessor.run","title":"<code>run(parent, blocks)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def run(self, parent, blocks):\n    block = blocks.pop(0)\n    filler = '\\n\\n'\n    if block:\n        # Starts with empty line\n        # Only replace a single line.\n        filler = '\\n'\n        # Save the rest for later.\n        theRest = block[1:]\n        if theRest:\n            # Add remaining lines to master blocks for later.\n            blocks.insert(0, theRest)\n    sibling = self.lastChild(parent)\n    if (sibling is not None and sibling.tag == 'pre' and\n       len(sibling) and sibling[0].tag == 'code'):\n        # Last block is a codeblock. Append to preserve whitespace.\n        sibling[0].text = util.AtomicString(\n            '%s%s' % (sibling[0].text, filler)\n        )\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.ParagraphProcessor","title":"<code>ParagraphProcessor(parser)</code>","text":"<p>               Bases: <code>BlockProcessor</code></p> <p>Process Paragraph blocks.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def __init__(self, parser):\n    self.parser = parser\n    self.tab_length = parser.markdown.tab_length\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.ParagraphProcessor-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.ParagraphProcessor.parser","title":"<code>parser = parser</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.ParagraphProcessor.tab_length","title":"<code>tab_length = parser.markdown.tab_length</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.ParagraphProcessor-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.ParagraphProcessor.lastChild","title":"<code>lastChild(parent)</code>","text":"<p>Return the last child of an etree element.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def lastChild(self, parent):\n    \"\"\"Return the last child of an etree element.\"\"\"\n    if len(parent):\n        return parent[-1]\n    else:\n        return None\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.ParagraphProcessor.detab","title":"<code>detab(text)</code>","text":"<p>Remove a tab from the front of each line of the given text.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def detab(self, text):\n    \"\"\"Remove a tab from the front of each line of the given text.\"\"\"\n    newtext = []\n    lines = text.split('\\n')\n    for line in lines:\n        if line.startswith(' '*self.tab_length):\n            newtext.append(line[self.tab_length:])\n        elif not line.strip():\n            newtext.append('')\n        else:\n            break\n    return '\\n'.join(newtext), '\\n'.join(lines[len(newtext):])\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.ParagraphProcessor.looseDetab","title":"<code>looseDetab(text, level=1)</code>","text":"<p>Remove a tab from front of lines but allowing dedented lines.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def looseDetab(self, text, level=1):\n    \"\"\"Remove a tab from front of lines but allowing dedented lines.\"\"\"\n    lines = text.split('\\n')\n    for i in range(len(lines)):\n        if lines[i].startswith(' '*self.tab_length*level):\n            lines[i] = lines[i][self.tab_length*level:]\n    return '\\n'.join(lines)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.ParagraphProcessor.test","title":"<code>test(parent, block)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def test(self, parent, block):\n    return True\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.ParagraphProcessor.run","title":"<code>run(parent, blocks)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def run(self, parent, blocks):\n    block = blocks.pop(0)\n    if block.strip():\n        # Not a blank block. Add to parent, otherwise throw it away.\n        if self.parser.state.isstate('list'):\n            # The parent is a tight-list.\n            #\n            # Check for any children. This will likely only happen in a\n            # tight-list when a header isn't followed by a blank line.\n            # For example:\n            #\n            #     * # Header\n            #     Line 2 of list item - not part of header.\n            sibling = self.lastChild(parent)\n            if sibling is not None:\n                # Insetrt after sibling.\n                if sibling.tail:\n                    sibling.tail = '%s\\n%s' % (sibling.tail, block)\n                else:\n                    sibling.tail = '\\n%s' % block\n            else:\n                # Append to parent.text\n                if parent.text:\n                    parent.text = '%s\\n%s' % (parent.text, block)\n                else:\n                    parent.text = block.lstrip()\n        else:\n            # Create a regular paragraph\n            p = util.etree.SubElement(parent, 'p')\n            p.text = block.lstrip()\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/blockprocessors/#pyrevit.coreutils.markdown.blockprocessors.build_block_parser","title":"<code>build_block_parser(md_instance, **kwargs)</code>","text":"<p>Build the default block parser used by Markdown.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def build_block_parser(md_instance, **kwargs):\n    \"\"\"Build the default block parser used by Markdown.\"\"\"\n    parser = BlockParser(md_instance)\n    parser.blockprocessors['empty'] = EmptyBlockProcessor(parser)\n    parser.blockprocessors['indent'] = ListIndentProcessor(parser)\n    parser.blockprocessors['code'] = CodeBlockProcessor(parser)\n    parser.blockprocessors['hashheader'] = HashHeaderProcessor(parser)\n    parser.blockprocessors['setextheader'] = SetextHeaderProcessor(parser)\n    parser.blockprocessors['hr'] = HRProcessor(parser)\n    parser.blockprocessors['olist'] = OListProcessor(parser)\n    parser.blockprocessors['ulist'] = UListProcessor(parser)\n    parser.blockprocessors['quote'] = BlockQuoteProcessor(parser)\n    parser.blockprocessors['paragraph'] = ParagraphProcessor(parser)\n    return parser\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/","title":"inlinepatterns","text":"<p>INLINE PATTERNS.</p> <p>Inline patterns such as emphasis are handled by means of auxiliary objects, one per pattern.  Pattern objects must be instances of classes that extend markdown.Pattern.  Each pattern object uses a single regular expression and needs support the following methods:</p> <pre><code>pattern.getCompiledRegExp() # returns a regular expression\n\npattern.handleMatch(m) # takes a match object and returns\n                       # an ElementTree element or just plain text\n</code></pre> <p>All of python markdown's built-in patterns subclass from Pattern, but you can add additional patterns that don't.</p> <p>Also note that all the regular expressions used by inline must capture the whole block.  For this reason, they all start with '^(.)' and end with '(.)!'.  In case with built-in expression Pattern takes care of adding the \"^(.)\" and \"(.)!\".</p> <p>Finally, the order in which regular expressions are applied is very important - e.g. if we first replace http://.../ links with  tags and then try to replace inline html, we would end up with a mess. So, we apply the expressions in the following order: <ul> <li> <p>escape and backticks have to go before everything else, so   that we can preempt any markdown patterns by escaping them.</p> </li> <li> <p>then we handle auto-links (must be done before inline html)</p> </li> <li> <p>then we handle inline HTML.  At this point we will simply   replace all inline HTML strings with a placeholder and add   the actual HTML to a hash.</p> </li> <li> <p>then inline images (must be done before links)</p> </li> <li> <p>then bracketed links, first regular then reference-style</p> </li> <li> <p>finally we apply strong and emphasis</p> </li> </ul>"},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.NOBRACKET","title":"<code>NOBRACKET = '[^\\\\]\\\\[]*'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.BRK","title":"<code>BRK = '\\\\[(' + NOBRACKET + '(\\\\[' * 6 + NOBRACKET + '\\\\])*' * 6 + NOBRACKET + ')\\\\]'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.NOIMG","title":"<code>NOIMG = '(?&lt;!\\\\!)'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.BACKTICK_RE","title":"<code>BACKTICK_RE = '(?:(?&lt;!\\\\\\\\)((?:\\\\\\\\{2})+)(?=`+)|(?&lt;!\\\\\\\\)(`+)(.+?)(?&lt;!`)\\\\3(?!`))'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.ESCAPE_RE","title":"<code>ESCAPE_RE = '\\\\\\\\(.)'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.EMPHASIS_RE","title":"<code>EMPHASIS_RE = '(\\\\*)([^\\\\*]+)\\\\2'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.STRONG_RE","title":"<code>STRONG_RE = '(\\\\*{2}|_{2})(.+?)\\\\2'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.EM_STRONG_RE","title":"<code>EM_STRONG_RE = '(\\\\*|_)\\\\2{2}(.+?)\\\\2(.*?)\\\\2{2}'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.STRONG_EM_RE","title":"<code>STRONG_EM_RE = '(\\\\*|_)\\\\2{2}(.+?)\\\\2{2}(.*?)\\\\2'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.SMART_EMPHASIS_RE","title":"<code>SMART_EMPHASIS_RE = '(?&lt;!\\\\w)(_)(?!_)(.+?)(?&lt;!_)\\\\2(?!\\\\w)'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.EMPHASIS_2_RE","title":"<code>EMPHASIS_2_RE = '(_)(.+?)\\\\2'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.LINK_RE","title":"<code>LINK_RE = NOIMG + BRK + '\\\\(\\\\s*(&lt;.*?&gt;|((?:(?:\\\\(.*?\\\\))|[^\\\\(\\\\)]))*?)\\\\s*(([\\'\"])(.*?)\\\\12\\\\s*)?\\\\)'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.IMAGE_LINK_RE","title":"<code>IMAGE_LINK_RE = '\\\\!' + BRK + '\\\\s*\\\\(\\\\s*(&lt;.*?&gt;|([^\"\\\\)\\\\s]+\\\\s*\"[^\"]*\"|[^\\\\)\\\\s]*))\\\\s*\\\\)'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.REFERENCE_RE","title":"<code>REFERENCE_RE = NOIMG + BRK + '\\\\s?\\\\[([^\\\\]]*)\\\\]'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.SHORT_REF_RE","title":"<code>SHORT_REF_RE = NOIMG + '\\\\[([^\\\\]]+)\\\\]'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.IMAGE_REFERENCE_RE","title":"<code>IMAGE_REFERENCE_RE = '\\\\!' + BRK + '\\\\s?\\\\[([^\\\\]]*)\\\\]'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.NOT_STRONG_RE","title":"<code>NOT_STRONG_RE = '((^| )(\\\\*|_)( |$))'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.AUTOLINK_RE","title":"<code>AUTOLINK_RE = '&lt;((?:[Ff]|[Hh][Tt])[Tt][Pp][Ss]?://[^&gt;]*)&gt;'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.AUTOMAIL_RE","title":"<code>AUTOMAIL_RE = '&lt;([^&gt; \\\\!]*@[^&gt; ]*)&gt;'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.HTML_RE","title":"<code>HTML_RE = '(\\\\&lt;([a-zA-Z/][^\\\\&gt;]*?|\\\\!--.*?--)\\\\&gt;)'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.ENTITY_RE","title":"<code>ENTITY_RE = '(&amp;[\\\\#a-zA-Z0-9]*;)'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.LINE_BREAK_RE","title":"<code>LINE_BREAK_RE = '  \\\\n'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.ATTR_RE","title":"<code>ATTR_RE = re.compile('\\\\{@([^\\\\}]*)=([^\\\\}]*)}')</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns-classes","title":"Classes","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.Pattern","title":"<code>Pattern(pattern, markdown_instance=None)</code>","text":"<p>               Bases: <code>object</code></p> <p>Base class that inline patterns subclass.</p> <p>Create an instant of an inline pattern.</p> <p>Parameters:</p> Name Type Description Default <code>pattern</code> <code>str</code> <p>A regular expression that matches a pattern</p> required <code>markdown_instance</code> <code>Markdown</code> <p>Instance of Markdown</p> <code>None</code> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def __init__(self, pattern, markdown_instance=None):\n    \"\"\"Create an instant of an inline pattern.\n\n    Args:\n        pattern (str): A regular expression that matches a pattern\n        markdown_instance (markdown.Markdown): Instance of Markdown\n    \"\"\"\n    self.pattern = pattern\n    self.compiled_re = re.compile(\"^(.*?)%s(.*)$\" % pattern,\n                                  re.DOTALL | re.UNICODE)\n\n    # Api for Markdown to pass safe_mode into instance\n    self.safe_mode = False\n    if markdown_instance:\n        self.markdown = markdown_instance\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.Pattern-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.Pattern.pattern","title":"<code>pattern = pattern</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.Pattern.compiled_re","title":"<code>compiled_re = re.compile('^(.*?)%s(.*)$' % pattern, re.DOTALL | re.UNICODE)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.Pattern.safe_mode","title":"<code>safe_mode = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.Pattern.markdown","title":"<code>markdown = markdown_instance</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.Pattern-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.Pattern.getCompiledRegExp","title":"<code>getCompiledRegExp()</code>","text":"<p>Return a compiled regular expression.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def getCompiledRegExp(self):\n    \"\"\"Return a compiled regular expression.\"\"\"\n    return self.compiled_re\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.Pattern.handleMatch","title":"<code>handleMatch(m)</code>","text":"<p>Return a ElementTree element from the given match.</p> <p>Subclasses should override this method.</p> <p>Parameters:</p> Name Type Description Default <code>m</code> <code>match</code> <p>A re match object containing a match of the pattern.</p> required Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def handleMatch(self, m):\n    \"\"\"Return a ElementTree element from the given match.\n\n    Subclasses should override this method.\n\n    Args:\n        m (re.match): A re match object containing a match of the pattern.\n    \"\"\"\n    pass  # pragma: no cover\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.Pattern.type","title":"<code>type()</code>","text":"<p>Return class name, to define pattern type.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def type(self):\n    \"\"\"Return class name, to define pattern type.\"\"\"\n    return self.__class__.__name__\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.Pattern.unescape","title":"<code>unescape(text)</code>","text":"<p>Return unescaped text given text with an inline placeholder.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def unescape(self, text):\n    \"\"\"Return unescaped text given text with an inline placeholder.\"\"\"\n    try:\n        stash = self.markdown.treeprocessors['inline'].stashed_nodes\n    except KeyError:  # pragma: no cover\n        return text\n\n    def itertext(el):  # pragma: no cover\n        \"\"\"Reimplement Element.itertext for older python versions.\"\"\"\n        tag = el.tag\n        if not isinstance(tag, util.string_type) and tag is not None:\n            return\n        if el.text:\n            yield el.text\n        for e in el:\n            for s in itertext(e):\n                yield s\n            if e.tail:\n                yield e.tail\n\n    def get_stash(m):\n        id = m.group(1)\n        if id in stash:\n            value = stash.get(id)\n            if isinstance(value, util.string_type):\n                return value\n            else:\n                # An etree Element - return text content only\n                return ''.join(itertext(value))\n    return util.INLINE_PLACEHOLDER_RE.sub(get_stash, text)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.SimpleTextPattern","title":"<code>SimpleTextPattern(pattern, markdown_instance=None)</code>","text":"<p>               Bases: <code>Pattern</code></p> <p>Return a simple text of group(2) of a Pattern.</p> <p>Create an instant of an inline pattern.</p> <p>Parameters:</p> Name Type Description Default <code>pattern</code> <code>str</code> <p>A regular expression that matches a pattern</p> required <code>markdown_instance</code> <code>Markdown</code> <p>Instance of Markdown</p> <code>None</code> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def __init__(self, pattern, markdown_instance=None):\n    \"\"\"Create an instant of an inline pattern.\n\n    Args:\n        pattern (str): A regular expression that matches a pattern\n        markdown_instance (markdown.Markdown): Instance of Markdown\n    \"\"\"\n    self.pattern = pattern\n    self.compiled_re = re.compile(\"^(.*?)%s(.*)$\" % pattern,\n                                  re.DOTALL | re.UNICODE)\n\n    # Api for Markdown to pass safe_mode into instance\n    self.safe_mode = False\n    if markdown_instance:\n        self.markdown = markdown_instance\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.SimpleTextPattern-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.SimpleTextPattern.pattern","title":"<code>pattern = pattern</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.SimpleTextPattern.compiled_re","title":"<code>compiled_re = re.compile('^(.*?)%s(.*)$' % pattern, re.DOTALL | re.UNICODE)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.SimpleTextPattern.safe_mode","title":"<code>safe_mode = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.SimpleTextPattern.markdown","title":"<code>markdown = markdown_instance</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.SimpleTextPattern-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.SimpleTextPattern.getCompiledRegExp","title":"<code>getCompiledRegExp()</code>","text":"<p>Return a compiled regular expression.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def getCompiledRegExp(self):\n    \"\"\"Return a compiled regular expression.\"\"\"\n    return self.compiled_re\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.SimpleTextPattern.type","title":"<code>type()</code>","text":"<p>Return class name, to define pattern type.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def type(self):\n    \"\"\"Return class name, to define pattern type.\"\"\"\n    return self.__class__.__name__\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.SimpleTextPattern.unescape","title":"<code>unescape(text)</code>","text":"<p>Return unescaped text given text with an inline placeholder.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def unescape(self, text):\n    \"\"\"Return unescaped text given text with an inline placeholder.\"\"\"\n    try:\n        stash = self.markdown.treeprocessors['inline'].stashed_nodes\n    except KeyError:  # pragma: no cover\n        return text\n\n    def itertext(el):  # pragma: no cover\n        \"\"\"Reimplement Element.itertext for older python versions.\"\"\"\n        tag = el.tag\n        if not isinstance(tag, util.string_type) and tag is not None:\n            return\n        if el.text:\n            yield el.text\n        for e in el:\n            for s in itertext(e):\n                yield s\n            if e.tail:\n                yield e.tail\n\n    def get_stash(m):\n        id = m.group(1)\n        if id in stash:\n            value = stash.get(id)\n            if isinstance(value, util.string_type):\n                return value\n            else:\n                # An etree Element - return text content only\n                return ''.join(itertext(value))\n    return util.INLINE_PLACEHOLDER_RE.sub(get_stash, text)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.SimpleTextPattern.handleMatch","title":"<code>handleMatch(m)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def handleMatch(self, m):\n    return m.group(2)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.EscapePattern","title":"<code>EscapePattern(pattern, markdown_instance=None)</code>","text":"<p>               Bases: <code>Pattern</code></p> <p>Return an escaped character.</p> <p>Create an instant of an inline pattern.</p> <p>Parameters:</p> Name Type Description Default <code>pattern</code> <code>str</code> <p>A regular expression that matches a pattern</p> required <code>markdown_instance</code> <code>Markdown</code> <p>Instance of Markdown</p> <code>None</code> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def __init__(self, pattern, markdown_instance=None):\n    \"\"\"Create an instant of an inline pattern.\n\n    Args:\n        pattern (str): A regular expression that matches a pattern\n        markdown_instance (markdown.Markdown): Instance of Markdown\n    \"\"\"\n    self.pattern = pattern\n    self.compiled_re = re.compile(\"^(.*?)%s(.*)$\" % pattern,\n                                  re.DOTALL | re.UNICODE)\n\n    # Api for Markdown to pass safe_mode into instance\n    self.safe_mode = False\n    if markdown_instance:\n        self.markdown = markdown_instance\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.EscapePattern-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.EscapePattern.pattern","title":"<code>pattern = pattern</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.EscapePattern.compiled_re","title":"<code>compiled_re = re.compile('^(.*?)%s(.*)$' % pattern, re.DOTALL | re.UNICODE)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.EscapePattern.safe_mode","title":"<code>safe_mode = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.EscapePattern.markdown","title":"<code>markdown = markdown_instance</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.EscapePattern-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.EscapePattern.getCompiledRegExp","title":"<code>getCompiledRegExp()</code>","text":"<p>Return a compiled regular expression.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def getCompiledRegExp(self):\n    \"\"\"Return a compiled regular expression.\"\"\"\n    return self.compiled_re\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.EscapePattern.type","title":"<code>type()</code>","text":"<p>Return class name, to define pattern type.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def type(self):\n    \"\"\"Return class name, to define pattern type.\"\"\"\n    return self.__class__.__name__\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.EscapePattern.unescape","title":"<code>unescape(text)</code>","text":"<p>Return unescaped text given text with an inline placeholder.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def unescape(self, text):\n    \"\"\"Return unescaped text given text with an inline placeholder.\"\"\"\n    try:\n        stash = self.markdown.treeprocessors['inline'].stashed_nodes\n    except KeyError:  # pragma: no cover\n        return text\n\n    def itertext(el):  # pragma: no cover\n        \"\"\"Reimplement Element.itertext for older python versions.\"\"\"\n        tag = el.tag\n        if not isinstance(tag, util.string_type) and tag is not None:\n            return\n        if el.text:\n            yield el.text\n        for e in el:\n            for s in itertext(e):\n                yield s\n            if e.tail:\n                yield e.tail\n\n    def get_stash(m):\n        id = m.group(1)\n        if id in stash:\n            value = stash.get(id)\n            if isinstance(value, util.string_type):\n                return value\n            else:\n                # An etree Element - return text content only\n                return ''.join(itertext(value))\n    return util.INLINE_PLACEHOLDER_RE.sub(get_stash, text)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.EscapePattern.handleMatch","title":"<code>handleMatch(m)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def handleMatch(self, m):\n    char = m.group(2)\n    if char in self.markdown.ESCAPED_CHARS:\n        return '%s%s%s' % (util.STX, ord(char), util.ETX)\n    else:\n        return None\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.SimpleTagPattern","title":"<code>SimpleTagPattern(pattern, tag)</code>","text":"<p>               Bases: <code>Pattern</code></p> <p>Return a <code>tag</code> element with a text attribute of group(3) of a Pattern.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def __init__(self, pattern, tag):\n    Pattern.__init__(self, pattern)\n    self.tag = tag\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.SimpleTagPattern-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.SimpleTagPattern.pattern","title":"<code>pattern = pattern</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.SimpleTagPattern.compiled_re","title":"<code>compiled_re = re.compile('^(.*?)%s(.*)$' % pattern, re.DOTALL | re.UNICODE)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.SimpleTagPattern.safe_mode","title":"<code>safe_mode = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.SimpleTagPattern.markdown","title":"<code>markdown = markdown_instance</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.SimpleTagPattern.tag","title":"<code>tag = tag</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.SimpleTagPattern-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.SimpleTagPattern.getCompiledRegExp","title":"<code>getCompiledRegExp()</code>","text":"<p>Return a compiled regular expression.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def getCompiledRegExp(self):\n    \"\"\"Return a compiled regular expression.\"\"\"\n    return self.compiled_re\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.SimpleTagPattern.type","title":"<code>type()</code>","text":"<p>Return class name, to define pattern type.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def type(self):\n    \"\"\"Return class name, to define pattern type.\"\"\"\n    return self.__class__.__name__\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.SimpleTagPattern.unescape","title":"<code>unescape(text)</code>","text":"<p>Return unescaped text given text with an inline placeholder.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def unescape(self, text):\n    \"\"\"Return unescaped text given text with an inline placeholder.\"\"\"\n    try:\n        stash = self.markdown.treeprocessors['inline'].stashed_nodes\n    except KeyError:  # pragma: no cover\n        return text\n\n    def itertext(el):  # pragma: no cover\n        \"\"\"Reimplement Element.itertext for older python versions.\"\"\"\n        tag = el.tag\n        if not isinstance(tag, util.string_type) and tag is not None:\n            return\n        if el.text:\n            yield el.text\n        for e in el:\n            for s in itertext(e):\n                yield s\n            if e.tail:\n                yield e.tail\n\n    def get_stash(m):\n        id = m.group(1)\n        if id in stash:\n            value = stash.get(id)\n            if isinstance(value, util.string_type):\n                return value\n            else:\n                # An etree Element - return text content only\n                return ''.join(itertext(value))\n    return util.INLINE_PLACEHOLDER_RE.sub(get_stash, text)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.SimpleTagPattern.handleMatch","title":"<code>handleMatch(m)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def handleMatch(self, m):\n    el = util.etree.Element(self.tag)\n    el.text = m.group(3)\n    return el\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.SubstituteTagPattern","title":"<code>SubstituteTagPattern(pattern, tag)</code>","text":"<p>               Bases: <code>SimpleTagPattern</code></p> <p>Return an element of type <code>tag</code> with no children.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def __init__(self, pattern, tag):\n    Pattern.__init__(self, pattern)\n    self.tag = tag\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.SubstituteTagPattern-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.SubstituteTagPattern.pattern","title":"<code>pattern = pattern</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.SubstituteTagPattern.compiled_re","title":"<code>compiled_re = re.compile('^(.*?)%s(.*)$' % pattern, re.DOTALL | re.UNICODE)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.SubstituteTagPattern.safe_mode","title":"<code>safe_mode = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.SubstituteTagPattern.markdown","title":"<code>markdown = markdown_instance</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.SubstituteTagPattern.tag","title":"<code>tag = tag</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.SubstituteTagPattern-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.SubstituteTagPattern.getCompiledRegExp","title":"<code>getCompiledRegExp()</code>","text":"<p>Return a compiled regular expression.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def getCompiledRegExp(self):\n    \"\"\"Return a compiled regular expression.\"\"\"\n    return self.compiled_re\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.SubstituteTagPattern.type","title":"<code>type()</code>","text":"<p>Return class name, to define pattern type.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def type(self):\n    \"\"\"Return class name, to define pattern type.\"\"\"\n    return self.__class__.__name__\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.SubstituteTagPattern.unescape","title":"<code>unescape(text)</code>","text":"<p>Return unescaped text given text with an inline placeholder.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def unescape(self, text):\n    \"\"\"Return unescaped text given text with an inline placeholder.\"\"\"\n    try:\n        stash = self.markdown.treeprocessors['inline'].stashed_nodes\n    except KeyError:  # pragma: no cover\n        return text\n\n    def itertext(el):  # pragma: no cover\n        \"\"\"Reimplement Element.itertext for older python versions.\"\"\"\n        tag = el.tag\n        if not isinstance(tag, util.string_type) and tag is not None:\n            return\n        if el.text:\n            yield el.text\n        for e in el:\n            for s in itertext(e):\n                yield s\n            if e.tail:\n                yield e.tail\n\n    def get_stash(m):\n        id = m.group(1)\n        if id in stash:\n            value = stash.get(id)\n            if isinstance(value, util.string_type):\n                return value\n            else:\n                # An etree Element - return text content only\n                return ''.join(itertext(value))\n    return util.INLINE_PLACEHOLDER_RE.sub(get_stash, text)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.SubstituteTagPattern.handleMatch","title":"<code>handleMatch(m)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def handleMatch(self, m):\n    return util.etree.Element(self.tag)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.BacktickPattern","title":"<code>BacktickPattern(pattern)</code>","text":"<p>               Bases: <code>Pattern</code></p> <p>Return a <code>&lt;code&gt;</code> element containing the matching text.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def __init__(self, pattern):\n    Pattern.__init__(self, pattern)\n    self.ESCAPED_BSLASH = '%s%s%s' % (util.STX, ord('\\\\'), util.ETX)\n    self.tag = 'code'\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.BacktickPattern-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.BacktickPattern.pattern","title":"<code>pattern = pattern</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.BacktickPattern.compiled_re","title":"<code>compiled_re = re.compile('^(.*?)%s(.*)$' % pattern, re.DOTALL | re.UNICODE)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.BacktickPattern.safe_mode","title":"<code>safe_mode = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.BacktickPattern.markdown","title":"<code>markdown = markdown_instance</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.BacktickPattern.ESCAPED_BSLASH","title":"<code>ESCAPED_BSLASH = '%s%s%s' % (util.STX, ord('\\\\'), util.ETX)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.BacktickPattern.tag","title":"<code>tag = 'code'</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.BacktickPattern-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.BacktickPattern.getCompiledRegExp","title":"<code>getCompiledRegExp()</code>","text":"<p>Return a compiled regular expression.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def getCompiledRegExp(self):\n    \"\"\"Return a compiled regular expression.\"\"\"\n    return self.compiled_re\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.BacktickPattern.type","title":"<code>type()</code>","text":"<p>Return class name, to define pattern type.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def type(self):\n    \"\"\"Return class name, to define pattern type.\"\"\"\n    return self.__class__.__name__\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.BacktickPattern.unescape","title":"<code>unescape(text)</code>","text":"<p>Return unescaped text given text with an inline placeholder.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def unescape(self, text):\n    \"\"\"Return unescaped text given text with an inline placeholder.\"\"\"\n    try:\n        stash = self.markdown.treeprocessors['inline'].stashed_nodes\n    except KeyError:  # pragma: no cover\n        return text\n\n    def itertext(el):  # pragma: no cover\n        \"\"\"Reimplement Element.itertext for older python versions.\"\"\"\n        tag = el.tag\n        if not isinstance(tag, util.string_type) and tag is not None:\n            return\n        if el.text:\n            yield el.text\n        for e in el:\n            for s in itertext(e):\n                yield s\n            if e.tail:\n                yield e.tail\n\n    def get_stash(m):\n        id = m.group(1)\n        if id in stash:\n            value = stash.get(id)\n            if isinstance(value, util.string_type):\n                return value\n            else:\n                # An etree Element - return text content only\n                return ''.join(itertext(value))\n    return util.INLINE_PLACEHOLDER_RE.sub(get_stash, text)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.BacktickPattern.handleMatch","title":"<code>handleMatch(m)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def handleMatch(self, m):\n    if m.group(4):\n        el = util.etree.Element(self.tag)\n        el.text = util.AtomicString(m.group(4).strip())\n        return el\n    else:\n        return m.group(2).replace('\\\\\\\\', self.ESCAPED_BSLASH)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.DoubleTagPattern","title":"<code>DoubleTagPattern(pattern, tag)</code>","text":"<p>               Bases: <code>SimpleTagPattern</code></p> <p>Return a ElementTree element nested in tag2 nested in tag1.</p> <p>Useful for strong emphasis etc.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def __init__(self, pattern, tag):\n    Pattern.__init__(self, pattern)\n    self.tag = tag\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.DoubleTagPattern-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.DoubleTagPattern.pattern","title":"<code>pattern = pattern</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.DoubleTagPattern.compiled_re","title":"<code>compiled_re = re.compile('^(.*?)%s(.*)$' % pattern, re.DOTALL | re.UNICODE)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.DoubleTagPattern.safe_mode","title":"<code>safe_mode = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.DoubleTagPattern.markdown","title":"<code>markdown = markdown_instance</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.DoubleTagPattern.tag","title":"<code>tag = tag</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.DoubleTagPattern-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.DoubleTagPattern.getCompiledRegExp","title":"<code>getCompiledRegExp()</code>","text":"<p>Return a compiled regular expression.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def getCompiledRegExp(self):\n    \"\"\"Return a compiled regular expression.\"\"\"\n    return self.compiled_re\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.DoubleTagPattern.type","title":"<code>type()</code>","text":"<p>Return class name, to define pattern type.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def type(self):\n    \"\"\"Return class name, to define pattern type.\"\"\"\n    return self.__class__.__name__\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.DoubleTagPattern.unescape","title":"<code>unescape(text)</code>","text":"<p>Return unescaped text given text with an inline placeholder.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def unescape(self, text):\n    \"\"\"Return unescaped text given text with an inline placeholder.\"\"\"\n    try:\n        stash = self.markdown.treeprocessors['inline'].stashed_nodes\n    except KeyError:  # pragma: no cover\n        return text\n\n    def itertext(el):  # pragma: no cover\n        \"\"\"Reimplement Element.itertext for older python versions.\"\"\"\n        tag = el.tag\n        if not isinstance(tag, util.string_type) and tag is not None:\n            return\n        if el.text:\n            yield el.text\n        for e in el:\n            for s in itertext(e):\n                yield s\n            if e.tail:\n                yield e.tail\n\n    def get_stash(m):\n        id = m.group(1)\n        if id in stash:\n            value = stash.get(id)\n            if isinstance(value, util.string_type):\n                return value\n            else:\n                # An etree Element - return text content only\n                return ''.join(itertext(value))\n    return util.INLINE_PLACEHOLDER_RE.sub(get_stash, text)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.DoubleTagPattern.handleMatch","title":"<code>handleMatch(m)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def handleMatch(self, m):\n    tag1, tag2 = self.tag.split(\",\")\n    el1 = util.etree.Element(tag1)\n    el2 = util.etree.SubElement(el1, tag2)\n    el2.text = m.group(3)\n    if len(m.groups()) == 5:\n        el2.tail = m.group(4)\n    return el1\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.HtmlPattern","title":"<code>HtmlPattern(pattern, markdown_instance=None)</code>","text":"<p>               Bases: <code>Pattern</code></p> <p>Store raw inline html and return a placeholder.</p> <p>Create an instant of an inline pattern.</p> <p>Parameters:</p> Name Type Description Default <code>pattern</code> <code>str</code> <p>A regular expression that matches a pattern</p> required <code>markdown_instance</code> <code>Markdown</code> <p>Instance of Markdown</p> <code>None</code> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def __init__(self, pattern, markdown_instance=None):\n    \"\"\"Create an instant of an inline pattern.\n\n    Args:\n        pattern (str): A regular expression that matches a pattern\n        markdown_instance (markdown.Markdown): Instance of Markdown\n    \"\"\"\n    self.pattern = pattern\n    self.compiled_re = re.compile(\"^(.*?)%s(.*)$\" % pattern,\n                                  re.DOTALL | re.UNICODE)\n\n    # Api for Markdown to pass safe_mode into instance\n    self.safe_mode = False\n    if markdown_instance:\n        self.markdown = markdown_instance\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.HtmlPattern-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.HtmlPattern.pattern","title":"<code>pattern = pattern</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.HtmlPattern.compiled_re","title":"<code>compiled_re = re.compile('^(.*?)%s(.*)$' % pattern, re.DOTALL | re.UNICODE)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.HtmlPattern.safe_mode","title":"<code>safe_mode = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.HtmlPattern.markdown","title":"<code>markdown = markdown_instance</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.HtmlPattern-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.HtmlPattern.getCompiledRegExp","title":"<code>getCompiledRegExp()</code>","text":"<p>Return a compiled regular expression.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def getCompiledRegExp(self):\n    \"\"\"Return a compiled regular expression.\"\"\"\n    return self.compiled_re\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.HtmlPattern.type","title":"<code>type()</code>","text":"<p>Return class name, to define pattern type.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def type(self):\n    \"\"\"Return class name, to define pattern type.\"\"\"\n    return self.__class__.__name__\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.HtmlPattern.handleMatch","title":"<code>handleMatch(m)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def handleMatch(self, m):\n    rawhtml = self.unescape(m.group(2))\n    place_holder = self.markdown.htmlStash.store(rawhtml)\n    return place_holder\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.HtmlPattern.unescape","title":"<code>unescape(text)</code>","text":"<p>Return unescaped text given text with an inline placeholder.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def unescape(self, text):\n    \"\"\"Return unescaped text given text with an inline placeholder.\"\"\"\n    try:\n        stash = self.markdown.treeprocessors['inline'].stashed_nodes\n    except KeyError:  # pragma: no cover\n        return text\n\n    def get_stash(m):\n        id = m.group(1)\n        value = stash.get(id)\n        if value is not None:\n            try:\n                return self.markdown.serializer(value)\n            except:\n                return r'\\%s' % value\n\n    return util.INLINE_PLACEHOLDER_RE.sub(get_stash, text)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.LinkPattern","title":"<code>LinkPattern(pattern, markdown_instance=None)</code>","text":"<p>               Bases: <code>Pattern</code></p> <p>Return a link element from the given match.</p> <p>Create an instant of an inline pattern.</p> <p>Parameters:</p> Name Type Description Default <code>pattern</code> <code>str</code> <p>A regular expression that matches a pattern</p> required <code>markdown_instance</code> <code>Markdown</code> <p>Instance of Markdown</p> <code>None</code> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def __init__(self, pattern, markdown_instance=None):\n    \"\"\"Create an instant of an inline pattern.\n\n    Args:\n        pattern (str): A regular expression that matches a pattern\n        markdown_instance (markdown.Markdown): Instance of Markdown\n    \"\"\"\n    self.pattern = pattern\n    self.compiled_re = re.compile(\"^(.*?)%s(.*)$\" % pattern,\n                                  re.DOTALL | re.UNICODE)\n\n    # Api for Markdown to pass safe_mode into instance\n    self.safe_mode = False\n    if markdown_instance:\n        self.markdown = markdown_instance\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.LinkPattern-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.LinkPattern.pattern","title":"<code>pattern = pattern</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.LinkPattern.compiled_re","title":"<code>compiled_re = re.compile('^(.*?)%s(.*)$' % pattern, re.DOTALL | re.UNICODE)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.LinkPattern.safe_mode","title":"<code>safe_mode = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.LinkPattern.markdown","title":"<code>markdown = markdown_instance</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.LinkPattern-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.LinkPattern.getCompiledRegExp","title":"<code>getCompiledRegExp()</code>","text":"<p>Return a compiled regular expression.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def getCompiledRegExp(self):\n    \"\"\"Return a compiled regular expression.\"\"\"\n    return self.compiled_re\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.LinkPattern.type","title":"<code>type()</code>","text":"<p>Return class name, to define pattern type.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def type(self):\n    \"\"\"Return class name, to define pattern type.\"\"\"\n    return self.__class__.__name__\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.LinkPattern.unescape","title":"<code>unescape(text)</code>","text":"<p>Return unescaped text given text with an inline placeholder.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def unescape(self, text):\n    \"\"\"Return unescaped text given text with an inline placeholder.\"\"\"\n    try:\n        stash = self.markdown.treeprocessors['inline'].stashed_nodes\n    except KeyError:  # pragma: no cover\n        return text\n\n    def itertext(el):  # pragma: no cover\n        \"\"\"Reimplement Element.itertext for older python versions.\"\"\"\n        tag = el.tag\n        if not isinstance(tag, util.string_type) and tag is not None:\n            return\n        if el.text:\n            yield el.text\n        for e in el:\n            for s in itertext(e):\n                yield s\n            if e.tail:\n                yield e.tail\n\n    def get_stash(m):\n        id = m.group(1)\n        if id in stash:\n            value = stash.get(id)\n            if isinstance(value, util.string_type):\n                return value\n            else:\n                # An etree Element - return text content only\n                return ''.join(itertext(value))\n    return util.INLINE_PLACEHOLDER_RE.sub(get_stash, text)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.LinkPattern.handleMatch","title":"<code>handleMatch(m)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def handleMatch(self, m):\n    el = util.etree.Element(\"a\")\n    el.text = m.group(2)\n    title = m.group(13)\n    href = m.group(9)\n\n    if href:\n        if href[0] == \"&lt;\":\n            href = href[1:-1]\n        el.set(\"href\", self.sanitize_url(self.unescape(href.strip())))\n    else:\n        el.set(\"href\", \"\")\n\n    if title:\n        title = dequote(self.unescape(title))\n        el.set(\"title\", title)\n    return el\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.LinkPattern.sanitize_url","title":"<code>sanitize_url(url)</code>","text":"<p>Sanitize a url against xss attacks in \"safe_mode\".</p> <p>Rather than specifically blacklisting <code>javascript:alert(\"XSS\")</code> and all its aliases (see http://ha.ckers.org/xss.html), we whitelist known safe url formats. Most urls contain a network location, however some are known not to (i.e.: mailto links). Script urls do not contain a location. Additionally, for <code>javascript:...</code>, the scheme would be \"javascript\" but some aliases will appear to <code>urlparse()</code> to have no scheme. On top of that relative links (i.e.: \"foo/bar.html\") have no scheme. Therefore we must check \"path\", \"parameters\", \"query\" and \"fragment\" for any literal colons. We don't check \"scheme\" for colons because it should never have any and \"netloc\" must allow the form: <code>username:password@host:port</code>.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def sanitize_url(self, url):\n    \"\"\"Sanitize a url against xss attacks in \"safe_mode\".\n\n    Rather than specifically blacklisting `javascript:alert(\"XSS\")` and all\n    its aliases (see &lt;http://ha.ckers.org/xss.html&gt;), we whitelist known\n    safe url formats. Most urls contain a network location, however some\n    are known not to (i.e.: mailto links). Script urls do not contain a\n    location. Additionally, for `javascript:...`, the scheme would be\n    \"javascript\" but some aliases will appear to `urlparse()` to have no\n    scheme. On top of that relative links (i.e.: \"foo/bar.html\") have no\n    scheme. Therefore we must check \"path\", \"parameters\", \"query\" and\n    \"fragment\" for any literal colons. We don't check \"scheme\" for colons\n    because it *should* never have any and \"netloc\" must allow the form:\n    `username:password@host:port`.\n\n    \"\"\"\n    if not self.markdown.safeMode:\n        # Return immediately bipassing parsing.\n        return url\n\n    try:\n        scheme, netloc, path, params, query, fragment = url = urlparse(url)\n    except ValueError:  # pragma: no cover\n        # Bad url - so bad it couldn't be parsed.\n        return ''\n\n    locless_schemes = ['', 'mailto', 'news']\n    allowed_schemes = locless_schemes + ['http', 'https', 'ftp', 'ftps']\n    if scheme not in allowed_schemes:\n        # Not a known (allowed) scheme. Not safe.\n        return ''\n\n    if netloc == '' and scheme not in locless_schemes:  # pragma: no cover\n        # This should not happen. Treat as suspect.\n        return ''\n\n    for part in url[2:]:\n        if \":\" in part:\n            # A colon in \"path\", \"parameters\", \"query\"\n            # or \"fragment\" is suspect.\n            return ''\n\n    # Url passes all tests. Return url as-is.\n    return urlunparse(url)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.ImagePattern","title":"<code>ImagePattern(pattern, markdown_instance=None)</code>","text":"<p>               Bases: <code>LinkPattern</code></p> <p>Return a img element from the given match.</p> <p>Create an instant of an inline pattern.</p> <p>Parameters:</p> Name Type Description Default <code>pattern</code> <code>str</code> <p>A regular expression that matches a pattern</p> required <code>markdown_instance</code> <code>Markdown</code> <p>Instance of Markdown</p> <code>None</code> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def __init__(self, pattern, markdown_instance=None):\n    \"\"\"Create an instant of an inline pattern.\n\n    Args:\n        pattern (str): A regular expression that matches a pattern\n        markdown_instance (markdown.Markdown): Instance of Markdown\n    \"\"\"\n    self.pattern = pattern\n    self.compiled_re = re.compile(\"^(.*?)%s(.*)$\" % pattern,\n                                  re.DOTALL | re.UNICODE)\n\n    # Api for Markdown to pass safe_mode into instance\n    self.safe_mode = False\n    if markdown_instance:\n        self.markdown = markdown_instance\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.ImagePattern-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.ImagePattern.pattern","title":"<code>pattern = pattern</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.ImagePattern.compiled_re","title":"<code>compiled_re = re.compile('^(.*?)%s(.*)$' % pattern, re.DOTALL | re.UNICODE)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.ImagePattern.safe_mode","title":"<code>safe_mode = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.ImagePattern.markdown","title":"<code>markdown = markdown_instance</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.ImagePattern-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.ImagePattern.getCompiledRegExp","title":"<code>getCompiledRegExp()</code>","text":"<p>Return a compiled regular expression.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def getCompiledRegExp(self):\n    \"\"\"Return a compiled regular expression.\"\"\"\n    return self.compiled_re\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.ImagePattern.type","title":"<code>type()</code>","text":"<p>Return class name, to define pattern type.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def type(self):\n    \"\"\"Return class name, to define pattern type.\"\"\"\n    return self.__class__.__name__\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.ImagePattern.unescape","title":"<code>unescape(text)</code>","text":"<p>Return unescaped text given text with an inline placeholder.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def unescape(self, text):\n    \"\"\"Return unescaped text given text with an inline placeholder.\"\"\"\n    try:\n        stash = self.markdown.treeprocessors['inline'].stashed_nodes\n    except KeyError:  # pragma: no cover\n        return text\n\n    def itertext(el):  # pragma: no cover\n        \"\"\"Reimplement Element.itertext for older python versions.\"\"\"\n        tag = el.tag\n        if not isinstance(tag, util.string_type) and tag is not None:\n            return\n        if el.text:\n            yield el.text\n        for e in el:\n            for s in itertext(e):\n                yield s\n            if e.tail:\n                yield e.tail\n\n    def get_stash(m):\n        id = m.group(1)\n        if id in stash:\n            value = stash.get(id)\n            if isinstance(value, util.string_type):\n                return value\n            else:\n                # An etree Element - return text content only\n                return ''.join(itertext(value))\n    return util.INLINE_PLACEHOLDER_RE.sub(get_stash, text)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.ImagePattern.sanitize_url","title":"<code>sanitize_url(url)</code>","text":"<p>Sanitize a url against xss attacks in \"safe_mode\".</p> <p>Rather than specifically blacklisting <code>javascript:alert(\"XSS\")</code> and all its aliases (see http://ha.ckers.org/xss.html), we whitelist known safe url formats. Most urls contain a network location, however some are known not to (i.e.: mailto links). Script urls do not contain a location. Additionally, for <code>javascript:...</code>, the scheme would be \"javascript\" but some aliases will appear to <code>urlparse()</code> to have no scheme. On top of that relative links (i.e.: \"foo/bar.html\") have no scheme. Therefore we must check \"path\", \"parameters\", \"query\" and \"fragment\" for any literal colons. We don't check \"scheme\" for colons because it should never have any and \"netloc\" must allow the form: <code>username:password@host:port</code>.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def sanitize_url(self, url):\n    \"\"\"Sanitize a url against xss attacks in \"safe_mode\".\n\n    Rather than specifically blacklisting `javascript:alert(\"XSS\")` and all\n    its aliases (see &lt;http://ha.ckers.org/xss.html&gt;), we whitelist known\n    safe url formats. Most urls contain a network location, however some\n    are known not to (i.e.: mailto links). Script urls do not contain a\n    location. Additionally, for `javascript:...`, the scheme would be\n    \"javascript\" but some aliases will appear to `urlparse()` to have no\n    scheme. On top of that relative links (i.e.: \"foo/bar.html\") have no\n    scheme. Therefore we must check \"path\", \"parameters\", \"query\" and\n    \"fragment\" for any literal colons. We don't check \"scheme\" for colons\n    because it *should* never have any and \"netloc\" must allow the form:\n    `username:password@host:port`.\n\n    \"\"\"\n    if not self.markdown.safeMode:\n        # Return immediately bipassing parsing.\n        return url\n\n    try:\n        scheme, netloc, path, params, query, fragment = url = urlparse(url)\n    except ValueError:  # pragma: no cover\n        # Bad url - so bad it couldn't be parsed.\n        return ''\n\n    locless_schemes = ['', 'mailto', 'news']\n    allowed_schemes = locless_schemes + ['http', 'https', 'ftp', 'ftps']\n    if scheme not in allowed_schemes:\n        # Not a known (allowed) scheme. Not safe.\n        return ''\n\n    if netloc == '' and scheme not in locless_schemes:  # pragma: no cover\n        # This should not happen. Treat as suspect.\n        return ''\n\n    for part in url[2:]:\n        if \":\" in part:\n            # A colon in \"path\", \"parameters\", \"query\"\n            # or \"fragment\" is suspect.\n            return ''\n\n    # Url passes all tests. Return url as-is.\n    return urlunparse(url)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.ImagePattern.handleMatch","title":"<code>handleMatch(m)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def handleMatch(self, m):\n    el = util.etree.Element(\"img\")\n    src_parts = m.group(9).split()\n    if src_parts:\n        src = src_parts[0]\n        if src[0] == \"&lt;\" and src[-1] == \"&gt;\":\n            src = src[1:-1]\n        el.set('src', self.sanitize_url(self.unescape(src)))\n    else:\n        el.set('src', \"\")\n    if len(src_parts) &gt; 1:\n        el.set('title', dequote(self.unescape(\" \".join(src_parts[1:]))))\n\n    if self.markdown.enable_attributes:\n        truealt = handleAttributes(m.group(2), el)\n    else:\n        truealt = m.group(2)\n\n    el.set('alt', self.unescape(truealt))\n    return el\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.ReferencePattern","title":"<code>ReferencePattern(pattern, markdown_instance=None)</code>","text":"<p>               Bases: <code>LinkPattern</code></p> <p>Match to a stored reference and return link element.</p> <p>Create an instant of an inline pattern.</p> <p>Parameters:</p> Name Type Description Default <code>pattern</code> <code>str</code> <p>A regular expression that matches a pattern</p> required <code>markdown_instance</code> <code>Markdown</code> <p>Instance of Markdown</p> <code>None</code> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def __init__(self, pattern, markdown_instance=None):\n    \"\"\"Create an instant of an inline pattern.\n\n    Args:\n        pattern (str): A regular expression that matches a pattern\n        markdown_instance (markdown.Markdown): Instance of Markdown\n    \"\"\"\n    self.pattern = pattern\n    self.compiled_re = re.compile(\"^(.*?)%s(.*)$\" % pattern,\n                                  re.DOTALL | re.UNICODE)\n\n    # Api for Markdown to pass safe_mode into instance\n    self.safe_mode = False\n    if markdown_instance:\n        self.markdown = markdown_instance\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.ReferencePattern-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.ReferencePattern.pattern","title":"<code>pattern = pattern</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.ReferencePattern.compiled_re","title":"<code>compiled_re = re.compile('^(.*?)%s(.*)$' % pattern, re.DOTALL | re.UNICODE)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.ReferencePattern.safe_mode","title":"<code>safe_mode = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.ReferencePattern.markdown","title":"<code>markdown = markdown_instance</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.ReferencePattern.NEWLINE_CLEANUP_RE","title":"<code>NEWLINE_CLEANUP_RE = re.compile('[ ]?\\\\n', re.MULTILINE)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.ReferencePattern-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.ReferencePattern.getCompiledRegExp","title":"<code>getCompiledRegExp()</code>","text":"<p>Return a compiled regular expression.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def getCompiledRegExp(self):\n    \"\"\"Return a compiled regular expression.\"\"\"\n    return self.compiled_re\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.ReferencePattern.type","title":"<code>type()</code>","text":"<p>Return class name, to define pattern type.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def type(self):\n    \"\"\"Return class name, to define pattern type.\"\"\"\n    return self.__class__.__name__\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.ReferencePattern.unescape","title":"<code>unescape(text)</code>","text":"<p>Return unescaped text given text with an inline placeholder.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def unescape(self, text):\n    \"\"\"Return unescaped text given text with an inline placeholder.\"\"\"\n    try:\n        stash = self.markdown.treeprocessors['inline'].stashed_nodes\n    except KeyError:  # pragma: no cover\n        return text\n\n    def itertext(el):  # pragma: no cover\n        \"\"\"Reimplement Element.itertext for older python versions.\"\"\"\n        tag = el.tag\n        if not isinstance(tag, util.string_type) and tag is not None:\n            return\n        if el.text:\n            yield el.text\n        for e in el:\n            for s in itertext(e):\n                yield s\n            if e.tail:\n                yield e.tail\n\n    def get_stash(m):\n        id = m.group(1)\n        if id in stash:\n            value = stash.get(id)\n            if isinstance(value, util.string_type):\n                return value\n            else:\n                # An etree Element - return text content only\n                return ''.join(itertext(value))\n    return util.INLINE_PLACEHOLDER_RE.sub(get_stash, text)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.ReferencePattern.sanitize_url","title":"<code>sanitize_url(url)</code>","text":"<p>Sanitize a url against xss attacks in \"safe_mode\".</p> <p>Rather than specifically blacklisting <code>javascript:alert(\"XSS\")</code> and all its aliases (see http://ha.ckers.org/xss.html), we whitelist known safe url formats. Most urls contain a network location, however some are known not to (i.e.: mailto links). Script urls do not contain a location. Additionally, for <code>javascript:...</code>, the scheme would be \"javascript\" but some aliases will appear to <code>urlparse()</code> to have no scheme. On top of that relative links (i.e.: \"foo/bar.html\") have no scheme. Therefore we must check \"path\", \"parameters\", \"query\" and \"fragment\" for any literal colons. We don't check \"scheme\" for colons because it should never have any and \"netloc\" must allow the form: <code>username:password@host:port</code>.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def sanitize_url(self, url):\n    \"\"\"Sanitize a url against xss attacks in \"safe_mode\".\n\n    Rather than specifically blacklisting `javascript:alert(\"XSS\")` and all\n    its aliases (see &lt;http://ha.ckers.org/xss.html&gt;), we whitelist known\n    safe url formats. Most urls contain a network location, however some\n    are known not to (i.e.: mailto links). Script urls do not contain a\n    location. Additionally, for `javascript:...`, the scheme would be\n    \"javascript\" but some aliases will appear to `urlparse()` to have no\n    scheme. On top of that relative links (i.e.: \"foo/bar.html\") have no\n    scheme. Therefore we must check \"path\", \"parameters\", \"query\" and\n    \"fragment\" for any literal colons. We don't check \"scheme\" for colons\n    because it *should* never have any and \"netloc\" must allow the form:\n    `username:password@host:port`.\n\n    \"\"\"\n    if not self.markdown.safeMode:\n        # Return immediately bipassing parsing.\n        return url\n\n    try:\n        scheme, netloc, path, params, query, fragment = url = urlparse(url)\n    except ValueError:  # pragma: no cover\n        # Bad url - so bad it couldn't be parsed.\n        return ''\n\n    locless_schemes = ['', 'mailto', 'news']\n    allowed_schemes = locless_schemes + ['http', 'https', 'ftp', 'ftps']\n    if scheme not in allowed_schemes:\n        # Not a known (allowed) scheme. Not safe.\n        return ''\n\n    if netloc == '' and scheme not in locless_schemes:  # pragma: no cover\n        # This should not happen. Treat as suspect.\n        return ''\n\n    for part in url[2:]:\n        if \":\" in part:\n            # A colon in \"path\", \"parameters\", \"query\"\n            # or \"fragment\" is suspect.\n            return ''\n\n    # Url passes all tests. Return url as-is.\n    return urlunparse(url)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.ReferencePattern.handleMatch","title":"<code>handleMatch(m)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def handleMatch(self, m):\n    try:\n        id = m.group(9).lower()\n    except IndexError:\n        id = None\n    if not id:\n        # if we got something like \"[Google][]\" or \"[Goggle]\"\n        # we'll use \"google\" as the id\n        id = m.group(2).lower()\n\n    # Clean up linebreaks in id\n    id = self.NEWLINE_CLEANUP_RE.sub(' ', id)\n    if id not in self.markdown.references:  # ignore undefined refs\n        return None\n    href, title = self.markdown.references[id]\n\n    text = m.group(2)\n    return self.makeTag(href, title, text)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.ReferencePattern.makeTag","title":"<code>makeTag(href, title, text)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def makeTag(self, href, title, text):\n    el = util.etree.Element('a')\n\n    el.set('href', self.sanitize_url(href))\n    if title:\n        el.set('title', title)\n\n    el.text = text\n    return el\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.ImageReferencePattern","title":"<code>ImageReferencePattern(pattern, markdown_instance=None)</code>","text":"<p>               Bases: <code>ReferencePattern</code></p> <p>Match to a stored reference and return img element.</p> <p>Create an instant of an inline pattern.</p> <p>Parameters:</p> Name Type Description Default <code>pattern</code> <code>str</code> <p>A regular expression that matches a pattern</p> required <code>markdown_instance</code> <code>Markdown</code> <p>Instance of Markdown</p> <code>None</code> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def __init__(self, pattern, markdown_instance=None):\n    \"\"\"Create an instant of an inline pattern.\n\n    Args:\n        pattern (str): A regular expression that matches a pattern\n        markdown_instance (markdown.Markdown): Instance of Markdown\n    \"\"\"\n    self.pattern = pattern\n    self.compiled_re = re.compile(\"^(.*?)%s(.*)$\" % pattern,\n                                  re.DOTALL | re.UNICODE)\n\n    # Api for Markdown to pass safe_mode into instance\n    self.safe_mode = False\n    if markdown_instance:\n        self.markdown = markdown_instance\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.ImageReferencePattern-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.ImageReferencePattern.pattern","title":"<code>pattern = pattern</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.ImageReferencePattern.compiled_re","title":"<code>compiled_re = re.compile('^(.*?)%s(.*)$' % pattern, re.DOTALL | re.UNICODE)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.ImageReferencePattern.safe_mode","title":"<code>safe_mode = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.ImageReferencePattern.markdown","title":"<code>markdown = markdown_instance</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.ImageReferencePattern.NEWLINE_CLEANUP_RE","title":"<code>NEWLINE_CLEANUP_RE = re.compile('[ ]?\\\\n', re.MULTILINE)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.ImageReferencePattern-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.ImageReferencePattern.getCompiledRegExp","title":"<code>getCompiledRegExp()</code>","text":"<p>Return a compiled regular expression.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def getCompiledRegExp(self):\n    \"\"\"Return a compiled regular expression.\"\"\"\n    return self.compiled_re\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.ImageReferencePattern.handleMatch","title":"<code>handleMatch(m)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def handleMatch(self, m):\n    try:\n        id = m.group(9).lower()\n    except IndexError:\n        id = None\n    if not id:\n        # if we got something like \"[Google][]\" or \"[Goggle]\"\n        # we'll use \"google\" as the id\n        id = m.group(2).lower()\n\n    # Clean up linebreaks in id\n    id = self.NEWLINE_CLEANUP_RE.sub(' ', id)\n    if id not in self.markdown.references:  # ignore undefined refs\n        return None\n    href, title = self.markdown.references[id]\n\n    text = m.group(2)\n    return self.makeTag(href, title, text)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.ImageReferencePattern.type","title":"<code>type()</code>","text":"<p>Return class name, to define pattern type.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def type(self):\n    \"\"\"Return class name, to define pattern type.\"\"\"\n    return self.__class__.__name__\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.ImageReferencePattern.unescape","title":"<code>unescape(text)</code>","text":"<p>Return unescaped text given text with an inline placeholder.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def unescape(self, text):\n    \"\"\"Return unescaped text given text with an inline placeholder.\"\"\"\n    try:\n        stash = self.markdown.treeprocessors['inline'].stashed_nodes\n    except KeyError:  # pragma: no cover\n        return text\n\n    def itertext(el):  # pragma: no cover\n        \"\"\"Reimplement Element.itertext for older python versions.\"\"\"\n        tag = el.tag\n        if not isinstance(tag, util.string_type) and tag is not None:\n            return\n        if el.text:\n            yield el.text\n        for e in el:\n            for s in itertext(e):\n                yield s\n            if e.tail:\n                yield e.tail\n\n    def get_stash(m):\n        id = m.group(1)\n        if id in stash:\n            value = stash.get(id)\n            if isinstance(value, util.string_type):\n                return value\n            else:\n                # An etree Element - return text content only\n                return ''.join(itertext(value))\n    return util.INLINE_PLACEHOLDER_RE.sub(get_stash, text)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.ImageReferencePattern.sanitize_url","title":"<code>sanitize_url(url)</code>","text":"<p>Sanitize a url against xss attacks in \"safe_mode\".</p> <p>Rather than specifically blacklisting <code>javascript:alert(\"XSS\")</code> and all its aliases (see http://ha.ckers.org/xss.html), we whitelist known safe url formats. Most urls contain a network location, however some are known not to (i.e.: mailto links). Script urls do not contain a location. Additionally, for <code>javascript:...</code>, the scheme would be \"javascript\" but some aliases will appear to <code>urlparse()</code> to have no scheme. On top of that relative links (i.e.: \"foo/bar.html\") have no scheme. Therefore we must check \"path\", \"parameters\", \"query\" and \"fragment\" for any literal colons. We don't check \"scheme\" for colons because it should never have any and \"netloc\" must allow the form: <code>username:password@host:port</code>.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def sanitize_url(self, url):\n    \"\"\"Sanitize a url against xss attacks in \"safe_mode\".\n\n    Rather than specifically blacklisting `javascript:alert(\"XSS\")` and all\n    its aliases (see &lt;http://ha.ckers.org/xss.html&gt;), we whitelist known\n    safe url formats. Most urls contain a network location, however some\n    are known not to (i.e.: mailto links). Script urls do not contain a\n    location. Additionally, for `javascript:...`, the scheme would be\n    \"javascript\" but some aliases will appear to `urlparse()` to have no\n    scheme. On top of that relative links (i.e.: \"foo/bar.html\") have no\n    scheme. Therefore we must check \"path\", \"parameters\", \"query\" and\n    \"fragment\" for any literal colons. We don't check \"scheme\" for colons\n    because it *should* never have any and \"netloc\" must allow the form:\n    `username:password@host:port`.\n\n    \"\"\"\n    if not self.markdown.safeMode:\n        # Return immediately bipassing parsing.\n        return url\n\n    try:\n        scheme, netloc, path, params, query, fragment = url = urlparse(url)\n    except ValueError:  # pragma: no cover\n        # Bad url - so bad it couldn't be parsed.\n        return ''\n\n    locless_schemes = ['', 'mailto', 'news']\n    allowed_schemes = locless_schemes + ['http', 'https', 'ftp', 'ftps']\n    if scheme not in allowed_schemes:\n        # Not a known (allowed) scheme. Not safe.\n        return ''\n\n    if netloc == '' and scheme not in locless_schemes:  # pragma: no cover\n        # This should not happen. Treat as suspect.\n        return ''\n\n    for part in url[2:]:\n        if \":\" in part:\n            # A colon in \"path\", \"parameters\", \"query\"\n            # or \"fragment\" is suspect.\n            return ''\n\n    # Url passes all tests. Return url as-is.\n    return urlunparse(url)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.ImageReferencePattern.makeTag","title":"<code>makeTag(href, title, text)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def makeTag(self, href, title, text):\n    el = util.etree.Element(\"img\")\n    el.set(\"src\", self.sanitize_url(href))\n    if title:\n        el.set(\"title\", title)\n\n    if self.markdown.enable_attributes:\n        text = handleAttributes(text, el)\n\n    el.set(\"alt\", self.unescape(text))\n    return el\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.AutolinkPattern","title":"<code>AutolinkPattern(pattern, markdown_instance=None)</code>","text":"<p>               Bases: <code>Pattern</code></p> <p>Return a link Element given an autolink (<code>&lt;http://example/com&gt;</code>).</p> <p>Create an instant of an inline pattern.</p> <p>Parameters:</p> Name Type Description Default <code>pattern</code> <code>str</code> <p>A regular expression that matches a pattern</p> required <code>markdown_instance</code> <code>Markdown</code> <p>Instance of Markdown</p> <code>None</code> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def __init__(self, pattern, markdown_instance=None):\n    \"\"\"Create an instant of an inline pattern.\n\n    Args:\n        pattern (str): A regular expression that matches a pattern\n        markdown_instance (markdown.Markdown): Instance of Markdown\n    \"\"\"\n    self.pattern = pattern\n    self.compiled_re = re.compile(\"^(.*?)%s(.*)$\" % pattern,\n                                  re.DOTALL | re.UNICODE)\n\n    # Api for Markdown to pass safe_mode into instance\n    self.safe_mode = False\n    if markdown_instance:\n        self.markdown = markdown_instance\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.AutolinkPattern-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.AutolinkPattern.pattern","title":"<code>pattern = pattern</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.AutolinkPattern.compiled_re","title":"<code>compiled_re = re.compile('^(.*?)%s(.*)$' % pattern, re.DOTALL | re.UNICODE)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.AutolinkPattern.safe_mode","title":"<code>safe_mode = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.AutolinkPattern.markdown","title":"<code>markdown = markdown_instance</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.AutolinkPattern-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.AutolinkPattern.getCompiledRegExp","title":"<code>getCompiledRegExp()</code>","text":"<p>Return a compiled regular expression.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def getCompiledRegExp(self):\n    \"\"\"Return a compiled regular expression.\"\"\"\n    return self.compiled_re\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.AutolinkPattern.type","title":"<code>type()</code>","text":"<p>Return class name, to define pattern type.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def type(self):\n    \"\"\"Return class name, to define pattern type.\"\"\"\n    return self.__class__.__name__\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.AutolinkPattern.unescape","title":"<code>unescape(text)</code>","text":"<p>Return unescaped text given text with an inline placeholder.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def unescape(self, text):\n    \"\"\"Return unescaped text given text with an inline placeholder.\"\"\"\n    try:\n        stash = self.markdown.treeprocessors['inline'].stashed_nodes\n    except KeyError:  # pragma: no cover\n        return text\n\n    def itertext(el):  # pragma: no cover\n        \"\"\"Reimplement Element.itertext for older python versions.\"\"\"\n        tag = el.tag\n        if not isinstance(tag, util.string_type) and tag is not None:\n            return\n        if el.text:\n            yield el.text\n        for e in el:\n            for s in itertext(e):\n                yield s\n            if e.tail:\n                yield e.tail\n\n    def get_stash(m):\n        id = m.group(1)\n        if id in stash:\n            value = stash.get(id)\n            if isinstance(value, util.string_type):\n                return value\n            else:\n                # An etree Element - return text content only\n                return ''.join(itertext(value))\n    return util.INLINE_PLACEHOLDER_RE.sub(get_stash, text)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.AutolinkPattern.handleMatch","title":"<code>handleMatch(m)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def handleMatch(self, m):\n    el = util.etree.Element(\"a\")\n    el.set('href', self.unescape(m.group(2)))\n    el.text = util.AtomicString(m.group(2))\n    return el\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.AutomailPattern","title":"<code>AutomailPattern(pattern, markdown_instance=None)</code>","text":"<p>               Bases: <code>Pattern</code></p> <p>Return a mailto link Element given an automail link (<code>&lt;foo@example.com&gt;</code>).</p> <p>Create an instant of an inline pattern.</p> <p>Parameters:</p> Name Type Description Default <code>pattern</code> <code>str</code> <p>A regular expression that matches a pattern</p> required <code>markdown_instance</code> <code>Markdown</code> <p>Instance of Markdown</p> <code>None</code> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def __init__(self, pattern, markdown_instance=None):\n    \"\"\"Create an instant of an inline pattern.\n\n    Args:\n        pattern (str): A regular expression that matches a pattern\n        markdown_instance (markdown.Markdown): Instance of Markdown\n    \"\"\"\n    self.pattern = pattern\n    self.compiled_re = re.compile(\"^(.*?)%s(.*)$\" % pattern,\n                                  re.DOTALL | re.UNICODE)\n\n    # Api for Markdown to pass safe_mode into instance\n    self.safe_mode = False\n    if markdown_instance:\n        self.markdown = markdown_instance\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.AutomailPattern-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.AutomailPattern.pattern","title":"<code>pattern = pattern</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.AutomailPattern.compiled_re","title":"<code>compiled_re = re.compile('^(.*?)%s(.*)$' % pattern, re.DOTALL | re.UNICODE)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.AutomailPattern.safe_mode","title":"<code>safe_mode = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.AutomailPattern.markdown","title":"<code>markdown = markdown_instance</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.AutomailPattern-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.AutomailPattern.getCompiledRegExp","title":"<code>getCompiledRegExp()</code>","text":"<p>Return a compiled regular expression.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def getCompiledRegExp(self):\n    \"\"\"Return a compiled regular expression.\"\"\"\n    return self.compiled_re\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.AutomailPattern.type","title":"<code>type()</code>","text":"<p>Return class name, to define pattern type.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def type(self):\n    \"\"\"Return class name, to define pattern type.\"\"\"\n    return self.__class__.__name__\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.AutomailPattern.unescape","title":"<code>unescape(text)</code>","text":"<p>Return unescaped text given text with an inline placeholder.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def unescape(self, text):\n    \"\"\"Return unescaped text given text with an inline placeholder.\"\"\"\n    try:\n        stash = self.markdown.treeprocessors['inline'].stashed_nodes\n    except KeyError:  # pragma: no cover\n        return text\n\n    def itertext(el):  # pragma: no cover\n        \"\"\"Reimplement Element.itertext for older python versions.\"\"\"\n        tag = el.tag\n        if not isinstance(tag, util.string_type) and tag is not None:\n            return\n        if el.text:\n            yield el.text\n        for e in el:\n            for s in itertext(e):\n                yield s\n            if e.tail:\n                yield e.tail\n\n    def get_stash(m):\n        id = m.group(1)\n        if id in stash:\n            value = stash.get(id)\n            if isinstance(value, util.string_type):\n                return value\n            else:\n                # An etree Element - return text content only\n                return ''.join(itertext(value))\n    return util.INLINE_PLACEHOLDER_RE.sub(get_stash, text)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.AutomailPattern.handleMatch","title":"<code>handleMatch(m)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def handleMatch(self, m):\n    el = util.etree.Element('a')\n    email = self.unescape(m.group(2))\n    if email.startswith(\"mailto:\"):\n        email = email[len(\"mailto:\"):]\n\n    def codepoint2name(code):\n        \"\"\"Return entity definition by code, or the code if not defined.\"\"\"\n        entity = entities.codepoint2name.get(code)\n        if entity:\n            return \"%s%s;\" % (util.AMP_SUBSTITUTE, entity)\n        else:\n            return \"%s#%d;\" % (util.AMP_SUBSTITUTE, code)\n\n    letters = [codepoint2name(ord(letter)) for letter in email]\n    el.text = util.AtomicString(''.join(letters))\n\n    mailto = \"mailto:\" + email\n    mailto = \"\".join([util.AMP_SUBSTITUTE + '#%d;' %\n                      ord(letter) for letter in mailto])\n    el.set('href', mailto)\n    return el\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.build_inlinepatterns","title":"<code>build_inlinepatterns(md_instance, **kwargs)</code>","text":"<p>Build the default set of inline patterns for Markdown.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def build_inlinepatterns(md_instance, **kwargs):\n    \"\"\"Build the default set of inline patterns for Markdown.\"\"\"\n    inlinePatterns = odict.OrderedDict()\n    inlinePatterns[\"backtick\"] = BacktickPattern(BACKTICK_RE)\n    inlinePatterns[\"escape\"] = EscapePattern(ESCAPE_RE, md_instance)\n    inlinePatterns[\"reference\"] = ReferencePattern(REFERENCE_RE, md_instance)\n    inlinePatterns[\"link\"] = LinkPattern(LINK_RE, md_instance)\n    inlinePatterns[\"image_link\"] = ImagePattern(IMAGE_LINK_RE, md_instance)\n    inlinePatterns[\"image_reference\"] = ImageReferencePattern(\n        IMAGE_REFERENCE_RE, md_instance\n    )\n    inlinePatterns[\"short_reference\"] = ReferencePattern(\n        SHORT_REF_RE, md_instance\n    )\n    inlinePatterns[\"autolink\"] = AutolinkPattern(AUTOLINK_RE, md_instance)\n    inlinePatterns[\"automail\"] = AutomailPattern(AUTOMAIL_RE, md_instance)\n    inlinePatterns[\"linebreak\"] = SubstituteTagPattern(LINE_BREAK_RE, 'br')\n    if md_instance.safeMode != 'escape':\n        inlinePatterns[\"html\"] = HtmlPattern(HTML_RE, md_instance)\n    inlinePatterns[\"entity\"] = HtmlPattern(ENTITY_RE, md_instance)\n    inlinePatterns[\"not_strong\"] = SimpleTextPattern(NOT_STRONG_RE)\n    inlinePatterns[\"em_strong\"] = DoubleTagPattern(EM_STRONG_RE, 'strong,em')\n    inlinePatterns[\"strong_em\"] = DoubleTagPattern(STRONG_EM_RE, 'em,strong')\n    inlinePatterns[\"strong\"] = SimpleTagPattern(STRONG_RE, 'strong')\n    inlinePatterns[\"emphasis\"] = SimpleTagPattern(EMPHASIS_RE, 'em')\n    if md_instance.smart_emphasis:\n        inlinePatterns[\"emphasis2\"] = SimpleTagPattern(SMART_EMPHASIS_RE, 'em')\n    else:\n        inlinePatterns[\"emphasis2\"] = SimpleTagPattern(EMPHASIS_2_RE, 'em')\n    return inlinePatterns\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.dequote","title":"<code>dequote(string)</code>","text":"<p>Remove quotes from around a string.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def dequote(string):\n    \"\"\"Remove quotes from around a string.\"\"\"\n    if ((string.startswith('\"') and string.endswith('\"')) or\n       (string.startswith(\"'\") and string.endswith(\"'\"))):\n        return string[1:-1]\n    else:\n        return string\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/inlinepatterns/#pyrevit.coreutils.markdown.inlinepatterns.handleAttributes","title":"<code>handleAttributes(text, parent)</code>","text":"<p>Set values of an element based on attribute definitions ({@id=123}).</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def handleAttributes(text, parent):\n    \"\"\"Set values of an element based on attribute definitions ({@id=123}).\"\"\"\n    def attributeCallback(match):\n        parent.set(match.group(1), match.group(2).replace('\\n', ' '))\n    return ATTR_RE.sub(attributeCallback, text)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/odict/","title":"odict","text":"<p>Ordered dictionary.</p>"},{"location":"reference/pyrevit/coreutils/markdown/odict/#pyrevit.coreutils.markdown.odict-classes","title":"Classes","text":""},{"location":"reference/pyrevit/coreutils/markdown/odict/#pyrevit.coreutils.markdown.odict.OrderedDict","title":"<code>OrderedDict(data=None)</code>","text":"<p>               Bases: <code>dict</code></p> <p>A dictionary that keeps its keys in the order in which they're inserted.</p> <p>Copied from Django's SortedDict with some modifications.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/odict.py</code> <pre><code>def __init__(self, data=None):\n    if data is None or isinstance(data, dict):\n        data = data or []\n        super(OrderedDict, self).__init__(data)\n        self.keyOrder = list(data) if data else []\n    else:\n        super(OrderedDict, self).__init__()\n        super_set = super(OrderedDict, self).__setitem__\n        for key, value in data:\n            # Take the ordering from first key\n            if key not in self:\n                self.keyOrder.append(key)\n            # But override with last value in data (dict() does this)\n            super_set(key, value)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/odict/#pyrevit.coreutils.markdown.odict.OrderedDict-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/odict/#pyrevit.coreutils.markdown.odict.OrderedDict.keyOrder","title":"<code>keyOrder = list(data) if data else []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/odict/#pyrevit.coreutils.markdown.odict.OrderedDict.iteritems","title":"<code>iteritems = _iteritems</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/odict/#pyrevit.coreutils.markdown.odict.OrderedDict.iterkeys","title":"<code>iterkeys = _iterkeys</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/odict/#pyrevit.coreutils.markdown.odict.OrderedDict.itervalues","title":"<code>itervalues = _itervalues</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/odict/#pyrevit.coreutils.markdown.odict.OrderedDict-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/odict/#pyrevit.coreutils.markdown.odict.OrderedDict.pop","title":"<code>pop(k, *args)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/odict.py</code> <pre><code>def pop(self, k, *args):\n    result = super(OrderedDict, self).pop(k, *args)\n    try:\n        self.keyOrder.remove(k)\n    except ValueError:\n        # Key wasn't in the dictionary in the first place. No problem.\n        pass\n    return result\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/odict/#pyrevit.coreutils.markdown.odict.OrderedDict.popitem","title":"<code>popitem()</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/odict.py</code> <pre><code>def popitem(self):\n    result = super(OrderedDict, self).popitem()\n    self.keyOrder.remove(result[0])\n    return result\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/odict/#pyrevit.coreutils.markdown.odict.OrderedDict.items","title":"<code>items()</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/odict.py</code> <pre><code>def items(self):\n    return [(k, self[k]) for k in self.keyOrder]\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/odict/#pyrevit.coreutils.markdown.odict.OrderedDict.keys","title":"<code>keys()</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/odict.py</code> <pre><code>def keys(self):\n    return self.keyOrder[:]\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/odict/#pyrevit.coreutils.markdown.odict.OrderedDict.values","title":"<code>values()</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/odict.py</code> <pre><code>def values(self):\n    return [self[k] for k in self.keyOrder]\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/odict/#pyrevit.coreutils.markdown.odict.OrderedDict.update","title":"<code>update(dict_)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/odict.py</code> <pre><code>def update(self, dict_):\n    for k in dict_:\n        self[k] = dict_[k]\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/odict/#pyrevit.coreutils.markdown.odict.OrderedDict.setdefault","title":"<code>setdefault(key, default)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/odict.py</code> <pre><code>def setdefault(self, key, default):\n    if key not in self:\n        self.keyOrder.append(key)\n    return super(OrderedDict, self).setdefault(key, default)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/odict/#pyrevit.coreutils.markdown.odict.OrderedDict.value_for_index","title":"<code>value_for_index(index)</code>","text":"<p>Returns the value of the item at the given zero-based index.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/odict.py</code> <pre><code>def value_for_index(self, index):\n    \"\"\"Returns the value of the item at the given zero-based index.\"\"\"\n    return self[self.keyOrder[index]]\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/odict/#pyrevit.coreutils.markdown.odict.OrderedDict.insert","title":"<code>insert(index, key, value)</code>","text":"<p>Inserts the key, value pair before the item with the given index.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/odict.py</code> <pre><code>def insert(self, index, key, value):\n    \"\"\"Inserts the key, value pair before the item with the given index.\"\"\"\n    if key in self.keyOrder:\n        n = self.keyOrder.index(key)\n        del self.keyOrder[n]\n        if n &lt; index:\n            index -= 1\n    self.keyOrder.insert(index, key)\n    super(OrderedDict, self).__setitem__(key, value)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/odict/#pyrevit.coreutils.markdown.odict.OrderedDict.copy","title":"<code>copy()</code>","text":"<p>Returns a copy of this object.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/odict.py</code> <pre><code>def copy(self):\n    \"\"\"Returns a copy of this object.\"\"\"\n    # This way of initializing the copy means it works for subclasses, too.\n    return self.__class__(self)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/odict/#pyrevit.coreutils.markdown.odict.OrderedDict.clear","title":"<code>clear()</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/odict.py</code> <pre><code>def clear(self):\n    super(OrderedDict, self).clear()\n    self.keyOrder = []\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/odict/#pyrevit.coreutils.markdown.odict.OrderedDict.index","title":"<code>index(key)</code>","text":"<p>Return the index of a given key.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/odict.py</code> <pre><code>def index(self, key):\n    \"\"\"Return the index of a given key.\"\"\"\n    try:\n        return self.keyOrder.index(key)\n    except ValueError:\n        raise ValueError(\"Element '%s' was not found in OrderedDict\" % key)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/odict/#pyrevit.coreutils.markdown.odict.OrderedDict.index_for_location","title":"<code>index_for_location(location)</code>","text":"<p>Return index or None for a given location.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/odict.py</code> <pre><code>def index_for_location(self, location):\n    \"\"\"Return index or None for a given location.\"\"\"\n    if location == '_begin':\n        i = 0\n    elif location == '_end':\n        i = None\n    elif location.startswith('&lt;') or location.startswith('&gt;'):\n        i = self.index(location[1:])\n        if location.startswith('&gt;'):\n            if i &gt;= len(self):\n                # last item\n                i = None\n            else:\n                i += 1\n    else:\n        raise ValueError('Not a valid location: \"%s\". Location key '\n                         'must start with a \"&gt;\" or \"&lt;\".' % location)\n    return i\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/odict/#pyrevit.coreutils.markdown.odict.OrderedDict.add","title":"<code>add(key, value, location)</code>","text":"<p>Insert by key location.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/odict.py</code> <pre><code>def add(self, key, value, location):\n    \"\"\"Insert by key location.\"\"\"\n    i = self.index_for_location(location)\n    if i is not None:\n        self.insert(i, key, value)\n    else:\n        self.__setitem__(key, value)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/odict/#pyrevit.coreutils.markdown.odict.OrderedDict.link","title":"<code>link(key, location)</code>","text":"<p>Change location of an existing item.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/odict.py</code> <pre><code>def link(self, key, location):\n    \"\"\"Change location of an existing item.\"\"\"\n    n = self.keyOrder.index(key)\n    del self.keyOrder[n]\n    try:\n        i = self.index_for_location(location)\n        if i is not None:\n            self.keyOrder.insert(i, key)\n        else:\n            self.keyOrder.append(key)\n    except Exception as e:\n        # restore to prevent data loss and reraise\n        self.keyOrder.insert(n, key)\n        raise e\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/postprocessors/","title":"postprocessors","text":"<p>POST-PROCESSORS.</p> <p>Markdown also allows post-processors, which are similar to preprocessors in that they need to implement a \"run\" method. However, they are run after core processing.</p>"},{"location":"reference/pyrevit/coreutils/markdown/postprocessors/#pyrevit.coreutils.markdown.postprocessors-classes","title":"Classes","text":""},{"location":"reference/pyrevit/coreutils/markdown/postprocessors/#pyrevit.coreutils.markdown.postprocessors.Postprocessor","title":"<code>Postprocessor(markdown_instance=None)</code>","text":"<p>               Bases: <code>Processor</code></p> <p>Postprocessors are run after the ElementTree it converted back into text.</p> <p>Each Postprocessor implements a \"run\" method that takes a pointer to a text string, modifies it as necessary and returns a text string.</p> <p>Postprocessors must extend markdown.Postprocessor.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/util.py</code> <pre><code>def __init__(self, markdown_instance=None):\n    if markdown_instance:\n        self.markdown = markdown_instance\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/postprocessors/#pyrevit.coreutils.markdown.postprocessors.Postprocessor-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/postprocessors/#pyrevit.coreutils.markdown.postprocessors.Postprocessor.markdown","title":"<code>markdown = markdown_instance</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/postprocessors/#pyrevit.coreutils.markdown.postprocessors.Postprocessor-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/postprocessors/#pyrevit.coreutils.markdown.postprocessors.Postprocessor.run","title":"<code>run(text)</code>","text":"<p>Main postprocessor method.</p> <p>Subclasses of Postprocessor should implement a <code>run</code> method, which takes the html document as a single text string and returns a (possibly modified) string.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/postprocessors.py</code> <pre><code>def run(self, text):\n    \"\"\"Main postprocessor method.\n\n    Subclasses of Postprocessor should implement a `run` method, which\n    takes the html document as a single text string and returns a\n    (possibly modified) string.\n    \"\"\"\n    pass  # pragma: no cover\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/postprocessors/#pyrevit.coreutils.markdown.postprocessors.RawHtmlPostprocessor","title":"<code>RawHtmlPostprocessor(markdown_instance=None)</code>","text":"<p>               Bases: <code>Postprocessor</code></p> <p>Restore raw html to the document.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/util.py</code> <pre><code>def __init__(self, markdown_instance=None):\n    if markdown_instance:\n        self.markdown = markdown_instance\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/postprocessors/#pyrevit.coreutils.markdown.postprocessors.RawHtmlPostprocessor-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/postprocessors/#pyrevit.coreutils.markdown.postprocessors.RawHtmlPostprocessor.markdown","title":"<code>markdown = markdown_instance</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/postprocessors/#pyrevit.coreutils.markdown.postprocessors.RawHtmlPostprocessor-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/postprocessors/#pyrevit.coreutils.markdown.postprocessors.RawHtmlPostprocessor.run","title":"<code>run(text)</code>","text":"<p>Iterate over html stash and restore \"safe\" html.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/postprocessors.py</code> <pre><code>def run(self, text):\n    \"\"\"Iterate over html stash and restore \"safe\" html.\"\"\"\n    replacements = OrderedDict()\n    for i in range(self.markdown.htmlStash.html_counter):\n        html, safe = self.markdown.htmlStash.rawHtmlBlocks[i]\n        if self.markdown.safeMode and not safe:\n            if unicode(self.markdown.safeMode).lower() == 'escape':\n                html = self.escape(html)\n            elif unicode(self.markdown.safeMode).lower() == 'remove':\n                html = ''\n            else:\n                html = self.markdown.html_replacement_text\n        if (self.isblocklevel(html) and\n           (safe or not self.markdown.safeMode)):\n            replacements[\"&lt;p&gt;%s&lt;/p&gt;\" %\n                         (self.markdown.htmlStash.get_placeholder(i))] = \\\n                html + \"\\n\"\n        replacements[self.markdown.htmlStash.get_placeholder(i)] = html\n\n    if replacements:\n        pattern = re.compile(\"|\".join(re.escape(k) for k in replacements))\n        text = pattern.sub(lambda m: replacements[m.group(0)], text)\n\n    return text\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/postprocessors/#pyrevit.coreutils.markdown.postprocessors.RawHtmlPostprocessor.escape","title":"<code>escape(html)</code>","text":"<p>Basic html escaping.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/postprocessors.py</code> <pre><code>def escape(self, html):\n    \"\"\"Basic html escaping.\"\"\"\n    html = html.replace('&amp;', '&amp;amp;')\n    html = html.replace('&lt;', '&amp;lt;')\n    html = html.replace('&gt;', '&amp;gt;')\n    return html.replace('\"', '&amp;quot;')\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/postprocessors/#pyrevit.coreutils.markdown.postprocessors.RawHtmlPostprocessor.isblocklevel","title":"<code>isblocklevel(html)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/postprocessors.py</code> <pre><code>def isblocklevel(self, html):\n    m = re.match(r'^\\&lt;\\/?([^ &gt;]+)', html)\n    if m:\n        if m.group(1)[0] in ('!', '?', '@', '%'):\n            # Comment, php etc...\n            return True\n        return util.isBlockLevel(m.group(1))\n    return False\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/postprocessors/#pyrevit.coreutils.markdown.postprocessors.AndSubstitutePostprocessor","title":"<code>AndSubstitutePostprocessor(markdown_instance=None)</code>","text":"<p>               Bases: <code>Postprocessor</code></p> <p>Restore valid entities.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/util.py</code> <pre><code>def __init__(self, markdown_instance=None):\n    if markdown_instance:\n        self.markdown = markdown_instance\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/postprocessors/#pyrevit.coreutils.markdown.postprocessors.AndSubstitutePostprocessor-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/postprocessors/#pyrevit.coreutils.markdown.postprocessors.AndSubstitutePostprocessor.markdown","title":"<code>markdown = markdown_instance</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/postprocessors/#pyrevit.coreutils.markdown.postprocessors.AndSubstitutePostprocessor-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/postprocessors/#pyrevit.coreutils.markdown.postprocessors.AndSubstitutePostprocessor.run","title":"<code>run(text)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/postprocessors.py</code> <pre><code>def run(self, text):\n    text = text.replace(util.AMP_SUBSTITUTE, \"&amp;\")\n    return text\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/postprocessors/#pyrevit.coreutils.markdown.postprocessors.UnescapePostprocessor","title":"<code>UnescapePostprocessor(markdown_instance=None)</code>","text":"<p>               Bases: <code>Postprocessor</code></p> <p>Restore escaped chars.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/util.py</code> <pre><code>def __init__(self, markdown_instance=None):\n    if markdown_instance:\n        self.markdown = markdown_instance\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/postprocessors/#pyrevit.coreutils.markdown.postprocessors.UnescapePostprocessor-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/postprocessors/#pyrevit.coreutils.markdown.postprocessors.UnescapePostprocessor.markdown","title":"<code>markdown = markdown_instance</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/postprocessors/#pyrevit.coreutils.markdown.postprocessors.UnescapePostprocessor.RE","title":"<code>RE = re.compile('%s(\\\\d+)%s' % (util.STX, util.ETX))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/postprocessors/#pyrevit.coreutils.markdown.postprocessors.UnescapePostprocessor-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/postprocessors/#pyrevit.coreutils.markdown.postprocessors.UnescapePostprocessor.unescape","title":"<code>unescape(m)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/postprocessors.py</code> <pre><code>def unescape(self, m):\n    return util.int2str(int(m.group(1)))\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/postprocessors/#pyrevit.coreutils.markdown.postprocessors.UnescapePostprocessor.run","title":"<code>run(text)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/postprocessors.py</code> <pre><code>def run(self, text):\n    return self.RE.sub(self.unescape, text)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/postprocessors/#pyrevit.coreutils.markdown.postprocessors-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/postprocessors/#pyrevit.coreutils.markdown.postprocessors.build_postprocessors","title":"<code>build_postprocessors(md_instance, **kwargs)</code>","text":"<p>Build the default postprocessors for Markdown.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/postprocessors.py</code> <pre><code>def build_postprocessors(md_instance, **kwargs):\n    \"\"\"Build the default postprocessors for Markdown.\"\"\"\n    postprocessors = odict.OrderedDict()\n    postprocessors[\"raw_html\"] = RawHtmlPostprocessor(md_instance)\n    postprocessors[\"amp_substitute\"] = AndSubstitutePostprocessor()\n    postprocessors[\"unescape\"] = UnescapePostprocessor()\n    return postprocessors\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/preprocessors/","title":"preprocessors","text":"<p>PRE-PROCESSORS.</p> <p>Preprocessors work on source text before we start doing anything too complicated.</p>"},{"location":"reference/pyrevit/coreutils/markdown/preprocessors/#pyrevit.coreutils.markdown.preprocessors-classes","title":"Classes","text":""},{"location":"reference/pyrevit/coreutils/markdown/preprocessors/#pyrevit.coreutils.markdown.preprocessors.Preprocessor","title":"<code>Preprocessor(markdown_instance=None)</code>","text":"<p>               Bases: <code>Processor</code></p> <p>Preprocessors are run after the text is broken into lines.</p> <p>Each preprocessor implements a \"run\" method that takes a pointer to a list of lines of the document, modifies it as necessary and returns either the same pointer or a pointer to a new list.</p> <p>Preprocessors must extend markdown.Preprocessor.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/util.py</code> <pre><code>def __init__(self, markdown_instance=None):\n    if markdown_instance:\n        self.markdown = markdown_instance\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/preprocessors/#pyrevit.coreutils.markdown.preprocessors.Preprocessor-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/preprocessors/#pyrevit.coreutils.markdown.preprocessors.Preprocessor.markdown","title":"<code>markdown = markdown_instance</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/preprocessors/#pyrevit.coreutils.markdown.preprocessors.Preprocessor-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/preprocessors/#pyrevit.coreutils.markdown.preprocessors.Preprocessor.run","title":"<code>run(lines)</code>","text":"<p>Main preprocessor task.</p> <p>Each subclass of Preprocessor should override the <code>run</code> method, which takes the document as a list of strings split by newlines and returns the (possibly modified) list of lines.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/preprocessors.py</code> <pre><code>def run(self, lines):\n    \"\"\"Main preprocessor task.\n\n    Each subclass of Preprocessor should override the `run` method, which\n    takes the document as a list of strings split by newlines and returns\n    the (possibly modified) list of lines.\n\n    \"\"\"\n    pass  # pragma: no cover\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/preprocessors/#pyrevit.coreutils.markdown.preprocessors.NormalizeWhitespace","title":"<code>NormalizeWhitespace(markdown_instance=None)</code>","text":"<p>               Bases: <code>Preprocessor</code></p> <p>Normalize whitespace for consistant parsing.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/util.py</code> <pre><code>def __init__(self, markdown_instance=None):\n    if markdown_instance:\n        self.markdown = markdown_instance\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/preprocessors/#pyrevit.coreutils.markdown.preprocessors.NormalizeWhitespace-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/preprocessors/#pyrevit.coreutils.markdown.preprocessors.NormalizeWhitespace.markdown","title":"<code>markdown = markdown_instance</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/preprocessors/#pyrevit.coreutils.markdown.preprocessors.NormalizeWhitespace-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/preprocessors/#pyrevit.coreutils.markdown.preprocessors.NormalizeWhitespace.run","title":"<code>run(lines)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/preprocessors.py</code> <pre><code>def run(self, lines):\n    source = '\\n'.join(lines)\n    source = source.replace(util.STX, \"\").replace(util.ETX, \"\")\n    source = source.replace(\"\\r\\n\", \"\\n\").replace(\"\\r\", \"\\n\") + \"\\n\\n\"\n    source = source.expandtabs(self.markdown.tab_length)\n    source = re.sub(r'(?&lt;=\\n) +\\n', '\\n', source)\n    return source.split('\\n')\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/preprocessors/#pyrevit.coreutils.markdown.preprocessors.HtmlBlockPreprocessor","title":"<code>HtmlBlockPreprocessor(markdown_instance=None)</code>","text":"<p>               Bases: <code>Preprocessor</code></p> <p>Remove html blocks from the text and store them for later retrieval.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/util.py</code> <pre><code>def __init__(self, markdown_instance=None):\n    if markdown_instance:\n        self.markdown = markdown_instance\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/preprocessors/#pyrevit.coreutils.markdown.preprocessors.HtmlBlockPreprocessor-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/preprocessors/#pyrevit.coreutils.markdown.preprocessors.HtmlBlockPreprocessor.markdown","title":"<code>markdown = markdown_instance</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/preprocessors/#pyrevit.coreutils.markdown.preprocessors.HtmlBlockPreprocessor.right_tag_patterns","title":"<code>right_tag_patterns = ['&lt;/%s&gt;', '%s&gt;']</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/preprocessors/#pyrevit.coreutils.markdown.preprocessors.HtmlBlockPreprocessor.attrs_pattern","title":"<code>attrs_pattern = '\\n \\\\s+(?P&lt;attr&gt;[^&gt;\"\\'/= ]+)=(?P&lt;q&gt;[\\'\"])(?P&lt;value&gt;.*?)(?P=q) # attr=\"value\"\\n        |                                                       # OR\\n \\\\s+(?P&lt;attr1&gt;[^&gt;\"\\'/= ]+)=(?P&lt;value1&gt;[^&gt; ]+)             # attr=value\\n        |                                                       # OR\\n \\\\s+(?P&lt;attr2&gt;[^&gt;\"\\'/= ]+)                                # attr\\n        '</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/preprocessors/#pyrevit.coreutils.markdown.preprocessors.HtmlBlockPreprocessor.left_tag_pattern","title":"<code>left_tag_pattern = '^\\\\&lt;(?P&lt;tag&gt;[^&gt; ]+)(?P&lt;attrs&gt;(%s)*)\\\\s*\\\\/?\\\\&gt;?' % attrs_pattern</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/preprocessors/#pyrevit.coreutils.markdown.preprocessors.HtmlBlockPreprocessor.attrs_re","title":"<code>attrs_re = re.compile(attrs_pattern, re.VERBOSE)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/preprocessors/#pyrevit.coreutils.markdown.preprocessors.HtmlBlockPreprocessor.left_tag_re","title":"<code>left_tag_re = re.compile(left_tag_pattern, re.VERBOSE)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/preprocessors/#pyrevit.coreutils.markdown.preprocessors.HtmlBlockPreprocessor.markdown_in_raw","title":"<code>markdown_in_raw = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/preprocessors/#pyrevit.coreutils.markdown.preprocessors.HtmlBlockPreprocessor-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/preprocessors/#pyrevit.coreutils.markdown.preprocessors.HtmlBlockPreprocessor.run","title":"<code>run(lines)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/preprocessors.py</code> <pre><code>def run(self, lines):\n    text = \"\\n\".join(lines)\n    new_blocks = []\n    text = text.rsplit(\"\\n\\n\")\n    items = []\n    left_tag = ''\n    right_tag = ''\n    in_tag = False  # flag\n\n    while text:\n        block = text[0]\n        if block.startswith(\"\\n\"):\n            block = block[1:]\n        text = text[1:]\n\n        if block.startswith(\"\\n\"):\n            block = block[1:]\n\n        if not in_tag:\n            if block.startswith(\"&lt;\") and len(block.strip()) &gt; 1:\n\n                if block[1:4] == \"!--\":\n                    # is a comment block\n                    left_tag, left_index, attrs = \"--\", 2, {}\n                else:\n                    left_tag, left_index, attrs = self._get_left_tag(block)\n                right_tag, data_index = self._get_right_tag(left_tag,\n                                                            left_index,\n                                                            block)\n                # keep checking conditions below and maybe just append\n\n                if data_index &lt; len(block) and (\n                    util.isBlockLevel(left_tag) or left_tag == '--'):\n                    text.insert(0, block[data_index:])\n                    block = block[:data_index]\n\n                if not (util.isBlockLevel(left_tag) or block[1] in [\"!\", \"?\", \"@\", \"%\"]):\n                    new_blocks.append(block)\n                    continue\n\n                if self._is_oneliner(left_tag):\n                    new_blocks.append(block.strip())\n                    continue\n\n                if block.rstrip().endswith(\"&gt;\") \\\n                        and self._equal_tags(left_tag, right_tag):\n                    if self.markdown_in_raw and 'markdown' in attrs.keys():\n                        block = block[left_index:-len(right_tag) - 2]\n                        new_blocks.append(self.markdown.htmlStash.\n                                          store_tag(left_tag, attrs, 0, 2))\n                        new_blocks.extend([block])\n                    else:\n                        new_blocks.append(\n                            self.markdown.htmlStash.store(block.strip()))\n                    continue\n                else:\n                    # if is block level tag and is not complete\n                    if (not self._equal_tags(left_tag, right_tag)) and \\\n                       (util.isBlockLevel(left_tag) or left_tag == \"--\"):\n                        items.append(block.strip())\n                        in_tag = True\n                    else:\n                        new_blocks.append(\n                            self.markdown.htmlStash.store(block.strip())\n                        )\n                    continue\n\n            else:\n                new_blocks.append(block)\n\n        else:\n            items.append(block)\n\n            # Need to evaluate all items so we can calculate relative to the left index.\n            right_tag, data_index = self._get_right_tag(left_tag, left_index, ''.join(items))\n            # Adjust data_index: relative to items -&gt; relative to last block\n            prev_block_length = 0\n            for item in items[:-1]:\n                prev_block_length += len(item)\n            data_index -= prev_block_length\n\n            if self._equal_tags(left_tag, right_tag):\n                # if find closing tag\n\n                if data_index &lt; len(block):\n                    # we have more text after right_tag\n                    items[-1] = block[:data_index]\n                    text.insert(0, block[data_index:])\n\n                in_tag = False\n                if self.markdown_in_raw and 'markdown' in attrs.keys():\n                    items[0] = items[0][left_index:]\n                    items[-1] = items[-1][:-len(right_tag) - 2]\n                    if items[len(items) - 1]:  # not a newline/empty string\n                        right_index = len(items) + 3\n                    else:\n                        right_index = len(items) + 2\n                    new_blocks.append(self.markdown.htmlStash.store_tag(\n                        left_tag, attrs, 0, right_index))\n                    placeholderslen = len(self.markdown.htmlStash.tag_data)\n                    new_blocks.extend(\n                        self._nested_markdown_in_html(items))\n                    nests = len(self.markdown.htmlStash.tag_data) - \\\n                        placeholderslen\n                    self.markdown.htmlStash.tag_data[-1 - nests][\n                        'right_index'] += nests - 2\n                else:\n                    new_blocks.append(\n                        self.markdown.htmlStash.store('\\n\\n'.join(items)))\n                items = []\n\n    if items:\n        if self.markdown_in_raw and 'markdown' in attrs.keys():\n            items[0] = items[0][left_index:]\n            items[-1] = items[-1][:-len(right_tag) - 2]\n            if items[len(items) - 1]:  # not a newline/empty string\n                right_index = len(items) + 3\n            else:\n                right_index = len(items) + 2\n            new_blocks.append(\n                self.markdown.htmlStash.store_tag(\n                    left_tag, attrs, 0, right_index))\n            placeholderslen = len(self.markdown.htmlStash.tag_data)\n            new_blocks.extend(self._nested_markdown_in_html(items))\n            nests = len(self.markdown.htmlStash.tag_data) - placeholderslen\n            self.markdown.htmlStash.tag_data[-1 - nests][\n                'right_index'] += nests - 2\n        else:\n            new_blocks.append(\n                self.markdown.htmlStash.store('\\n\\n'.join(items)))\n        new_blocks.append('\\n')\n\n    new_text = \"\\n\\n\".join(new_blocks)\n    return new_text.split(\"\\n\")\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/preprocessors/#pyrevit.coreutils.markdown.preprocessors.ReferencePreprocessor","title":"<code>ReferencePreprocessor(markdown_instance=None)</code>","text":"<p>               Bases: <code>Preprocessor</code></p> <p>Remove reference definitions from text and store for later use.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/util.py</code> <pre><code>def __init__(self, markdown_instance=None):\n    if markdown_instance:\n        self.markdown = markdown_instance\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/preprocessors/#pyrevit.coreutils.markdown.preprocessors.ReferencePreprocessor-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/preprocessors/#pyrevit.coreutils.markdown.preprocessors.ReferencePreprocessor.markdown","title":"<code>markdown = markdown_instance</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/preprocessors/#pyrevit.coreutils.markdown.preprocessors.ReferencePreprocessor.TITLE","title":"<code>TITLE = '[ ]*(\\\\\"(.*)\\\\\"|\\\\\\'(.*)\\\\\\'|\\\\((.*)\\\\))[ ]*'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/preprocessors/#pyrevit.coreutils.markdown.preprocessors.ReferencePreprocessor.RE","title":"<code>RE = re.compile('^[ ]{0,3}\\\\[([^\\\\]]*)\\\\]:\\\\s*([^ ]*)[ ]*(%s)?$' % TITLE, re.DOTALL)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/preprocessors/#pyrevit.coreutils.markdown.preprocessors.ReferencePreprocessor.TITLE_RE","title":"<code>TITLE_RE = re.compile('^%s$' % TITLE)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/preprocessors/#pyrevit.coreutils.markdown.preprocessors.ReferencePreprocessor-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/preprocessors/#pyrevit.coreutils.markdown.preprocessors.ReferencePreprocessor.run","title":"<code>run(lines)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/preprocessors.py</code> <pre><code>def run(self, lines):\n    new_text = []\n    while lines:\n        line = lines.pop(0)\n        m = self.RE.match(line)\n        if m:\n            id = m.group(1).strip().lower()\n            link = m.group(2).lstrip('&lt;').rstrip('&gt;')\n            t = m.group(5) or m.group(6) or m.group(7)\n            if not t:\n                # Check next line for title\n                tm = self.TITLE_RE.match(lines[0])\n                if tm:\n                    lines.pop(0)\n                    t = tm.group(2) or tm.group(3) or tm.group(4)\n            self.markdown.references[id] = (link, t)\n        else:\n            new_text.append(line)\n\n    return new_text  # + \"\\n\"\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/preprocessors/#pyrevit.coreutils.markdown.preprocessors-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/preprocessors/#pyrevit.coreutils.markdown.preprocessors.build_preprocessors","title":"<code>build_preprocessors(md_instance, **kwargs)</code>","text":"<p>Build the default set of preprocessors used by Markdown.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/preprocessors.py</code> <pre><code>def build_preprocessors(md_instance, **kwargs):\n    \"\"\"Build the default set of preprocessors used by Markdown.\"\"\"\n    preprocessors = odict.OrderedDict()\n    preprocessors['normalize_whitespace'] = NormalizeWhitespace(md_instance)\n    if md_instance.safeMode != 'escape':\n        preprocessors[\"html_block\"] = HtmlBlockPreprocessor(md_instance)\n    preprocessors[\"reference\"] = ReferencePreprocessor(md_instance)\n    return preprocessors\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/serializers/","title":"serializers","text":"<p>Add x/html serialization to Elementree.</p> <p>Taken from ElementTree 1.3 preview with slight modifications</p> <p>Copyright (c) 1999-2007 by Fredrik Lundh.  All rights reserved.</p> <p>fredrik@pythonware.com http://www.pythonware.com</p> <p>The ElementTree toolkit is</p> <p>Copyright (c) 1999-2007 by Fredrik Lundh</p> <p>By obtaining, using, and/or copying this software and/or its associated documentation, you agree that you have read, understood, and will comply with the following terms and conditions:</p> <p>Permission to use, copy, modify, and distribute this software and its associated documentation for any purpose and without fee is hereby granted, provided that the above copyright notice appears in all copies, and that both that copyright notice and this permission notice appear in supporting documentation, and that the name of Secret Labs AB or the author not be used in advertising or publicity pertaining to distribution of the software without specific, written prior permission.</p> <p>SECRET LABS AB AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANT- ABILITY AND FITNESS.  IN NO EVENT SHALL SECRET LABS AB OR THE AUTHOR BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.</p>"},{"location":"reference/pyrevit/coreutils/markdown/serializers/#pyrevit.coreutils.markdown.serializers-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/serializers/#pyrevit.coreutils.markdown.serializers.ElementTree","title":"<code>ElementTree = util.etree.ElementTree</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/serializers/#pyrevit.coreutils.markdown.serializers.QName","title":"<code>QName = util.etree.QName</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/serializers/#pyrevit.coreutils.markdown.serializers.Comment","title":"<code>Comment = util.etree.test_comment</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/serializers/#pyrevit.coreutils.markdown.serializers.PI","title":"<code>PI = util.etree.PI</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/serializers/#pyrevit.coreutils.markdown.serializers.ProcessingInstruction","title":"<code>ProcessingInstruction = util.etree.ProcessingInstruction</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/serializers/#pyrevit.coreutils.markdown.serializers.HTML_EMPTY","title":"<code>HTML_EMPTY = set(HTML_EMPTY)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/serializers/#pyrevit.coreutils.markdown.serializers-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/serializers/#pyrevit.coreutils.markdown.serializers.to_html_string","title":"<code>to_html_string(element)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/serializers.py</code> <pre><code>def to_html_string(element):\n    return _write_html(ElementTree(element).getroot(), format=\"html\")\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/serializers/#pyrevit.coreutils.markdown.serializers.to_xhtml_string","title":"<code>to_xhtml_string(element)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/serializers.py</code> <pre><code>def to_xhtml_string(element):\n    return _write_html(ElementTree(element).getroot(), format=\"xhtml\")\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/treeprocessors/","title":"treeprocessors","text":"<p>Markdown Treeprocessors.</p>"},{"location":"reference/pyrevit/coreutils/markdown/treeprocessors/#pyrevit.coreutils.markdown.treeprocessors-classes","title":"Classes","text":""},{"location":"reference/pyrevit/coreutils/markdown/treeprocessors/#pyrevit.coreutils.markdown.treeprocessors.Treeprocessor","title":"<code>Treeprocessor(markdown_instance=None)</code>","text":"<p>               Bases: <code>Processor</code></p> <p>Treeprocessors are run on the ElementTree object before serialization.</p> <p>Each Treeprocessor implements a \"run\" method that takes a pointer to an ElementTree, modifies it as necessary and returns an ElementTree object.</p> <p>Treeprocessors must extend markdown.Treeprocessor.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/util.py</code> <pre><code>def __init__(self, markdown_instance=None):\n    if markdown_instance:\n        self.markdown = markdown_instance\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/treeprocessors/#pyrevit.coreutils.markdown.treeprocessors.Treeprocessor-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/treeprocessors/#pyrevit.coreutils.markdown.treeprocessors.Treeprocessor.markdown","title":"<code>markdown = markdown_instance</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/treeprocessors/#pyrevit.coreutils.markdown.treeprocessors.Treeprocessor-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/treeprocessors/#pyrevit.coreutils.markdown.treeprocessors.Treeprocessor.run","title":"<code>run(root)</code>","text":"<p>Main treeprocessor method.</p> <p>Subclasses of Treeprocessor should implement a <code>run</code> method, which takes a root ElementTree. This method can return another ElementTree object, and the existing root ElementTree will be replaced, or it can modify the current tree and return None.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/treeprocessors.py</code> <pre><code>def run(self, root):\n    \"\"\"Main treeprocessor method.\n\n    Subclasses of Treeprocessor should implement a `run` method, which\n    takes a root ElementTree. This method can return another ElementTree\n    object, and the existing root ElementTree will be replaced, or it can\n    modify the current tree and return None.\n    \"\"\"\n    pass  # pragma: no cover\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/treeprocessors/#pyrevit.coreutils.markdown.treeprocessors.InlineProcessor","title":"<code>InlineProcessor(md)</code>","text":"<p>               Bases: <code>Treeprocessor</code></p> <p>A Treeprocessor that traverses a tree, applying inline patterns.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/treeprocessors.py</code> <pre><code>def __init__(self, md):\n    self.__placeholder_prefix = util.INLINE_PLACEHOLDER_PREFIX\n    self.__placeholder_suffix = util.ETX\n    self.__placeholder_length = 4 + len(self.__placeholder_prefix) \\\n                                  + len(self.__placeholder_suffix)\n    self.__placeholder_re = util.INLINE_PLACEHOLDER_RE\n    self.markdown = md\n    self.inlinePatterns = md.inlinePatterns\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/treeprocessors/#pyrevit.coreutils.markdown.treeprocessors.InlineProcessor-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/treeprocessors/#pyrevit.coreutils.markdown.treeprocessors.InlineProcessor.markdown","title":"<code>markdown = md</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/treeprocessors/#pyrevit.coreutils.markdown.treeprocessors.InlineProcessor.inlinePatterns","title":"<code>inlinePatterns = md.inlinePatterns</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/treeprocessors/#pyrevit.coreutils.markdown.treeprocessors.InlineProcessor-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/treeprocessors/#pyrevit.coreutils.markdown.treeprocessors.InlineProcessor.run","title":"<code>run(tree)</code>","text":"<p>Apply inline patterns to a parsed Markdown tree.</p> <p>Iterate over ElementTree, find elements with inline tag, apply inline patterns and append newly created Elements to tree.  If you don't want to process your data with inline paterns, instead of normal string, use subclass AtomicString:</p> <pre><code>node.text = markdown.AtomicString(\"This will not be processed.\")\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>tree</code> <code>ElementTree</code> <p>Markdown tree.</p> required <p>Returns:</p> Type Description <code>ElementTree</code> <p>Tree with applied inline patterns.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/treeprocessors.py</code> <pre><code>def run(self, tree):\n    \"\"\"Apply inline patterns to a parsed Markdown tree.\n\n    Iterate over ElementTree, find elements with inline tag, apply inline\n    patterns and append newly created Elements to tree.  If you don't\n    want to process your data with inline paterns, instead of normal\n    string, use subclass AtomicString:\n\n        node.text = markdown.AtomicString(\"This will not be processed.\")\n\n    Args:\n        tree (ElementTree): Markdown tree.\n\n    Returns:\n        (ElementTree): Tree with applied inline patterns.\n    \"\"\"\n    self.stashed_nodes = {}\n\n    stack = [tree]\n\n    while stack:\n        currElement = stack.pop()\n        insertQueue = []\n        for child in currElement:\n            if child.text and not isinstance(\n                child.text, util.AtomicString\n            ):\n                text = child.text\n                child.text = None\n                lst = self.__processPlaceholders(\n                    self.__handleInline(text), child\n                )\n                stack += lst\n                insertQueue.append((child, lst))\n            if child.tail:\n                tail = self.__handleInline(child.tail)\n                dumby = util.etree.Element('d')\n                child.tail = None\n                tailResult = self.__processPlaceholders(tail, dumby, False)\n                if dumby.tail:\n                    child.tail = dumby.tail\n                pos = list(currElement).index(child) + 1\n                tailResult.reverse()\n                for newChild in tailResult:\n                    currElement.insert(pos, newChild)\n            if len(child):\n                stack.append(child)\n\n        for element, lst in insertQueue:\n            if self.markdown.enable_attributes:\n                if element.text and isString(element.text):\n                    element.text = inlinepatterns.handleAttributes(\n                        element.text, element\n                    )\n            i = 0\n            for newChild in lst:\n                if self.markdown.enable_attributes:\n                    # Processing attributes\n                    if newChild.tail and isString(newChild.tail):\n                        newChild.tail = inlinepatterns.handleAttributes(\n                            newChild.tail, element\n                        )\n                    if newChild.text and isString(newChild.text):\n                        newChild.text = inlinepatterns.handleAttributes(\n                            newChild.text, newChild\n                        )\n                element.insert(i, newChild)\n                i += 1\n    return tree\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/treeprocessors/#pyrevit.coreutils.markdown.treeprocessors.PrettifyTreeprocessor","title":"<code>PrettifyTreeprocessor(markdown_instance=None)</code>","text":"<p>               Bases: <code>Treeprocessor</code></p> <p>Add linebreaks to the html document.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/util.py</code> <pre><code>def __init__(self, markdown_instance=None):\n    if markdown_instance:\n        self.markdown = markdown_instance\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/treeprocessors/#pyrevit.coreutils.markdown.treeprocessors.PrettifyTreeprocessor-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/treeprocessors/#pyrevit.coreutils.markdown.treeprocessors.PrettifyTreeprocessor.markdown","title":"<code>markdown = markdown_instance</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/treeprocessors/#pyrevit.coreutils.markdown.treeprocessors.PrettifyTreeprocessor-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/treeprocessors/#pyrevit.coreutils.markdown.treeprocessors.PrettifyTreeprocessor.run","title":"<code>run(root)</code>","text":"<p>Add linebreaks to ElementTree root object.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/treeprocessors.py</code> <pre><code>def run(self, root):\n    \"\"\"Add linebreaks to ElementTree root object.\"\"\"\n    self._prettifyETree(root)\n    # Do &lt;br /&gt;'s seperately as they are often in the middle of\n    # inline content and missed by _prettifyETree.\n    brs = root.iter('br')\n    for br in brs:\n        if not br.tail or not br.tail.strip():\n            br.tail = '\\n'\n        else:\n            br.tail = '\\n%s' % br.tail\n    # Clean up extra empty lines at end of code blocks.\n    pres = root.iter('pre')\n    for pre in pres:\n        if len(pre) and pre[0].tag == 'code':\n            pre[0].text = util.AtomicString(pre[0].text.rstrip() + '\\n')\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/treeprocessors/#pyrevit.coreutils.markdown.treeprocessors-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/treeprocessors/#pyrevit.coreutils.markdown.treeprocessors.build_treeprocessors","title":"<code>build_treeprocessors(md_instance, **kwargs)</code>","text":"<p>Build the default treeprocessors for Markdown.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/treeprocessors.py</code> <pre><code>def build_treeprocessors(md_instance, **kwargs):\n    \"\"\"Build the default treeprocessors for Markdown.\"\"\"\n    treeprocessors = odict.OrderedDict()\n    treeprocessors[\"inline\"] = InlineProcessor(md_instance)\n    treeprocessors[\"prettify\"] = PrettifyTreeprocessor(md_instance)\n    return treeprocessors\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/treeprocessors/#pyrevit.coreutils.markdown.treeprocessors.isString","title":"<code>isString(s)</code>","text":"<p>Check if it's string.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/treeprocessors.py</code> <pre><code>def isString(s):\n    \"\"\"Check if it's string.\"\"\"\n    if not isinstance(s, util.AtomicString):\n        return isinstance(s, util.string_type)\n    return False\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/util/","title":"util","text":"<p>Markdown utils.</p>"},{"location":"reference/pyrevit/coreutils/markdown/util/#pyrevit.coreutils.markdown.util-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/util/#pyrevit.coreutils.markdown.util.PY3","title":"<code>PY3 = sys.version_info[0] == 3</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/util/#pyrevit.coreutils.markdown.util.string_type","title":"<code>string_type = str</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/util/#pyrevit.coreutils.markdown.util.text_type","title":"<code>text_type = str</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/util/#pyrevit.coreutils.markdown.util.int2str","title":"<code>int2str = chr</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/util/#pyrevit.coreutils.markdown.util.BLOCK_LEVEL_ELEMENTS","title":"<code>BLOCK_LEVEL_ELEMENTS = re.compile('^(p|div|h[1-6]|blockquote|pre|table|dl|ol|ul|script|noscript|form|fieldset|iframe|math|hr|hr/|style|li|dt|dd|thead|tbody|tr|th|td|section|footer|header|group|figure|figcaption|aside|article|canvas|output|progress|video|nav|main)$', re.IGNORECASE)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/util/#pyrevit.coreutils.markdown.util.STX","title":"<code>STX = '\\x02'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/util/#pyrevit.coreutils.markdown.util.ETX","title":"<code>ETX = '\\x03'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/util/#pyrevit.coreutils.markdown.util.INLINE_PLACEHOLDER_PREFIX","title":"<code>INLINE_PLACEHOLDER_PREFIX = STX + 'klzzwxh:'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/util/#pyrevit.coreutils.markdown.util.INLINE_PLACEHOLDER","title":"<code>INLINE_PLACEHOLDER = INLINE_PLACEHOLDER_PREFIX + '%s' + ETX</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/util/#pyrevit.coreutils.markdown.util.INLINE_PLACEHOLDER_RE","title":"<code>INLINE_PLACEHOLDER_RE = re.compile(INLINE_PLACEHOLDER % '([0-9]+)')</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/util/#pyrevit.coreutils.markdown.util.AMP_SUBSTITUTE","title":"<code>AMP_SUBSTITUTE = STX + 'amp' + ETX</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/util/#pyrevit.coreutils.markdown.util.HTML_PLACEHOLDER","title":"<code>HTML_PLACEHOLDER = STX + 'wzxhzdk:%s' + ETX</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/util/#pyrevit.coreutils.markdown.util.HTML_PLACEHOLDER_RE","title":"<code>HTML_PLACEHOLDER_RE = re.compile(HTML_PLACEHOLDER % '([0-9]+)')</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/util/#pyrevit.coreutils.markdown.util.TAG_PLACEHOLDER","title":"<code>TAG_PLACEHOLDER = STX + 'hzzhzkh:%s' + ETX</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/util/#pyrevit.coreutils.markdown.util.TAG_PLACEHOLDER--constants-you-probably-do-not-need-to-change","title":"Constants you probably do not need to change","text":""},{"location":"reference/pyrevit/coreutils/markdown/util/#pyrevit.coreutils.markdown.util.RTL_BIDI_RANGES","title":"<code>RTL_BIDI_RANGES = (('\\u0590', '\u07ff'), ('\u2d30', '\u2d7f'))</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/util/#pyrevit.coreutils.markdown.util-classes","title":"Classes","text":""},{"location":"reference/pyrevit/coreutils/markdown/util/#pyrevit.coreutils.markdown.util.AtomicString","title":"<code>AtomicString</code>","text":"<p>               Bases: <code>unicode</code></p> <p>A string which should not be further processed.</p>"},{"location":"reference/pyrevit/coreutils/markdown/util/#pyrevit.coreutils.markdown.util.Processor","title":"<code>Processor(markdown_instance=None)</code>","text":"<p>               Bases: <code>object</code></p> <p>Base class for Markdown processors.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/util.py</code> <pre><code>def __init__(self, markdown_instance=None):\n    if markdown_instance:\n        self.markdown = markdown_instance\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/util/#pyrevit.coreutils.markdown.util.Processor-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/util/#pyrevit.coreutils.markdown.util.Processor.markdown","title":"<code>markdown = markdown_instance</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/util/#pyrevit.coreutils.markdown.util.HtmlStash","title":"<code>HtmlStash()</code>","text":"<p>               Bases: <code>object</code></p> <p>HTML objects stash.</p> <p>Create a HtmlStash.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/util.py</code> <pre><code>def __init__(self):\n    \"\"\"Create a HtmlStash.\"\"\"\n    self.html_counter = 0  # for counting inline html segments\n    self.rawHtmlBlocks = []\n    self.tag_counter = 0\n    self.tag_data = []  # list of dictionaries in the order tags appear\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/util/#pyrevit.coreutils.markdown.util.HtmlStash-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/util/#pyrevit.coreutils.markdown.util.HtmlStash.html_counter","title":"<code>html_counter = 0</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/util/#pyrevit.coreutils.markdown.util.HtmlStash.rawHtmlBlocks","title":"<code>rawHtmlBlocks = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/util/#pyrevit.coreutils.markdown.util.HtmlStash.tag_counter","title":"<code>tag_counter = 0</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/util/#pyrevit.coreutils.markdown.util.HtmlStash.tag_data","title":"<code>tag_data = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/util/#pyrevit.coreutils.markdown.util.HtmlStash-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/util/#pyrevit.coreutils.markdown.util.HtmlStash.store","title":"<code>store(html, safe=False)</code>","text":"<p>Saves an HTML segment for later reinsertion.</p> <p>Returns a placeholder string that needs to be inserted into the document.</p> <p>Parameters:</p> Name Type Description Default <code>html</code> <code>str</code> <p>an html segment</p> required <code>safe</code> <code>bool</code> <p>label an html segment as safe for safemode</p> <code>False</code> <p>Returns:</p> Type Description <code>str</code> <p>a placeholder string</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/util.py</code> <pre><code>def store(self, html, safe=False):\n    \"\"\"Saves an HTML segment for later reinsertion.\n\n    Returns a placeholder string that needs to be inserted into the\n    document.\n\n    Args:\n        html (str): an html segment\n        safe (bool): label an html segment as safe for safemode\n\n    Returns:\n        (str): a placeholder string\n    \"\"\"\n    self.rawHtmlBlocks.append((html, safe))\n    placeholder = self.get_placeholder(self.html_counter)\n    self.html_counter += 1\n    return placeholder\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/util/#pyrevit.coreutils.markdown.util.HtmlStash.reset","title":"<code>reset()</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/util.py</code> <pre><code>def reset(self):\n    self.html_counter = 0\n    self.rawHtmlBlocks = []\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/util/#pyrevit.coreutils.markdown.util.HtmlStash.get_placeholder","title":"<code>get_placeholder(key)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/util.py</code> <pre><code>def get_placeholder(self, key):\n    return HTML_PLACEHOLDER % key\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/util/#pyrevit.coreutils.markdown.util.HtmlStash.store_tag","title":"<code>store_tag(tag, attrs, left_index, right_index)</code>","text":"<p>Store tag data and return a placeholder.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/util.py</code> <pre><code>def store_tag(self, tag, attrs, left_index, right_index):\n    \"\"\"Store tag data and return a placeholder.\"\"\"\n    self.tag_data.append({'tag': tag, 'attrs': attrs,\n                          'left_index': left_index,\n                          'right_index': right_index})\n    placeholder = TAG_PLACEHOLDER % unicode(self.tag_counter)\n    self.tag_counter += 1  # equal to the tag's index in self.tag_data\n    return placeholder\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/util/#pyrevit.coreutils.markdown.util-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/util/#pyrevit.coreutils.markdown.util.isBlockLevel","title":"<code>isBlockLevel(tag)</code>","text":"<p>Check if the tag is a block level HTML tag.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/util.py</code> <pre><code>def isBlockLevel(tag):\n    \"\"\"Check if the tag is a block level HTML tag.\"\"\"\n    if isinstance(tag, string_type):\n        return BLOCK_LEVEL_ELEMENTS.match(tag)\n    # Some ElementTree tags are not strings, so return False.\n    return False\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/util/#pyrevit.coreutils.markdown.util.parseBoolValue","title":"<code>parseBoolValue(value, fail_on_errors=True, preserve_none=False)</code>","text":"<p>Parses a string representing bool value.</p> <p>If parsing was successful, returns True or False. If preserve_none=True, returns True, False, or None. If parsing was not successful, raises ValueError, or, if fail_on_errors=False, returns None.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>str</code> <p>String to parse.</p> required <code>fail_on_errors</code> <code>bool</code> <p>If True, raises ValueError.</p> <code>True</code> <code>preserve_none</code> <code>bool</code> <p>If True and value is None, returns None.</p> <code>False</code> <p>Returns:</p> Type Description <code>bool</code> <p>boolean value</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/util.py</code> <pre><code>def parseBoolValue(value, fail_on_errors=True, preserve_none=False):\n    \"\"\"Parses a string representing bool value.\n\n    If parsing was successful, returns True or False.\n    If preserve_none=True, returns True, False, or None.\n    If parsing was not successful, raises ValueError, or, if\n    fail_on_errors=False, returns None.\n\n\n    Args:\n        value (str): String to parse.\n        fail_on_errors (bool): If True, raises ValueError.\n        preserve_none (bool): If True and value is None, returns None.\n\n\n    Returns:\n        (bool): boolean value\n    \"\"\"\n    if not isinstance(value, string_type):\n        if preserve_none and value is None:\n            return value\n        return bool(value)\n    elif preserve_none and value.lower() == 'none':\n        return None\n    elif value.lower() in ('true', 'yes', 'y', 'on', '1'):\n        return True\n    elif value.lower() in ('false', 'no', 'n', 'off', '0', 'none'):\n        return False\n    elif fail_on_errors:\n        raise ValueError('Cannot parse bool value: %r' % value)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/","title":"extensions","text":"<p>Markdown Extensions.</p>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/#pyrevit.coreutils.markdown.extensions-classes","title":"Classes","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/#pyrevit.coreutils.markdown.extensions.Extension","title":"<code>Extension(*args, **kwargs)</code>","text":"<p>               Bases: <code>object</code></p> <p>Base class for extensions to subclass.</p> <p>Initiate Extension and set up configs.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def __init__(self, *args, **kwargs):\n    \"\"\"Initiate Extension and set up configs.\"\"\"\n    # check for configs arg for backward compat.\n    # (there only ever used to be one so we use arg[0])\n    if len(args):\n        if args[0] is not None:\n            self.setConfigs(args[0])\n        warnings.warn('Extension classes accepting positional args is '\n                      'pending Deprecation. Each setting should be '\n                      'passed into the Class as a keyword. Positional '\n                      'args are deprecated and will raise '\n                      'an error in version 2.7. See the Release Notes for '\n                      'Python-Markdown version 2.6 for more info.',\n                      DeprecationWarning)\n    # check for configs kwarg for backward compat.\n    if 'configs' in kwargs.keys():\n        if kwargs['configs'] is not None:\n            self.setConfigs(kwargs.pop('configs', {}))\n        warnings.warn('Extension classes accepting a dict on the single '\n                      'keyword \"config\" is pending Deprecation. Each '\n                      'setting should be passed into the Class as a '\n                      'keyword directly. The \"config\" keyword is '\n                      'deprecated and raise an error in '\n                      'version 2.7. See the Release Notes for '\n                      'Python-Markdown version 2.6 for more info.',\n                      DeprecationWarning)\n    # finally, use kwargs\n    self.setConfigs(kwargs)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/#pyrevit.coreutils.markdown.extensions.Extension-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/#pyrevit.coreutils.markdown.extensions.Extension.config","title":"<code>config = {}</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/#pyrevit.coreutils.markdown.extensions.Extension-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/#pyrevit.coreutils.markdown.extensions.Extension.getConfig","title":"<code>getConfig(key, default='')</code>","text":"<p>Return a setting for the given key or an empty string.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def getConfig(self, key, default=''):\n    \"\"\"Return a setting for the given key or an empty string.\"\"\"\n    if key in self.config:\n        return self.config[key][0]\n    else:\n        return default\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/#pyrevit.coreutils.markdown.extensions.Extension.getConfigs","title":"<code>getConfigs()</code>","text":"<p>Return all configs settings as a dict.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def getConfigs(self):\n    \"\"\"Return all configs settings as a dict.\"\"\"\n    return dict([(key, self.getConfig(key)) for key in self.config.keys()])\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/#pyrevit.coreutils.markdown.extensions.Extension.getConfigInfo","title":"<code>getConfigInfo()</code>","text":"<p>Return all config descriptions as a list of tuples.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def getConfigInfo(self):\n    \"\"\"Return all config descriptions as a list of tuples.\"\"\"\n    return [(key, self.config[key][1]) for key in self.config.keys()]\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/#pyrevit.coreutils.markdown.extensions.Extension.setConfig","title":"<code>setConfig(key, value)</code>","text":"<p>Set a config setting for <code>key</code> with the given <code>value</code>.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def setConfig(self, key, value):\n    \"\"\"Set a config setting for `key` with the given `value`.\"\"\"\n    if isinstance(self.config[key][0], bool):\n        value = parseBoolValue(value)\n    if self.config[key][0] is None:\n        value = parseBoolValue(value, preserve_none=True)\n    self.config[key][0] = value\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/#pyrevit.coreutils.markdown.extensions.Extension.setConfigs","title":"<code>setConfigs(items)</code>","text":"<p>Set multiple config settings given a dict or list of tuples.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def setConfigs(self, items):\n    \"\"\"Set multiple config settings given a dict or list of tuples.\"\"\"\n    if hasattr(items, 'items'):\n        # it's a dict\n        items = items.items()\n    for key, value in items:\n        self.setConfig(key, value)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/#pyrevit.coreutils.markdown.extensions.Extension.extendMarkdown","title":"<code>extendMarkdown(md, md_globals)</code>","text":"<p>Add the various proccesors and patterns to the Markdown Instance.</p> <p>This method must be overriden by every extension.</p> <p>Parameters:</p> Name Type Description Default <code>md</code> <code>Markdown</code> <p>The Markdown instance.</p> required <code>md_globals</code> <code>list[Any]</code> <p>Global variables in the markdown module namespace.</p> required Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def extendMarkdown(self, md, md_globals):\n    \"\"\"Add the various proccesors and patterns to the Markdown Instance.\n\n    This method must be overriden by every extension.\n\n    Args:\n        md (Markdown): The Markdown instance.\n        md_globals (list[Any]): Global variables in the markdown module namespace.\n\n    \"\"\"\n    raise NotImplementedError(\n        'Extension \"%s.%s\" must define an \"extendMarkdown\"'\n        'method.' % (self.__class__.__module__, self.__class__.__name__)\n    )\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/#pyrevit.coreutils.markdown.extensions-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/abbr/","title":"abbr","text":"<p>Abbreviation Extension for Python-Markdown.</p> <p>This extension adds abbreviation handling to Python-Markdown.</p> <p>See https://pythonhosted.org/Markdown/extensions/abbreviations.html for documentation.</p> <p>Oringinal code Copyright 2007-2008 Waylan Limberg and  Seemant Kulleen</p> <p>All changes Copyright 2008-2014 The Python Markdown Project</p> <p>License: BSD</p>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/abbr/#pyrevit.coreutils.markdown.extensions.abbr-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/abbr/#pyrevit.coreutils.markdown.extensions.abbr.ABBR_REF_RE","title":"<code>ABBR_REF_RE = re.compile('[*]\\\\[(?P&lt;abbr&gt;[^\\\\]]*)\\\\][ ]?:\\\\s*(?P&lt;title&gt;.*)')</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/abbr/#pyrevit.coreutils.markdown.extensions.abbr-classes","title":"Classes","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/abbr/#pyrevit.coreutils.markdown.extensions.abbr.AbbrExtension","title":"<code>AbbrExtension(*args, **kwargs)</code>","text":"<p>               Bases: <code>Extension</code></p> <p>Abbreviation Extension for Python-Markdown.</p> <p>Initiate Extension and set up configs.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def __init__(self, *args, **kwargs):\n    \"\"\"Initiate Extension and set up configs.\"\"\"\n    # check for configs arg for backward compat.\n    # (there only ever used to be one so we use arg[0])\n    if len(args):\n        if args[0] is not None:\n            self.setConfigs(args[0])\n        warnings.warn('Extension classes accepting positional args is '\n                      'pending Deprecation. Each setting should be '\n                      'passed into the Class as a keyword. Positional '\n                      'args are deprecated and will raise '\n                      'an error in version 2.7. See the Release Notes for '\n                      'Python-Markdown version 2.6 for more info.',\n                      DeprecationWarning)\n    # check for configs kwarg for backward compat.\n    if 'configs' in kwargs.keys():\n        if kwargs['configs'] is not None:\n            self.setConfigs(kwargs.pop('configs', {}))\n        warnings.warn('Extension classes accepting a dict on the single '\n                      'keyword \"config\" is pending Deprecation. Each '\n                      'setting should be passed into the Class as a '\n                      'keyword directly. The \"config\" keyword is '\n                      'deprecated and raise an error in '\n                      'version 2.7. See the Release Notes for '\n                      'Python-Markdown version 2.6 for more info.',\n                      DeprecationWarning)\n    # finally, use kwargs\n    self.setConfigs(kwargs)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/abbr/#pyrevit.coreutils.markdown.extensions.abbr.AbbrExtension-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/abbr/#pyrevit.coreutils.markdown.extensions.abbr.AbbrExtension.config","title":"<code>config = {}</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/abbr/#pyrevit.coreutils.markdown.extensions.abbr.AbbrExtension-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/abbr/#pyrevit.coreutils.markdown.extensions.abbr.AbbrExtension.getConfig","title":"<code>getConfig(key, default='')</code>","text":"<p>Return a setting for the given key or an empty string.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def getConfig(self, key, default=''):\n    \"\"\"Return a setting for the given key or an empty string.\"\"\"\n    if key in self.config:\n        return self.config[key][0]\n    else:\n        return default\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/abbr/#pyrevit.coreutils.markdown.extensions.abbr.AbbrExtension.getConfigs","title":"<code>getConfigs()</code>","text":"<p>Return all configs settings as a dict.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def getConfigs(self):\n    \"\"\"Return all configs settings as a dict.\"\"\"\n    return dict([(key, self.getConfig(key)) for key in self.config.keys()])\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/abbr/#pyrevit.coreutils.markdown.extensions.abbr.AbbrExtension.getConfigInfo","title":"<code>getConfigInfo()</code>","text":"<p>Return all config descriptions as a list of tuples.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def getConfigInfo(self):\n    \"\"\"Return all config descriptions as a list of tuples.\"\"\"\n    return [(key, self.config[key][1]) for key in self.config.keys()]\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/abbr/#pyrevit.coreutils.markdown.extensions.abbr.AbbrExtension.setConfig","title":"<code>setConfig(key, value)</code>","text":"<p>Set a config setting for <code>key</code> with the given <code>value</code>.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def setConfig(self, key, value):\n    \"\"\"Set a config setting for `key` with the given `value`.\"\"\"\n    if isinstance(self.config[key][0], bool):\n        value = parseBoolValue(value)\n    if self.config[key][0] is None:\n        value = parseBoolValue(value, preserve_none=True)\n    self.config[key][0] = value\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/abbr/#pyrevit.coreutils.markdown.extensions.abbr.AbbrExtension.setConfigs","title":"<code>setConfigs(items)</code>","text":"<p>Set multiple config settings given a dict or list of tuples.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def setConfigs(self, items):\n    \"\"\"Set multiple config settings given a dict or list of tuples.\"\"\"\n    if hasattr(items, 'items'):\n        # it's a dict\n        items = items.items()\n    for key, value in items:\n        self.setConfig(key, value)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/abbr/#pyrevit.coreutils.markdown.extensions.abbr.AbbrExtension.extendMarkdown","title":"<code>extendMarkdown(md, md_globals)</code>","text":"<p>Insert AbbrPreprocessor before ReferencePreprocessor.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/abbr.py</code> <pre><code>def extendMarkdown(self, md, md_globals):\n    \"\"\"Insert AbbrPreprocessor before ReferencePreprocessor.\"\"\"\n    md.preprocessors.add('abbr', AbbrPreprocessor(md), '&lt;reference')\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/abbr/#pyrevit.coreutils.markdown.extensions.abbr.AbbrPreprocessor","title":"<code>AbbrPreprocessor(markdown_instance=None)</code>","text":"<p>               Bases: <code>Preprocessor</code></p> <p>Abbreviation Preprocessor - parse text for abbr references.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/util.py</code> <pre><code>def __init__(self, markdown_instance=None):\n    if markdown_instance:\n        self.markdown = markdown_instance\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/abbr/#pyrevit.coreutils.markdown.extensions.abbr.AbbrPreprocessor-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/abbr/#pyrevit.coreutils.markdown.extensions.abbr.AbbrPreprocessor.markdown","title":"<code>markdown = markdown_instance</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/abbr/#pyrevit.coreutils.markdown.extensions.abbr.AbbrPreprocessor-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/abbr/#pyrevit.coreutils.markdown.extensions.abbr.AbbrPreprocessor.run","title":"<code>run(lines)</code>","text":"<p>Find and remove all Abbreviation references from the text.</p> <p>Each reference is set as a new AbbrPattern in the markdown instance.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/abbr.py</code> <pre><code>def run(self, lines):\n    \"\"\"Find and remove all Abbreviation references from the text.\n\n    Each reference is set as a new AbbrPattern in the markdown instance.\n    \"\"\"\n    new_text = []\n    for line in lines:\n        m = ABBR_REF_RE.match(line)\n        if m:\n            abbr = m.group('abbr').strip()\n            title = m.group('title').strip()\n            self.markdown.inlinePatterns['abbr-%s' % abbr] = \\\n                AbbrPattern(self._generate_pattern(abbr), title)\n        else:\n            new_text.append(line)\n    return new_text\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/abbr/#pyrevit.coreutils.markdown.extensions.abbr.AbbrPattern","title":"<code>AbbrPattern(pattern, title)</code>","text":"<p>               Bases: <code>Pattern</code></p> <p>Abbreviation inline pattern.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/abbr.py</code> <pre><code>def __init__(self, pattern, title):\n    super(AbbrPattern, self).__init__(pattern)\n    self.title = title\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/abbr/#pyrevit.coreutils.markdown.extensions.abbr.AbbrPattern-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/abbr/#pyrevit.coreutils.markdown.extensions.abbr.AbbrPattern.pattern","title":"<code>pattern = pattern</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/abbr/#pyrevit.coreutils.markdown.extensions.abbr.AbbrPattern.compiled_re","title":"<code>compiled_re = re.compile('^(.*?)%s(.*)$' % pattern, re.DOTALL | re.UNICODE)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/abbr/#pyrevit.coreutils.markdown.extensions.abbr.AbbrPattern.safe_mode","title":"<code>safe_mode = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/abbr/#pyrevit.coreutils.markdown.extensions.abbr.AbbrPattern.markdown","title":"<code>markdown = markdown_instance</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/abbr/#pyrevit.coreutils.markdown.extensions.abbr.AbbrPattern.title","title":"<code>title = title</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/abbr/#pyrevit.coreutils.markdown.extensions.abbr.AbbrPattern-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/abbr/#pyrevit.coreutils.markdown.extensions.abbr.AbbrPattern.getCompiledRegExp","title":"<code>getCompiledRegExp()</code>","text":"<p>Return a compiled regular expression.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def getCompiledRegExp(self):\n    \"\"\"Return a compiled regular expression.\"\"\"\n    return self.compiled_re\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/abbr/#pyrevit.coreutils.markdown.extensions.abbr.AbbrPattern.type","title":"<code>type()</code>","text":"<p>Return class name, to define pattern type.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def type(self):\n    \"\"\"Return class name, to define pattern type.\"\"\"\n    return self.__class__.__name__\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/abbr/#pyrevit.coreutils.markdown.extensions.abbr.AbbrPattern.unescape","title":"<code>unescape(text)</code>","text":"<p>Return unescaped text given text with an inline placeholder.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def unescape(self, text):\n    \"\"\"Return unescaped text given text with an inline placeholder.\"\"\"\n    try:\n        stash = self.markdown.treeprocessors['inline'].stashed_nodes\n    except KeyError:  # pragma: no cover\n        return text\n\n    def itertext(el):  # pragma: no cover\n        \"\"\"Reimplement Element.itertext for older python versions.\"\"\"\n        tag = el.tag\n        if not isinstance(tag, util.string_type) and tag is not None:\n            return\n        if el.text:\n            yield el.text\n        for e in el:\n            for s in itertext(e):\n                yield s\n            if e.tail:\n                yield e.tail\n\n    def get_stash(m):\n        id = m.group(1)\n        if id in stash:\n            value = stash.get(id)\n            if isinstance(value, util.string_type):\n                return value\n            else:\n                # An etree Element - return text content only\n                return ''.join(itertext(value))\n    return util.INLINE_PLACEHOLDER_RE.sub(get_stash, text)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/abbr/#pyrevit.coreutils.markdown.extensions.abbr.AbbrPattern.handleMatch","title":"<code>handleMatch(m)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/abbr.py</code> <pre><code>def handleMatch(self, m):\n    abbr = etree.Element('abbr')\n    abbr.text = AtomicString(m.group('abbr'))\n    abbr.set('title', self.title)\n    return abbr\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/abbr/#pyrevit.coreutils.markdown.extensions.abbr-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/abbr/#pyrevit.coreutils.markdown.extensions.abbr.makeExtension","title":"<code>makeExtension(*args, **kwargs)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/abbr.py</code> <pre><code>def makeExtension(*args, **kwargs):\n    return AbbrExtension(*args, **kwargs)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/admonition/","title":"admonition","text":"<p>Admonition extension for Python-Markdown.</p> <p>Adds rST-style admonitions. Inspired by rST feature with the same name.</p> <p>See https://pythonhosted.org/Markdown/extensions/admonition.html for documentation.</p> <p>Original code Copyright Tiago Serafim.</p> <p>All changes Copyright The Python Markdown Project</p> <p>License: BSD</p>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/admonition/#pyrevit.coreutils.markdown.extensions.admonition-classes","title":"Classes","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/admonition/#pyrevit.coreutils.markdown.extensions.admonition.AdmonitionExtension","title":"<code>AdmonitionExtension(*args, **kwargs)</code>","text":"<p>               Bases: <code>Extension</code></p> <p>Admonition extension for Python-Markdown.</p> <p>Initiate Extension and set up configs.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def __init__(self, *args, **kwargs):\n    \"\"\"Initiate Extension and set up configs.\"\"\"\n    # check for configs arg for backward compat.\n    # (there only ever used to be one so we use arg[0])\n    if len(args):\n        if args[0] is not None:\n            self.setConfigs(args[0])\n        warnings.warn('Extension classes accepting positional args is '\n                      'pending Deprecation. Each setting should be '\n                      'passed into the Class as a keyword. Positional '\n                      'args are deprecated and will raise '\n                      'an error in version 2.7. See the Release Notes for '\n                      'Python-Markdown version 2.6 for more info.',\n                      DeprecationWarning)\n    # check for configs kwarg for backward compat.\n    if 'configs' in kwargs.keys():\n        if kwargs['configs'] is not None:\n            self.setConfigs(kwargs.pop('configs', {}))\n        warnings.warn('Extension classes accepting a dict on the single '\n                      'keyword \"config\" is pending Deprecation. Each '\n                      'setting should be passed into the Class as a '\n                      'keyword directly. The \"config\" keyword is '\n                      'deprecated and raise an error in '\n                      'version 2.7. See the Release Notes for '\n                      'Python-Markdown version 2.6 for more info.',\n                      DeprecationWarning)\n    # finally, use kwargs\n    self.setConfigs(kwargs)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/admonition/#pyrevit.coreutils.markdown.extensions.admonition.AdmonitionExtension-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/admonition/#pyrevit.coreutils.markdown.extensions.admonition.AdmonitionExtension.config","title":"<code>config = {}</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/admonition/#pyrevit.coreutils.markdown.extensions.admonition.AdmonitionExtension-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/admonition/#pyrevit.coreutils.markdown.extensions.admonition.AdmonitionExtension.getConfig","title":"<code>getConfig(key, default='')</code>","text":"<p>Return a setting for the given key or an empty string.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def getConfig(self, key, default=''):\n    \"\"\"Return a setting for the given key or an empty string.\"\"\"\n    if key in self.config:\n        return self.config[key][0]\n    else:\n        return default\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/admonition/#pyrevit.coreutils.markdown.extensions.admonition.AdmonitionExtension.getConfigs","title":"<code>getConfigs()</code>","text":"<p>Return all configs settings as a dict.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def getConfigs(self):\n    \"\"\"Return all configs settings as a dict.\"\"\"\n    return dict([(key, self.getConfig(key)) for key in self.config.keys()])\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/admonition/#pyrevit.coreutils.markdown.extensions.admonition.AdmonitionExtension.getConfigInfo","title":"<code>getConfigInfo()</code>","text":"<p>Return all config descriptions as a list of tuples.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def getConfigInfo(self):\n    \"\"\"Return all config descriptions as a list of tuples.\"\"\"\n    return [(key, self.config[key][1]) for key in self.config.keys()]\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/admonition/#pyrevit.coreutils.markdown.extensions.admonition.AdmonitionExtension.setConfig","title":"<code>setConfig(key, value)</code>","text":"<p>Set a config setting for <code>key</code> with the given <code>value</code>.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def setConfig(self, key, value):\n    \"\"\"Set a config setting for `key` with the given `value`.\"\"\"\n    if isinstance(self.config[key][0], bool):\n        value = parseBoolValue(value)\n    if self.config[key][0] is None:\n        value = parseBoolValue(value, preserve_none=True)\n    self.config[key][0] = value\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/admonition/#pyrevit.coreutils.markdown.extensions.admonition.AdmonitionExtension.setConfigs","title":"<code>setConfigs(items)</code>","text":"<p>Set multiple config settings given a dict or list of tuples.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def setConfigs(self, items):\n    \"\"\"Set multiple config settings given a dict or list of tuples.\"\"\"\n    if hasattr(items, 'items'):\n        # it's a dict\n        items = items.items()\n    for key, value in items:\n        self.setConfig(key, value)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/admonition/#pyrevit.coreutils.markdown.extensions.admonition.AdmonitionExtension.extendMarkdown","title":"<code>extendMarkdown(md, md_globals)</code>","text":"<p>Add Admonition to Markdown instance.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/admonition.py</code> <pre><code>def extendMarkdown(self, md, md_globals):\n    \"\"\"Add Admonition to Markdown instance.\"\"\"\n    md.registerExtension(self)\n\n    md.parser.blockprocessors.add('admonition',\n                                  AdmonitionProcessor(md.parser),\n                                  '_begin')\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/admonition/#pyrevit.coreutils.markdown.extensions.admonition.AdmonitionProcessor","title":"<code>AdmonitionProcessor(parser)</code>","text":"<p>               Bases: <code>BlockProcessor</code></p> <p>Admonition processor.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def __init__(self, parser):\n    self.parser = parser\n    self.tab_length = parser.markdown.tab_length\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/admonition/#pyrevit.coreutils.markdown.extensions.admonition.AdmonitionProcessor-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/admonition/#pyrevit.coreutils.markdown.extensions.admonition.AdmonitionProcessor.parser","title":"<code>parser = parser</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/admonition/#pyrevit.coreutils.markdown.extensions.admonition.AdmonitionProcessor.tab_length","title":"<code>tab_length = parser.markdown.tab_length</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/admonition/#pyrevit.coreutils.markdown.extensions.admonition.AdmonitionProcessor.CLASSNAME","title":"<code>CLASSNAME = 'admonition'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/admonition/#pyrevit.coreutils.markdown.extensions.admonition.AdmonitionProcessor.CLASSNAME_TITLE","title":"<code>CLASSNAME_TITLE = 'admonition-title'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/admonition/#pyrevit.coreutils.markdown.extensions.admonition.AdmonitionProcessor.RE","title":"<code>RE = re.compile('(?:^|\\\\n)!!!\\\\ ?([\\\\w\\\\-]+)(?:\\\\ \"(.*?)\")?')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/admonition/#pyrevit.coreutils.markdown.extensions.admonition.AdmonitionProcessor-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/admonition/#pyrevit.coreutils.markdown.extensions.admonition.AdmonitionProcessor.lastChild","title":"<code>lastChild(parent)</code>","text":"<p>Return the last child of an etree element.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def lastChild(self, parent):\n    \"\"\"Return the last child of an etree element.\"\"\"\n    if len(parent):\n        return parent[-1]\n    else:\n        return None\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/admonition/#pyrevit.coreutils.markdown.extensions.admonition.AdmonitionProcessor.detab","title":"<code>detab(text)</code>","text":"<p>Remove a tab from the front of each line of the given text.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def detab(self, text):\n    \"\"\"Remove a tab from the front of each line of the given text.\"\"\"\n    newtext = []\n    lines = text.split('\\n')\n    for line in lines:\n        if line.startswith(' '*self.tab_length):\n            newtext.append(line[self.tab_length:])\n        elif not line.strip():\n            newtext.append('')\n        else:\n            break\n    return '\\n'.join(newtext), '\\n'.join(lines[len(newtext):])\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/admonition/#pyrevit.coreutils.markdown.extensions.admonition.AdmonitionProcessor.looseDetab","title":"<code>looseDetab(text, level=1)</code>","text":"<p>Remove a tab from front of lines but allowing dedented lines.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def looseDetab(self, text, level=1):\n    \"\"\"Remove a tab from front of lines but allowing dedented lines.\"\"\"\n    lines = text.split('\\n')\n    for i in range(len(lines)):\n        if lines[i].startswith(' '*self.tab_length*level):\n            lines[i] = lines[i][self.tab_length*level:]\n    return '\\n'.join(lines)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/admonition/#pyrevit.coreutils.markdown.extensions.admonition.AdmonitionProcessor.test","title":"<code>test(parent, block)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/admonition.py</code> <pre><code>def test(self, parent, block):\n    sibling = self.lastChild(parent)\n    return self.RE.search(block) or \\\n        (block.startswith(' ' * self.tab_length) and sibling is not None and\n         sibling.get('class', '').find(self.CLASSNAME) != -1)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/admonition/#pyrevit.coreutils.markdown.extensions.admonition.AdmonitionProcessor.run","title":"<code>run(parent, blocks)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/admonition.py</code> <pre><code>def run(self, parent, blocks):\n    sibling = self.lastChild(parent)\n    block = blocks.pop(0)\n    m = self.RE.search(block)\n\n    if m:\n        block = block[m.end() + 1:]  # removes the first line\n\n    block, theRest = self.detab(block)\n\n    if m:\n        klass, title = self.get_class_and_title(m)\n        div = etree.SubElement(parent, 'div')\n        div.set('class', '%s %s' % (self.CLASSNAME, klass))\n        if title:\n            p = etree.SubElement(div, 'p')\n            p.text = title\n            p.set('class', self.CLASSNAME_TITLE)\n    else:\n        div = sibling\n\n    self.parser.parseChunk(div, block)\n\n    if theRest:\n        # This block contained unindented line(s) after the first indented\n        # line. Insert these lines as the first block of the master blocks\n        # list for future processing.\n        blocks.insert(0, theRest)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/admonition/#pyrevit.coreutils.markdown.extensions.admonition.AdmonitionProcessor.get_class_and_title","title":"<code>get_class_and_title(match)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/admonition.py</code> <pre><code>def get_class_and_title(self, match):\n    klass, title = match.group(1).lower(), match.group(2)\n    if title is None:\n        # no title was provided, use the capitalized classname as title\n        # e.g.: `!!! note` will render\n        # `&lt;p class=\"admonition-title\"&gt;Note&lt;/p&gt;`\n        title = klass.capitalize()\n    elif title == '':\n        # an explicit blank title should not be rendered\n        # e.g.: `!!! warning \"\"` will *not* render `p` with a title\n        title = None\n    return klass, title\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/admonition/#pyrevit.coreutils.markdown.extensions.admonition-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/admonition/#pyrevit.coreutils.markdown.extensions.admonition.makeExtension","title":"<code>makeExtension(*args, **kwargs)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/admonition.py</code> <pre><code>def makeExtension(*args, **kwargs):\n    return AdmonitionExtension(*args, **kwargs)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/attr_list/","title":"attr_list","text":"<p>Attribute List Extension for Python-Markdown.</p> <p>Adds attribute list syntax. Inspired by maruku's feature of the same name.</p> <p>See https://pythonhosted.org/Markdown/extensions/attr_list.html for documentation.</p> <p>Original code Copyright 2011 Waylan Limberg.</p> <p>All changes Copyright 2011-2014 The Python Markdown Project</p> <p>License: BSD</p>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/attr_list/#pyrevit.coreutils.markdown.extensions.attr_list-classes","title":"Classes","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/attr_list/#pyrevit.coreutils.markdown.extensions.attr_list.AttrListTreeprocessor","title":"<code>AttrListTreeprocessor(markdown_instance=None)</code>","text":"<p>               Bases: <code>Treeprocessor</code></p> <p>Attribute List Tree processor.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/util.py</code> <pre><code>def __init__(self, markdown_instance=None):\n    if markdown_instance:\n        self.markdown = markdown_instance\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/attr_list/#pyrevit.coreutils.markdown.extensions.attr_list.AttrListTreeprocessor-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/attr_list/#pyrevit.coreutils.markdown.extensions.attr_list.AttrListTreeprocessor.markdown","title":"<code>markdown = markdown_instance</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/attr_list/#pyrevit.coreutils.markdown.extensions.attr_list.AttrListTreeprocessor.BASE_RE","title":"<code>BASE_RE = '\\\\{\\\\:?([^\\\\}\\\\n]*)\\\\}'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/attr_list/#pyrevit.coreutils.markdown.extensions.attr_list.AttrListTreeprocessor.HEADER_RE","title":"<code>HEADER_RE = re.compile('[ ]+%s[ ]*$' % BASE_RE)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/attr_list/#pyrevit.coreutils.markdown.extensions.attr_list.AttrListTreeprocessor.BLOCK_RE","title":"<code>BLOCK_RE = re.compile('\\\\n[ ]*%s[ ]*$' % BASE_RE)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/attr_list/#pyrevit.coreutils.markdown.extensions.attr_list.AttrListTreeprocessor.INLINE_RE","title":"<code>INLINE_RE = re.compile('^%s' % BASE_RE)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/attr_list/#pyrevit.coreutils.markdown.extensions.attr_list.AttrListTreeprocessor.NAME_RE","title":"<code>NAME_RE = re.compile('[^A-Z_a-z\\\\u00c0-\\\\u00d6\\\\u00d8-\\\\u00f6\\\\u00f8-\\\\u02ff\\\\u0370-\\\\u037d\\\\u037f-\\\\u1fff\\\\u200c-\\\\u200d\\\\u2070-\\\\u218f\\\\u2c00-\\\\u2fef\\\\u3001-\\\\ud7ff\\\\uf900-\\\\ufdcf\\\\ufdf0-\\\\ufffd\\\\:\\\\-\\\\.0-9\\\\u00b7\\\\u0300-\\\\u036f\\\\u203f-\\\\u2040]+')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/attr_list/#pyrevit.coreutils.markdown.extensions.attr_list.AttrListTreeprocessor-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/attr_list/#pyrevit.coreutils.markdown.extensions.attr_list.AttrListTreeprocessor.run","title":"<code>run(doc)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/attr_list.py</code> <pre><code>def run(self, doc):\n    for elem in doc.iter():\n        if isBlockLevel(elem.tag):\n            # Block level: check for attrs on last line of text\n            RE = self.BLOCK_RE\n            if isheader(elem) or elem.tag == 'dt':\n                # header or def-term: check for attrs at end of line\n                RE = self.HEADER_RE\n            if len(elem) and elem.tag == 'li':\n                # special case list items. children may include a ul or ol.\n                pos = None\n                # find the ul or ol position\n                for i, child in enumerate(elem):\n                    if child.tag in ['ul', 'ol']:\n                        pos = i\n                        break\n                if pos is None and elem[-1].tail:\n                    # use tail of last child. no ul or ol.\n                    m = RE.search(elem[-1].tail)\n                    if m:\n                        self.assign_attrs(elem, m.group(1))\n                        elem[-1].tail = elem[-1].tail[:m.start()]\n                elif pos is not None and pos &gt; 0 and elem[pos-1].tail:\n                    # use tail of last child before ul or ol\n                    m = RE.search(elem[pos-1].tail)\n                    if m:\n                        self.assign_attrs(elem, m.group(1))\n                        elem[pos-1].tail = elem[pos-1].tail[:m.start()]\n                elif elem.text:\n                    # use text. ul is first child.\n                    m = RE.search(elem.text)\n                    if m:\n                        self.assign_attrs(elem, m.group(1))\n                        elem.text = elem.text[:m.start()]\n            elif len(elem) and elem[-1].tail:\n                # has children. Get from tail of last child\n                m = RE.search(elem[-1].tail)\n                if m:\n                    self.assign_attrs(elem, m.group(1))\n                    elem[-1].tail = elem[-1].tail[:m.start()]\n                    if isheader(elem):\n                        # clean up trailing #s\n                        elem[-1].tail = elem[-1].tail.rstrip('#').rstrip()\n            elif elem.text:\n                # no children. Get from text.\n                m = RE.search(elem.text)\n                if not m and elem.tag == 'td':\n                    m = re.search(self.BASE_RE, elem.text)\n                if m:\n                    self.assign_attrs(elem, m.group(1))\n                    elem.text = elem.text[:m.start()]\n                    if isheader(elem):\n                        # clean up trailing #s\n                        elem.text = elem.text.rstrip('#').rstrip()\n        else:\n            # inline: check for attrs at start of tail\n            if elem.tail:\n                m = self.INLINE_RE.match(elem.tail)\n                if m:\n                    self.assign_attrs(elem, m.group(1))\n                    elem.tail = elem.tail[m.end():]\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/attr_list/#pyrevit.coreutils.markdown.extensions.attr_list.AttrListTreeprocessor.assign_attrs","title":"<code>assign_attrs(elem, attrs)</code>","text":"<p>Assign attrs to element.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/attr_list.py</code> <pre><code>def assign_attrs(self, elem, attrs):\n    \"\"\"Assign attrs to element.\"\"\"\n    for k, v in get_attrs(attrs):\n        if k == '.':\n            # add to class\n            cls = elem.get('class')\n            if cls:\n                elem.set('class', '%s %s' % (cls, v))\n            else:\n                elem.set('class', v)\n        else:\n            # assign attr k with v\n            elem.set(self.sanitize_name(k), v)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/attr_list/#pyrevit.coreutils.markdown.extensions.attr_list.AttrListTreeprocessor.sanitize_name","title":"<code>sanitize_name(name)</code>","text":"<p>Sanitize name as 'an XML Name, minus the \":\"'.</p> <p>See http://www.w3.org/TR/REC-xml-names/#NT-NCName.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/attr_list.py</code> <pre><code>def sanitize_name(self, name):\n    \"\"\"Sanitize name as 'an XML Name, minus the \":\"'.\n\n    See http://www.w3.org/TR/REC-xml-names/#NT-NCName.\n    \"\"\"\n    return self.NAME_RE.sub('_', name)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/attr_list/#pyrevit.coreutils.markdown.extensions.attr_list.AttrListExtension","title":"<code>AttrListExtension(*args, **kwargs)</code>","text":"<p>               Bases: <code>Extension</code></p> <p>Attribute List Extension.</p> <p>Initiate Extension and set up configs.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def __init__(self, *args, **kwargs):\n    \"\"\"Initiate Extension and set up configs.\"\"\"\n    # check for configs arg for backward compat.\n    # (there only ever used to be one so we use arg[0])\n    if len(args):\n        if args[0] is not None:\n            self.setConfigs(args[0])\n        warnings.warn('Extension classes accepting positional args is '\n                      'pending Deprecation. Each setting should be '\n                      'passed into the Class as a keyword. Positional '\n                      'args are deprecated and will raise '\n                      'an error in version 2.7. See the Release Notes for '\n                      'Python-Markdown version 2.6 for more info.',\n                      DeprecationWarning)\n    # check for configs kwarg for backward compat.\n    if 'configs' in kwargs.keys():\n        if kwargs['configs'] is not None:\n            self.setConfigs(kwargs.pop('configs', {}))\n        warnings.warn('Extension classes accepting a dict on the single '\n                      'keyword \"config\" is pending Deprecation. Each '\n                      'setting should be passed into the Class as a '\n                      'keyword directly. The \"config\" keyword is '\n                      'deprecated and raise an error in '\n                      'version 2.7. See the Release Notes for '\n                      'Python-Markdown version 2.6 for more info.',\n                      DeprecationWarning)\n    # finally, use kwargs\n    self.setConfigs(kwargs)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/attr_list/#pyrevit.coreutils.markdown.extensions.attr_list.AttrListExtension-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/attr_list/#pyrevit.coreutils.markdown.extensions.attr_list.AttrListExtension.config","title":"<code>config = {}</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/attr_list/#pyrevit.coreutils.markdown.extensions.attr_list.AttrListExtension-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/attr_list/#pyrevit.coreutils.markdown.extensions.attr_list.AttrListExtension.getConfig","title":"<code>getConfig(key, default='')</code>","text":"<p>Return a setting for the given key or an empty string.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def getConfig(self, key, default=''):\n    \"\"\"Return a setting for the given key or an empty string.\"\"\"\n    if key in self.config:\n        return self.config[key][0]\n    else:\n        return default\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/attr_list/#pyrevit.coreutils.markdown.extensions.attr_list.AttrListExtension.getConfigs","title":"<code>getConfigs()</code>","text":"<p>Return all configs settings as a dict.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def getConfigs(self):\n    \"\"\"Return all configs settings as a dict.\"\"\"\n    return dict([(key, self.getConfig(key)) for key in self.config.keys()])\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/attr_list/#pyrevit.coreutils.markdown.extensions.attr_list.AttrListExtension.getConfigInfo","title":"<code>getConfigInfo()</code>","text":"<p>Return all config descriptions as a list of tuples.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def getConfigInfo(self):\n    \"\"\"Return all config descriptions as a list of tuples.\"\"\"\n    return [(key, self.config[key][1]) for key in self.config.keys()]\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/attr_list/#pyrevit.coreutils.markdown.extensions.attr_list.AttrListExtension.setConfig","title":"<code>setConfig(key, value)</code>","text":"<p>Set a config setting for <code>key</code> with the given <code>value</code>.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def setConfig(self, key, value):\n    \"\"\"Set a config setting for `key` with the given `value`.\"\"\"\n    if isinstance(self.config[key][0], bool):\n        value = parseBoolValue(value)\n    if self.config[key][0] is None:\n        value = parseBoolValue(value, preserve_none=True)\n    self.config[key][0] = value\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/attr_list/#pyrevit.coreutils.markdown.extensions.attr_list.AttrListExtension.setConfigs","title":"<code>setConfigs(items)</code>","text":"<p>Set multiple config settings given a dict or list of tuples.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def setConfigs(self, items):\n    \"\"\"Set multiple config settings given a dict or list of tuples.\"\"\"\n    if hasattr(items, 'items'):\n        # it's a dict\n        items = items.items()\n    for key, value in items:\n        self.setConfig(key, value)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/attr_list/#pyrevit.coreutils.markdown.extensions.attr_list.AttrListExtension.extendMarkdown","title":"<code>extendMarkdown(md, md_globals)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/attr_list.py</code> <pre><code>def extendMarkdown(self, md, md_globals):\n    md.treeprocessors.add(\n        'attr_list', AttrListTreeprocessor(md), '&gt;prettify'\n    )\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/attr_list/#pyrevit.coreutils.markdown.extensions.attr_list-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/attr_list/#pyrevit.coreutils.markdown.extensions.attr_list.get_attrs","title":"<code>get_attrs(str)</code>","text":"<p>Parse attribute list and return a list of attribute tuples.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/attr_list.py</code> <pre><code>def get_attrs(str):\n    \"\"\"Parse attribute list and return a list of attribute tuples.\"\"\"\n    return _scanner.scan(str)[0]\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/attr_list/#pyrevit.coreutils.markdown.extensions.attr_list.isheader","title":"<code>isheader(elem)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/attr_list.py</code> <pre><code>def isheader(elem):\n    return elem.tag in ['h1', 'h2', 'h3', 'h4', 'h5', 'h6']\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/attr_list/#pyrevit.coreutils.markdown.extensions.attr_list.makeExtension","title":"<code>makeExtension(*args, **kwargs)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/attr_list.py</code> <pre><code>def makeExtension(*args, **kwargs):\n    return AttrListExtension(*args, **kwargs)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/codehilite/","title":"codehilite","text":"<p>CodeHilite Extension for Python-Markdown.</p> <p>Adds code/syntax highlighting to standard Python-Markdown code blocks.</p> <p>See https://pythonhosted.org/Markdown/extensions/code_hilite.html for documentation.</p> <p>Original code Copyright 2006-2008 Waylan Limberg.</p> <p>All changes Copyright 2008-2014 The Python Markdown Project</p> <p>License: BSD</p>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/codehilite/#pyrevit.coreutils.markdown.extensions.codehilite-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/codehilite/#pyrevit.coreutils.markdown.extensions.codehilite.pygments","title":"<code>pygments = True</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/codehilite/#pyrevit.coreutils.markdown.extensions.codehilite-classes","title":"Classes","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/codehilite/#pyrevit.coreutils.markdown.extensions.codehilite.CodeHilite","title":"<code>CodeHilite(src=None, linenums=None, guess_lang=True, css_class='codehilite', lang=None, style='default', noclasses=False, tab_length=4, hl_lines=None, use_pygments=True)</code>","text":"<p>               Bases: <code>object</code></p> <p>Determine language of source code, and pass it into pygments hilighter.</p> Basic Usage <pre><code>code = CodeHilite(src = 'some text')\nhtml = code.hilite()\n</code></pre> <ul> <li> <p>src: Source string or any object with a .readline attribute.</p> </li> <li> <p>linenums: (Boolean) Set line numbering to 'on' (True),   'off' (False) or 'auto'(None). Set to 'auto' by default.</p> </li> <li> <p>guess_lang: (Boolean) Turn language auto-detection   'on' or 'off' (on by default).</p> </li> <li> <p>css_class: Set class name of wrapper div ('codehilite' by default).</p> </li> <li> <p>hl_lines: (List of integers) Lines to emphasize, 1-indexed.</p> </li> </ul> Low Level Usage <pre><code>code = CodeHilite()\ncode.src = 'some text' # String or anything with a .readline attr.\ncode.linenos = True  # Turns line numbering on or of.\nhtml = code.hilite()\n</code></pre> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/codehilite.py</code> <pre><code>def __init__(self, src=None, linenums=None, guess_lang=True,\n             css_class=\"codehilite\", lang=None, style='default',\n             noclasses=False, tab_length=4, hl_lines=None, use_pygments=True):\n    self.src = src\n    self.lang = lang\n    self.linenums = linenums\n    self.guess_lang = guess_lang\n    self.css_class = css_class\n    self.style = style\n    self.noclasses = noclasses\n    self.tab_length = tab_length\n    self.hl_lines = hl_lines or []\n    self.use_pygments = use_pygments\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/codehilite/#pyrevit.coreutils.markdown.extensions.codehilite.CodeHilite-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/codehilite/#pyrevit.coreutils.markdown.extensions.codehilite.CodeHilite.src","title":"<code>src = src</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/codehilite/#pyrevit.coreutils.markdown.extensions.codehilite.CodeHilite.lang","title":"<code>lang = lang</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/codehilite/#pyrevit.coreutils.markdown.extensions.codehilite.CodeHilite.linenums","title":"<code>linenums = linenums</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/codehilite/#pyrevit.coreutils.markdown.extensions.codehilite.CodeHilite.guess_lang","title":"<code>guess_lang = guess_lang</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/codehilite/#pyrevit.coreutils.markdown.extensions.codehilite.CodeHilite.css_class","title":"<code>css_class = css_class</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/codehilite/#pyrevit.coreutils.markdown.extensions.codehilite.CodeHilite.style","title":"<code>style = style</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/codehilite/#pyrevit.coreutils.markdown.extensions.codehilite.CodeHilite.noclasses","title":"<code>noclasses = noclasses</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/codehilite/#pyrevit.coreutils.markdown.extensions.codehilite.CodeHilite.tab_length","title":"<code>tab_length = tab_length</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/codehilite/#pyrevit.coreutils.markdown.extensions.codehilite.CodeHilite.hl_lines","title":"<code>hl_lines = hl_lines or []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/codehilite/#pyrevit.coreutils.markdown.extensions.codehilite.CodeHilite.use_pygments","title":"<code>use_pygments = use_pygments</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/codehilite/#pyrevit.coreutils.markdown.extensions.codehilite.CodeHilite-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/codehilite/#pyrevit.coreutils.markdown.extensions.codehilite.CodeHilite.hilite","title":"<code>hilite()</code>","text":"<p>Highlites the code.</p> <p>Pass code to the Pygments highliter with optional line numbers. The output should then be styled with css to your liking. No styles are applied by default - only styling hooks (i.e.: ). <p>Returns:</p> Type Description <code>str</code> <p>html text of the highlighted code.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/codehilite.py</code> <pre><code>def hilite(self):\n    \"\"\"Highlites the code.\n\n    Pass code to the [Pygments](http://pygments.pocoo.org/) highliter with\n    optional line numbers. The output should then be styled with css to\n    your liking. No styles are applied by default - only styling hooks\n    (i.e.: &lt;span class=\"k\"&gt;).\n\n    Returns:\n        (str): html text of the highlighted code.\n    \"\"\"\n    self.src = self.src.strip('\\n')\n\n    if self.lang is None:\n        self._parseHeader()\n\n    if pygments and self.use_pygments:\n        try:\n            lexer = get_lexer_by_name(self.lang)\n        except ValueError:\n            try:\n                if self.guess_lang:\n                    lexer = guess_lexer(self.src)\n                else:\n                    lexer = get_lexer_by_name('text')\n            except ValueError:\n                lexer = get_lexer_by_name('text')\n        formatter = get_formatter_by_name('html',\n                                          linenos=self.linenums,\n                                          cssclass=self.css_class,\n                                          style=self.style,\n                                          noclasses=self.noclasses,\n                                          hl_lines=self.hl_lines)\n        return highlight(self.src, lexer, formatter)\n    else:\n        # just escape and build markup usable by JS highlighting libs\n        txt = self.src.replace('&amp;', '&amp;amp;')\n        txt = txt.replace('&lt;', '&amp;lt;')\n        txt = txt.replace('&gt;', '&amp;gt;')\n        txt = txt.replace('\"', '&amp;quot;')\n        classes = []\n        if self.lang:\n            classes.append('language-%s' % self.lang)\n        if self.linenums:\n            classes.append('linenums')\n        class_str = ''\n        if classes:\n            class_str = ' class=\"%s\"' % ' '.join(classes)\n        return '&lt;pre class=\"%s\"&gt;&lt;code%s&gt;%s&lt;/code&gt;&lt;/pre&gt;\\n' % \\\n               (self.css_class, class_str, txt)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/codehilite/#pyrevit.coreutils.markdown.extensions.codehilite.HiliteTreeprocessor","title":"<code>HiliteTreeprocessor(markdown_instance=None)</code>","text":"<p>               Bases: <code>Treeprocessor</code></p> <p>Hilight source code in code blocks.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/util.py</code> <pre><code>def __init__(self, markdown_instance=None):\n    if markdown_instance:\n        self.markdown = markdown_instance\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/codehilite/#pyrevit.coreutils.markdown.extensions.codehilite.HiliteTreeprocessor-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/codehilite/#pyrevit.coreutils.markdown.extensions.codehilite.HiliteTreeprocessor.markdown","title":"<code>markdown = markdown_instance</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/codehilite/#pyrevit.coreutils.markdown.extensions.codehilite.HiliteTreeprocessor-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/codehilite/#pyrevit.coreutils.markdown.extensions.codehilite.HiliteTreeprocessor.run","title":"<code>run(root)</code>","text":"<p>Find code blocks and store in htmlStash.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/codehilite.py</code> <pre><code>def run(self, root):\n    \"\"\"Find code blocks and store in htmlStash.\"\"\"\n    blocks = root.iter('pre')\n    for block in blocks:\n        if len(block) == 1 and block[0].tag == 'code':\n            code = CodeHilite(\n                block[0].text,\n                linenums=self.config['linenums'],\n                guess_lang=self.config['guess_lang'],\n                css_class=self.config['css_class'],\n                style=self.config['pygments_style'],\n                noclasses=self.config['noclasses'],\n                tab_length=self.markdown.tab_length,\n                use_pygments=self.config['use_pygments']\n            )\n            placeholder = self.markdown.htmlStash.store(code.hilite(),\n                                                        safe=True)\n            # Clear codeblock in etree instance\n            block.clear()\n            # Change to p element which will later\n            # be removed when inserting raw html\n            block.tag = 'p'\n            block.text = placeholder\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/codehilite/#pyrevit.coreutils.markdown.extensions.codehilite.CodeHiliteExtension","title":"<code>CodeHiliteExtension(*args, **kwargs)</code>","text":"<p>               Bases: <code>Extension</code></p> <p>Add source code hilighting to markdown codeblocks.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/codehilite.py</code> <pre><code>def __init__(self, *args, **kwargs):\n    # define default configs\n    self.config = {\n        'linenums': [None,\n                     \"Use lines numbers. True=yes, False=no, None=auto\"],\n        'guess_lang': [True,\n                       \"Automatic language detection - Default: True\"],\n        'css_class': [\"codehilite\",\n                      \"Set class name for wrapper &lt;div&gt; - \"\n                      \"Default: codehilite\"],\n        'pygments_style': ['default',\n                           'Pygments HTML Formatter Style '\n                           '(Colorscheme) - Default: default'],\n        'noclasses': [False,\n                      'Use inline styles instead of CSS classes - '\n                      'Default false'],\n        'use_pygments': [True,\n                         'Use Pygments to Highlight code blocks. '\n                         'Disable if using a JavaScript library. '\n                         'Default: True']\n        }\n\n    super(CodeHiliteExtension, self).__init__(*args, **kwargs)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/codehilite/#pyrevit.coreutils.markdown.extensions.codehilite.CodeHiliteExtension-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/codehilite/#pyrevit.coreutils.markdown.extensions.codehilite.CodeHiliteExtension.config","title":"<code>config = {'linenums': [None, 'Use lines numbers. True=yes, False=no, None=auto'], 'guess_lang': [True, 'Automatic language detection - Default: True'], 'css_class': ['codehilite', 'Set class name for wrapper &lt;div&gt; - Default: codehilite'], 'pygments_style': ['default', 'Pygments HTML Formatter Style (Colorscheme) - Default: default'], 'noclasses': [False, 'Use inline styles instead of CSS classes - Default false'], 'use_pygments': [True, 'Use Pygments to Highlight code blocks. Disable if using a JavaScript library. Default: True']}</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/codehilite/#pyrevit.coreutils.markdown.extensions.codehilite.CodeHiliteExtension-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/codehilite/#pyrevit.coreutils.markdown.extensions.codehilite.CodeHiliteExtension.getConfig","title":"<code>getConfig(key, default='')</code>","text":"<p>Return a setting for the given key or an empty string.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def getConfig(self, key, default=''):\n    \"\"\"Return a setting for the given key or an empty string.\"\"\"\n    if key in self.config:\n        return self.config[key][0]\n    else:\n        return default\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/codehilite/#pyrevit.coreutils.markdown.extensions.codehilite.CodeHiliteExtension.getConfigs","title":"<code>getConfigs()</code>","text":"<p>Return all configs settings as a dict.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def getConfigs(self):\n    \"\"\"Return all configs settings as a dict.\"\"\"\n    return dict([(key, self.getConfig(key)) for key in self.config.keys()])\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/codehilite/#pyrevit.coreutils.markdown.extensions.codehilite.CodeHiliteExtension.getConfigInfo","title":"<code>getConfigInfo()</code>","text":"<p>Return all config descriptions as a list of tuples.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def getConfigInfo(self):\n    \"\"\"Return all config descriptions as a list of tuples.\"\"\"\n    return [(key, self.config[key][1]) for key in self.config.keys()]\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/codehilite/#pyrevit.coreutils.markdown.extensions.codehilite.CodeHiliteExtension.setConfig","title":"<code>setConfig(key, value)</code>","text":"<p>Set a config setting for <code>key</code> with the given <code>value</code>.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def setConfig(self, key, value):\n    \"\"\"Set a config setting for `key` with the given `value`.\"\"\"\n    if isinstance(self.config[key][0], bool):\n        value = parseBoolValue(value)\n    if self.config[key][0] is None:\n        value = parseBoolValue(value, preserve_none=True)\n    self.config[key][0] = value\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/codehilite/#pyrevit.coreutils.markdown.extensions.codehilite.CodeHiliteExtension.setConfigs","title":"<code>setConfigs(items)</code>","text":"<p>Set multiple config settings given a dict or list of tuples.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def setConfigs(self, items):\n    \"\"\"Set multiple config settings given a dict or list of tuples.\"\"\"\n    if hasattr(items, 'items'):\n        # it's a dict\n        items = items.items()\n    for key, value in items:\n        self.setConfig(key, value)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/codehilite/#pyrevit.coreutils.markdown.extensions.codehilite.CodeHiliteExtension.extendMarkdown","title":"<code>extendMarkdown(md, md_globals)</code>","text":"<p>Add HilitePostprocessor to Markdown instance.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/codehilite.py</code> <pre><code>def extendMarkdown(self, md, md_globals):\n    \"\"\"Add HilitePostprocessor to Markdown instance.\"\"\"\n    hiliter = HiliteTreeprocessor(md)\n    hiliter.config = self.getConfigs()\n    md.treeprocessors.add(\"hilite\", hiliter, \"&lt;inline\")\n\n    md.registerExtension(self)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/codehilite/#pyrevit.coreutils.markdown.extensions.codehilite-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/codehilite/#pyrevit.coreutils.markdown.extensions.codehilite.parse_hl_lines","title":"<code>parse_hl_lines(expr)</code>","text":"<p>Support our syntax for emphasizing certain lines of code.</p> <p>expr should be like '1 2' to emphasize lines 1 and 2 of a code block. Returns a list of ints, the line numbers to emphasize.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/codehilite.py</code> <pre><code>def parse_hl_lines(expr):\n    \"\"\"Support our syntax for emphasizing certain lines of code.\n\n    expr should be like '1 2' to emphasize lines 1 and 2 of a code block.\n    Returns a list of ints, the line numbers to emphasize.\n    \"\"\"\n    if not expr:\n        return []\n\n    try:\n        return list(map(int, expr.split()))\n    except ValueError:\n        return []\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/codehilite/#pyrevit.coreutils.markdown.extensions.codehilite.makeExtension","title":"<code>makeExtension(*args, **kwargs)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/codehilite.py</code> <pre><code>def makeExtension(*args, **kwargs):\n    return CodeHiliteExtension(*args, **kwargs)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/def_list/","title":"def_list","text":"<p>Definition List Extension for Python-Markdown.</p> <p>Adds parsing of Definition Lists to Python-Markdown.</p> <p>See https://pythonhosted.org/Markdown/extensions/definition_lists.html for documentation.</p> <p>Original code Copyright 2008 Waylan Limberg</p> <p>All changes Copyright 2008-2014 The Python Markdown Project</p> <p>License: BSD</p>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/def_list/#pyrevit.coreutils.markdown.extensions.def_list-classes","title":"Classes","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/def_list/#pyrevit.coreutils.markdown.extensions.def_list.DefListProcessor","title":"<code>DefListProcessor(parser)</code>","text":"<p>               Bases: <code>BlockProcessor</code></p> <p>Process Definition Lists.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def __init__(self, parser):\n    self.parser = parser\n    self.tab_length = parser.markdown.tab_length\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/def_list/#pyrevit.coreutils.markdown.extensions.def_list.DefListProcessor-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/def_list/#pyrevit.coreutils.markdown.extensions.def_list.DefListProcessor.parser","title":"<code>parser = parser</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/def_list/#pyrevit.coreutils.markdown.extensions.def_list.DefListProcessor.tab_length","title":"<code>tab_length = parser.markdown.tab_length</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/def_list/#pyrevit.coreutils.markdown.extensions.def_list.DefListProcessor.RE","title":"<code>RE = re.compile('(^|\\\\n)[ ]{0,3}:[ ]{1,3}(.*?)(\\\\n|$)')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/def_list/#pyrevit.coreutils.markdown.extensions.def_list.DefListProcessor.NO_INDENT_RE","title":"<code>NO_INDENT_RE = re.compile('^[ ]{0,3}[^ :]')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/def_list/#pyrevit.coreutils.markdown.extensions.def_list.DefListProcessor-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/def_list/#pyrevit.coreutils.markdown.extensions.def_list.DefListProcessor.lastChild","title":"<code>lastChild(parent)</code>","text":"<p>Return the last child of an etree element.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def lastChild(self, parent):\n    \"\"\"Return the last child of an etree element.\"\"\"\n    if len(parent):\n        return parent[-1]\n    else:\n        return None\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/def_list/#pyrevit.coreutils.markdown.extensions.def_list.DefListProcessor.detab","title":"<code>detab(text)</code>","text":"<p>Remove a tab from the front of each line of the given text.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def detab(self, text):\n    \"\"\"Remove a tab from the front of each line of the given text.\"\"\"\n    newtext = []\n    lines = text.split('\\n')\n    for line in lines:\n        if line.startswith(' '*self.tab_length):\n            newtext.append(line[self.tab_length:])\n        elif not line.strip():\n            newtext.append('')\n        else:\n            break\n    return '\\n'.join(newtext), '\\n'.join(lines[len(newtext):])\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/def_list/#pyrevit.coreutils.markdown.extensions.def_list.DefListProcessor.looseDetab","title":"<code>looseDetab(text, level=1)</code>","text":"<p>Remove a tab from front of lines but allowing dedented lines.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def looseDetab(self, text, level=1):\n    \"\"\"Remove a tab from front of lines but allowing dedented lines.\"\"\"\n    lines = text.split('\\n')\n    for i in range(len(lines)):\n        if lines[i].startswith(' '*self.tab_length*level):\n            lines[i] = lines[i][self.tab_length*level:]\n    return '\\n'.join(lines)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/def_list/#pyrevit.coreutils.markdown.extensions.def_list.DefListProcessor.test","title":"<code>test(parent, block)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/def_list.py</code> <pre><code>def test(self, parent, block):\n    return bool(self.RE.search(block))\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/def_list/#pyrevit.coreutils.markdown.extensions.def_list.DefListProcessor.run","title":"<code>run(parent, blocks)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/def_list.py</code> <pre><code>def run(self, parent, blocks):\n\n    raw_block = blocks.pop(0)\n    m = self.RE.search(raw_block)\n    terms = [l.strip() for l in\n             raw_block[:m.start()].split('\\n') if l.strip()]\n    block = raw_block[m.end():]\n    no_indent = self.NO_INDENT_RE.match(block)\n    if no_indent:\n        d, theRest = (block, None)\n    else:\n        d, theRest = self.detab(block)\n    if d:\n        d = '%s\\n%s' % (m.group(2), d)\n    else:\n        d = m.group(2)\n    sibling = self.lastChild(parent)\n    if not terms and sibling is None:\n        # This is not a definition item. Most likely a paragraph that\n        # starts with a colon at the begining of a document or list.\n        blocks.insert(0, raw_block)\n        return False\n    if not terms and sibling.tag == 'p':\n        # The previous paragraph contains the terms\n        state = 'looselist'\n        terms = sibling.text.split('\\n')\n        parent.remove(sibling)\n        # Aquire new sibling\n        sibling = self.lastChild(parent)\n    else:\n        state = 'list'\n\n    if sibling is not None and sibling.tag == 'dl':\n        # This is another item on an existing list\n        dl = sibling\n        if not terms and len(dl) and dl[-1].tag == 'dd' and len(dl[-1]):\n            state = 'looselist'\n    else:\n        # This is a new list\n        dl = etree.SubElement(parent, 'dl')\n    # Add terms\n    for term in terms:\n        dt = etree.SubElement(dl, 'dt')\n        dt.text = term\n    # Add definition\n    self.parser.state.set(state)\n    dd = etree.SubElement(dl, 'dd')\n    self.parser.parseBlocks(dd, [d])\n    self.parser.state.reset()\n\n    if theRest:\n        blocks.insert(0, theRest)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/def_list/#pyrevit.coreutils.markdown.extensions.def_list.DefListIndentProcessor","title":"<code>DefListIndentProcessor(*args)</code>","text":"<p>               Bases: <code>ListIndentProcessor</code></p> <p>Process indented children of definition list items.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def __init__(self, *args):\n    super(ListIndentProcessor, self).__init__(*args)\n    self.INDENT_RE = re.compile(r'^(([ ]{%s})+)' % self.tab_length)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/def_list/#pyrevit.coreutils.markdown.extensions.def_list.DefListIndentProcessor-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/def_list/#pyrevit.coreutils.markdown.extensions.def_list.DefListIndentProcessor.parser","title":"<code>parser = parser</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/def_list/#pyrevit.coreutils.markdown.extensions.def_list.DefListIndentProcessor.tab_length","title":"<code>tab_length = parser.markdown.tab_length</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/def_list/#pyrevit.coreutils.markdown.extensions.def_list.DefListIndentProcessor.INDENT_RE","title":"<code>INDENT_RE = re.compile('^(([ ]{%s})+)' % self.tab_length)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/def_list/#pyrevit.coreutils.markdown.extensions.def_list.DefListIndentProcessor.ITEM_TYPES","title":"<code>ITEM_TYPES = ['dd']</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/def_list/#pyrevit.coreutils.markdown.extensions.def_list.DefListIndentProcessor.LIST_TYPES","title":"<code>LIST_TYPES = ['dl']</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/def_list/#pyrevit.coreutils.markdown.extensions.def_list.DefListIndentProcessor-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/def_list/#pyrevit.coreutils.markdown.extensions.def_list.DefListIndentProcessor.lastChild","title":"<code>lastChild(parent)</code>","text":"<p>Return the last child of an etree element.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def lastChild(self, parent):\n    \"\"\"Return the last child of an etree element.\"\"\"\n    if len(parent):\n        return parent[-1]\n    else:\n        return None\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/def_list/#pyrevit.coreutils.markdown.extensions.def_list.DefListIndentProcessor.detab","title":"<code>detab(text)</code>","text":"<p>Remove a tab from the front of each line of the given text.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def detab(self, text):\n    \"\"\"Remove a tab from the front of each line of the given text.\"\"\"\n    newtext = []\n    lines = text.split('\\n')\n    for line in lines:\n        if line.startswith(' '*self.tab_length):\n            newtext.append(line[self.tab_length:])\n        elif not line.strip():\n            newtext.append('')\n        else:\n            break\n    return '\\n'.join(newtext), '\\n'.join(lines[len(newtext):])\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/def_list/#pyrevit.coreutils.markdown.extensions.def_list.DefListIndentProcessor.looseDetab","title":"<code>looseDetab(text, level=1)</code>","text":"<p>Remove a tab from front of lines but allowing dedented lines.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def looseDetab(self, text, level=1):\n    \"\"\"Remove a tab from front of lines but allowing dedented lines.\"\"\"\n    lines = text.split('\\n')\n    for i in range(len(lines)):\n        if lines[i].startswith(' '*self.tab_length*level):\n            lines[i] = lines[i][self.tab_length*level:]\n    return '\\n'.join(lines)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/def_list/#pyrevit.coreutils.markdown.extensions.def_list.DefListIndentProcessor.test","title":"<code>test(parent, block)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def test(self, parent, block):\n    return block.startswith(' '*self.tab_length) and \\\n        not self.parser.state.isstate('detabbed') and \\\n        (parent.tag in self.ITEM_TYPES or\n            (len(parent) and parent[-1] is not None and\n                (parent[-1].tag in self.LIST_TYPES)))\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/def_list/#pyrevit.coreutils.markdown.extensions.def_list.DefListIndentProcessor.run","title":"<code>run(parent, blocks)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def run(self, parent, blocks):\n    block = blocks.pop(0)\n    level, sibling = self.get_level(parent, block)\n    block = self.looseDetab(block, level)\n\n    self.parser.state.set('detabbed')\n    if parent.tag in self.ITEM_TYPES:\n        # It's possible that this parent has a 'ul' or 'ol' child list\n        # with a member.  If that is the case, then that should be the\n        # parent.  This is intended to catch the edge case of an indented\n        # list whose first member was parsed previous to this point\n        # see OListProcessor\n        if len(parent) and parent[-1].tag in self.LIST_TYPES:\n            self.parser.parseBlocks(parent[-1], [block])\n        else:\n            # The parent is already a li. Just parse the child block.\n            self.parser.parseBlocks(parent, [block])\n    elif sibling.tag in self.ITEM_TYPES:\n        # The sibling is a li. Use it as parent.\n        self.parser.parseBlocks(sibling, [block])\n    elif len(sibling) and sibling[-1].tag in self.ITEM_TYPES:\n        # The parent is a list (``ol`` or ``ul``) which has children.\n        # Assume the last child li is the parent of this block.\n        if sibling[-1].text:\n            # If the parent li has text, that text needs to be moved to a p\n            # The p must be 'inserted' at beginning of list in the event\n            # that other children already exist i.e.; a nested sublist.\n            p = util.etree.Element('p')\n            p.text = sibling[-1].text\n            sibling[-1].text = ''\n            sibling[-1].insert(0, p)\n        self.parser.parseChunk(sibling[-1], block)\n    else:\n        self.create_item(sibling, block)\n    self.parser.state.reset()\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/def_list/#pyrevit.coreutils.markdown.extensions.def_list.DefListIndentProcessor.get_level","title":"<code>get_level(parent, block)</code>","text":"<p>Get level of indent based on list level.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def get_level(self, parent, block):\n    \"\"\"Get level of indent based on list level.\"\"\"\n    # Get indent level\n    m = self.INDENT_RE.match(block)\n    if m:\n        indent_level = len(m.group(1))/self.tab_length\n    else:\n        indent_level = 0\n    if self.parser.state.isstate('list'):\n        # We're in a tightlist - so we already are at correct parent.\n        level = 1\n    else:\n        # We're in a looselist - so we need to find parent.\n        level = 0\n    # Step through children of tree to find matching indent level.\n    while indent_level &gt; level:\n        child = self.lastChild(parent)\n        if (child is not None and\n           (child.tag in self.LIST_TYPES or child.tag in self.ITEM_TYPES)):\n            if child.tag in self.LIST_TYPES:\n                level += 1\n            parent = child\n        else:\n            # No more child levels. If we're short of indent_level,\n            # we have a code block. So we stop here.\n            break\n    return level, parent\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/def_list/#pyrevit.coreutils.markdown.extensions.def_list.DefListIndentProcessor.create_item","title":"<code>create_item(parent, block)</code>","text":"<p>Create a new dd and parse the block with it as the parent.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/def_list.py</code> <pre><code>def create_item(self, parent, block):\n    \"\"\"Create a new dd and parse the block with it as the parent.\"\"\"\n    dd = etree.SubElement(parent, 'dd')\n    self.parser.parseBlocks(dd, [block])\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/def_list/#pyrevit.coreutils.markdown.extensions.def_list.DefListExtension","title":"<code>DefListExtension(*args, **kwargs)</code>","text":"<p>               Bases: <code>Extension</code></p> <p>Add definition lists to Markdown.</p> <p>Initiate Extension and set up configs.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def __init__(self, *args, **kwargs):\n    \"\"\"Initiate Extension and set up configs.\"\"\"\n    # check for configs arg for backward compat.\n    # (there only ever used to be one so we use arg[0])\n    if len(args):\n        if args[0] is not None:\n            self.setConfigs(args[0])\n        warnings.warn('Extension classes accepting positional args is '\n                      'pending Deprecation. Each setting should be '\n                      'passed into the Class as a keyword. Positional '\n                      'args are deprecated and will raise '\n                      'an error in version 2.7. See the Release Notes for '\n                      'Python-Markdown version 2.6 for more info.',\n                      DeprecationWarning)\n    # check for configs kwarg for backward compat.\n    if 'configs' in kwargs.keys():\n        if kwargs['configs'] is not None:\n            self.setConfigs(kwargs.pop('configs', {}))\n        warnings.warn('Extension classes accepting a dict on the single '\n                      'keyword \"config\" is pending Deprecation. Each '\n                      'setting should be passed into the Class as a '\n                      'keyword directly. The \"config\" keyword is '\n                      'deprecated and raise an error in '\n                      'version 2.7. See the Release Notes for '\n                      'Python-Markdown version 2.6 for more info.',\n                      DeprecationWarning)\n    # finally, use kwargs\n    self.setConfigs(kwargs)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/def_list/#pyrevit.coreutils.markdown.extensions.def_list.DefListExtension-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/def_list/#pyrevit.coreutils.markdown.extensions.def_list.DefListExtension.config","title":"<code>config = {}</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/def_list/#pyrevit.coreutils.markdown.extensions.def_list.DefListExtension-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/def_list/#pyrevit.coreutils.markdown.extensions.def_list.DefListExtension.getConfig","title":"<code>getConfig(key, default='')</code>","text":"<p>Return a setting for the given key or an empty string.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def getConfig(self, key, default=''):\n    \"\"\"Return a setting for the given key or an empty string.\"\"\"\n    if key in self.config:\n        return self.config[key][0]\n    else:\n        return default\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/def_list/#pyrevit.coreutils.markdown.extensions.def_list.DefListExtension.getConfigs","title":"<code>getConfigs()</code>","text":"<p>Return all configs settings as a dict.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def getConfigs(self):\n    \"\"\"Return all configs settings as a dict.\"\"\"\n    return dict([(key, self.getConfig(key)) for key in self.config.keys()])\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/def_list/#pyrevit.coreutils.markdown.extensions.def_list.DefListExtension.getConfigInfo","title":"<code>getConfigInfo()</code>","text":"<p>Return all config descriptions as a list of tuples.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def getConfigInfo(self):\n    \"\"\"Return all config descriptions as a list of tuples.\"\"\"\n    return [(key, self.config[key][1]) for key in self.config.keys()]\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/def_list/#pyrevit.coreutils.markdown.extensions.def_list.DefListExtension.setConfig","title":"<code>setConfig(key, value)</code>","text":"<p>Set a config setting for <code>key</code> with the given <code>value</code>.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def setConfig(self, key, value):\n    \"\"\"Set a config setting for `key` with the given `value`.\"\"\"\n    if isinstance(self.config[key][0], bool):\n        value = parseBoolValue(value)\n    if self.config[key][0] is None:\n        value = parseBoolValue(value, preserve_none=True)\n    self.config[key][0] = value\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/def_list/#pyrevit.coreutils.markdown.extensions.def_list.DefListExtension.setConfigs","title":"<code>setConfigs(items)</code>","text":"<p>Set multiple config settings given a dict or list of tuples.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def setConfigs(self, items):\n    \"\"\"Set multiple config settings given a dict or list of tuples.\"\"\"\n    if hasattr(items, 'items'):\n        # it's a dict\n        items = items.items()\n    for key, value in items:\n        self.setConfig(key, value)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/def_list/#pyrevit.coreutils.markdown.extensions.def_list.DefListExtension.extendMarkdown","title":"<code>extendMarkdown(md, md_globals)</code>","text":"<p>Add an instance of DefListProcessor to BlockParser.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/def_list.py</code> <pre><code>def extendMarkdown(self, md, md_globals):\n    \"\"\"Add an instance of DefListProcessor to BlockParser.\"\"\"\n    md.parser.blockprocessors.add('defindent',\n                                  DefListIndentProcessor(md.parser),\n                                  '&gt;indent')\n    md.parser.blockprocessors.add('deflist',\n                                  DefListProcessor(md.parser),\n                                  '&gt;ulist')\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/def_list/#pyrevit.coreutils.markdown.extensions.def_list-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/def_list/#pyrevit.coreutils.markdown.extensions.def_list.makeExtension","title":"<code>makeExtension(*args, **kwargs)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/def_list.py</code> <pre><code>def makeExtension(*args, **kwargs):\n    return DefListExtension(*args, **kwargs)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/extra/","title":"extra","text":"<p>Python-Markdown Extra Extension.</p> <p>A compilation of various Python-Markdown extensions that imitates PHP Markdown Extra.</p> <p>Note that each of the individual extensions still need to be available on your PYTHONPATH. This extension simply wraps them all up as a convenience so that only one extension needs to be listed when initiating Markdown. See the documentation for each individual extension for specifics about that extension.</p> <p>There may be additional extensions that are distributed with Python-Markdown that are not included here in Extra. Those extensions are not part of PHP Markdown Extra, and therefore, not part of Python-Markdown Extra. If you really would like Extra to include additional extensions, we suggest creating your own clone of Extra under a differant name. You could also edit the <code>extensions</code> global variable defined below, but be aware that such changes may be lost when you upgrade to any future version of Python-Markdown.</p> <p>See https://pythonhosted.org/Markdown/extensions/extra.html for documentation.</p> <p>Copyright The Python Markdown Project</p> <p>License: BSD</p>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/extra/#pyrevit.coreutils.markdown.extensions.extra-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/extra/#pyrevit.coreutils.markdown.extensions.extra.extensions","title":"<code>extensions = ['markdown.extensions.smart_strong', 'markdown.extensions.fenced_code', 'markdown.extensions.footnotes', 'markdown.extensions.attr_list', 'markdown.extensions.def_list', 'markdown.extensions.tables', 'markdown.extensions.abbr']</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/extra/#pyrevit.coreutils.markdown.extensions.extra-classes","title":"Classes","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/extra/#pyrevit.coreutils.markdown.extensions.extra.ExtraExtension","title":"<code>ExtraExtension(*args, **kwargs)</code>","text":"<p>               Bases: <code>Extension</code></p> <p>Add various extensions to Markdown class.</p> <p>Config is a dumb holder which gets passed to actual ext later.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/extra.py</code> <pre><code>def __init__(self, *args, **kwargs):\n    \"\"\"Config is a dumb holder which gets passed to actual ext later.\"\"\"\n    self.config = kwargs.pop('configs', {})\n    self.config.update(kwargs)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/extra/#pyrevit.coreutils.markdown.extensions.extra.ExtraExtension-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/extra/#pyrevit.coreutils.markdown.extensions.extra.ExtraExtension.config","title":"<code>config = kwargs.pop('configs', {})</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/extra/#pyrevit.coreutils.markdown.extensions.extra.ExtraExtension-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/extra/#pyrevit.coreutils.markdown.extensions.extra.ExtraExtension.getConfig","title":"<code>getConfig(key, default='')</code>","text":"<p>Return a setting for the given key or an empty string.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def getConfig(self, key, default=''):\n    \"\"\"Return a setting for the given key or an empty string.\"\"\"\n    if key in self.config:\n        return self.config[key][0]\n    else:\n        return default\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/extra/#pyrevit.coreutils.markdown.extensions.extra.ExtraExtension.getConfigs","title":"<code>getConfigs()</code>","text":"<p>Return all configs settings as a dict.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def getConfigs(self):\n    \"\"\"Return all configs settings as a dict.\"\"\"\n    return dict([(key, self.getConfig(key)) for key in self.config.keys()])\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/extra/#pyrevit.coreutils.markdown.extensions.extra.ExtraExtension.getConfigInfo","title":"<code>getConfigInfo()</code>","text":"<p>Return all config descriptions as a list of tuples.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def getConfigInfo(self):\n    \"\"\"Return all config descriptions as a list of tuples.\"\"\"\n    return [(key, self.config[key][1]) for key in self.config.keys()]\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/extra/#pyrevit.coreutils.markdown.extensions.extra.ExtraExtension.setConfig","title":"<code>setConfig(key, value)</code>","text":"<p>Set a config setting for <code>key</code> with the given <code>value</code>.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def setConfig(self, key, value):\n    \"\"\"Set a config setting for `key` with the given `value`.\"\"\"\n    if isinstance(self.config[key][0], bool):\n        value = parseBoolValue(value)\n    if self.config[key][0] is None:\n        value = parseBoolValue(value, preserve_none=True)\n    self.config[key][0] = value\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/extra/#pyrevit.coreutils.markdown.extensions.extra.ExtraExtension.setConfigs","title":"<code>setConfigs(items)</code>","text":"<p>Set multiple config settings given a dict or list of tuples.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def setConfigs(self, items):\n    \"\"\"Set multiple config settings given a dict or list of tuples.\"\"\"\n    if hasattr(items, 'items'):\n        # it's a dict\n        items = items.items()\n    for key, value in items:\n        self.setConfig(key, value)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/extra/#pyrevit.coreutils.markdown.extensions.extra.ExtraExtension.extendMarkdown","title":"<code>extendMarkdown(md, md_globals)</code>","text":"<p>Register extension instances.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/extra.py</code> <pre><code>def extendMarkdown(self, md, md_globals):\n    \"\"\"Register extension instances.\"\"\"\n    md.registerExtensions(extensions, self.config)\n    if not md.safeMode:\n        # Turn on processing of markdown text within raw html\n        md.preprocessors['html_block'].markdown_in_raw = True\n        md.parser.blockprocessors.add('markdown_block',\n                                      MarkdownInHtmlProcessor(md.parser),\n                                      '_begin')\n        md.parser.blockprocessors.tag_counter = -1\n        md.parser.blockprocessors.contain_span_tags = re.compile(\n            r'^(p|h[1-6]|li|dd|dt|td|th|legend|address)$', re.IGNORECASE)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/extra/#pyrevit.coreutils.markdown.extensions.extra.MarkdownInHtmlProcessor","title":"<code>MarkdownInHtmlProcessor(parser)</code>","text":"<p>               Bases: <code>BlockProcessor</code></p> <p>Process Markdown Inside HTML Blocks.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def __init__(self, parser):\n    self.parser = parser\n    self.tab_length = parser.markdown.tab_length\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/extra/#pyrevit.coreutils.markdown.extensions.extra.MarkdownInHtmlProcessor-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/extra/#pyrevit.coreutils.markdown.extensions.extra.MarkdownInHtmlProcessor.parser","title":"<code>parser = parser</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/extra/#pyrevit.coreutils.markdown.extensions.extra.MarkdownInHtmlProcessor.tab_length","title":"<code>tab_length = parser.markdown.tab_length</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/extra/#pyrevit.coreutils.markdown.extensions.extra.MarkdownInHtmlProcessor-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/extra/#pyrevit.coreutils.markdown.extensions.extra.MarkdownInHtmlProcessor.lastChild","title":"<code>lastChild(parent)</code>","text":"<p>Return the last child of an etree element.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def lastChild(self, parent):\n    \"\"\"Return the last child of an etree element.\"\"\"\n    if len(parent):\n        return parent[-1]\n    else:\n        return None\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/extra/#pyrevit.coreutils.markdown.extensions.extra.MarkdownInHtmlProcessor.detab","title":"<code>detab(text)</code>","text":"<p>Remove a tab from the front of each line of the given text.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def detab(self, text):\n    \"\"\"Remove a tab from the front of each line of the given text.\"\"\"\n    newtext = []\n    lines = text.split('\\n')\n    for line in lines:\n        if line.startswith(' '*self.tab_length):\n            newtext.append(line[self.tab_length:])\n        elif not line.strip():\n            newtext.append('')\n        else:\n            break\n    return '\\n'.join(newtext), '\\n'.join(lines[len(newtext):])\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/extra/#pyrevit.coreutils.markdown.extensions.extra.MarkdownInHtmlProcessor.looseDetab","title":"<code>looseDetab(text, level=1)</code>","text":"<p>Remove a tab from front of lines but allowing dedented lines.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def looseDetab(self, text, level=1):\n    \"\"\"Remove a tab from front of lines but allowing dedented lines.\"\"\"\n    lines = text.split('\\n')\n    for i in range(len(lines)):\n        if lines[i].startswith(' '*self.tab_length*level):\n            lines[i] = lines[i][self.tab_length*level:]\n    return '\\n'.join(lines)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/extra/#pyrevit.coreutils.markdown.extensions.extra.MarkdownInHtmlProcessor.test","title":"<code>test(parent, block)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/extra.py</code> <pre><code>def test(self, parent, block):\n    return block == util.TAG_PLACEHOLDER % \\\n                    unicode(self.parser.blockprocessors.tag_counter + 1)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/extra/#pyrevit.coreutils.markdown.extensions.extra.MarkdownInHtmlProcessor.run","title":"<code>run(parent, blocks, tail=None, nest=False)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/extra.py</code> <pre><code>def run(self, parent, blocks, tail=None, nest=False):\n    self._tag_data = self.parser.markdown.htmlStash.tag_data\n\n    self.parser.blockprocessors.tag_counter += 1\n    tag = self._tag_data[self.parser.blockprocessors.tag_counter]\n\n    # Create Element\n    markdown_value = tag['attrs'].pop('markdown')\n    element = util.etree.SubElement(parent, tag['tag'], tag['attrs'])\n\n    # Slice Off Block\n    if nest:\n        self.parser.parseBlocks(parent, tail)  # Process Tail\n        block = blocks[1:]\n    else:  # includes nests since a third level of nesting isn't supported\n        block = blocks[tag['left_index'] + 1: tag['right_index']]\n        del blocks[:tag['right_index']]\n\n    # Process Text\n    if (self.parser.blockprocessors.contain_span_tags.match(  # Span Mode\n            tag['tag']) and markdown_value != 'block') or \\\n            markdown_value == 'span':\n        element.text = '\\n'.join(block)\n    else:                                                     # Block Mode\n        i = self.parser.blockprocessors.tag_counter + 1\n        if len(self._tag_data) &gt; i and self._tag_data[i]['left_index']:\n            first_subelement_index = self._tag_data[i]['left_index'] - 1\n            self.parser.parseBlocks(\n                element, block[:first_subelement_index])\n            if not nest:\n                block = self._process_nests(element, block)\n        else:\n            self.parser.parseBlocks(element, block)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/extra/#pyrevit.coreutils.markdown.extensions.extra-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/extra/#pyrevit.coreutils.markdown.extensions.extra.makeExtension","title":"<code>makeExtension(*args, **kwargs)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/extra.py</code> <pre><code>def makeExtension(*args, **kwargs):\n    return ExtraExtension(*args, **kwargs)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/fenced_code/","title":"fenced_code","text":"<p>Fenced Code Extension for Python Markdown.</p> <p>This extension adds Fenced Code Blocks to Python-Markdown.</p> <p>See https://pythonhosted.org/Markdown/extensions/fenced_code_blocks.html for documentation.</p> <p>Original code Copyright 2007-2008 Waylan Limberg.</p> <p>All changes Copyright 2008-2014 The Python Markdown Project</p> <p>License: BSD</p>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/fenced_code/#pyrevit.coreutils.markdown.extensions.fenced_code-classes","title":"Classes","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/fenced_code/#pyrevit.coreutils.markdown.extensions.fenced_code.FencedCodeExtension","title":"<code>FencedCodeExtension(*args, **kwargs)</code>","text":"<p>               Bases: <code>Extension</code></p> <p>Fenced code extension.</p> <p>Initiate Extension and set up configs.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def __init__(self, *args, **kwargs):\n    \"\"\"Initiate Extension and set up configs.\"\"\"\n    # check for configs arg for backward compat.\n    # (there only ever used to be one so we use arg[0])\n    if len(args):\n        if args[0] is not None:\n            self.setConfigs(args[0])\n        warnings.warn('Extension classes accepting positional args is '\n                      'pending Deprecation. Each setting should be '\n                      'passed into the Class as a keyword. Positional '\n                      'args are deprecated and will raise '\n                      'an error in version 2.7. See the Release Notes for '\n                      'Python-Markdown version 2.6 for more info.',\n                      DeprecationWarning)\n    # check for configs kwarg for backward compat.\n    if 'configs' in kwargs.keys():\n        if kwargs['configs'] is not None:\n            self.setConfigs(kwargs.pop('configs', {}))\n        warnings.warn('Extension classes accepting a dict on the single '\n                      'keyword \"config\" is pending Deprecation. Each '\n                      'setting should be passed into the Class as a '\n                      'keyword directly. The \"config\" keyword is '\n                      'deprecated and raise an error in '\n                      'version 2.7. See the Release Notes for '\n                      'Python-Markdown version 2.6 for more info.',\n                      DeprecationWarning)\n    # finally, use kwargs\n    self.setConfigs(kwargs)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/fenced_code/#pyrevit.coreutils.markdown.extensions.fenced_code.FencedCodeExtension-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/fenced_code/#pyrevit.coreutils.markdown.extensions.fenced_code.FencedCodeExtension.config","title":"<code>config = {}</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/fenced_code/#pyrevit.coreutils.markdown.extensions.fenced_code.FencedCodeExtension-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/fenced_code/#pyrevit.coreutils.markdown.extensions.fenced_code.FencedCodeExtension.getConfig","title":"<code>getConfig(key, default='')</code>","text":"<p>Return a setting for the given key or an empty string.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def getConfig(self, key, default=''):\n    \"\"\"Return a setting for the given key or an empty string.\"\"\"\n    if key in self.config:\n        return self.config[key][0]\n    else:\n        return default\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/fenced_code/#pyrevit.coreutils.markdown.extensions.fenced_code.FencedCodeExtension.getConfigs","title":"<code>getConfigs()</code>","text":"<p>Return all configs settings as a dict.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def getConfigs(self):\n    \"\"\"Return all configs settings as a dict.\"\"\"\n    return dict([(key, self.getConfig(key)) for key in self.config.keys()])\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/fenced_code/#pyrevit.coreutils.markdown.extensions.fenced_code.FencedCodeExtension.getConfigInfo","title":"<code>getConfigInfo()</code>","text":"<p>Return all config descriptions as a list of tuples.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def getConfigInfo(self):\n    \"\"\"Return all config descriptions as a list of tuples.\"\"\"\n    return [(key, self.config[key][1]) for key in self.config.keys()]\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/fenced_code/#pyrevit.coreutils.markdown.extensions.fenced_code.FencedCodeExtension.setConfig","title":"<code>setConfig(key, value)</code>","text":"<p>Set a config setting for <code>key</code> with the given <code>value</code>.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def setConfig(self, key, value):\n    \"\"\"Set a config setting for `key` with the given `value`.\"\"\"\n    if isinstance(self.config[key][0], bool):\n        value = parseBoolValue(value)\n    if self.config[key][0] is None:\n        value = parseBoolValue(value, preserve_none=True)\n    self.config[key][0] = value\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/fenced_code/#pyrevit.coreutils.markdown.extensions.fenced_code.FencedCodeExtension.setConfigs","title":"<code>setConfigs(items)</code>","text":"<p>Set multiple config settings given a dict or list of tuples.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def setConfigs(self, items):\n    \"\"\"Set multiple config settings given a dict or list of tuples.\"\"\"\n    if hasattr(items, 'items'):\n        # it's a dict\n        items = items.items()\n    for key, value in items:\n        self.setConfig(key, value)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/fenced_code/#pyrevit.coreutils.markdown.extensions.fenced_code.FencedCodeExtension.extendMarkdown","title":"<code>extendMarkdown(md, md_globals)</code>","text":"<p>Add FencedBlockPreprocessor to the Markdown instance.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/fenced_code.py</code> <pre><code>def extendMarkdown(self, md, md_globals):\n    \"\"\"Add FencedBlockPreprocessor to the Markdown instance.\"\"\"\n    md.registerExtension(self)\n\n    md.preprocessors.add('fenced_code_block',\n                         FencedBlockPreprocessor(md),\n                         \"&gt;normalize_whitespace\")\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/fenced_code/#pyrevit.coreutils.markdown.extensions.fenced_code.FencedBlockPreprocessor","title":"<code>FencedBlockPreprocessor(md)</code>","text":"<p>               Bases: <code>Preprocessor</code></p> <p>Fenced code block preprocessor.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/fenced_code.py</code> <pre><code>def __init__(self, md):\n    super(FencedBlockPreprocessor, self).__init__(md)\n\n    self.checked_for_codehilite = False\n    self.codehilite_conf = {}\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/fenced_code/#pyrevit.coreutils.markdown.extensions.fenced_code.FencedBlockPreprocessor-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/fenced_code/#pyrevit.coreutils.markdown.extensions.fenced_code.FencedBlockPreprocessor.markdown","title":"<code>markdown = markdown_instance</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/fenced_code/#pyrevit.coreutils.markdown.extensions.fenced_code.FencedBlockPreprocessor.FENCED_BLOCK_RE","title":"<code>FENCED_BLOCK_RE = re.compile('\\n(?P&lt;fence&gt;^(?:~{3,}|`{3,}))[ ]*         # Opening ``` or ~~~\\n(\\\\{?\\\\.?(?P&lt;lang&gt;[\\\\w#.+-]*))?[ ]*        # Optional {, and lang\\n# Optional highlight lines, single- or double-quote-delimited\\n(hl_lines=(?P&lt;quot&gt;\"|\\')(?P&lt;hl_lines&gt;.*?)(?P=quot))?[ ]*\\n}?[ ]*\\\\n                                # Optional closing }\\n(?P&lt;code&gt;.*?)(?&lt;=\\\\n)\\n(?P=fence)[ ]*$', re.MULTILINE | re.DOTALL | re.VERBOSE)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/fenced_code/#pyrevit.coreutils.markdown.extensions.fenced_code.FencedBlockPreprocessor.CODE_WRAP","title":"<code>CODE_WRAP = '&lt;pre&gt;&lt;code%s&gt;%s&lt;/code&gt;&lt;/pre&gt;'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/fenced_code/#pyrevit.coreutils.markdown.extensions.fenced_code.FencedBlockPreprocessor.LANG_TAG","title":"<code>LANG_TAG = ' class=\"%s\"'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/fenced_code/#pyrevit.coreutils.markdown.extensions.fenced_code.FencedBlockPreprocessor.checked_for_codehilite","title":"<code>checked_for_codehilite = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/fenced_code/#pyrevit.coreutils.markdown.extensions.fenced_code.FencedBlockPreprocessor.codehilite_conf","title":"<code>codehilite_conf = {}</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/fenced_code/#pyrevit.coreutils.markdown.extensions.fenced_code.FencedBlockPreprocessor-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/fenced_code/#pyrevit.coreutils.markdown.extensions.fenced_code.FencedBlockPreprocessor.run","title":"<code>run(lines)</code>","text":"<p>Match and store Fenced Code Blocks in the HtmlStash.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/fenced_code.py</code> <pre><code>def run(self, lines):\n    \"\"\"Match and store Fenced Code Blocks in the HtmlStash.\"\"\"\n    # Check for code hilite extension\n    if not self.checked_for_codehilite:\n        for ext in self.markdown.registeredExtensions:\n            if isinstance(ext, CodeHiliteExtension):\n                self.codehilite_conf = ext.config\n                break\n\n        self.checked_for_codehilite = True\n\n    text = \"\\n\".join(lines)\n    while 1:\n        m = self.FENCED_BLOCK_RE.search(text)\n        if m:\n            lang = ''\n            if m.group('lang'):\n                lang = self.LANG_TAG % m.group('lang')\n\n            # If config is not empty, then the codehighlite extension\n            # is enabled, so we call it to highlight the code\n            if self.codehilite_conf:\n                highliter = CodeHilite(\n                    m.group('code'),\n                    linenums=self.codehilite_conf['linenums'][0],\n                    guess_lang=self.codehilite_conf['guess_lang'][0],\n                    css_class=self.codehilite_conf['css_class'][0],\n                    style=self.codehilite_conf['pygments_style'][0],\n                    use_pygments=self.codehilite_conf['use_pygments'][0],\n                    lang=(m.group('lang') or None),\n                    noclasses=self.codehilite_conf['noclasses'][0],\n                    hl_lines=parse_hl_lines(m.group('hl_lines'))\n                )\n\n                code = highliter.hilite()\n            else:\n                code = self.CODE_WRAP % (lang,\n                                         self._escape(m.group('code')))\n\n            placeholder = self.markdown.htmlStash.store(code, safe=True)\n            text = '%s\\n%s\\n%s' % (text[:m.start()],\n                                   placeholder,\n                                   text[m.end():])\n        else:\n            break\n    return text.split(\"\\n\")\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/fenced_code/#pyrevit.coreutils.markdown.extensions.fenced_code-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/fenced_code/#pyrevit.coreutils.markdown.extensions.fenced_code.makeExtension","title":"<code>makeExtension(*args, **kwargs)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/fenced_code.py</code> <pre><code>def makeExtension(*args, **kwargs):\n    return FencedCodeExtension(*args, **kwargs)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/footnotes/","title":"footnotes","text":"<p>Footnotes Extension for Python-Markdown.</p> <p>Adds footnote handling to Python-Markdown.</p> <p>See https://pythonhosted.org/Markdown/extensions/footnotes.html for documentation.</p> <p>Copyright The Python Markdown Project</p> <p>License: BSD</p>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/footnotes/#pyrevit.coreutils.markdown.extensions.footnotes-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/footnotes/#pyrevit.coreutils.markdown.extensions.footnotes.FN_BACKLINK_TEXT","title":"<code>FN_BACKLINK_TEXT = util.STX + 'zz1337820767766393qq' + util.ETX</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/footnotes/#pyrevit.coreutils.markdown.extensions.footnotes.NBSP_PLACEHOLDER","title":"<code>NBSP_PLACEHOLDER = util.STX + 'qq3936677670287331zz' + util.ETX</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/footnotes/#pyrevit.coreutils.markdown.extensions.footnotes.DEF_RE","title":"<code>DEF_RE = re.compile('[ ]{0,3}\\\\[\\\\^([^\\\\]]*)\\\\]:\\\\s*(.*)')</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/footnotes/#pyrevit.coreutils.markdown.extensions.footnotes.TABBED_RE","title":"<code>TABBED_RE = re.compile('((\\\\t)|(    ))(.*)')</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/footnotes/#pyrevit.coreutils.markdown.extensions.footnotes.RE_REF_ID","title":"<code>RE_REF_ID = re.compile('(fnref)(\\\\d+)')</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/footnotes/#pyrevit.coreutils.markdown.extensions.footnotes-classes","title":"Classes","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/footnotes/#pyrevit.coreutils.markdown.extensions.footnotes.FootnoteExtension","title":"<code>FootnoteExtension(*args, **kwargs)</code>","text":"<p>               Bases: <code>Extension</code></p> <p>Footnote Extension.</p> <p>Setup configs.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/footnotes.py</code> <pre><code>def __init__(self, *args, **kwargs):\n    \"\"\"Setup configs.\"\"\"\n    self.config = {\n        'PLACE_MARKER':\n            [\"///Footnotes Go Here///\",\n             \"The text string that marks where the footnotes go\"],\n        'UNIQUE_IDS':\n            [False,\n             \"Avoid name collisions across \"\n             \"multiple calls to reset().\"],\n        \"BACKLINK_TEXT\":\n            [\"&amp;#8617;\",\n             \"The text string that links from the footnote \"\n             \"to the reader's place.\"]\n    }\n    super(FootnoteExtension, self).__init__(*args, **kwargs)\n\n    # In multiple invocations, emit links that don't get tangled.\n    self.unique_prefix = 0\n    self.found_refs = {}\n    self.used_refs = set()\n\n    self.reset()\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/footnotes/#pyrevit.coreutils.markdown.extensions.footnotes.FootnoteExtension-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/footnotes/#pyrevit.coreutils.markdown.extensions.footnotes.FootnoteExtension.config","title":"<code>config = {'PLACE_MARKER': ['///Footnotes Go Here///', 'The text string that marks where the footnotes go'], 'UNIQUE_IDS': [False, 'Avoid name collisions across multiple calls to reset().'], 'BACKLINK_TEXT': ['&amp;#8617;', \"The text string that links from the footnote to the reader's place.\"]}</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/footnotes/#pyrevit.coreutils.markdown.extensions.footnotes.FootnoteExtension.unique_prefix","title":"<code>unique_prefix = 0</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/footnotes/#pyrevit.coreutils.markdown.extensions.footnotes.FootnoteExtension.found_refs","title":"<code>found_refs = {}</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/footnotes/#pyrevit.coreutils.markdown.extensions.footnotes.FootnoteExtension.used_refs","title":"<code>used_refs = set()</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/footnotes/#pyrevit.coreutils.markdown.extensions.footnotes.FootnoteExtension-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/footnotes/#pyrevit.coreutils.markdown.extensions.footnotes.FootnoteExtension.getConfig","title":"<code>getConfig(key, default='')</code>","text":"<p>Return a setting for the given key or an empty string.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def getConfig(self, key, default=''):\n    \"\"\"Return a setting for the given key or an empty string.\"\"\"\n    if key in self.config:\n        return self.config[key][0]\n    else:\n        return default\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/footnotes/#pyrevit.coreutils.markdown.extensions.footnotes.FootnoteExtension.getConfigs","title":"<code>getConfigs()</code>","text":"<p>Return all configs settings as a dict.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def getConfigs(self):\n    \"\"\"Return all configs settings as a dict.\"\"\"\n    return dict([(key, self.getConfig(key)) for key in self.config.keys()])\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/footnotes/#pyrevit.coreutils.markdown.extensions.footnotes.FootnoteExtension.getConfigInfo","title":"<code>getConfigInfo()</code>","text":"<p>Return all config descriptions as a list of tuples.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def getConfigInfo(self):\n    \"\"\"Return all config descriptions as a list of tuples.\"\"\"\n    return [(key, self.config[key][1]) for key in self.config.keys()]\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/footnotes/#pyrevit.coreutils.markdown.extensions.footnotes.FootnoteExtension.setConfig","title":"<code>setConfig(key, value)</code>","text":"<p>Set a config setting for <code>key</code> with the given <code>value</code>.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def setConfig(self, key, value):\n    \"\"\"Set a config setting for `key` with the given `value`.\"\"\"\n    if isinstance(self.config[key][0], bool):\n        value = parseBoolValue(value)\n    if self.config[key][0] is None:\n        value = parseBoolValue(value, preserve_none=True)\n    self.config[key][0] = value\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/footnotes/#pyrevit.coreutils.markdown.extensions.footnotes.FootnoteExtension.setConfigs","title":"<code>setConfigs(items)</code>","text":"<p>Set multiple config settings given a dict or list of tuples.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def setConfigs(self, items):\n    \"\"\"Set multiple config settings given a dict or list of tuples.\"\"\"\n    if hasattr(items, 'items'):\n        # it's a dict\n        items = items.items()\n    for key, value in items:\n        self.setConfig(key, value)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/footnotes/#pyrevit.coreutils.markdown.extensions.footnotes.FootnoteExtension.extendMarkdown","title":"<code>extendMarkdown(md, md_globals)</code>","text":"<p>Add pieces to Markdown.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/footnotes.py</code> <pre><code>def extendMarkdown(self, md, md_globals):\n    \"\"\"Add pieces to Markdown.\"\"\"\n    md.registerExtension(self)\n    self.parser = md.parser\n    self.md = md\n    # Insert a preprocessor before ReferencePreprocessor\n    md.preprocessors.add(\n        \"footnote\", FootnotePreprocessor(self), \"&lt;reference\"\n    )\n    # Insert an inline pattern before ImageReferencePattern\n    FOOTNOTE_RE = r'\\[\\^([^\\]]*)\\]'  # blah blah [^1] blah\n    md.inlinePatterns.add(\n        \"footnote\", FootnotePattern(FOOTNOTE_RE, self), \"&lt;reference\"\n    )\n    # Insert a tree-processor that would actually add the footnote div\n    # This must be before all other treeprocessors (i.e., inline and\n    # codehilite) so they can run on the the contents of the div.\n    md.treeprocessors.add(\n        \"footnote\", FootnoteTreeprocessor(self), \"_begin\"\n    )\n\n    # Insert a tree-processor that will run after inline is done.\n    # In this tree-processor we want to check our duplicate footnote tracker\n    # And add additional backrefs to the footnote pointing back to the\n    # duplicated references.\n    md.treeprocessors.add(\n        \"footnote-duplicate\", FootnotePostTreeprocessor(self), '&gt;inline'\n    )\n\n    # Insert a postprocessor after amp_substitute oricessor\n    md.postprocessors.add(\n        \"footnote\", FootnotePostprocessor(self), \"&gt;amp_substitute\"\n    )\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/footnotes/#pyrevit.coreutils.markdown.extensions.footnotes.FootnoteExtension.reset","title":"<code>reset()</code>","text":"<p>Clear footnotes on reset, and prepare for distinct document.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/footnotes.py</code> <pre><code>def reset(self):\n    \"\"\"Clear footnotes on reset, and prepare for distinct document.\"\"\"\n    self.footnotes = OrderedDict()\n    self.unique_prefix += 1\n    self.found_refs = {}\n    self.used_refs = set()\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/footnotes/#pyrevit.coreutils.markdown.extensions.footnotes.FootnoteExtension.unique_ref","title":"<code>unique_ref(reference, found=False)</code>","text":"<p>Get a unique reference if there are duplicates.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/footnotes.py</code> <pre><code>def unique_ref(self, reference, found=False):\n    \"\"\"Get a unique reference if there are duplicates.\"\"\"\n    if not found:\n        return reference\n\n    original_ref = reference\n    while reference in self.used_refs:\n        ref, rest = reference.split(self.get_separator(), 1)\n        m = RE_REF_ID.match(ref)\n        if m:\n            reference = '%s%d%s%s' % (m.group(1), int(m.group(2))+1, self.get_separator(), rest)\n        else:\n            reference = '%s%d%s%s' % (ref, 2, self.get_separator(), rest)\n\n    self.used_refs.add(reference)\n    if original_ref in self.found_refs:\n        self.found_refs[original_ref] += 1\n    else:\n        self.found_refs[original_ref] = 1\n    return reference\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/footnotes/#pyrevit.coreutils.markdown.extensions.footnotes.FootnoteExtension.findFootnotesPlaceholder","title":"<code>findFootnotesPlaceholder(root)</code>","text":"<p>Return ElementTree Element that contains Footnote placeholder.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/footnotes.py</code> <pre><code>def findFootnotesPlaceholder(self, root):\n    \"\"\"Return ElementTree Element that contains Footnote placeholder.\"\"\"\n    def finder(element):\n        for child in element:\n            if child.text:\n                if child.text.find(self.getConfig(\"PLACE_MARKER\")) &gt; -1:\n                    return child, element, True\n            if child.tail:\n                if child.tail.find(self.getConfig(\"PLACE_MARKER\")) &gt; -1:\n                    return child, element, False\n            child_res = finder(child)\n            if child_res is not None:\n                return child_res\n        return None\n\n    res = finder(root)\n    return res\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/footnotes/#pyrevit.coreutils.markdown.extensions.footnotes.FootnoteExtension.setFootnote","title":"<code>setFootnote(id, text)</code>","text":"<p>Store a footnote for later retrieval.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/footnotes.py</code> <pre><code>def setFootnote(self, id, text):\n    \"\"\"Store a footnote for later retrieval.\"\"\"\n    self.footnotes[id] = text\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/footnotes/#pyrevit.coreutils.markdown.extensions.footnotes.FootnoteExtension.get_separator","title":"<code>get_separator()</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/footnotes.py</code> <pre><code>def get_separator(self):\n    if self.md.output_format in ['html5', 'xhtml5']:\n        return '-'\n    return ':'\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/footnotes/#pyrevit.coreutils.markdown.extensions.footnotes.FootnoteExtension.makeFootnoteId","title":"<code>makeFootnoteId(id)</code>","text":"<p>Return footnote link id.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/footnotes.py</code> <pre><code>def makeFootnoteId(self, id):\n    \"\"\"Return footnote link id.\"\"\"\n    if self.getConfig(\"UNIQUE_IDS\"):\n        return 'fn%s%d-%s' % (self.get_separator(), self.unique_prefix, id)\n    else:\n        return 'fn%s%s' % (self.get_separator(), id)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/footnotes/#pyrevit.coreutils.markdown.extensions.footnotes.FootnoteExtension.makeFootnoteRefId","title":"<code>makeFootnoteRefId(id, found=False)</code>","text":"<p>Return footnote back-link id.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/footnotes.py</code> <pre><code>def makeFootnoteRefId(self, id, found=False):\n    \"\"\"Return footnote back-link id.\"\"\"\n    if self.getConfig(\"UNIQUE_IDS\"):\n        return self.unique_ref('fnref%s%d-%s' % (self.get_separator(), self.unique_prefix, id), found)\n    else:\n        return self.unique_ref('fnref%s%s' % (self.get_separator(), id), found)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/footnotes/#pyrevit.coreutils.markdown.extensions.footnotes.FootnoteExtension.makeFootnotesDiv","title":"<code>makeFootnotesDiv(root)</code>","text":"<p>Return div of footnotes as et Element.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/footnotes.py</code> <pre><code>def makeFootnotesDiv(self, root):\n    \"\"\"Return div of footnotes as et Element.\"\"\"\n    if not list(self.footnotes.keys()):\n        return None\n\n    div = util.etree.Element(\"div\")\n    div.set('class', 'footnote')\n    util.etree.SubElement(div, \"hr\")\n    ol = util.etree.SubElement(div, \"ol\")\n    surrogate_parent = util.etree.Element(\"div\")\n\n    for id in self.footnotes.keys():\n        li = util.etree.SubElement(ol, \"li\")\n        li.set(\"id\", self.makeFootnoteId(id))\n        # Parse footnote with surrogate parent as li cannot be used.\n        # List block handlers have special logic to deal with li.\n        # When we are done parsing, we will copy everything over to li.\n        self.parser.parseChunk(surrogate_parent, self.footnotes[id])\n        for el in list(surrogate_parent):\n            li.append(el)\n            surrogate_parent.remove(el)\n        backlink = util.etree.Element(\"a\")\n        backlink.set(\"href\", \"#\" + self.makeFootnoteRefId(id))\n        if self.md.output_format not in ['html5', 'xhtml5']:\n            backlink.set(\"rev\", \"footnote\")  # Invalid in HTML5\n        backlink.set(\"class\", \"footnote-backref\")\n        backlink.set(\n            \"title\",\n            \"Jump back to footnote %d in the text\" %\n            (self.footnotes.index(id)+1)\n        )\n        backlink.text = FN_BACKLINK_TEXT\n\n        if li.getchildren():\n            node = li[-1]\n            if node.tag == \"p\":\n                node.text = node.text + NBSP_PLACEHOLDER\n                node.append(backlink)\n            else:\n                p = util.etree.SubElement(li, \"p\")\n                p.append(backlink)\n    return div\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/footnotes/#pyrevit.coreutils.markdown.extensions.footnotes.FootnotePreprocessor","title":"<code>FootnotePreprocessor(footnotes)</code>","text":"<p>               Bases: <code>Preprocessor</code></p> <p>Find all footnote references and store for later use.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/footnotes.py</code> <pre><code>def __init__(self, footnotes):\n    self.footnotes = footnotes\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/footnotes/#pyrevit.coreutils.markdown.extensions.footnotes.FootnotePreprocessor-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/footnotes/#pyrevit.coreutils.markdown.extensions.footnotes.FootnotePreprocessor.markdown","title":"<code>markdown = markdown_instance</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/footnotes/#pyrevit.coreutils.markdown.extensions.footnotes.FootnotePreprocessor.footnotes","title":"<code>footnotes = footnotes</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/footnotes/#pyrevit.coreutils.markdown.extensions.footnotes.FootnotePreprocessor-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/footnotes/#pyrevit.coreutils.markdown.extensions.footnotes.FootnotePreprocessor.run","title":"<code>run(lines)</code>","text":"<p>Loop through lines and find, set, and remove footnote definitions.</p> <p>Keywords:</p> <ul> <li>lines: A list of lines of text</li> </ul> <p>Return: A list of lines of text with footnote definitions removed.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/footnotes.py</code> <pre><code>def run(self, lines):\n    \"\"\"Loop through lines and find, set, and remove footnote definitions.\n\n    Keywords:\n\n    * lines: A list of lines of text\n\n    Return: A list of lines of text with footnote definitions removed.\n\n    \"\"\"\n    newlines = []\n    i = 0\n    while True:\n        m = DEF_RE.match(lines[i])\n        if m:\n            fn, _i = self.detectTabbed(lines[i+1:])\n            fn.insert(0, m.group(2))\n            i += _i-1  # skip past footnote\n            self.footnotes.setFootnote(m.group(1), \"\\n\".join(fn))\n        else:\n            newlines.append(lines[i])\n        if len(lines) &gt; i+1:\n            i += 1\n        else:\n            break\n    return newlines\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/footnotes/#pyrevit.coreutils.markdown.extensions.footnotes.FootnotePreprocessor.detectTabbed","title":"<code>detectTabbed(lines)</code>","text":"<p>Find indented text and remove indent before further proccesing.</p> <p>Parameters:</p> Name Type Description Default <code>lines</code> <code>list[str]</code> <p>text lines</p> required <p>Returns:</p> Type Description <code>tuple[list, int]</code> <p>post processed items and the index of last line.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/footnotes.py</code> <pre><code>def detectTabbed(self, lines):\n    \"\"\"Find indented text and remove indent before further proccesing.\n\n    Args:\n        lines (list[str]): text lines\n\n    Returns:\n        (tuple[list, int]): post processed items and the index of last line.\n\n    \"\"\"\n    items = []\n    blank_line = False  # have we encountered a blank line yet?\n    i = 0  # to keep track of where we are\n\n    def detab(line):\n        match = TABBED_RE.match(line)\n        if match:\n            return match.group(4)\n\n    for line in lines:\n        if line.strip():  # Non-blank line\n            detabbed_line = detab(line)\n            if detabbed_line:\n                items.append(detabbed_line)\n                i += 1\n                continue\n            elif not blank_line and not DEF_RE.match(line):\n                # not tabbed but still part of first par.\n                items.append(line)\n                i += 1\n                continue\n            else:\n                return items, i+1\n\n        else:  # Blank line: _maybe_ we are done.\n            blank_line = True\n            i += 1  # advance\n\n            # Find the next non-blank line\n            for j in range(i, len(lines)):\n                if lines[j].strip():\n                    next_line = lines[j]\n                    break\n            else:\n                break  # There is no more text; we are done.\n\n            # Check if the next non-blank line is tabbed\n            if detab(next_line):  # Yes, more work to do.\n                items.append(\"\")\n                continue\n            else:\n                break  # No, we are done.\n    else:\n        i += 1\n\n    return items, i\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/footnotes/#pyrevit.coreutils.markdown.extensions.footnotes.FootnotePattern","title":"<code>FootnotePattern(pattern, footnotes)</code>","text":"<p>               Bases: <code>Pattern</code></p> <p>InlinePattern for footnote markers in a document's body text.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/footnotes.py</code> <pre><code>def __init__(self, pattern, footnotes):\n    super(FootnotePattern, self).__init__(pattern)\n    self.footnotes = footnotes\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/footnotes/#pyrevit.coreutils.markdown.extensions.footnotes.FootnotePattern-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/footnotes/#pyrevit.coreutils.markdown.extensions.footnotes.FootnotePattern.pattern","title":"<code>pattern = pattern</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/footnotes/#pyrevit.coreutils.markdown.extensions.footnotes.FootnotePattern.compiled_re","title":"<code>compiled_re = re.compile('^(.*?)%s(.*)$' % pattern, re.DOTALL | re.UNICODE)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/footnotes/#pyrevit.coreutils.markdown.extensions.footnotes.FootnotePattern.safe_mode","title":"<code>safe_mode = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/footnotes/#pyrevit.coreutils.markdown.extensions.footnotes.FootnotePattern.markdown","title":"<code>markdown = markdown_instance</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/footnotes/#pyrevit.coreutils.markdown.extensions.footnotes.FootnotePattern.footnotes","title":"<code>footnotes = footnotes</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/footnotes/#pyrevit.coreutils.markdown.extensions.footnotes.FootnotePattern-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/footnotes/#pyrevit.coreutils.markdown.extensions.footnotes.FootnotePattern.getCompiledRegExp","title":"<code>getCompiledRegExp()</code>","text":"<p>Return a compiled regular expression.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def getCompiledRegExp(self):\n    \"\"\"Return a compiled regular expression.\"\"\"\n    return self.compiled_re\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/footnotes/#pyrevit.coreutils.markdown.extensions.footnotes.FootnotePattern.type","title":"<code>type()</code>","text":"<p>Return class name, to define pattern type.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def type(self):\n    \"\"\"Return class name, to define pattern type.\"\"\"\n    return self.__class__.__name__\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/footnotes/#pyrevit.coreutils.markdown.extensions.footnotes.FootnotePattern.unescape","title":"<code>unescape(text)</code>","text":"<p>Return unescaped text given text with an inline placeholder.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def unescape(self, text):\n    \"\"\"Return unescaped text given text with an inline placeholder.\"\"\"\n    try:\n        stash = self.markdown.treeprocessors['inline'].stashed_nodes\n    except KeyError:  # pragma: no cover\n        return text\n\n    def itertext(el):  # pragma: no cover\n        \"\"\"Reimplement Element.itertext for older python versions.\"\"\"\n        tag = el.tag\n        if not isinstance(tag, util.string_type) and tag is not None:\n            return\n        if el.text:\n            yield el.text\n        for e in el:\n            for s in itertext(e):\n                yield s\n            if e.tail:\n                yield e.tail\n\n    def get_stash(m):\n        id = m.group(1)\n        if id in stash:\n            value = stash.get(id)\n            if isinstance(value, util.string_type):\n                return value\n            else:\n                # An etree Element - return text content only\n                return ''.join(itertext(value))\n    return util.INLINE_PLACEHOLDER_RE.sub(get_stash, text)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/footnotes/#pyrevit.coreutils.markdown.extensions.footnotes.FootnotePattern.handleMatch","title":"<code>handleMatch(m)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/footnotes.py</code> <pre><code>def handleMatch(self, m):\n    id = m.group(2)\n    if id in self.footnotes.footnotes.keys():\n        sup = util.etree.Element(\"sup\")\n        a = util.etree.SubElement(sup, \"a\")\n        sup.set('id', self.footnotes.makeFootnoteRefId(id, found=True))\n        a.set('href', '#' + self.footnotes.makeFootnoteId(id))\n        if self.footnotes.md.output_format not in ['html5', 'xhtml5']:\n            a.set('rel', 'footnote')  # invalid in HTML5\n        a.set('class', 'footnote-ref')\n        a.text = unicode(self.footnotes.footnotes.index(id) + 1)\n        return sup\n    else:\n        return None\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/footnotes/#pyrevit.coreutils.markdown.extensions.footnotes.FootnotePostTreeprocessor","title":"<code>FootnotePostTreeprocessor(footnotes)</code>","text":"<p>               Bases: <code>Treeprocessor</code></p> <p>Ammend footnote div with duplicates.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/footnotes.py</code> <pre><code>def __init__(self, footnotes):\n    self.footnotes = footnotes\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/footnotes/#pyrevit.coreutils.markdown.extensions.footnotes.FootnotePostTreeprocessor-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/footnotes/#pyrevit.coreutils.markdown.extensions.footnotes.FootnotePostTreeprocessor.markdown","title":"<code>markdown = markdown_instance</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/footnotes/#pyrevit.coreutils.markdown.extensions.footnotes.FootnotePostTreeprocessor.footnotes","title":"<code>footnotes = footnotes</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/footnotes/#pyrevit.coreutils.markdown.extensions.footnotes.FootnotePostTreeprocessor-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/footnotes/#pyrevit.coreutils.markdown.extensions.footnotes.FootnotePostTreeprocessor.add_duplicates","title":"<code>add_duplicates(li, duplicates)</code>","text":"<p>Adjust current li and add the duplicates: fnref2, fnref3, etc.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/footnotes.py</code> <pre><code>def add_duplicates(self, li, duplicates):\n    \"\"\"Adjust current li and add the duplicates: fnref2, fnref3, etc.\"\"\"\n    for link in li.iter('a'):\n        # Find the link that needs to be duplicated.\n        if link.attrib.get('class', '') == 'footnote-backref':\n            ref, rest = link.attrib['href'].split(self.footnotes.get_separator(), 1)\n            # Duplicate link the number of times we need to\n            # and point the to the appropriate references.\n            links = []\n            for index in range(2, duplicates + 1):\n                sib_link = copy.deepcopy(link)\n                sib_link.attrib['href'] = '%s%d%s%s' % (ref, index, self.footnotes.get_separator(), rest)\n                links.append(sib_link)\n                self.offset += 1\n            # Add all the new duplicate links.\n            el = list(li)[-1]\n            for l in links:\n                el.append(l)\n            break\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/footnotes/#pyrevit.coreutils.markdown.extensions.footnotes.FootnotePostTreeprocessor.get_num_duplicates","title":"<code>get_num_duplicates(li)</code>","text":"<p>Get the number of duplicate refs of the footnote.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/footnotes.py</code> <pre><code>def get_num_duplicates(self, li):\n    \"\"\"Get the number of duplicate refs of the footnote.\"\"\"\n    fn, rest = li.attrib.get('id', '').split(self.footnotes.get_separator(), 1)\n    link_id = '%sref%s%s' % (fn, self.footnotes.get_separator(), rest)\n    return self.footnotes.found_refs.get(link_id, 0)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/footnotes/#pyrevit.coreutils.markdown.extensions.footnotes.FootnotePostTreeprocessor.handle_duplicates","title":"<code>handle_duplicates(parent)</code>","text":"<p>Find duplicate footnotes and format and add the duplicates.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/footnotes.py</code> <pre><code>def handle_duplicates(self, parent):\n    \"\"\"Find duplicate footnotes and format and add the duplicates.\"\"\"\n    for li in list(parent):\n        # Check number of duplicates footnotes and insert\n        # additional links if needed.\n        count = self.get_num_duplicates(li)\n        if count &gt; 1:\n            self.add_duplicates(li, count)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/footnotes/#pyrevit.coreutils.markdown.extensions.footnotes.FootnotePostTreeprocessor.run","title":"<code>run(root)</code>","text":"<p>Crawl the footnote div and add missing duplicate footnotes.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/footnotes.py</code> <pre><code>def run(self, root):\n    \"\"\"Crawl the footnote div and add missing duplicate footnotes.\"\"\"\n    self.offset = 0\n    for div in root.iter('div'):\n        if div.attrib.get('class', '') == 'footnote':\n            # Footnotes shoul be under the first orderd list under\n            # the footnote div.  So once we find it, quit.\n            for ol in div.iter('ol'):\n                self.handle_duplicates(ol)\n                break\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/footnotes/#pyrevit.coreutils.markdown.extensions.footnotes.FootnoteTreeprocessor","title":"<code>FootnoteTreeprocessor(footnotes)</code>","text":"<p>               Bases: <code>Treeprocessor</code></p> <p>Build and append footnote div to end of document.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/footnotes.py</code> <pre><code>def __init__(self, footnotes):\n    self.footnotes = footnotes\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/footnotes/#pyrevit.coreutils.markdown.extensions.footnotes.FootnoteTreeprocessor-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/footnotes/#pyrevit.coreutils.markdown.extensions.footnotes.FootnoteTreeprocessor.markdown","title":"<code>markdown = markdown_instance</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/footnotes/#pyrevit.coreutils.markdown.extensions.footnotes.FootnoteTreeprocessor.footnotes","title":"<code>footnotes = footnotes</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/footnotes/#pyrevit.coreutils.markdown.extensions.footnotes.FootnoteTreeprocessor-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/footnotes/#pyrevit.coreutils.markdown.extensions.footnotes.FootnoteTreeprocessor.run","title":"<code>run(root)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/footnotes.py</code> <pre><code>def run(self, root):\n    footnotesDiv = self.footnotes.makeFootnotesDiv(root)\n    if footnotesDiv is not None:\n        result = self.footnotes.findFootnotesPlaceholder(root)\n        if result:\n            child, parent, isText = result\n            ind = parent.getchildren().index(child)\n            if isText:\n                parent.remove(child)\n                parent.insert(ind, footnotesDiv)\n            else:\n                parent.insert(ind + 1, footnotesDiv)\n                child.tail = None\n        else:\n            root.append(footnotesDiv)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/footnotes/#pyrevit.coreutils.markdown.extensions.footnotes.FootnotePostprocessor","title":"<code>FootnotePostprocessor(footnotes)</code>","text":"<p>               Bases: <code>Postprocessor</code></p> <p>Replace placeholders with html entities.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/footnotes.py</code> <pre><code>def __init__(self, footnotes):\n    self.footnotes = footnotes\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/footnotes/#pyrevit.coreutils.markdown.extensions.footnotes.FootnotePostprocessor-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/footnotes/#pyrevit.coreutils.markdown.extensions.footnotes.FootnotePostprocessor.markdown","title":"<code>markdown = markdown_instance</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/footnotes/#pyrevit.coreutils.markdown.extensions.footnotes.FootnotePostprocessor.footnotes","title":"<code>footnotes = footnotes</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/footnotes/#pyrevit.coreutils.markdown.extensions.footnotes.FootnotePostprocessor-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/footnotes/#pyrevit.coreutils.markdown.extensions.footnotes.FootnotePostprocessor.run","title":"<code>run(text)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/footnotes.py</code> <pre><code>def run(self, text):\n    text = text.replace(\n        FN_BACKLINK_TEXT, self.footnotes.getConfig(\"BACKLINK_TEXT\")\n    )\n    return text.replace(NBSP_PLACEHOLDER, \"&amp;#160;\")\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/footnotes/#pyrevit.coreutils.markdown.extensions.footnotes-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/footnotes/#pyrevit.coreutils.markdown.extensions.footnotes.makeExtension","title":"<code>makeExtension(*args, **kwargs)</code>","text":"<p>Return an instance of the FootnoteExtension.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/footnotes.py</code> <pre><code>def makeExtension(*args, **kwargs):\n    \"\"\"Return an instance of the FootnoteExtension.\"\"\"\n    return FootnoteExtension(*args, **kwargs)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/headerid/","title":"headerid","text":"<p>HeaderID Extension for Python-Markdown.</p> <p>Auto-generate id attributes for HTML headers.</p> <p>See https://pythonhosted.org/Markdown/extensions/header_id.html for documentation.</p> <p>Original code Copyright 2007-2011 Waylan Limberg.</p> <p>All changes Copyright 2011-2014 The Python Markdown Project</p> <p>License: BSD</p>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/headerid/#pyrevit.coreutils.markdown.extensions.headerid-classes","title":"Classes","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/headerid/#pyrevit.coreutils.markdown.extensions.headerid.HeaderIdTreeprocessor","title":"<code>HeaderIdTreeprocessor(markdown_instance=None)</code>","text":"<p>               Bases: <code>Treeprocessor</code></p> <p>Assign IDs to headers.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/util.py</code> <pre><code>def __init__(self, markdown_instance=None):\n    if markdown_instance:\n        self.markdown = markdown_instance\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/headerid/#pyrevit.coreutils.markdown.extensions.headerid.HeaderIdTreeprocessor-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/headerid/#pyrevit.coreutils.markdown.extensions.headerid.HeaderIdTreeprocessor.markdown","title":"<code>markdown = markdown_instance</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/headerid/#pyrevit.coreutils.markdown.extensions.headerid.HeaderIdTreeprocessor.IDs","title":"<code>IDs = set()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/headerid/#pyrevit.coreutils.markdown.extensions.headerid.HeaderIdTreeprocessor-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/headerid/#pyrevit.coreutils.markdown.extensions.headerid.HeaderIdTreeprocessor.run","title":"<code>run(doc)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/headerid.py</code> <pre><code>def run(self, doc):\n    start_level, force_id = self._get_meta()\n    slugify = self.config['slugify']\n    sep = self.config['separator']\n    for elem in doc:\n        if elem.tag in ['h1', 'h2', 'h3', 'h4', 'h5', 'h6']:\n            if force_id:\n                if \"id\" in elem.attrib:\n                    id = elem.get('id')\n                else:\n                    id = stashedHTML2text(''.join(elem.itertext()), self.md)\n                    id = slugify(id, sep)\n                elem.set('id', unique(id, self.IDs))\n            if start_level:\n                level = int(elem.tag[-1]) + start_level\n                if level &gt; 6:\n                    level = 6\n                elem.tag = 'h%d' % level\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/headerid/#pyrevit.coreutils.markdown.extensions.headerid.HeaderIdExtension","title":"<code>HeaderIdExtension(*args, **kwargs)</code>","text":"<p>               Bases: <code>Extension</code></p> <p>Header ID extension.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/headerid.py</code> <pre><code>def __init__(self, *args, **kwargs):\n    # set defaults\n    self.config = {\n        'level': ['1', 'Base level for headers.'],\n        'forceid': ['True', 'Force all headers to have an id.'],\n        'separator': ['-', 'Word separator.'],\n        'slugify': [slugify, 'Callable to generate anchors']\n    }\n\n    super(HeaderIdExtension, self).__init__(*args, **kwargs)\n\n    warnings.warn(\n        'The HeaderId Extension is pending deprecation. Use the TOC Extension instead.',\n        PendingDeprecationWarning\n    )\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/headerid/#pyrevit.coreutils.markdown.extensions.headerid.HeaderIdExtension-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/headerid/#pyrevit.coreutils.markdown.extensions.headerid.HeaderIdExtension.config","title":"<code>config = {'level': ['1', 'Base level for headers.'], 'forceid': ['True', 'Force all headers to have an id.'], 'separator': ['-', 'Word separator.'], 'slugify': [slugify, 'Callable to generate anchors']}</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/headerid/#pyrevit.coreutils.markdown.extensions.headerid.HeaderIdExtension-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/headerid/#pyrevit.coreutils.markdown.extensions.headerid.HeaderIdExtension.getConfig","title":"<code>getConfig(key, default='')</code>","text":"<p>Return a setting for the given key or an empty string.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def getConfig(self, key, default=''):\n    \"\"\"Return a setting for the given key or an empty string.\"\"\"\n    if key in self.config:\n        return self.config[key][0]\n    else:\n        return default\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/headerid/#pyrevit.coreutils.markdown.extensions.headerid.HeaderIdExtension.getConfigs","title":"<code>getConfigs()</code>","text":"<p>Return all configs settings as a dict.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def getConfigs(self):\n    \"\"\"Return all configs settings as a dict.\"\"\"\n    return dict([(key, self.getConfig(key)) for key in self.config.keys()])\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/headerid/#pyrevit.coreutils.markdown.extensions.headerid.HeaderIdExtension.getConfigInfo","title":"<code>getConfigInfo()</code>","text":"<p>Return all config descriptions as a list of tuples.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def getConfigInfo(self):\n    \"\"\"Return all config descriptions as a list of tuples.\"\"\"\n    return [(key, self.config[key][1]) for key in self.config.keys()]\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/headerid/#pyrevit.coreutils.markdown.extensions.headerid.HeaderIdExtension.setConfig","title":"<code>setConfig(key, value)</code>","text":"<p>Set a config setting for <code>key</code> with the given <code>value</code>.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def setConfig(self, key, value):\n    \"\"\"Set a config setting for `key` with the given `value`.\"\"\"\n    if isinstance(self.config[key][0], bool):\n        value = parseBoolValue(value)\n    if self.config[key][0] is None:\n        value = parseBoolValue(value, preserve_none=True)\n    self.config[key][0] = value\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/headerid/#pyrevit.coreutils.markdown.extensions.headerid.HeaderIdExtension.setConfigs","title":"<code>setConfigs(items)</code>","text":"<p>Set multiple config settings given a dict or list of tuples.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def setConfigs(self, items):\n    \"\"\"Set multiple config settings given a dict or list of tuples.\"\"\"\n    if hasattr(items, 'items'):\n        # it's a dict\n        items = items.items()\n    for key, value in items:\n        self.setConfig(key, value)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/headerid/#pyrevit.coreutils.markdown.extensions.headerid.HeaderIdExtension.extendMarkdown","title":"<code>extendMarkdown(md, md_globals)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/headerid.py</code> <pre><code>def extendMarkdown(self, md, md_globals):\n    md.registerExtension(self)\n    self.processor = HeaderIdTreeprocessor()\n    self.processor.md = md\n    self.processor.config = self.getConfigs()\n    if 'attr_list' in md.treeprocessors.keys():\n        # insert after attr_list treeprocessor\n        md.treeprocessors.add('headerid', self.processor, '&gt;attr_list')\n    else:\n        # insert after 'prettify' treeprocessor.\n        md.treeprocessors.add('headerid', self.processor, '&gt;prettify')\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/headerid/#pyrevit.coreutils.markdown.extensions.headerid.HeaderIdExtension.reset","title":"<code>reset()</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/headerid.py</code> <pre><code>def reset(self):\n    self.processor.IDs = set()\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/headerid/#pyrevit.coreutils.markdown.extensions.headerid-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/headerid/#pyrevit.coreutils.markdown.extensions.headerid.makeExtension","title":"<code>makeExtension(*args, **kwargs)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/headerid.py</code> <pre><code>def makeExtension(*args, **kwargs):\n    return HeaderIdExtension(*args, **kwargs)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/meta/","title":"meta","text":"<p>Meta Data Extension for Python-Markdown.</p> <p>This extension adds Meta Data handling to markdown.</p> <p>See https://pythonhosted.org/Markdown/extensions/meta_data.html for documentation.</p> <p>Original code Copyright 2007-2008 Waylan Limberg.</p> <p>All changes Copyright 2008-2014 The Python Markdown Project</p> <p>License: BSD</p>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/meta/#pyrevit.coreutils.markdown.extensions.meta-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/meta/#pyrevit.coreutils.markdown.extensions.meta.log","title":"<code>log = logging.getLogger('MARKDOWN')</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/meta/#pyrevit.coreutils.markdown.extensions.meta.META_RE","title":"<code>META_RE = re.compile('^[ ]{0,3}(?P&lt;key&gt;[A-Za-z0-9_-]+):\\\\s*(?P&lt;value&gt;.*)')</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/meta/#pyrevit.coreutils.markdown.extensions.meta.META_MORE_RE","title":"<code>META_MORE_RE = re.compile('^[ ]{4,}(?P&lt;value&gt;.*)')</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/meta/#pyrevit.coreutils.markdown.extensions.meta.BEGIN_RE","title":"<code>BEGIN_RE = re.compile('^-{3}(\\\\s.*)?')</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/meta/#pyrevit.coreutils.markdown.extensions.meta.END_RE","title":"<code>END_RE = re.compile('^(-{3}|\\\\.{3})(\\\\s.*)?')</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/meta/#pyrevit.coreutils.markdown.extensions.meta-classes","title":"Classes","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/meta/#pyrevit.coreutils.markdown.extensions.meta.MetaExtension","title":"<code>MetaExtension(*args, **kwargs)</code>","text":"<p>               Bases: <code>Extension</code></p> <p>Meta-Data extension for Python-Markdown.</p> <p>Initiate Extension and set up configs.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def __init__(self, *args, **kwargs):\n    \"\"\"Initiate Extension and set up configs.\"\"\"\n    # check for configs arg for backward compat.\n    # (there only ever used to be one so we use arg[0])\n    if len(args):\n        if args[0] is not None:\n            self.setConfigs(args[0])\n        warnings.warn('Extension classes accepting positional args is '\n                      'pending Deprecation. Each setting should be '\n                      'passed into the Class as a keyword. Positional '\n                      'args are deprecated and will raise '\n                      'an error in version 2.7. See the Release Notes for '\n                      'Python-Markdown version 2.6 for more info.',\n                      DeprecationWarning)\n    # check for configs kwarg for backward compat.\n    if 'configs' in kwargs.keys():\n        if kwargs['configs'] is not None:\n            self.setConfigs(kwargs.pop('configs', {}))\n        warnings.warn('Extension classes accepting a dict on the single '\n                      'keyword \"config\" is pending Deprecation. Each '\n                      'setting should be passed into the Class as a '\n                      'keyword directly. The \"config\" keyword is '\n                      'deprecated and raise an error in '\n                      'version 2.7. See the Release Notes for '\n                      'Python-Markdown version 2.6 for more info.',\n                      DeprecationWarning)\n    # finally, use kwargs\n    self.setConfigs(kwargs)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/meta/#pyrevit.coreutils.markdown.extensions.meta.MetaExtension-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/meta/#pyrevit.coreutils.markdown.extensions.meta.MetaExtension.config","title":"<code>config = {}</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/meta/#pyrevit.coreutils.markdown.extensions.meta.MetaExtension-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/meta/#pyrevit.coreutils.markdown.extensions.meta.MetaExtension.getConfig","title":"<code>getConfig(key, default='')</code>","text":"<p>Return a setting for the given key or an empty string.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def getConfig(self, key, default=''):\n    \"\"\"Return a setting for the given key or an empty string.\"\"\"\n    if key in self.config:\n        return self.config[key][0]\n    else:\n        return default\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/meta/#pyrevit.coreutils.markdown.extensions.meta.MetaExtension.getConfigs","title":"<code>getConfigs()</code>","text":"<p>Return all configs settings as a dict.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def getConfigs(self):\n    \"\"\"Return all configs settings as a dict.\"\"\"\n    return dict([(key, self.getConfig(key)) for key in self.config.keys()])\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/meta/#pyrevit.coreutils.markdown.extensions.meta.MetaExtension.getConfigInfo","title":"<code>getConfigInfo()</code>","text":"<p>Return all config descriptions as a list of tuples.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def getConfigInfo(self):\n    \"\"\"Return all config descriptions as a list of tuples.\"\"\"\n    return [(key, self.config[key][1]) for key in self.config.keys()]\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/meta/#pyrevit.coreutils.markdown.extensions.meta.MetaExtension.setConfig","title":"<code>setConfig(key, value)</code>","text":"<p>Set a config setting for <code>key</code> with the given <code>value</code>.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def setConfig(self, key, value):\n    \"\"\"Set a config setting for `key` with the given `value`.\"\"\"\n    if isinstance(self.config[key][0], bool):\n        value = parseBoolValue(value)\n    if self.config[key][0] is None:\n        value = parseBoolValue(value, preserve_none=True)\n    self.config[key][0] = value\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/meta/#pyrevit.coreutils.markdown.extensions.meta.MetaExtension.setConfigs","title":"<code>setConfigs(items)</code>","text":"<p>Set multiple config settings given a dict or list of tuples.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def setConfigs(self, items):\n    \"\"\"Set multiple config settings given a dict or list of tuples.\"\"\"\n    if hasattr(items, 'items'):\n        # it's a dict\n        items = items.items()\n    for key, value in items:\n        self.setConfig(key, value)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/meta/#pyrevit.coreutils.markdown.extensions.meta.MetaExtension.extendMarkdown","title":"<code>extendMarkdown(md, md_globals)</code>","text":"<p>Add MetaPreprocessor to Markdown instance.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/meta.py</code> <pre><code>def extendMarkdown(self, md, md_globals):\n    \"\"\"Add MetaPreprocessor to Markdown instance.\"\"\"\n    md.preprocessors.add(\"meta\",\n                         MetaPreprocessor(md),\n                         \"&gt;normalize_whitespace\")\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/meta/#pyrevit.coreutils.markdown.extensions.meta.MetaPreprocessor","title":"<code>MetaPreprocessor(markdown_instance=None)</code>","text":"<p>               Bases: <code>Preprocessor</code></p> <p>Get Meta-Data.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/util.py</code> <pre><code>def __init__(self, markdown_instance=None):\n    if markdown_instance:\n        self.markdown = markdown_instance\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/meta/#pyrevit.coreutils.markdown.extensions.meta.MetaPreprocessor-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/meta/#pyrevit.coreutils.markdown.extensions.meta.MetaPreprocessor.markdown","title":"<code>markdown = markdown_instance</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/meta/#pyrevit.coreutils.markdown.extensions.meta.MetaPreprocessor-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/meta/#pyrevit.coreutils.markdown.extensions.meta.MetaPreprocessor.run","title":"<code>run(lines)</code>","text":"<p>Parse Meta-Data and store in Markdown.Meta.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/meta.py</code> <pre><code>def run(self, lines):\n    \"\"\"Parse Meta-Data and store in Markdown.Meta.\"\"\"\n    meta = {}\n    key = None\n    if lines and BEGIN_RE.match(lines[0]):\n        lines.pop(0)\n    while lines:\n        line = lines.pop(0)\n        m1 = META_RE.match(line)\n        if line.strip() == '' or END_RE.match(line):\n            break  # blank line or end of YAML header - done\n        if m1:\n            key = m1.group('key').lower().strip()\n            value = m1.group('value').strip()\n            try:\n                meta[key].append(value)\n            except KeyError:\n                meta[key] = [value]\n        else:\n            m2 = META_MORE_RE.match(line)\n            if m2 and key:\n                # Add another line to existing key\n                meta[key].append(m2.group('value').strip())\n            else:\n                lines.insert(0, line)\n                break  # no meta data - done\n    self.markdown.Meta = meta\n    return lines\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/meta/#pyrevit.coreutils.markdown.extensions.meta-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/meta/#pyrevit.coreutils.markdown.extensions.meta.makeExtension","title":"<code>makeExtension(*args, **kwargs)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/meta.py</code> <pre><code>def makeExtension(*args, **kwargs):\n    return MetaExtension(*args, **kwargs)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/nl2br/","title":"nl2br","text":"<p>NL2BR Extension.</p> <p>A Python-Markdown extension to treat newlines as hard breaks; like GitHub-flavored Markdown does.</p> <p>See https://pythonhosted.org/Markdown/extensions/nl2br.html for documentation.</p> <p>Oringinal code Copyright 2011 Brian Neal</p> <p>All changes Copyright 2011-2014 The Python Markdown Project</p> <p>License: BSD</p>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/nl2br/#pyrevit.coreutils.markdown.extensions.nl2br-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/nl2br/#pyrevit.coreutils.markdown.extensions.nl2br.BR_RE","title":"<code>BR_RE = '\\\\n'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/nl2br/#pyrevit.coreutils.markdown.extensions.nl2br-classes","title":"Classes","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/nl2br/#pyrevit.coreutils.markdown.extensions.nl2br.Nl2BrExtension","title":"<code>Nl2BrExtension(*args, **kwargs)</code>","text":"<p>               Bases: <code>Extension</code></p> <p>Newline to br extension.</p> <p>Initiate Extension and set up configs.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def __init__(self, *args, **kwargs):\n    \"\"\"Initiate Extension and set up configs.\"\"\"\n    # check for configs arg for backward compat.\n    # (there only ever used to be one so we use arg[0])\n    if len(args):\n        if args[0] is not None:\n            self.setConfigs(args[0])\n        warnings.warn('Extension classes accepting positional args is '\n                      'pending Deprecation. Each setting should be '\n                      'passed into the Class as a keyword. Positional '\n                      'args are deprecated and will raise '\n                      'an error in version 2.7. See the Release Notes for '\n                      'Python-Markdown version 2.6 for more info.',\n                      DeprecationWarning)\n    # check for configs kwarg for backward compat.\n    if 'configs' in kwargs.keys():\n        if kwargs['configs'] is not None:\n            self.setConfigs(kwargs.pop('configs', {}))\n        warnings.warn('Extension classes accepting a dict on the single '\n                      'keyword \"config\" is pending Deprecation. Each '\n                      'setting should be passed into the Class as a '\n                      'keyword directly. The \"config\" keyword is '\n                      'deprecated and raise an error in '\n                      'version 2.7. See the Release Notes for '\n                      'Python-Markdown version 2.6 for more info.',\n                      DeprecationWarning)\n    # finally, use kwargs\n    self.setConfigs(kwargs)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/nl2br/#pyrevit.coreutils.markdown.extensions.nl2br.Nl2BrExtension-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/nl2br/#pyrevit.coreutils.markdown.extensions.nl2br.Nl2BrExtension.config","title":"<code>config = {}</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/nl2br/#pyrevit.coreutils.markdown.extensions.nl2br.Nl2BrExtension-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/nl2br/#pyrevit.coreutils.markdown.extensions.nl2br.Nl2BrExtension.getConfig","title":"<code>getConfig(key, default='')</code>","text":"<p>Return a setting for the given key or an empty string.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def getConfig(self, key, default=''):\n    \"\"\"Return a setting for the given key or an empty string.\"\"\"\n    if key in self.config:\n        return self.config[key][0]\n    else:\n        return default\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/nl2br/#pyrevit.coreutils.markdown.extensions.nl2br.Nl2BrExtension.getConfigs","title":"<code>getConfigs()</code>","text":"<p>Return all configs settings as a dict.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def getConfigs(self):\n    \"\"\"Return all configs settings as a dict.\"\"\"\n    return dict([(key, self.getConfig(key)) for key in self.config.keys()])\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/nl2br/#pyrevit.coreutils.markdown.extensions.nl2br.Nl2BrExtension.getConfigInfo","title":"<code>getConfigInfo()</code>","text":"<p>Return all config descriptions as a list of tuples.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def getConfigInfo(self):\n    \"\"\"Return all config descriptions as a list of tuples.\"\"\"\n    return [(key, self.config[key][1]) for key in self.config.keys()]\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/nl2br/#pyrevit.coreutils.markdown.extensions.nl2br.Nl2BrExtension.setConfig","title":"<code>setConfig(key, value)</code>","text":"<p>Set a config setting for <code>key</code> with the given <code>value</code>.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def setConfig(self, key, value):\n    \"\"\"Set a config setting for `key` with the given `value`.\"\"\"\n    if isinstance(self.config[key][0], bool):\n        value = parseBoolValue(value)\n    if self.config[key][0] is None:\n        value = parseBoolValue(value, preserve_none=True)\n    self.config[key][0] = value\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/nl2br/#pyrevit.coreutils.markdown.extensions.nl2br.Nl2BrExtension.setConfigs","title":"<code>setConfigs(items)</code>","text":"<p>Set multiple config settings given a dict or list of tuples.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def setConfigs(self, items):\n    \"\"\"Set multiple config settings given a dict or list of tuples.\"\"\"\n    if hasattr(items, 'items'):\n        # it's a dict\n        items = items.items()\n    for key, value in items:\n        self.setConfig(key, value)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/nl2br/#pyrevit.coreutils.markdown.extensions.nl2br.Nl2BrExtension.extendMarkdown","title":"<code>extendMarkdown(md, md_globals)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/nl2br.py</code> <pre><code>def extendMarkdown(self, md, md_globals):\n    br_tag = SubstituteTagPattern(BR_RE, 'br')\n    md.inlinePatterns.add('nl', br_tag, '_end')\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/nl2br/#pyrevit.coreutils.markdown.extensions.nl2br-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/nl2br/#pyrevit.coreutils.markdown.extensions.nl2br.makeExtension","title":"<code>makeExtension(*args, **kwargs)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/nl2br.py</code> <pre><code>def makeExtension(*args, **kwargs):\n    return Nl2BrExtension(*args, **kwargs)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/sane_lists/","title":"sane_lists","text":"<p>Sane List Extension for Python-Markdown.</p> <p>Modify the behavior of Lists in Python-Markdown to act in a sane manor.</p> <p>See https://pythonhosted.org/Markdown/extensions/sane_lists.html for documentation.</p> <p>Original code Copyright 2011 Waylan Limberg</p> <p>All changes Copyright 2011-2014 The Python Markdown Project</p> <p>License: BSD</p>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/sane_lists/#pyrevit.coreutils.markdown.extensions.sane_lists-classes","title":"Classes","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/sane_lists/#pyrevit.coreutils.markdown.extensions.sane_lists.SaneOListProcessor","title":"<code>SaneOListProcessor(parser)</code>","text":"<p>               Bases: <code>OListProcessor</code></p> <p>Sane ordered list processor.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/sane_lists.py</code> <pre><code>def __init__(self, parser):\n    super(SaneOListProcessor, self).__init__(parser)\n    self.CHILD_RE = re.compile(r'^[ ]{0,%d}((\\d+\\.))[ ]+(.*)' %\n                               (self.tab_length - 1))\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/sane_lists/#pyrevit.coreutils.markdown.extensions.sane_lists.SaneOListProcessor-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/sane_lists/#pyrevit.coreutils.markdown.extensions.sane_lists.SaneOListProcessor.parser","title":"<code>parser = parser</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/sane_lists/#pyrevit.coreutils.markdown.extensions.sane_lists.SaneOListProcessor.tab_length","title":"<code>tab_length = parser.markdown.tab_length</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/sane_lists/#pyrevit.coreutils.markdown.extensions.sane_lists.SaneOListProcessor.TAG","title":"<code>TAG = 'ol'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/sane_lists/#pyrevit.coreutils.markdown.extensions.sane_lists.SaneOListProcessor.STARTSWITH","title":"<code>STARTSWITH = '1'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/sane_lists/#pyrevit.coreutils.markdown.extensions.sane_lists.SaneOListProcessor.RE","title":"<code>RE = re.compile('^[ ]{0,%d}\\\\d+\\\\.[ ]+(.*)' % self.tab_length - 1)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/sane_lists/#pyrevit.coreutils.markdown.extensions.sane_lists.SaneOListProcessor.INDENT_RE","title":"<code>INDENT_RE = re.compile('^[ ]{%d,%d}((\\\\d+\\\\.)|[*+-])[ ]+.*' % (self.tab_length, self.tab_length * 2 - 1))</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/sane_lists/#pyrevit.coreutils.markdown.extensions.sane_lists.SaneOListProcessor.SIBLING_TAGS","title":"<code>SIBLING_TAGS = ['ol']</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/sane_lists/#pyrevit.coreutils.markdown.extensions.sane_lists.SaneOListProcessor.CHILD_RE","title":"<code>CHILD_RE = re.compile('^[ ]{0,%d}((\\\\d+\\\\.))[ ]+(.*)' % self.tab_length - 1)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/sane_lists/#pyrevit.coreutils.markdown.extensions.sane_lists.SaneOListProcessor-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/sane_lists/#pyrevit.coreutils.markdown.extensions.sane_lists.SaneOListProcessor.lastChild","title":"<code>lastChild(parent)</code>","text":"<p>Return the last child of an etree element.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def lastChild(self, parent):\n    \"\"\"Return the last child of an etree element.\"\"\"\n    if len(parent):\n        return parent[-1]\n    else:\n        return None\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/sane_lists/#pyrevit.coreutils.markdown.extensions.sane_lists.SaneOListProcessor.detab","title":"<code>detab(text)</code>","text":"<p>Remove a tab from the front of each line of the given text.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def detab(self, text):\n    \"\"\"Remove a tab from the front of each line of the given text.\"\"\"\n    newtext = []\n    lines = text.split('\\n')\n    for line in lines:\n        if line.startswith(' '*self.tab_length):\n            newtext.append(line[self.tab_length:])\n        elif not line.strip():\n            newtext.append('')\n        else:\n            break\n    return '\\n'.join(newtext), '\\n'.join(lines[len(newtext):])\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/sane_lists/#pyrevit.coreutils.markdown.extensions.sane_lists.SaneOListProcessor.looseDetab","title":"<code>looseDetab(text, level=1)</code>","text":"<p>Remove a tab from front of lines but allowing dedented lines.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def looseDetab(self, text, level=1):\n    \"\"\"Remove a tab from front of lines but allowing dedented lines.\"\"\"\n    lines = text.split('\\n')\n    for i in range(len(lines)):\n        if lines[i].startswith(' '*self.tab_length*level):\n            lines[i] = lines[i][self.tab_length*level:]\n    return '\\n'.join(lines)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/sane_lists/#pyrevit.coreutils.markdown.extensions.sane_lists.SaneOListProcessor.test","title":"<code>test(parent, block)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def test(self, parent, block):\n    return bool(self.RE.match(block))\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/sane_lists/#pyrevit.coreutils.markdown.extensions.sane_lists.SaneOListProcessor.run","title":"<code>run(parent, blocks)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def run(self, parent, blocks):\n    # Check fr multiple items in one block.\n    items = self.get_items(blocks.pop(0))\n    sibling = self.lastChild(parent)\n\n    if sibling is not None and sibling.tag in self.SIBLING_TAGS:\n        # Previous block was a list item, so set that as parent\n        lst = sibling\n        # make sure previous item is in a p- if the item has text,\n        # then it isn't in a p\n        if lst[-1].text:\n            # since it's possible there are other children for this\n            # sibling, we can't just SubElement the p, we need to\n            # insert it as the first item.\n            p = util.etree.Element('p')\n            p.text = lst[-1].text\n            lst[-1].text = ''\n            lst[-1].insert(0, p)\n        # if the last item has a tail, then the tail needs to be put in a p\n        # likely only when a header is not followed by a blank line\n        lch = self.lastChild(lst[-1])\n        if lch is not None and lch.tail:\n            p = util.etree.SubElement(lst[-1], 'p')\n            p.text = lch.tail.lstrip()\n            lch.tail = ''\n\n        # parse first block differently as it gets wrapped in a p.\n        li = util.etree.SubElement(lst, 'li')\n        self.parser.state.set('looselist')\n        firstitem = items.pop(0)\n        self.parser.parseBlocks(li, [firstitem])\n        self.parser.state.reset()\n    elif parent.tag in ['ol', 'ul']:\n        # this catches the edge case of a multi-item indented list whose\n        # first item is in a blank parent-list item:\n        # * * subitem1\n        #     * subitem2\n        # see also ListIndentProcessor\n        lst = parent\n    else:\n        # This is a new list so create parent with appropriate tag.\n        lst = util.etree.SubElement(parent, self.TAG)\n        # Check if a custom start integer is set\n        if not self.parser.markdown.lazy_ol and self.STARTSWITH != '1':\n            lst.attrib['start'] = self.STARTSWITH\n\n    self.parser.state.set('list')\n    # Loop through items in block, recursively parsing each with the\n    # appropriate parent.\n    for item in items:\n        if item.startswith(' '*self.tab_length):\n            # Item is indented. Parse with last item as parent\n            self.parser.parseBlocks(lst[-1], [item])\n        else:\n            # New item. Create li and parse with it as parent\n            li = util.etree.SubElement(lst, 'li')\n            self.parser.parseBlocks(li, [item])\n    self.parser.state.reset()\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/sane_lists/#pyrevit.coreutils.markdown.extensions.sane_lists.SaneOListProcessor.get_items","title":"<code>get_items(block)</code>","text":"<p>Break a block into list items.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def get_items(self, block):\n    \"\"\"Break a block into list items.\"\"\"\n    items = []\n    for line in block.split('\\n'):\n        m = self.CHILD_RE.match(line)\n        if m:\n            # This is a new list item\n            # Check first item for the start index\n            if not items and self.TAG == 'ol':\n                # Detect the integer value of first list item\n                INTEGER_RE = re.compile(r'(\\d+)')\n                self.STARTSWITH = INTEGER_RE.match(m.group(1)).group()\n            # Append to the list\n            items.append(m.group(3))\n        elif self.INDENT_RE.match(line):\n            # This is an indented (possibly nested) item.\n            if items[-1].startswith(' '*self.tab_length):\n                # Previous item was indented. Append to that item.\n                items[-1] = '%s\\n%s' % (items[-1], line)\n            else:\n                items.append(line)\n        else:\n            # This is another line of previous item. Append to that item.\n            items[-1] = '%s\\n%s' % (items[-1], line)\n    return items\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/sane_lists/#pyrevit.coreutils.markdown.extensions.sane_lists.SaneUListProcessor","title":"<code>SaneUListProcessor(parser)</code>","text":"<p>               Bases: <code>UListProcessor</code></p> <p>Sane unordered list processor.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/sane_lists.py</code> <pre><code>def __init__(self, parser):\n    super(SaneUListProcessor, self).__init__(parser)\n    self.CHILD_RE = re.compile(r'^[ ]{0,%d}(([*+-]))[ ]+(.*)' %\n                               (self.tab_length - 1))\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/sane_lists/#pyrevit.coreutils.markdown.extensions.sane_lists.SaneUListProcessor-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/sane_lists/#pyrevit.coreutils.markdown.extensions.sane_lists.SaneUListProcessor.parser","title":"<code>parser = parser</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/sane_lists/#pyrevit.coreutils.markdown.extensions.sane_lists.SaneUListProcessor.tab_length","title":"<code>tab_length = parser.markdown.tab_length</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/sane_lists/#pyrevit.coreutils.markdown.extensions.sane_lists.SaneUListProcessor.TAG","title":"<code>TAG = 'ul'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/sane_lists/#pyrevit.coreutils.markdown.extensions.sane_lists.SaneUListProcessor.STARTSWITH","title":"<code>STARTSWITH = '1'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/sane_lists/#pyrevit.coreutils.markdown.extensions.sane_lists.SaneUListProcessor.RE","title":"<code>RE = re.compile('^[ ]{0,%d}[*+-][ ]+(.*)' % self.tab_length - 1)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/sane_lists/#pyrevit.coreutils.markdown.extensions.sane_lists.SaneUListProcessor.INDENT_RE","title":"<code>INDENT_RE = re.compile('^[ ]{%d,%d}((\\\\d+\\\\.)|[*+-])[ ]+.*' % (self.tab_length, self.tab_length * 2 - 1))</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/sane_lists/#pyrevit.coreutils.markdown.extensions.sane_lists.SaneUListProcessor.SIBLING_TAGS","title":"<code>SIBLING_TAGS = ['ul']</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/sane_lists/#pyrevit.coreutils.markdown.extensions.sane_lists.SaneUListProcessor.CHILD_RE","title":"<code>CHILD_RE = re.compile('^[ ]{0,%d}(([*+-]))[ ]+(.*)' % self.tab_length - 1)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/sane_lists/#pyrevit.coreutils.markdown.extensions.sane_lists.SaneUListProcessor-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/sane_lists/#pyrevit.coreutils.markdown.extensions.sane_lists.SaneUListProcessor.lastChild","title":"<code>lastChild(parent)</code>","text":"<p>Return the last child of an etree element.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def lastChild(self, parent):\n    \"\"\"Return the last child of an etree element.\"\"\"\n    if len(parent):\n        return parent[-1]\n    else:\n        return None\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/sane_lists/#pyrevit.coreutils.markdown.extensions.sane_lists.SaneUListProcessor.detab","title":"<code>detab(text)</code>","text":"<p>Remove a tab from the front of each line of the given text.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def detab(self, text):\n    \"\"\"Remove a tab from the front of each line of the given text.\"\"\"\n    newtext = []\n    lines = text.split('\\n')\n    for line in lines:\n        if line.startswith(' '*self.tab_length):\n            newtext.append(line[self.tab_length:])\n        elif not line.strip():\n            newtext.append('')\n        else:\n            break\n    return '\\n'.join(newtext), '\\n'.join(lines[len(newtext):])\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/sane_lists/#pyrevit.coreutils.markdown.extensions.sane_lists.SaneUListProcessor.looseDetab","title":"<code>looseDetab(text, level=1)</code>","text":"<p>Remove a tab from front of lines but allowing dedented lines.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def looseDetab(self, text, level=1):\n    \"\"\"Remove a tab from front of lines but allowing dedented lines.\"\"\"\n    lines = text.split('\\n')\n    for i in range(len(lines)):\n        if lines[i].startswith(' '*self.tab_length*level):\n            lines[i] = lines[i][self.tab_length*level:]\n    return '\\n'.join(lines)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/sane_lists/#pyrevit.coreutils.markdown.extensions.sane_lists.SaneUListProcessor.test","title":"<code>test(parent, block)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def test(self, parent, block):\n    return bool(self.RE.match(block))\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/sane_lists/#pyrevit.coreutils.markdown.extensions.sane_lists.SaneUListProcessor.run","title":"<code>run(parent, blocks)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def run(self, parent, blocks):\n    # Check fr multiple items in one block.\n    items = self.get_items(blocks.pop(0))\n    sibling = self.lastChild(parent)\n\n    if sibling is not None and sibling.tag in self.SIBLING_TAGS:\n        # Previous block was a list item, so set that as parent\n        lst = sibling\n        # make sure previous item is in a p- if the item has text,\n        # then it isn't in a p\n        if lst[-1].text:\n            # since it's possible there are other children for this\n            # sibling, we can't just SubElement the p, we need to\n            # insert it as the first item.\n            p = util.etree.Element('p')\n            p.text = lst[-1].text\n            lst[-1].text = ''\n            lst[-1].insert(0, p)\n        # if the last item has a tail, then the tail needs to be put in a p\n        # likely only when a header is not followed by a blank line\n        lch = self.lastChild(lst[-1])\n        if lch is not None and lch.tail:\n            p = util.etree.SubElement(lst[-1], 'p')\n            p.text = lch.tail.lstrip()\n            lch.tail = ''\n\n        # parse first block differently as it gets wrapped in a p.\n        li = util.etree.SubElement(lst, 'li')\n        self.parser.state.set('looselist')\n        firstitem = items.pop(0)\n        self.parser.parseBlocks(li, [firstitem])\n        self.parser.state.reset()\n    elif parent.tag in ['ol', 'ul']:\n        # this catches the edge case of a multi-item indented list whose\n        # first item is in a blank parent-list item:\n        # * * subitem1\n        #     * subitem2\n        # see also ListIndentProcessor\n        lst = parent\n    else:\n        # This is a new list so create parent with appropriate tag.\n        lst = util.etree.SubElement(parent, self.TAG)\n        # Check if a custom start integer is set\n        if not self.parser.markdown.lazy_ol and self.STARTSWITH != '1':\n            lst.attrib['start'] = self.STARTSWITH\n\n    self.parser.state.set('list')\n    # Loop through items in block, recursively parsing each with the\n    # appropriate parent.\n    for item in items:\n        if item.startswith(' '*self.tab_length):\n            # Item is indented. Parse with last item as parent\n            self.parser.parseBlocks(lst[-1], [item])\n        else:\n            # New item. Create li and parse with it as parent\n            li = util.etree.SubElement(lst, 'li')\n            self.parser.parseBlocks(li, [item])\n    self.parser.state.reset()\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/sane_lists/#pyrevit.coreutils.markdown.extensions.sane_lists.SaneUListProcessor.get_items","title":"<code>get_items(block)</code>","text":"<p>Break a block into list items.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def get_items(self, block):\n    \"\"\"Break a block into list items.\"\"\"\n    items = []\n    for line in block.split('\\n'):\n        m = self.CHILD_RE.match(line)\n        if m:\n            # This is a new list item\n            # Check first item for the start index\n            if not items and self.TAG == 'ol':\n                # Detect the integer value of first list item\n                INTEGER_RE = re.compile(r'(\\d+)')\n                self.STARTSWITH = INTEGER_RE.match(m.group(1)).group()\n            # Append to the list\n            items.append(m.group(3))\n        elif self.INDENT_RE.match(line):\n            # This is an indented (possibly nested) item.\n            if items[-1].startswith(' '*self.tab_length):\n                # Previous item was indented. Append to that item.\n                items[-1] = '%s\\n%s' % (items[-1], line)\n            else:\n                items.append(line)\n        else:\n            # This is another line of previous item. Append to that item.\n            items[-1] = '%s\\n%s' % (items[-1], line)\n    return items\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/sane_lists/#pyrevit.coreutils.markdown.extensions.sane_lists.SaneListExtension","title":"<code>SaneListExtension(*args, **kwargs)</code>","text":"<p>               Bases: <code>Extension</code></p> <p>Add sane lists to Markdown.</p> <p>Initiate Extension and set up configs.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def __init__(self, *args, **kwargs):\n    \"\"\"Initiate Extension and set up configs.\"\"\"\n    # check for configs arg for backward compat.\n    # (there only ever used to be one so we use arg[0])\n    if len(args):\n        if args[0] is not None:\n            self.setConfigs(args[0])\n        warnings.warn('Extension classes accepting positional args is '\n                      'pending Deprecation. Each setting should be '\n                      'passed into the Class as a keyword. Positional '\n                      'args are deprecated and will raise '\n                      'an error in version 2.7. See the Release Notes for '\n                      'Python-Markdown version 2.6 for more info.',\n                      DeprecationWarning)\n    # check for configs kwarg for backward compat.\n    if 'configs' in kwargs.keys():\n        if kwargs['configs'] is not None:\n            self.setConfigs(kwargs.pop('configs', {}))\n        warnings.warn('Extension classes accepting a dict on the single '\n                      'keyword \"config\" is pending Deprecation. Each '\n                      'setting should be passed into the Class as a '\n                      'keyword directly. The \"config\" keyword is '\n                      'deprecated and raise an error in '\n                      'version 2.7. See the Release Notes for '\n                      'Python-Markdown version 2.6 for more info.',\n                      DeprecationWarning)\n    # finally, use kwargs\n    self.setConfigs(kwargs)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/sane_lists/#pyrevit.coreutils.markdown.extensions.sane_lists.SaneListExtension-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/sane_lists/#pyrevit.coreutils.markdown.extensions.sane_lists.SaneListExtension.config","title":"<code>config = {}</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/sane_lists/#pyrevit.coreutils.markdown.extensions.sane_lists.SaneListExtension-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/sane_lists/#pyrevit.coreutils.markdown.extensions.sane_lists.SaneListExtension.getConfig","title":"<code>getConfig(key, default='')</code>","text":"<p>Return a setting for the given key or an empty string.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def getConfig(self, key, default=''):\n    \"\"\"Return a setting for the given key or an empty string.\"\"\"\n    if key in self.config:\n        return self.config[key][0]\n    else:\n        return default\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/sane_lists/#pyrevit.coreutils.markdown.extensions.sane_lists.SaneListExtension.getConfigs","title":"<code>getConfigs()</code>","text":"<p>Return all configs settings as a dict.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def getConfigs(self):\n    \"\"\"Return all configs settings as a dict.\"\"\"\n    return dict([(key, self.getConfig(key)) for key in self.config.keys()])\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/sane_lists/#pyrevit.coreutils.markdown.extensions.sane_lists.SaneListExtension.getConfigInfo","title":"<code>getConfigInfo()</code>","text":"<p>Return all config descriptions as a list of tuples.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def getConfigInfo(self):\n    \"\"\"Return all config descriptions as a list of tuples.\"\"\"\n    return [(key, self.config[key][1]) for key in self.config.keys()]\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/sane_lists/#pyrevit.coreutils.markdown.extensions.sane_lists.SaneListExtension.setConfig","title":"<code>setConfig(key, value)</code>","text":"<p>Set a config setting for <code>key</code> with the given <code>value</code>.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def setConfig(self, key, value):\n    \"\"\"Set a config setting for `key` with the given `value`.\"\"\"\n    if isinstance(self.config[key][0], bool):\n        value = parseBoolValue(value)\n    if self.config[key][0] is None:\n        value = parseBoolValue(value, preserve_none=True)\n    self.config[key][0] = value\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/sane_lists/#pyrevit.coreutils.markdown.extensions.sane_lists.SaneListExtension.setConfigs","title":"<code>setConfigs(items)</code>","text":"<p>Set multiple config settings given a dict or list of tuples.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def setConfigs(self, items):\n    \"\"\"Set multiple config settings given a dict or list of tuples.\"\"\"\n    if hasattr(items, 'items'):\n        # it's a dict\n        items = items.items()\n    for key, value in items:\n        self.setConfig(key, value)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/sane_lists/#pyrevit.coreutils.markdown.extensions.sane_lists.SaneListExtension.extendMarkdown","title":"<code>extendMarkdown(md, md_globals)</code>","text":"<p>Override existing Processors.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/sane_lists.py</code> <pre><code>def extendMarkdown(self, md, md_globals):\n    \"\"\"Override existing Processors.\"\"\"\n    md.parser.blockprocessors['olist'] = SaneOListProcessor(md.parser)\n    md.parser.blockprocessors['ulist'] = SaneUListProcessor(md.parser)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/sane_lists/#pyrevit.coreutils.markdown.extensions.sane_lists-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/sane_lists/#pyrevit.coreutils.markdown.extensions.sane_lists.makeExtension","title":"<code>makeExtension(*args, **kwargs)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/sane_lists.py</code> <pre><code>def makeExtension(*args, **kwargs):\n    return SaneListExtension(*args, **kwargs)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/smart_strong/","title":"smart_strong","text":"<p>Smart_Strong Extension for Python-Markdown.</p> <p>This extention adds smarter handling of double underscores within words.</p> <p>See https://pythonhosted.org/Markdown/extensions/smart_strong.html for documentation.</p> <p>Original code Copyright 2011 Waylan Limberg</p> <p>All changes Copyright 2011-2014 The Python Markdown Project</p> <p>License: BSD</p>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/smart_strong/#pyrevit.coreutils.markdown.extensions.smart_strong-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/smart_strong/#pyrevit.coreutils.markdown.extensions.smart_strong.SMART_STRONG_RE","title":"<code>SMART_STRONG_RE = '(?&lt;!\\\\w)(_{2})(?!_)(.+?)(?&lt;!_)\\\\2(?!\\\\w)'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/smart_strong/#pyrevit.coreutils.markdown.extensions.smart_strong.STRONG_RE","title":"<code>STRONG_RE = '(\\\\*{2})(.+?)\\\\2'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/smart_strong/#pyrevit.coreutils.markdown.extensions.smart_strong-classes","title":"Classes","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/smart_strong/#pyrevit.coreutils.markdown.extensions.smart_strong.SmartEmphasisExtension","title":"<code>SmartEmphasisExtension(*args, **kwargs)</code>","text":"<p>               Bases: <code>Extension</code></p> <p>Add smart_emphasis extension to Markdown class.</p> <p>Initiate Extension and set up configs.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def __init__(self, *args, **kwargs):\n    \"\"\"Initiate Extension and set up configs.\"\"\"\n    # check for configs arg for backward compat.\n    # (there only ever used to be one so we use arg[0])\n    if len(args):\n        if args[0] is not None:\n            self.setConfigs(args[0])\n        warnings.warn('Extension classes accepting positional args is '\n                      'pending Deprecation. Each setting should be '\n                      'passed into the Class as a keyword. Positional '\n                      'args are deprecated and will raise '\n                      'an error in version 2.7. See the Release Notes for '\n                      'Python-Markdown version 2.6 for more info.',\n                      DeprecationWarning)\n    # check for configs kwarg for backward compat.\n    if 'configs' in kwargs.keys():\n        if kwargs['configs'] is not None:\n            self.setConfigs(kwargs.pop('configs', {}))\n        warnings.warn('Extension classes accepting a dict on the single '\n                      'keyword \"config\" is pending Deprecation. Each '\n                      'setting should be passed into the Class as a '\n                      'keyword directly. The \"config\" keyword is '\n                      'deprecated and raise an error in '\n                      'version 2.7. See the Release Notes for '\n                      'Python-Markdown version 2.6 for more info.',\n                      DeprecationWarning)\n    # finally, use kwargs\n    self.setConfigs(kwargs)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/smart_strong/#pyrevit.coreutils.markdown.extensions.smart_strong.SmartEmphasisExtension-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/smart_strong/#pyrevit.coreutils.markdown.extensions.smart_strong.SmartEmphasisExtension.config","title":"<code>config = {}</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/smart_strong/#pyrevit.coreutils.markdown.extensions.smart_strong.SmartEmphasisExtension-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/smart_strong/#pyrevit.coreutils.markdown.extensions.smart_strong.SmartEmphasisExtension.getConfig","title":"<code>getConfig(key, default='')</code>","text":"<p>Return a setting for the given key or an empty string.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def getConfig(self, key, default=''):\n    \"\"\"Return a setting for the given key or an empty string.\"\"\"\n    if key in self.config:\n        return self.config[key][0]\n    else:\n        return default\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/smart_strong/#pyrevit.coreutils.markdown.extensions.smart_strong.SmartEmphasisExtension.getConfigs","title":"<code>getConfigs()</code>","text":"<p>Return all configs settings as a dict.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def getConfigs(self):\n    \"\"\"Return all configs settings as a dict.\"\"\"\n    return dict([(key, self.getConfig(key)) for key in self.config.keys()])\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/smart_strong/#pyrevit.coreutils.markdown.extensions.smart_strong.SmartEmphasisExtension.getConfigInfo","title":"<code>getConfigInfo()</code>","text":"<p>Return all config descriptions as a list of tuples.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def getConfigInfo(self):\n    \"\"\"Return all config descriptions as a list of tuples.\"\"\"\n    return [(key, self.config[key][1]) for key in self.config.keys()]\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/smart_strong/#pyrevit.coreutils.markdown.extensions.smart_strong.SmartEmphasisExtension.setConfig","title":"<code>setConfig(key, value)</code>","text":"<p>Set a config setting for <code>key</code> with the given <code>value</code>.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def setConfig(self, key, value):\n    \"\"\"Set a config setting for `key` with the given `value`.\"\"\"\n    if isinstance(self.config[key][0], bool):\n        value = parseBoolValue(value)\n    if self.config[key][0] is None:\n        value = parseBoolValue(value, preserve_none=True)\n    self.config[key][0] = value\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/smart_strong/#pyrevit.coreutils.markdown.extensions.smart_strong.SmartEmphasisExtension.setConfigs","title":"<code>setConfigs(items)</code>","text":"<p>Set multiple config settings given a dict or list of tuples.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def setConfigs(self, items):\n    \"\"\"Set multiple config settings given a dict or list of tuples.\"\"\"\n    if hasattr(items, 'items'):\n        # it's a dict\n        items = items.items()\n    for key, value in items:\n        self.setConfig(key, value)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/smart_strong/#pyrevit.coreutils.markdown.extensions.smart_strong.SmartEmphasisExtension.extendMarkdown","title":"<code>extendMarkdown(md, md_globals)</code>","text":"<p>Modify inline patterns.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/smart_strong.py</code> <pre><code>def extendMarkdown(self, md, md_globals):\n    \"\"\"Modify inline patterns.\"\"\"\n    md.inlinePatterns['strong'] = SimpleTagPattern(STRONG_RE, 'strong')\n    md.inlinePatterns.add(\n        'strong2',\n        SimpleTagPattern(SMART_STRONG_RE, 'strong'),\n        '&gt;emphasis2'\n    )\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/smart_strong/#pyrevit.coreutils.markdown.extensions.smart_strong-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/smart_strong/#pyrevit.coreutils.markdown.extensions.smart_strong.makeExtension","title":"<code>makeExtension(*args, **kwargs)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/smart_strong.py</code> <pre><code>def makeExtension(*args, **kwargs):\n    return SmartEmphasisExtension(*args, **kwargs)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/smarty/","title":"smarty","text":"<p>Smarty extension for Python-Markdown.</p> <p>Adds conversion of ASCII dashes, quotes and ellipses to their HTML entity equivalents.</p> <p>See https://pythonhosted.org/Markdown/extensions/smarty.html for documentation.</p> <p>Author: 2013, Dmitry Shachnev mitya57@gmail.com</p> <p>All changes Copyright 2013-2014 The Python Markdown Project</p> <p>License: BSD</p> <p>SmartyPants license:</p> <p>Copyright (c) 2003 John Gruber http://daringfireball.net/    All rights reserved.</p> <p>Redistribution and use in source and binary forms, with or without    modification, are permitted provided that the following conditions are    met:</p> <ul> <li> <p>Redistributions of source code must retain the above copyright       notice, this list of conditions and the following disclaimer.</p> </li> <li> <p>Redistributions in binary form must reproduce the above copyright       notice, this list of conditions and the following disclaimer in       the documentation and/or other materials provided with the       distribution.</p> </li> <li> <p>Neither the name \"SmartyPants\" nor the names of its contributors       may be used to endorse or promote products derived from this       software without specific prior written permission.</p> </li> </ul> <p>This software is provided by the copyright holders and contributors \"as    is\" and any express or implied warranties, including, but not limited    to, the implied warranties of merchantability and fitness for a    particular purpose are disclaimed. In no event shall the copyright    owner or contributors be liable for any direct, indirect, incidental,    special, exemplary, or consequential damages (including, but not    limited to, procurement of substitute goods or services; loss of use,    data, or profits; or business interruption) however caused and on any    theory of liability, whether in contract, strict liability, or tort    (including negligence or otherwise) arising in any way out of the use    of this software, even if advised of the possibility of such damage.</p> <p>smartypants.py license:</p> <p>smartypants.py is a derivative work of SmartyPants.    Copyright (c) 2004, 2007 Chad Miller http://web.chad.org/</p> <p>Redistribution and use in source and binary forms, with or without    modification, are permitted provided that the following conditions are    met:</p> <ul> <li> <p>Redistributions of source code must retain the above copyright       notice, this list of conditions and the following disclaimer.</p> </li> <li> <p>Redistributions in binary form must reproduce the above copyright       notice, this list of conditions and the following disclaimer in       the documentation and/or other materials provided with the       distribution.</p> </li> </ul> <p>This software is provided by the copyright holders and contributors \"as    is\" and any express or implied warranties, including, but not limited    to, the implied warranties of merchantability and fitness for a    particular purpose are disclaimed. In no event shall the copyright    owner or contributors be liable for any direct, indirect, incidental,    special, exemplary, or consequential damages (including, but not    limited to, procurement of substitute goods or services; loss of use,    data, or profits; or business interruption) however caused and on any    theory of liability, whether in contract, strict liability, or tort    (including negligence or otherwise) arising in any way out of the use    of this software, even if advised of the possibility of such damage.</p>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/smarty/#pyrevit.coreutils.markdown.extensions.smarty-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/smarty/#pyrevit.coreutils.markdown.extensions.smarty.punctClass","title":"<code>punctClass = '[!\"#\\\\$\\\\%\\'()*+,-.\\\\/:;&lt;=&gt;?\\\\@\\\\[\\\\\\\\\\\\]\\\\^_`{|}~]'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/smarty/#pyrevit.coreutils.markdown.extensions.smarty.endOfWordClass","title":"<code>endOfWordClass = '[\\\\s.,;:!?)]'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/smarty/#pyrevit.coreutils.markdown.extensions.smarty.closeClass","title":"<code>closeClass = '[^\\\\ \\\\t\\\\r\\\\n\\\\[\\\\{\\\\(\\\\-\\\\u0002\\\\u0003]'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/smarty/#pyrevit.coreutils.markdown.extensions.smarty.openingQuotesBase","title":"<code>openingQuotesBase = '(\\\\s|&amp;nbsp;|--|\u2013|\u2014|&amp;[mn]dash;|&amp;#8211;|&amp;#8212;)'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/smarty/#pyrevit.coreutils.markdown.extensions.smarty.substitutions","title":"<code>substitutions = {'mdash': '&amp;mdash;', 'ndash': '&amp;ndash;', 'ellipsis': '&amp;hellip;', 'left-angle-quote': '&amp;laquo;', 'right-angle-quote': '&amp;raquo;', 'left-single-quote': '&amp;lsquo;', 'right-single-quote': '&amp;rsquo;', 'left-double-quote': '&amp;ldquo;', 'right-double-quote': '&amp;rdquo;'}</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/smarty/#pyrevit.coreutils.markdown.extensions.smarty.singleQuoteStartRe","title":"<code>singleQuoteStartRe = \"^'(?=%s\\\\B)\" % punctClass</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/smarty/#pyrevit.coreutils.markdown.extensions.smarty.doubleQuoteStartRe","title":"<code>doubleQuoteStartRe = '^\"(?=%s\\\\B)' % punctClass</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/smarty/#pyrevit.coreutils.markdown.extensions.smarty.doubleQuoteSetsRe","title":"<code>doubleQuoteSetsRe = '\"\\'(?=\\\\w)'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/smarty/#pyrevit.coreutils.markdown.extensions.smarty.singleQuoteSetsRe","title":"<code>singleQuoteSetsRe = '\\'\"(?=\\\\w)'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/smarty/#pyrevit.coreutils.markdown.extensions.smarty.decadeAbbrRe","title":"<code>decadeAbbrRe = \"(?&lt;!\\\\w)'(?=\\\\d{2}s)\"</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/smarty/#pyrevit.coreutils.markdown.extensions.smarty.openingDoubleQuotesRegex","title":"<code>openingDoubleQuotesRegex = '%s\"(?=\\\\w)' % openingQuotesBase</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/smarty/#pyrevit.coreutils.markdown.extensions.smarty.closingDoubleQuotesRegex","title":"<code>closingDoubleQuotesRegex = '\"(?=\\\\s)'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/smarty/#pyrevit.coreutils.markdown.extensions.smarty.closingDoubleQuotesRegex2","title":"<code>closingDoubleQuotesRegex2 = '(?&lt;=%s)\"' % closeClass</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/smarty/#pyrevit.coreutils.markdown.extensions.smarty.openingSingleQuotesRegex","title":"<code>openingSingleQuotesRegex = \"%s'(?=\\\\w)\" % openingQuotesBase</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/smarty/#pyrevit.coreutils.markdown.extensions.smarty.closingSingleQuotesRegex","title":"<code>closingSingleQuotesRegex = \"(?&lt;=%s)'(?!\\\\s|s\\\\b|\\\\d)\" % closeClass</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/smarty/#pyrevit.coreutils.markdown.extensions.smarty.closingSingleQuotesRegex2","title":"<code>closingSingleQuotesRegex2 = \"(?&lt;=%s)'(\\\\s|s\\\\b)\" % closeClass</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/smarty/#pyrevit.coreutils.markdown.extensions.smarty.remainingSingleQuotesRegex","title":"<code>remainingSingleQuotesRegex = \"'\"</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/smarty/#pyrevit.coreutils.markdown.extensions.smarty.remainingDoubleQuotesRegex","title":"<code>remainingDoubleQuotesRegex = '\"'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/smarty/#pyrevit.coreutils.markdown.extensions.smarty.HTML_STRICT_RE","title":"<code>HTML_STRICT_RE = HTML_RE + '(?!\\\\&gt;)'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/smarty/#pyrevit.coreutils.markdown.extensions.smarty-classes","title":"Classes","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/smarty/#pyrevit.coreutils.markdown.extensions.smarty.SubstituteTextPattern","title":"<code>SubstituteTextPattern(pattern, replace, markdown_instance)</code>","text":"<p>               Bases: <code>HtmlPattern</code></p> <p>Text pattern substitution handler.</p> <p>Replaces matches with some text.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/smarty.py</code> <pre><code>def __init__(self, pattern, replace, markdown_instance):\n    \"\"\"Replaces matches with some text.\"\"\"\n    HtmlPattern.__init__(self, pattern)\n    self.replace = replace\n    self.markdown = markdown_instance\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/smarty/#pyrevit.coreutils.markdown.extensions.smarty.SubstituteTextPattern-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/smarty/#pyrevit.coreutils.markdown.extensions.smarty.SubstituteTextPattern.pattern","title":"<code>pattern = pattern</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/smarty/#pyrevit.coreutils.markdown.extensions.smarty.SubstituteTextPattern.compiled_re","title":"<code>compiled_re = re.compile('^(.*?)%s(.*)$' % pattern, re.DOTALL | re.UNICODE)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/smarty/#pyrevit.coreutils.markdown.extensions.smarty.SubstituteTextPattern.safe_mode","title":"<code>safe_mode = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/smarty/#pyrevit.coreutils.markdown.extensions.smarty.SubstituteTextPattern.replace","title":"<code>replace = replace</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/smarty/#pyrevit.coreutils.markdown.extensions.smarty.SubstituteTextPattern.markdown","title":"<code>markdown = markdown_instance</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/smarty/#pyrevit.coreutils.markdown.extensions.smarty.SubstituteTextPattern-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/smarty/#pyrevit.coreutils.markdown.extensions.smarty.SubstituteTextPattern.getCompiledRegExp","title":"<code>getCompiledRegExp()</code>","text":"<p>Return a compiled regular expression.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def getCompiledRegExp(self):\n    \"\"\"Return a compiled regular expression.\"\"\"\n    return self.compiled_re\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/smarty/#pyrevit.coreutils.markdown.extensions.smarty.SubstituteTextPattern.type","title":"<code>type()</code>","text":"<p>Return class name, to define pattern type.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def type(self):\n    \"\"\"Return class name, to define pattern type.\"\"\"\n    return self.__class__.__name__\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/smarty/#pyrevit.coreutils.markdown.extensions.smarty.SubstituteTextPattern.unescape","title":"<code>unescape(text)</code>","text":"<p>Return unescaped text given text with an inline placeholder.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def unescape(self, text):\n    \"\"\"Return unescaped text given text with an inline placeholder.\"\"\"\n    try:\n        stash = self.markdown.treeprocessors['inline'].stashed_nodes\n    except KeyError:  # pragma: no cover\n        return text\n\n    def get_stash(m):\n        id = m.group(1)\n        value = stash.get(id)\n        if value is not None:\n            try:\n                return self.markdown.serializer(value)\n            except:\n                return r'\\%s' % value\n\n    return util.INLINE_PLACEHOLDER_RE.sub(get_stash, text)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/smarty/#pyrevit.coreutils.markdown.extensions.smarty.SubstituteTextPattern.handleMatch","title":"<code>handleMatch(m)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/smarty.py</code> <pre><code>def handleMatch(self, m):\n    result = ''\n    for part in self.replace:\n        if isinstance(part, int):\n            result += m.group(part)\n        else:\n            result += self.markdown.htmlStash.store(part, safe=True)\n    return result\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/smarty/#pyrevit.coreutils.markdown.extensions.smarty.SmartyExtension","title":"<code>SmartyExtension(*args, **kwargs)</code>","text":"<p>               Bases: <code>Extension</code></p> <p>Smarty Extension.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/smarty.py</code> <pre><code>def __init__(self, *args, **kwargs):\n    self.config = {\n        'smart_quotes': [True, 'Educate quotes'],\n        'smart_angled_quotes': [False, 'Educate angled quotes'],\n        'smart_dashes': [True, 'Educate dashes'],\n        'smart_ellipses': [True, 'Educate ellipses'],\n        'substitutions': [{}, 'Overwrite default substitutions'],\n    }\n    super(SmartyExtension, self).__init__(*args, **kwargs)\n    self.substitutions = dict(substitutions)\n    self.substitutions.update(self.getConfig('substitutions', default={}))\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/smarty/#pyrevit.coreutils.markdown.extensions.smarty.SmartyExtension-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/smarty/#pyrevit.coreutils.markdown.extensions.smarty.SmartyExtension.config","title":"<code>config = {'smart_quotes': [True, 'Educate quotes'], 'smart_angled_quotes': [False, 'Educate angled quotes'], 'smart_dashes': [True, 'Educate dashes'], 'smart_ellipses': [True, 'Educate ellipses'], 'substitutions': [{}, 'Overwrite default substitutions']}</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/smarty/#pyrevit.coreutils.markdown.extensions.smarty.SmartyExtension.substitutions","title":"<code>substitutions = dict(substitutions)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/smarty/#pyrevit.coreutils.markdown.extensions.smarty.SmartyExtension-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/smarty/#pyrevit.coreutils.markdown.extensions.smarty.SmartyExtension.getConfig","title":"<code>getConfig(key, default='')</code>","text":"<p>Return a setting for the given key or an empty string.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def getConfig(self, key, default=''):\n    \"\"\"Return a setting for the given key or an empty string.\"\"\"\n    if key in self.config:\n        return self.config[key][0]\n    else:\n        return default\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/smarty/#pyrevit.coreutils.markdown.extensions.smarty.SmartyExtension.getConfigs","title":"<code>getConfigs()</code>","text":"<p>Return all configs settings as a dict.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def getConfigs(self):\n    \"\"\"Return all configs settings as a dict.\"\"\"\n    return dict([(key, self.getConfig(key)) for key in self.config.keys()])\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/smarty/#pyrevit.coreutils.markdown.extensions.smarty.SmartyExtension.getConfigInfo","title":"<code>getConfigInfo()</code>","text":"<p>Return all config descriptions as a list of tuples.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def getConfigInfo(self):\n    \"\"\"Return all config descriptions as a list of tuples.\"\"\"\n    return [(key, self.config[key][1]) for key in self.config.keys()]\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/smarty/#pyrevit.coreutils.markdown.extensions.smarty.SmartyExtension.setConfig","title":"<code>setConfig(key, value)</code>","text":"<p>Set a config setting for <code>key</code> with the given <code>value</code>.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def setConfig(self, key, value):\n    \"\"\"Set a config setting for `key` with the given `value`.\"\"\"\n    if isinstance(self.config[key][0], bool):\n        value = parseBoolValue(value)\n    if self.config[key][0] is None:\n        value = parseBoolValue(value, preserve_none=True)\n    self.config[key][0] = value\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/smarty/#pyrevit.coreutils.markdown.extensions.smarty.SmartyExtension.setConfigs","title":"<code>setConfigs(items)</code>","text":"<p>Set multiple config settings given a dict or list of tuples.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def setConfigs(self, items):\n    \"\"\"Set multiple config settings given a dict or list of tuples.\"\"\"\n    if hasattr(items, 'items'):\n        # it's a dict\n        items = items.items()\n    for key, value in items:\n        self.setConfig(key, value)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/smarty/#pyrevit.coreutils.markdown.extensions.smarty.SmartyExtension.educateDashes","title":"<code>educateDashes(md)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/smarty.py</code> <pre><code>def educateDashes(self, md):\n    emDashesPattern = SubstituteTextPattern(\n        r'(?&lt;!-)---(?!-)', (self.substitutions['mdash'],), md\n    )\n    enDashesPattern = SubstituteTextPattern(\n        r'(?&lt;!-)--(?!-)', (self.substitutions['ndash'],), md\n    )\n    self.inlinePatterns.add('smarty-em-dashes', emDashesPattern, '_begin')\n    self.inlinePatterns.add(\n        'smarty-en-dashes', enDashesPattern, '&gt;smarty-em-dashes'\n    )\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/smarty/#pyrevit.coreutils.markdown.extensions.smarty.SmartyExtension.educateEllipses","title":"<code>educateEllipses(md)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/smarty.py</code> <pre><code>def educateEllipses(self, md):\n    ellipsesPattern = SubstituteTextPattern(\n        r'(?&lt;!\\.)\\.{3}(?!\\.)', (self.substitutions['ellipsis'],), md\n    )\n    self.inlinePatterns.add('smarty-ellipses', ellipsesPattern, '_begin')\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/smarty/#pyrevit.coreutils.markdown.extensions.smarty.SmartyExtension.educateAngledQuotes","title":"<code>educateAngledQuotes(md)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/smarty.py</code> <pre><code>def educateAngledQuotes(self, md):\n    leftAngledQuotePattern = SubstituteTextPattern(\n        r'\\&lt;\\&lt;', (self.substitutions['left-angle-quote'],), md\n    )\n    rightAngledQuotePattern = SubstituteTextPattern(\n        r'\\&gt;\\&gt;', (self.substitutions['right-angle-quote'],), md\n    )\n    self.inlinePatterns.add(\n        'smarty-left-angle-quotes', leftAngledQuotePattern, '_begin'\n    )\n    self.inlinePatterns.add(\n        'smarty-right-angle-quotes',\n        rightAngledQuotePattern,\n        '&gt;smarty-left-angle-quotes'\n    )\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/smarty/#pyrevit.coreutils.markdown.extensions.smarty.SmartyExtension.educateQuotes","title":"<code>educateQuotes(md)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/smarty.py</code> <pre><code>def educateQuotes(self, md):\n    lsquo = self.substitutions['left-single-quote']\n    rsquo = self.substitutions['right-single-quote']\n    ldquo = self.substitutions['left-double-quote']\n    rdquo = self.substitutions['right-double-quote']\n    patterns = (\n        (singleQuoteStartRe, (rsquo,)),\n        (doubleQuoteStartRe, (rdquo,)),\n        (doubleQuoteSetsRe, (ldquo + lsquo,)),\n        (singleQuoteSetsRe, (lsquo + ldquo,)),\n        (decadeAbbrRe, (rsquo,)),\n        (openingSingleQuotesRegex, (2, lsquo)),\n        (closingSingleQuotesRegex, (rsquo,)),\n        (closingSingleQuotesRegex2, (rsquo, 2)),\n        (remainingSingleQuotesRegex, (lsquo,)),\n        (openingDoubleQuotesRegex, (2, ldquo)),\n        (closingDoubleQuotesRegex, (rdquo,)),\n        (closingDoubleQuotesRegex2, (rdquo,)),\n        (remainingDoubleQuotesRegex, (ldquo,))\n    )\n    self._addPatterns(md, patterns, 'quotes')\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/smarty/#pyrevit.coreutils.markdown.extensions.smarty.SmartyExtension.extendMarkdown","title":"<code>extendMarkdown(md, md_globals)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/smarty.py</code> <pre><code>def extendMarkdown(self, md, md_globals):\n    configs = self.getConfigs()\n    self.inlinePatterns = OrderedDict()\n    if configs['smart_ellipses']:\n        self.educateEllipses(md)\n    if configs['smart_quotes']:\n        self.educateQuotes(md)\n    if configs['smart_angled_quotes']:\n        self.educateAngledQuotes(md)\n        # Override HTML_RE from inlinepatterns.py so that it does not\n        # process tags with duplicate closing quotes.\n        md.inlinePatterns[\"html\"] = HtmlPattern(HTML_STRICT_RE, md)\n    if configs['smart_dashes']:\n        self.educateDashes(md)\n    inlineProcessor = InlineProcessor(md)\n    inlineProcessor.inlinePatterns = self.inlinePatterns\n    md.treeprocessors.add('smarty', inlineProcessor, '_end')\n    md.ESCAPED_CHARS.extend(['\"', \"'\"])\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/smarty/#pyrevit.coreutils.markdown.extensions.smarty-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/smarty/#pyrevit.coreutils.markdown.extensions.smarty.makeExtension","title":"<code>makeExtension(*args, **kwargs)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/smarty.py</code> <pre><code>def makeExtension(*args, **kwargs):\n    return SmartyExtension(*args, **kwargs)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/tables/","title":"tables","text":"<p>Tables Extension for Python-Markdown.</p> <p>Added parsing of tables to Python-Markdown.</p> <p>See https://pythonhosted.org/Markdown/extensions/tables.html for documentation.</p> <p>Original code Copyright 2009 Waylan Limberg</p> <p>All changes Copyright 2008-2014 The Python Markdown Project</p> <p>License: BSD</p>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/tables/#pyrevit.coreutils.markdown.extensions.tables-classes","title":"Classes","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/tables/#pyrevit.coreutils.markdown.extensions.tables.TableProcessor","title":"<code>TableProcessor(parser)</code>","text":"<p>               Bases: <code>BlockProcessor</code></p> <p>Process Tables.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/tables.py</code> <pre><code>def __init__(self, parser):\n    self.border = False\n    self.separator = ''\n    super(TableProcessor, self).__init__(parser)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/tables/#pyrevit.coreutils.markdown.extensions.tables.TableProcessor-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/tables/#pyrevit.coreutils.markdown.extensions.tables.TableProcessor.parser","title":"<code>parser = parser</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/tables/#pyrevit.coreutils.markdown.extensions.tables.TableProcessor.tab_length","title":"<code>tab_length = parser.markdown.tab_length</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/tables/#pyrevit.coreutils.markdown.extensions.tables.TableProcessor.RE_CODE_PIPES","title":"<code>RE_CODE_PIPES = re.compile('(?:(\\\\\\\\\\\\\\\\)|(\\\\\\\\`+)|(`+)|(\\\\\\\\\\\\|)|(\\\\|))')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/tables/#pyrevit.coreutils.markdown.extensions.tables.TableProcessor.RE_END_BORDER","title":"<code>RE_END_BORDER = re.compile('(?&lt;!\\\\\\\\)(?:\\\\\\\\\\\\\\\\)*\\\\|$')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/tables/#pyrevit.coreutils.markdown.extensions.tables.TableProcessor.border","title":"<code>border = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/tables/#pyrevit.coreutils.markdown.extensions.tables.TableProcessor.separator","title":"<code>separator = ''</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/tables/#pyrevit.coreutils.markdown.extensions.tables.TableProcessor-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/tables/#pyrevit.coreutils.markdown.extensions.tables.TableProcessor.lastChild","title":"<code>lastChild(parent)</code>","text":"<p>Return the last child of an etree element.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def lastChild(self, parent):\n    \"\"\"Return the last child of an etree element.\"\"\"\n    if len(parent):\n        return parent[-1]\n    else:\n        return None\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/tables/#pyrevit.coreutils.markdown.extensions.tables.TableProcessor.detab","title":"<code>detab(text)</code>","text":"<p>Remove a tab from the front of each line of the given text.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def detab(self, text):\n    \"\"\"Remove a tab from the front of each line of the given text.\"\"\"\n    newtext = []\n    lines = text.split('\\n')\n    for line in lines:\n        if line.startswith(' '*self.tab_length):\n            newtext.append(line[self.tab_length:])\n        elif not line.strip():\n            newtext.append('')\n        else:\n            break\n    return '\\n'.join(newtext), '\\n'.join(lines[len(newtext):])\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/tables/#pyrevit.coreutils.markdown.extensions.tables.TableProcessor.looseDetab","title":"<code>looseDetab(text, level=1)</code>","text":"<p>Remove a tab from front of lines but allowing dedented lines.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/blockprocessors.py</code> <pre><code>def looseDetab(self, text, level=1):\n    \"\"\"Remove a tab from front of lines but allowing dedented lines.\"\"\"\n    lines = text.split('\\n')\n    for i in range(len(lines)):\n        if lines[i].startswith(' '*self.tab_length*level):\n            lines[i] = lines[i][self.tab_length*level:]\n    return '\\n'.join(lines)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/tables/#pyrevit.coreutils.markdown.extensions.tables.TableProcessor.test","title":"<code>test(parent, block)</code>","text":"<p>Ensure first two rows (column header and separator row) are valid table rows.</p> <p>Keep border check and separator row do avoid repeating the work.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/tables.py</code> <pre><code>def test(self, parent, block):\n    \"\"\"Ensure first two rows (column header and separator row) are valid table rows.\n\n    Keep border check and separator row do avoid repeating the work.\n    \"\"\"\n    is_table = False\n    header = [row.strip() for row in block.split('\\n')[0:2]]\n    if len(header) == 2:\n        self.border = header[0].startswith('|')\n        row = self._split_row(header[0])\n        is_table = len(row) &gt; 1\n\n        if is_table:\n            row = self._split_row(header[1])\n            is_table = len(row) &gt; 1 and set(''.join(row)) &lt;= set('|:- ')\n            if is_table:\n                self.separator = row\n    return is_table\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/tables/#pyrevit.coreutils.markdown.extensions.tables.TableProcessor.run","title":"<code>run(parent, blocks)</code>","text":"<p>Parse a table block and build table.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/tables.py</code> <pre><code>def run(self, parent, blocks):\n    \"\"\"Parse a table block and build table.\"\"\"\n    block = blocks.pop(0).split('\\n')\n    header = block[0].strip()\n    rows = [] if len(block) &lt; 3 else block[2:]\n\n    # Get alignment of columns\n    align = []\n    for c in self.separator:\n        c = c.strip()\n        if c.startswith(':') and c.endswith(':'):\n            align.append('center')\n        elif c.startswith(':'):\n            align.append('left')\n        elif c.endswith(':'):\n            align.append('right')\n        else:\n            align.append(None)\n\n    # Build table\n    table = etree.SubElement(parent, 'table')\n    thead = etree.SubElement(table, 'thead')\n    self._build_row(header, thead, align)\n    tbody = etree.SubElement(table, 'tbody')\n    for row in rows:\n        self._build_row(row.strip(), tbody, align)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/tables/#pyrevit.coreutils.markdown.extensions.tables.TableExtension","title":"<code>TableExtension(*args, **kwargs)</code>","text":"<p>               Bases: <code>Extension</code></p> <p>Add tables to Markdown.</p> <p>Initiate Extension and set up configs.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def __init__(self, *args, **kwargs):\n    \"\"\"Initiate Extension and set up configs.\"\"\"\n    # check for configs arg for backward compat.\n    # (there only ever used to be one so we use arg[0])\n    if len(args):\n        if args[0] is not None:\n            self.setConfigs(args[0])\n        warnings.warn('Extension classes accepting positional args is '\n                      'pending Deprecation. Each setting should be '\n                      'passed into the Class as a keyword. Positional '\n                      'args are deprecated and will raise '\n                      'an error in version 2.7. See the Release Notes for '\n                      'Python-Markdown version 2.6 for more info.',\n                      DeprecationWarning)\n    # check for configs kwarg for backward compat.\n    if 'configs' in kwargs.keys():\n        if kwargs['configs'] is not None:\n            self.setConfigs(kwargs.pop('configs', {}))\n        warnings.warn('Extension classes accepting a dict on the single '\n                      'keyword \"config\" is pending Deprecation. Each '\n                      'setting should be passed into the Class as a '\n                      'keyword directly. The \"config\" keyword is '\n                      'deprecated and raise an error in '\n                      'version 2.7. See the Release Notes for '\n                      'Python-Markdown version 2.6 for more info.',\n                      DeprecationWarning)\n    # finally, use kwargs\n    self.setConfigs(kwargs)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/tables/#pyrevit.coreutils.markdown.extensions.tables.TableExtension-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/tables/#pyrevit.coreutils.markdown.extensions.tables.TableExtension.config","title":"<code>config = {}</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/tables/#pyrevit.coreutils.markdown.extensions.tables.TableExtension-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/tables/#pyrevit.coreutils.markdown.extensions.tables.TableExtension.getConfig","title":"<code>getConfig(key, default='')</code>","text":"<p>Return a setting for the given key or an empty string.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def getConfig(self, key, default=''):\n    \"\"\"Return a setting for the given key or an empty string.\"\"\"\n    if key in self.config:\n        return self.config[key][0]\n    else:\n        return default\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/tables/#pyrevit.coreutils.markdown.extensions.tables.TableExtension.getConfigs","title":"<code>getConfigs()</code>","text":"<p>Return all configs settings as a dict.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def getConfigs(self):\n    \"\"\"Return all configs settings as a dict.\"\"\"\n    return dict([(key, self.getConfig(key)) for key in self.config.keys()])\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/tables/#pyrevit.coreutils.markdown.extensions.tables.TableExtension.getConfigInfo","title":"<code>getConfigInfo()</code>","text":"<p>Return all config descriptions as a list of tuples.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def getConfigInfo(self):\n    \"\"\"Return all config descriptions as a list of tuples.\"\"\"\n    return [(key, self.config[key][1]) for key in self.config.keys()]\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/tables/#pyrevit.coreutils.markdown.extensions.tables.TableExtension.setConfig","title":"<code>setConfig(key, value)</code>","text":"<p>Set a config setting for <code>key</code> with the given <code>value</code>.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def setConfig(self, key, value):\n    \"\"\"Set a config setting for `key` with the given `value`.\"\"\"\n    if isinstance(self.config[key][0], bool):\n        value = parseBoolValue(value)\n    if self.config[key][0] is None:\n        value = parseBoolValue(value, preserve_none=True)\n    self.config[key][0] = value\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/tables/#pyrevit.coreutils.markdown.extensions.tables.TableExtension.setConfigs","title":"<code>setConfigs(items)</code>","text":"<p>Set multiple config settings given a dict or list of tuples.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def setConfigs(self, items):\n    \"\"\"Set multiple config settings given a dict or list of tuples.\"\"\"\n    if hasattr(items, 'items'):\n        # it's a dict\n        items = items.items()\n    for key, value in items:\n        self.setConfig(key, value)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/tables/#pyrevit.coreutils.markdown.extensions.tables.TableExtension.extendMarkdown","title":"<code>extendMarkdown(md, md_globals)</code>","text":"<p>Add an instance of TableProcessor to BlockParser.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/tables.py</code> <pre><code>def extendMarkdown(self, md, md_globals):\n    \"\"\"Add an instance of TableProcessor to BlockParser.\"\"\"\n    if '|' not in md.ESCAPED_CHARS:\n        md.ESCAPED_CHARS.append('|')\n    md.parser.blockprocessors.add('table',\n                                  TableProcessor(md.parser),\n                                  '&lt;hashheader')\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/tables/#pyrevit.coreutils.markdown.extensions.tables-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/tables/#pyrevit.coreutils.markdown.extensions.tables.makeExtension","title":"<code>makeExtension(*args, **kwargs)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/tables.py</code> <pre><code>def makeExtension(*args, **kwargs):\n    return TableExtension(*args, **kwargs)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/toc/","title":"toc","text":"<p>Table of Contents Extension for Python-Markdown.</p> <p>See https://pythonhosted.org/Markdown/extensions/toc.html for documentation.</p> <p>Original code Copyright 2008 Jack Miller</p> <p>All changes Copyright 2008-2014 The Python Markdown Project</p> <p>License: BSD</p>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/toc/#pyrevit.coreutils.markdown.extensions.toc-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/toc/#pyrevit.coreutils.markdown.extensions.toc.IDCOUNT_RE","title":"<code>IDCOUNT_RE = re.compile('^(.*)_([0-9]+)$')</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/toc/#pyrevit.coreutils.markdown.extensions.toc-classes","title":"Classes","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/toc/#pyrevit.coreutils.markdown.extensions.toc.TocTreeprocessor","title":"<code>TocTreeprocessor(md, config)</code>","text":"<p>               Bases: <code>Treeprocessor</code></p> <p>TOC Tree processor.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/toc.py</code> <pre><code>def __init__(self, md, config):\n    super(TocTreeprocessor, self).__init__(md)\n\n    self.marker = config[\"marker\"]\n    self.title = config[\"title\"]\n    self.base_level = int(config[\"baselevel\"]) - 1\n    self.slugify = config[\"slugify\"]\n    self.sep = config[\"separator\"]\n    self.use_anchors = parseBoolValue(config[\"anchorlink\"])\n    self.use_permalinks = parseBoolValue(config[\"permalink\"], False)\n    if self.use_permalinks is None:\n        self.use_permalinks = config[\"permalink\"]\n\n    self.header_rgx = re.compile(\"[Hh][123456]\")\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/toc/#pyrevit.coreutils.markdown.extensions.toc.TocTreeprocessor-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/toc/#pyrevit.coreutils.markdown.extensions.toc.TocTreeprocessor.markdown","title":"<code>markdown = markdown_instance</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/toc/#pyrevit.coreutils.markdown.extensions.toc.TocTreeprocessor.marker","title":"<code>marker = config['marker']</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/toc/#pyrevit.coreutils.markdown.extensions.toc.TocTreeprocessor.title","title":"<code>title = config['title']</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/toc/#pyrevit.coreutils.markdown.extensions.toc.TocTreeprocessor.base_level","title":"<code>base_level = int(config['baselevel']) - 1</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/toc/#pyrevit.coreutils.markdown.extensions.toc.TocTreeprocessor.slugify","title":"<code>slugify = config['slugify']</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/toc/#pyrevit.coreutils.markdown.extensions.toc.TocTreeprocessor.sep","title":"<code>sep = config['separator']</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/toc/#pyrevit.coreutils.markdown.extensions.toc.TocTreeprocessor.use_anchors","title":"<code>use_anchors = parseBoolValue(config['anchorlink'])</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/toc/#pyrevit.coreutils.markdown.extensions.toc.TocTreeprocessor.use_permalinks","title":"<code>use_permalinks = parseBoolValue(config['permalink'], False)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/toc/#pyrevit.coreutils.markdown.extensions.toc.TocTreeprocessor.header_rgx","title":"<code>header_rgx = re.compile('[Hh][123456]')</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/toc/#pyrevit.coreutils.markdown.extensions.toc.TocTreeprocessor-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/toc/#pyrevit.coreutils.markdown.extensions.toc.TocTreeprocessor.iterparent","title":"<code>iterparent(root)</code>","text":"<p>Iterator wrapper to get parent and child all at once.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/toc.py</code> <pre><code>def iterparent(self, root):\n    \"\"\"Iterator wrapper to get parent and child all at once.\"\"\"\n    for parent in root.iter():\n        for child in parent:\n            yield parent, child\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/toc/#pyrevit.coreutils.markdown.extensions.toc.TocTreeprocessor.replace_marker","title":"<code>replace_marker(root, elem)</code>","text":"<p>Replace marker with elem.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/toc.py</code> <pre><code>def replace_marker(self, root, elem):\n    \"\"\"Replace marker with elem.\"\"\"\n    for (p, c) in self.iterparent(root):\n        text = ''.join(c.itertext()).strip()\n        if not text:\n            continue\n\n        # To keep the output from screwing up the\n        # validation by putting a &lt;div&gt; inside of a &lt;p&gt;\n        # we actually replace the &lt;p&gt; in its entirety.\n        # We do not allow the marker inside a header as that\n        # would causes an enless loop of placing a new TOC\n        # inside previously generated TOC.\n        if c.text and c.text.strip() == self.marker and \\\n           not self.header_rgx.match(c.tag) and c.tag not in ['pre', 'code']:\n            for i in range(len(p)):\n                if p[i] == c:\n                    p[i] = elem\n                    break\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/toc/#pyrevit.coreutils.markdown.extensions.toc.TocTreeprocessor.set_level","title":"<code>set_level(elem)</code>","text":"<p>Adjust header level according to base level.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/toc.py</code> <pre><code>def set_level(self, elem):\n    \"\"\"Adjust header level according to base level.\"\"\"\n    level = int(elem.tag[-1]) + self.base_level\n    if level &gt; 6:\n        level = 6\n    elem.tag = 'h%d' % level\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/toc/#pyrevit.coreutils.markdown.extensions.toc.TocTreeprocessor.add_anchor","title":"<code>add_anchor(c, elem_id)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/toc.py</code> <pre><code>def add_anchor(self, c, elem_id):  # @ReservedAssignment\n    anchor = etree.Element(\"a\")\n    anchor.text = c.text\n    anchor.attrib[\"href\"] = \"#\" + elem_id\n    anchor.attrib[\"class\"] = \"toclink\"\n    c.text = \"\"\n    for elem in c:\n        anchor.append(elem)\n    while c:\n        c.remove(c[0])\n    c.append(anchor)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/toc/#pyrevit.coreutils.markdown.extensions.toc.TocTreeprocessor.add_permalink","title":"<code>add_permalink(c, elem_id)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/toc.py</code> <pre><code>def add_permalink(self, c, elem_id):\n    permalink = etree.Element(\"a\")\n    permalink.text = (\"%spara;\" % AMP_SUBSTITUTE\n                      if self.use_permalinks is True\n                      else self.use_permalinks)\n    permalink.attrib[\"href\"] = \"#\" + elem_id\n    permalink.attrib[\"class\"] = \"headerlink\"\n    permalink.attrib[\"title\"] = \"Permanent link\"\n    c.append(permalink)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/toc/#pyrevit.coreutils.markdown.extensions.toc.TocTreeprocessor.build_toc_div","title":"<code>build_toc_div(toc_list)</code>","text":"<p>Return a string div given a toc list.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/toc.py</code> <pre><code>def build_toc_div(self, toc_list):\n    \"\"\"Return a string div given a toc list.\"\"\"\n    div = etree.Element(\"div\")\n    div.attrib[\"class\"] = \"toc\"\n\n    # Add title to the div\n    if self.title:\n        header = etree.SubElement(div, \"span\")\n        header.attrib[\"class\"] = \"toctitle\"\n        header.text = self.title\n\n    def build_etree_ul(toc_list, parent):\n        ul = etree.SubElement(parent, \"ul\")\n        for item in toc_list:\n            # List item link, to be inserted into the toc div\n            li = etree.SubElement(ul, \"li\")\n            link = etree.SubElement(li, \"a\")\n            link.text = item.get('name', '')\n            link.attrib[\"href\"] = '#' + item.get('id', '')\n            if item['children']:\n                build_etree_ul(item['children'], li)\n        return ul\n\n    build_etree_ul(toc_list, div)\n    prettify = self.markdown.treeprocessors.get('prettify')\n    if prettify:\n        prettify.run(div)\n    return div\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/toc/#pyrevit.coreutils.markdown.extensions.toc.TocTreeprocessor.run","title":"<code>run(doc)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/toc.py</code> <pre><code>def run(self, doc):\n    # Get a list of id attributes\n    used_ids = set()\n    for el in doc.iter():\n        if \"id\" in el.attrib:\n            used_ids.add(el.attrib[\"id\"])\n\n    toc_tokens = []\n    for el in doc.iter():\n        if isinstance(el.tag, string_type) and self.header_rgx.match(el.tag):\n            self.set_level(el)\n            text = ''.join(el.itertext()).strip()\n\n            # Do not override pre-existing ids\n            if \"id\" not in el.attrib:\n                innertext = stashedHTML2text(text, self.markdown)\n                el.attrib[\"id\"] = unique(self.slugify(innertext, self.sep), used_ids)\n\n            toc_tokens.append({\n                'level': int(el.tag[-1]),\n                'id': el.attrib[\"id\"],\n                'name': text\n            })\n\n            if self.use_anchors:\n                self.add_anchor(el, el.attrib[\"id\"])\n            if self.use_permalinks:\n                self.add_permalink(el, el.attrib[\"id\"])\n\n    div = self.build_toc_div(nest_toc_tokens(toc_tokens))\n    if self.marker:\n        self.replace_marker(doc, div)\n\n    # serialize and attach to markdown instance.\n    toc = self.markdown.serializer(div)\n    for pp in self.markdown.postprocessors.values():\n        toc = pp.run(toc)\n    self.markdown.toc = toc\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/toc/#pyrevit.coreutils.markdown.extensions.toc.TocExtension","title":"<code>TocExtension(*args, **kwargs)</code>","text":"<p>               Bases: <code>Extension</code></p> <p>TOC Markdown extension.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/toc.py</code> <pre><code>def __init__(self, *args, **kwargs):\n    self.config = {\n        \"marker\": ['[TOC]',\n                   'Text to find and replace with Table of Contents - '\n                   'Set to an empty string to disable. Defaults to \"[TOC]\"'],\n        \"title\": [\"\",\n                  \"Title to insert into TOC &lt;div&gt; - \"\n                  \"Defaults to an empty string\"],\n        \"anchorlink\": [False,\n                       \"True if header should be a self link - \"\n                       \"Defaults to False\"],\n        \"permalink\": [0,\n                      \"True or link text if a Sphinx-style permalink should \"\n                      \"be added - Defaults to False\"],\n        \"baselevel\": ['1', 'Base level for headers.'],\n        \"slugify\": [slugify,\n                    \"Function to generate anchors based on header text - \"\n                    \"Defaults to the headerid ext's slugify function.\"],\n        'separator': ['-', 'Word separator. Defaults to \"-\".']\n    }\n\n    super(TocExtension, self).__init__(*args, **kwargs)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/toc/#pyrevit.coreutils.markdown.extensions.toc.TocExtension-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/toc/#pyrevit.coreutils.markdown.extensions.toc.TocExtension.TreeProcessorClass","title":"<code>TreeProcessorClass = TocTreeprocessor</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/toc/#pyrevit.coreutils.markdown.extensions.toc.TocExtension.config","title":"<code>config = {'marker': ['[TOC]', 'Text to find and replace with Table of Contents - Set to an empty string to disable. Defaults to \"[TOC]\"'], 'title': ['', 'Title to insert into TOC &lt;div&gt; - Defaults to an empty string'], 'anchorlink': [False, 'True if header should be a self link - Defaults to False'], 'permalink': [0, 'True or link text if a Sphinx-style permalink should be added - Defaults to False'], 'baselevel': ['1', 'Base level for headers.'], 'slugify': [slugify, \"Function to generate anchors based on header text - Defaults to the headerid ext's slugify function.\"], 'separator': ['-', 'Word separator. Defaults to \"-\".']}</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/toc/#pyrevit.coreutils.markdown.extensions.toc.TocExtension-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/toc/#pyrevit.coreutils.markdown.extensions.toc.TocExtension.getConfig","title":"<code>getConfig(key, default='')</code>","text":"<p>Return a setting for the given key or an empty string.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def getConfig(self, key, default=''):\n    \"\"\"Return a setting for the given key or an empty string.\"\"\"\n    if key in self.config:\n        return self.config[key][0]\n    else:\n        return default\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/toc/#pyrevit.coreutils.markdown.extensions.toc.TocExtension.getConfigs","title":"<code>getConfigs()</code>","text":"<p>Return all configs settings as a dict.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def getConfigs(self):\n    \"\"\"Return all configs settings as a dict.\"\"\"\n    return dict([(key, self.getConfig(key)) for key in self.config.keys()])\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/toc/#pyrevit.coreutils.markdown.extensions.toc.TocExtension.getConfigInfo","title":"<code>getConfigInfo()</code>","text":"<p>Return all config descriptions as a list of tuples.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def getConfigInfo(self):\n    \"\"\"Return all config descriptions as a list of tuples.\"\"\"\n    return [(key, self.config[key][1]) for key in self.config.keys()]\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/toc/#pyrevit.coreutils.markdown.extensions.toc.TocExtension.setConfig","title":"<code>setConfig(key, value)</code>","text":"<p>Set a config setting for <code>key</code> with the given <code>value</code>.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def setConfig(self, key, value):\n    \"\"\"Set a config setting for `key` with the given `value`.\"\"\"\n    if isinstance(self.config[key][0], bool):\n        value = parseBoolValue(value)\n    if self.config[key][0] is None:\n        value = parseBoolValue(value, preserve_none=True)\n    self.config[key][0] = value\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/toc/#pyrevit.coreutils.markdown.extensions.toc.TocExtension.setConfigs","title":"<code>setConfigs(items)</code>","text":"<p>Set multiple config settings given a dict or list of tuples.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def setConfigs(self, items):\n    \"\"\"Set multiple config settings given a dict or list of tuples.\"\"\"\n    if hasattr(items, 'items'):\n        # it's a dict\n        items = items.items()\n    for key, value in items:\n        self.setConfig(key, value)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/toc/#pyrevit.coreutils.markdown.extensions.toc.TocExtension.extendMarkdown","title":"<code>extendMarkdown(md, md_globals)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/toc.py</code> <pre><code>def extendMarkdown(self, md, md_globals):\n    md.registerExtension(self)\n    self.md = md\n    self.reset()\n    tocext = self.TreeProcessorClass(md, self.getConfigs())\n    # Headerid ext is set to '&gt;prettify'. With this set to '_end',\n    # it should always come after headerid ext (and honor ids assinged\n    # by the header id extension) if both are used. Same goes for\n    # attr_list extension. This must come last because we don't want\n    # to redefine ids after toc is created. But we do want toc prettified.\n    md.treeprocessors.add(\"toc\", tocext, \"_end\")\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/toc/#pyrevit.coreutils.markdown.extensions.toc.TocExtension.reset","title":"<code>reset()</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/toc.py</code> <pre><code>def reset(self):\n    self.md.toc = ''\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/toc/#pyrevit.coreutils.markdown.extensions.toc-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/toc/#pyrevit.coreutils.markdown.extensions.toc.slugify","title":"<code>slugify(value, separator)</code>","text":"<p>Slugify a string, to make it URL friendly.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/toc.py</code> <pre><code>def slugify(value, separator):\n    \"\"\"Slugify a string, to make it URL friendly.\"\"\"\n    value = unicodedata.normalize('NFKD', value).encode('ascii', 'ignore')\n    value = re.sub(r'[^\\w\\s-]', '', value.decode('ascii')).strip().lower()\n    return re.sub(r'[%s\\s]+' % separator, separator, value)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/toc/#pyrevit.coreutils.markdown.extensions.toc.unique","title":"<code>unique(id, ids)</code>","text":"<p>Ensure id is unique in set of ids. Append '_1', '_2'... if not.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/toc.py</code> <pre><code>def unique(id, ids):\n    \"\"\"Ensure id is unique in set of ids. Append '_1', '_2'... if not.\"\"\"\n    while id in ids or not id:\n        m = IDCOUNT_RE.match(id)\n        if m:\n            id = '%s_%d' % (m.group(1), int(m.group(2))+1)\n        else:\n            id = '%s_%d' % (id, 1)\n    ids.add(id)\n    return id\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/toc/#pyrevit.coreutils.markdown.extensions.toc.stashedHTML2text","title":"<code>stashedHTML2text(text, md)</code>","text":"<p>Extract raw HTML from stash, reduce to plain text and swap with placeholder.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/toc.py</code> <pre><code>def stashedHTML2text(text, md):\n    \"\"\"Extract raw HTML from stash, reduce to plain text and swap with placeholder.\"\"\"\n    def _html_sub(m):\n        \"\"\"Substitute raw html with plain text.\"\"\"\n        try:\n            raw, safe = md.htmlStash.rawHtmlBlocks[int(m.group(1))]\n        except (IndexError, TypeError):  # pragma: no cover\n            return m.group(0)\n        if md.safeMode and not safe:  # pragma: no cover\n            return ''\n        # Strip out tags and entities - leaveing text\n        return re.sub(r'(&lt;[^&gt;]+&gt;)|(&amp;[\\#a-zA-Z0-9]+;)', '', raw)\n\n    return HTML_PLACEHOLDER_RE.sub(_html_sub, text)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/toc/#pyrevit.coreutils.markdown.extensions.toc.nest_toc_tokens","title":"<code>nest_toc_tokens(toc_list)</code>","text":"<p>Given an unsorted list with errors and skips, return a nested one.</p> <p>Examples:</p> <p>[{'level': 1}, {'level': 2}] =&gt; [{'level': 1, 'children': [{'level': 2, 'children': []}]}].</p> <p>A wrong list is also converted: [{'level': 2}, {'level': 1}] =&gt; [{'level': 2, 'children': []}, {'level': 1, 'children': []}]</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/toc.py</code> <pre><code>def nest_toc_tokens(toc_list):\n    \"\"\"Given an unsorted list with errors and skips, return a nested one.\n\n    Examples:\n        [{'level': 1}, {'level': 2}]\n        =&gt;\n        [{'level': 1, 'children': [{'level': 2, 'children': []}]}].\n\n        A wrong list is also converted:\n        [{'level': 2}, {'level': 1}]\n        =&gt;\n        [{'level': 2, 'children': []}, {'level': 1, 'children': []}]\n    \"\"\"\n    ordered_list = []\n    if len(toc_list):\n        # Initialize everything by processing the first entry\n        last = toc_list.pop(0)\n        last['children'] = []\n        levels = [last['level']]\n        ordered_list.append(last)\n        parents = []\n\n        # Walk the rest nesting the entries properly\n        while toc_list:\n            t = toc_list.pop(0)\n            current_level = t['level']\n            t['children'] = []\n\n            # Reduce depth if current level &lt; last item's level\n            if current_level &lt; levels[-1]:\n                # Pop last level since we know we are less than it\n                levels.pop()\n\n                # Pop parents and levels we are less than or equal to\n                to_pop = 0\n                for p in reversed(parents):\n                    if current_level &lt;= p['level']:\n                        to_pop += 1\n                    else:  # pragma: no cover\n                        break\n                if to_pop:\n                    levels = levels[:-to_pop]\n                    parents = parents[:-to_pop]\n\n                # Note current level as last\n                levels.append(current_level)\n\n            # Level is the same, so append to\n            # the current parent (if available)\n            if current_level == levels[-1]:\n                (parents[-1]['children'] if parents\n                 else ordered_list).append(t)\n\n            # Current level is &gt; last item's level,\n            # So make last item a parent and append current as child\n            else:\n                last['children'].append(t)\n                parents.append(last)\n                levels.append(current_level)\n            last = t\n\n    return ordered_list\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/toc/#pyrevit.coreutils.markdown.extensions.toc.makeExtension","title":"<code>makeExtension(*args, **kwargs)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/toc.py</code> <pre><code>def makeExtension(*args, **kwargs):\n    return TocExtension(*args, **kwargs)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/wikilinks/","title":"wikilinks","text":"<p>WikiLinks Extension for Python-Markdown.</p> <p>Converts [[WikiLinks]] to relative links.</p> <p>See https://pythonhosted.org/Markdown/extensions/wikilinks.html for documentation.</p> <p>Original code Copyright Waylan Limberg.</p> <p>All changes Copyright The Python Markdown Project</p> <p>License: BSD</p>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/wikilinks/#pyrevit.coreutils.markdown.extensions.wikilinks-classes","title":"Classes","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/wikilinks/#pyrevit.coreutils.markdown.extensions.wikilinks.WikiLinkExtension","title":"<code>WikiLinkExtension(*args, **kwargs)</code>","text":"<p>               Bases: <code>Extension</code></p> <p>WikiLinks markdown extension.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/wikilinks.py</code> <pre><code>def __init__(self, *args, **kwargs):\n    self.config = {\n        'base_url': ['/', 'String to append to beginning or URL.'],\n        'end_url': ['/', 'String to append to end of URL.'],\n        'html_class': ['wikilink', 'CSS hook. Leave blank for none.'],\n        'build_url': [build_url, 'Callable formats URL from label.'],\n    }\n\n    super(WikiLinkExtension, self).__init__(*args, **kwargs)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/wikilinks/#pyrevit.coreutils.markdown.extensions.wikilinks.WikiLinkExtension-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/wikilinks/#pyrevit.coreutils.markdown.extensions.wikilinks.WikiLinkExtension.config","title":"<code>config = {'base_url': ['/', 'String to append to beginning or URL.'], 'end_url': ['/', 'String to append to end of URL.'], 'html_class': ['wikilink', 'CSS hook. Leave blank for none.'], 'build_url': [build_url, 'Callable formats URL from label.']}</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/wikilinks/#pyrevit.coreutils.markdown.extensions.wikilinks.WikiLinkExtension-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/wikilinks/#pyrevit.coreutils.markdown.extensions.wikilinks.WikiLinkExtension.getConfig","title":"<code>getConfig(key, default='')</code>","text":"<p>Return a setting for the given key or an empty string.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def getConfig(self, key, default=''):\n    \"\"\"Return a setting for the given key or an empty string.\"\"\"\n    if key in self.config:\n        return self.config[key][0]\n    else:\n        return default\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/wikilinks/#pyrevit.coreutils.markdown.extensions.wikilinks.WikiLinkExtension.getConfigs","title":"<code>getConfigs()</code>","text":"<p>Return all configs settings as a dict.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def getConfigs(self):\n    \"\"\"Return all configs settings as a dict.\"\"\"\n    return dict([(key, self.getConfig(key)) for key in self.config.keys()])\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/wikilinks/#pyrevit.coreutils.markdown.extensions.wikilinks.WikiLinkExtension.getConfigInfo","title":"<code>getConfigInfo()</code>","text":"<p>Return all config descriptions as a list of tuples.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def getConfigInfo(self):\n    \"\"\"Return all config descriptions as a list of tuples.\"\"\"\n    return [(key, self.config[key][1]) for key in self.config.keys()]\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/wikilinks/#pyrevit.coreutils.markdown.extensions.wikilinks.WikiLinkExtension.setConfig","title":"<code>setConfig(key, value)</code>","text":"<p>Set a config setting for <code>key</code> with the given <code>value</code>.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def setConfig(self, key, value):\n    \"\"\"Set a config setting for `key` with the given `value`.\"\"\"\n    if isinstance(self.config[key][0], bool):\n        value = parseBoolValue(value)\n    if self.config[key][0] is None:\n        value = parseBoolValue(value, preserve_none=True)\n    self.config[key][0] = value\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/wikilinks/#pyrevit.coreutils.markdown.extensions.wikilinks.WikiLinkExtension.setConfigs","title":"<code>setConfigs(items)</code>","text":"<p>Set multiple config settings given a dict or list of tuples.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/__init__.py</code> <pre><code>def setConfigs(self, items):\n    \"\"\"Set multiple config settings given a dict or list of tuples.\"\"\"\n    if hasattr(items, 'items'):\n        # it's a dict\n        items = items.items()\n    for key, value in items:\n        self.setConfig(key, value)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/wikilinks/#pyrevit.coreutils.markdown.extensions.wikilinks.WikiLinkExtension.extendMarkdown","title":"<code>extendMarkdown(md, md_globals)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/wikilinks.py</code> <pre><code>def extendMarkdown(self, md, md_globals):\n    self.md = md\n\n    # append to end of inline patterns\n    WIKILINK_RE = r'\\[\\[([\\w0-9_ -]+)\\]\\]'\n    wikilinkPattern = WikiLinks(WIKILINK_RE, self.getConfigs())\n    wikilinkPattern.md = md\n    md.inlinePatterns.add('wikilink', wikilinkPattern, \"&lt;not_strong\")\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/wikilinks/#pyrevit.coreutils.markdown.extensions.wikilinks.WikiLinks","title":"<code>WikiLinks(pattern, config)</code>","text":"<p>               Bases: <code>Pattern</code></p> <p>WikiLinks parser.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/wikilinks.py</code> <pre><code>def __init__(self, pattern, config):\n    super(WikiLinks, self).__init__(pattern)\n    self.config = config\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/wikilinks/#pyrevit.coreutils.markdown.extensions.wikilinks.WikiLinks-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/wikilinks/#pyrevit.coreutils.markdown.extensions.wikilinks.WikiLinks.pattern","title":"<code>pattern = pattern</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/wikilinks/#pyrevit.coreutils.markdown.extensions.wikilinks.WikiLinks.compiled_re","title":"<code>compiled_re = re.compile('^(.*?)%s(.*)$' % pattern, re.DOTALL | re.UNICODE)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/wikilinks/#pyrevit.coreutils.markdown.extensions.wikilinks.WikiLinks.safe_mode","title":"<code>safe_mode = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/wikilinks/#pyrevit.coreutils.markdown.extensions.wikilinks.WikiLinks.markdown","title":"<code>markdown = markdown_instance</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/wikilinks/#pyrevit.coreutils.markdown.extensions.wikilinks.WikiLinks.config","title":"<code>config = config</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/wikilinks/#pyrevit.coreutils.markdown.extensions.wikilinks.WikiLinks-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/wikilinks/#pyrevit.coreutils.markdown.extensions.wikilinks.WikiLinks.getCompiledRegExp","title":"<code>getCompiledRegExp()</code>","text":"<p>Return a compiled regular expression.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def getCompiledRegExp(self):\n    \"\"\"Return a compiled regular expression.\"\"\"\n    return self.compiled_re\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/wikilinks/#pyrevit.coreutils.markdown.extensions.wikilinks.WikiLinks.type","title":"<code>type()</code>","text":"<p>Return class name, to define pattern type.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def type(self):\n    \"\"\"Return class name, to define pattern type.\"\"\"\n    return self.__class__.__name__\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/wikilinks/#pyrevit.coreutils.markdown.extensions.wikilinks.WikiLinks.unescape","title":"<code>unescape(text)</code>","text":"<p>Return unescaped text given text with an inline placeholder.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/inlinepatterns.py</code> <pre><code>def unescape(self, text):\n    \"\"\"Return unescaped text given text with an inline placeholder.\"\"\"\n    try:\n        stash = self.markdown.treeprocessors['inline'].stashed_nodes\n    except KeyError:  # pragma: no cover\n        return text\n\n    def itertext(el):  # pragma: no cover\n        \"\"\"Reimplement Element.itertext for older python versions.\"\"\"\n        tag = el.tag\n        if not isinstance(tag, util.string_type) and tag is not None:\n            return\n        if el.text:\n            yield el.text\n        for e in el:\n            for s in itertext(e):\n                yield s\n            if e.tail:\n                yield e.tail\n\n    def get_stash(m):\n        id = m.group(1)\n        if id in stash:\n            value = stash.get(id)\n            if isinstance(value, util.string_type):\n                return value\n            else:\n                # An etree Element - return text content only\n                return ''.join(itertext(value))\n    return util.INLINE_PLACEHOLDER_RE.sub(get_stash, text)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/wikilinks/#pyrevit.coreutils.markdown.extensions.wikilinks.WikiLinks.handleMatch","title":"<code>handleMatch(m)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/wikilinks.py</code> <pre><code>def handleMatch(self, m):\n    if m.group(2).strip():\n        base_url, end_url, html_class = self._getMeta()\n        label = m.group(2).strip()\n        url = self.config['build_url'](label, base_url, end_url)\n        a = etree.Element('a')\n        a.text = label\n        a.set('href', url)\n        if html_class:\n            a.set('class', html_class)\n    else:\n        a = ''\n    return a\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/wikilinks/#pyrevit.coreutils.markdown.extensions.wikilinks-functions","title":"Functions","text":""},{"location":"reference/pyrevit/coreutils/markdown/extensions/wikilinks/#pyrevit.coreutils.markdown.extensions.wikilinks.build_url","title":"<code>build_url(label, base, end)</code>","text":"<p>Build a url from the label, a base, and an end.</p> Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/wikilinks.py</code> <pre><code>def build_url(label, base, end):\n    \"\"\"Build a url from the label, a base, and an end.\"\"\"\n    clean_label = re.sub(r'([ ]+_)|(_[ ]+)|([ ]+)', '_', label)\n    return '%s%s%s' % (base, clean_label, end)\n</code></pre>"},{"location":"reference/pyrevit/coreutils/markdown/extensions/wikilinks/#pyrevit.coreutils.markdown.extensions.wikilinks.makeExtension","title":"<code>makeExtension(*args, **kwargs)</code>","text":"Source code in <code>pyrevitlib/pyrevit/coreutils/markdown/extensions/wikilinks.py</code> <pre><code>def makeExtension(*args, **kwargs):\n    return WikiLinkExtension(*args, **kwargs)\n</code></pre>"},{"location":"reference/pyrevit/extensions/","title":"extensions","text":"<p>Base module for handling extensions parsing.</p>"},{"location":"reference/pyrevit/extensions/#pyrevit.extensions-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.LIB_EXTENSION_POSTFIX","title":"<code>LIB_EXTENSION_POSTFIX = '.lib'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.UI_EXTENSION_POSTFIX","title":"<code>UI_EXTENSION_POSTFIX = '.extension'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.PYTHON_LANG","title":"<code>PYTHON_LANG = 'python'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.CSHARP_LANG","title":"<code>CSHARP_LANG = 'csharp'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.VB_LANG","title":"<code>VB_LANG = 'visualbasic'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.RUBY_LANG","title":"<code>RUBY_LANG = 'ruby'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.DYNAMO_LANG","title":"<code>DYNAMO_LANG = 'dynamobim'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.GRASSHOPPER_LANG","title":"<code>GRASSHOPPER_LANG = 'grasshopper'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.CPYTHON_HASHBANG","title":"<code>CPYTHON_HASHBANG = '#! python3'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.PYTHON_SCRIPT_FILE_FORMAT","title":"<code>PYTHON_SCRIPT_FILE_FORMAT = '.py'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.CSHARP_SCRIPT_FILE_FORMAT","title":"<code>CSHARP_SCRIPT_FILE_FORMAT = '.cs'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.VB_SCRIPT_FILE_FORMAT","title":"<code>VB_SCRIPT_FILE_FORMAT = '.vb'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.RUBY_SCRIPT_FILE_FORMAT","title":"<code>RUBY_SCRIPT_FILE_FORMAT = '.rb'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.DYNAMO_SCRIPT_FILE_FORMAT","title":"<code>DYNAMO_SCRIPT_FILE_FORMAT = '.dyn'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.GRASSHOPPER_SCRIPT_FILE_FORMAT","title":"<code>GRASSHOPPER_SCRIPT_FILE_FORMAT = '.gh'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.GRASSHOPPERX_SCRIPT_FILE_FORMAT","title":"<code>GRASSHOPPERX_SCRIPT_FILE_FORMAT = '.ghx'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.CONTENT_FILE_FORMAT","title":"<code>CONTENT_FILE_FORMAT = '.rfa'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.EXT_STARTUP_NAME","title":"<code>EXT_STARTUP_NAME = 'startup'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.PYTHON_EXT_STARTUP_FILE","title":"<code>PYTHON_EXT_STARTUP_FILE = EXT_STARTUP_NAME + PYTHON_SCRIPT_FILE_FORMAT</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.CSHARP_EXT_STARTUP_FILE","title":"<code>CSHARP_EXT_STARTUP_FILE = EXT_STARTUP_NAME + CSHARP_SCRIPT_FILE_FORMAT</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.VB_EXT_STARTUP_FILE","title":"<code>VB_EXT_STARTUP_FILE = EXT_STARTUP_NAME + VB_SCRIPT_FILE_FORMAT</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.RUBY_EXT_STARTUP_FILE","title":"<code>RUBY_EXT_STARTUP_FILE = EXT_STARTUP_NAME + RUBY_SCRIPT_FILE_FORMAT</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.YAML_FILE_FORMAT","title":"<code>YAML_FILE_FORMAT = '.yaml'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.JSON_FILE_FORMAT","title":"<code>JSON_FILE_FORMAT = '.json'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.EXT_MANIFEST_NAME","title":"<code>EXT_MANIFEST_NAME = 'extension'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.EXT_MANIFEST_FILE","title":"<code>EXT_MANIFEST_FILE = EXT_MANIFEST_NAME + JSON_FILE_FORMAT</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.DEFAULT_BUNDLEMATA_NAME","title":"<code>DEFAULT_BUNDLEMATA_NAME = 'bundle'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.BUNDLEMATA_POSTFIX","title":"<code>BUNDLEMATA_POSTFIX = DEFAULT_BUNDLEMATA_NAME + YAML_FILE_FORMAT</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.MDATA_UI_TITLE","title":"<code>MDATA_UI_TITLE = 'title'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.MDATA_TOOLTIP","title":"<code>MDATA_TOOLTIP = 'tooltip'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.MDATA_AUTHOR","title":"<code>MDATA_AUTHOR = 'author'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.MDATA_AUTHORS","title":"<code>MDATA_AUTHORS = 'authors'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.MDATA_LAYOUT","title":"<code>MDATA_LAYOUT = 'layout'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.MDATA_COMMAND_HELP_URL","title":"<code>MDATA_COMMAND_HELP_URL = 'help_url'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.MDATA_COMMAND_CONTEXT","title":"<code>MDATA_COMMAND_CONTEXT = 'context'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.MDATA_COMMAND_CONTEXT_TYPE","title":"<code>MDATA_COMMAND_CONTEXT_TYPE = 'type'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.MDATA_COMMAND_CONTEXT_NOT","title":"<code>MDATA_COMMAND_CONTEXT_NOT = 'not_'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.MDATA_COMMAND_CONTEXT_ANY","title":"<code>MDATA_COMMAND_CONTEXT_ANY = 'any'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.MDATA_COMMAND_CONTEXT_ALL","title":"<code>MDATA_COMMAND_CONTEXT_ALL = 'all'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.MDATA_COMMAND_CONTEXT_EXACT","title":"<code>MDATA_COMMAND_CONTEXT_EXACT = 'exact'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.MDATA_COMMAND_CONTEXT_NOTANY","title":"<code>MDATA_COMMAND_CONTEXT_NOTANY = MDATA_COMMAND_CONTEXT_NOT + MDATA_COMMAND_CONTEXT_ANY</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.MDATA_COMMAND_CONTEXT_NOTALL","title":"<code>MDATA_COMMAND_CONTEXT_NOTALL = MDATA_COMMAND_CONTEXT_NOT + MDATA_COMMAND_CONTEXT_ALL</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.MDATA_COMMAND_CONTEXT_NOTEXACT","title":"<code>MDATA_COMMAND_CONTEXT_NOTEXACT = MDATA_COMMAND_CONTEXT_NOT + MDATA_COMMAND_CONTEXT_EXACT</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.MDATA_COMMAND_CONTEXT_ANY_SEP","title":"<code>MDATA_COMMAND_CONTEXT_ANY_SEP = '|'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.MDATA_COMMAND_CONTEXT_ALL_SEP","title":"<code>MDATA_COMMAND_CONTEXT_ALL_SEP = '&amp;'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.MDATA_COMMAND_CONTEXT_EXACT_SEP","title":"<code>MDATA_COMMAND_CONTEXT_EXACT_SEP = ';'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.MDATA_COMMAND_CONTEXT_RULE","title":"<code>MDATA_COMMAND_CONTEXT_RULE = '({rule})'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.MDATA_MIN_REVIT_VERSION","title":"<code>MDATA_MIN_REVIT_VERSION = 'min_revit_version'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.MDATA_MAX_REVIT_VERSION","title":"<code>MDATA_MAX_REVIT_VERSION = 'max_revit_version'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.MDATA_BETA_SCRIPT","title":"<code>MDATA_BETA_SCRIPT = 'is_beta'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.MDATA_ENGINE","title":"<code>MDATA_ENGINE = 'engine'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.MDATA_ENGINE_CLEAN","title":"<code>MDATA_ENGINE_CLEAN = 'clean'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.MDATA_ENGINE_FULLFRAME","title":"<code>MDATA_ENGINE_FULLFRAME = 'full_frame'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.MDATA_ENGINE_PERSISTENT","title":"<code>MDATA_ENGINE_PERSISTENT = 'persistent'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.MDATA_ENGINE_MAINTHREAD","title":"<code>MDATA_ENGINE_MAINTHREAD = 'mainthread'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.MDATA_LINK_BUTTON_MODULES","title":"<code>MDATA_LINK_BUTTON_MODULES = 'modules'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.MDATA_LINK_BUTTON_ASSEMBLY","title":"<code>MDATA_LINK_BUTTON_ASSEMBLY = 'assembly'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.MDATA_LINK_BUTTON_COMMAND_CLASS","title":"<code>MDATA_LINK_BUTTON_COMMAND_CLASS = 'command_class'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.MDATA_LINK_BUTTON_AVAIL_COMMAND_CLASS","title":"<code>MDATA_LINK_BUTTON_AVAIL_COMMAND_CLASS = 'availability_class'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.MDATA_URL_BUTTON_HYPERLINK","title":"<code>MDATA_URL_BUTTON_HYPERLINK = 'hyperlink'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.MDATA_TEMPLATES_KEY","title":"<code>MDATA_TEMPLATES_KEY = 'templates'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.MDATA_BACKGROUND_KEY","title":"<code>MDATA_BACKGROUND_KEY = 'background'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.MDATA_BACKGROUND_PANEL_KEY","title":"<code>MDATA_BACKGROUND_PANEL_KEY = 'panel'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.MDATA_BACKGROUND_TITLE_KEY","title":"<code>MDATA_BACKGROUND_TITLE_KEY = 'title'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.MDATA_BACKGROUND_SLIDEOUT_KEY","title":"<code>MDATA_BACKGROUND_SLIDEOUT_KEY = 'slideout'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.MDATA_HIGHLIGHT_KEY","title":"<code>MDATA_HIGHLIGHT_KEY = 'highlight'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.MDATA_HIGHLIGHT_TYPE_NEW","title":"<code>MDATA_HIGHLIGHT_TYPE_NEW = 'new'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.MDATA_HIGHLIGHT_TYPE_UPDATED","title":"<code>MDATA_HIGHLIGHT_TYPE_UPDATED = 'updated'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.MDATA_COLLAPSED_KEY","title":"<code>MDATA_COLLAPSED_KEY = 'collapsed'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.MDATA_ENGINE_DYNAMO_AUTOMATE","title":"<code>MDATA_ENGINE_DYNAMO_AUTOMATE = 'automate'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.MDATA_ENGINE_DYNAMO_PATH","title":"<code>MDATA_ENGINE_DYNAMO_PATH = 'dynamo_path'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.MDATA_ENGINE_DYNAMO_PATH_CHECK_EXIST","title":"<code>MDATA_ENGINE_DYNAMO_PATH_CHECK_EXIST = 'dynamo_path_check_existing'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.MDATA_ENGINE_DYNAMO_FORCE_MANUAL_RUN","title":"<code>MDATA_ENGINE_DYNAMO_FORCE_MANUAL_RUN = 'dynamo_force_manual_run'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.MDATA_ENGINE_DYNAMO_MODEL_NODES_INFO","title":"<code>MDATA_ENGINE_DYNAMO_MODEL_NODES_INFO = 'dynamo_model_nodes_info'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.UI_TITLE_PARAM","title":"<code>UI_TITLE_PARAM = '__title__'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.DOCSTRING_PARAM","title":"<code>DOCSTRING_PARAM = '__doc__'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.AUTHOR_PARAM","title":"<code>AUTHOR_PARAM = '__author__'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.AUTHORS_PARAM","title":"<code>AUTHORS_PARAM = '__authors__'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.COMMAND_HELP_URL_PARAM","title":"<code>COMMAND_HELP_URL_PARAM = '__helpurl__'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.COMMAND_CONTEXT_PARAM","title":"<code>COMMAND_CONTEXT_PARAM = '__context__'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.MIN_REVIT_VERSION_PARAM","title":"<code>MIN_REVIT_VERSION_PARAM = '__min_revit_ver__'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.MAX_REVIT_VERSION_PARAM","title":"<code>MAX_REVIT_VERSION_PARAM = '__max_revit_ver__'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.SHIFT_CLICK_PARAM","title":"<code>SHIFT_CLICK_PARAM = '__shiftclick__'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.BETA_SCRIPT_PARAM","title":"<code>BETA_SCRIPT_PARAM = '__beta__'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.HIGHLIGHT_SCRIPT_PARAM","title":"<code>HIGHLIGHT_SCRIPT_PARAM = '__highlight__'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.CLEAN_ENGINE_SCRIPT_PARAM","title":"<code>CLEAN_ENGINE_SCRIPT_PARAM = '__cleanengine__'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.FULLFRAME_ENGINE_PARAM","title":"<code>FULLFRAME_ENGINE_PARAM = '__fullframeengine__'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.PERSISTENT_ENGINE_PARAM","title":"<code>PERSISTENT_ENGINE_PARAM = '__persistentengine__'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.TAB_POSTFIX","title":"<code>TAB_POSTFIX = '.tab'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.PANEL_POSTFIX","title":"<code>PANEL_POSTFIX = '.panel'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.LINK_BUTTON_POSTFIX","title":"<code>LINK_BUTTON_POSTFIX = '.linkbutton'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.INVOKE_BUTTON_POSTFIX","title":"<code>INVOKE_BUTTON_POSTFIX = '.invokebutton'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.PUSH_BUTTON_POSTFIX","title":"<code>PUSH_BUTTON_POSTFIX = '.pushbutton'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.SMART_BUTTON_POSTFIX","title":"<code>SMART_BUTTON_POSTFIX = '.smartbutton'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.PULLDOWN_BUTTON_POSTFIX","title":"<code>PULLDOWN_BUTTON_POSTFIX = '.pulldown'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.STACK_BUTTON_POSTFIX","title":"<code>STACK_BUTTON_POSTFIX = '.stack'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.SPLIT_BUTTON_POSTFIX","title":"<code>SPLIT_BUTTON_POSTFIX = '.splitbutton'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.SPLITPUSH_BUTTON_POSTFIX","title":"<code>SPLITPUSH_BUTTON_POSTFIX = '.splitpushbutton'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.PANEL_PUSH_BUTTON_POSTFIX","title":"<code>PANEL_PUSH_BUTTON_POSTFIX = '.panelbutton'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.NOGUI_COMMAND_POSTFIX","title":"<code>NOGUI_COMMAND_POSTFIX = '.nobutton'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.CONTENT_BUTTON_POSTFIX","title":"<code>CONTENT_BUTTON_POSTFIX = '.content'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.URL_BUTTON_POSTFIX","title":"<code>URL_BUTTON_POSTFIX = '.urlbutton'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.COMP_LIBRARY_DIR_NAME","title":"<code>COMP_LIBRARY_DIR_NAME = 'lib'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.COMP_BIN_DIR_NAME","title":"<code>COMP_BIN_DIR_NAME = 'bin'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.COMP_HOOKS_DIR_NAME","title":"<code>COMP_HOOKS_DIR_NAME = 'hooks'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.COMP_CHECKS_DIR_NAME","title":"<code>COMP_CHECKS_DIR_NAME = 'checks'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.UNIQUE_ID_SEPARATOR","title":"<code>UNIQUE_ID_SEPARATOR = '-'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.SEPARATOR_IDENTIFIER","title":"<code>SEPARATOR_IDENTIFIER = '---'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.SLIDEOUT_IDENTIFIER","title":"<code>SLIDEOUT_IDENTIFIER = '&gt;&gt;&gt;'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.ICON_FILE_FORMAT","title":"<code>ICON_FILE_FORMAT = '.png'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.ICON_DARK_SUFFIX","title":"<code>ICON_DARK_SUFFIX = '.dark'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.DEFAULT_ICON_FILE","title":"<code>DEFAULT_ICON_FILE = 'icon' + ICON_FILE_FORMAT</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.DEFAULT_ON_ICON_FILE","title":"<code>DEFAULT_ON_ICON_FILE = 'on' + ICON_FILE_FORMAT</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.DEFAULT_OFF_ICON_FILE","title":"<code>DEFAULT_OFF_ICON_FILE = 'off' + ICON_FILE_FORMAT</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.DEFAULT_MEDIA_FILENAME","title":"<code>DEFAULT_MEDIA_FILENAME = 'tooltip'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.DEFAULT_SCRIPT_NAME","title":"<code>DEFAULT_SCRIPT_NAME = 'script'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.DEFAULT_CONFIG_NAME","title":"<code>DEFAULT_CONFIG_NAME = 'config'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.PYTHON_SCRIPT_POSTFIX","title":"<code>PYTHON_SCRIPT_POSTFIX = DEFAULT_SCRIPT_NAME + PYTHON_SCRIPT_FILE_FORMAT</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.PYTHON_CONFIG_SCRIPT_POSTFIX","title":"<code>PYTHON_CONFIG_SCRIPT_POSTFIX = DEFAULT_CONFIG_NAME + PYTHON_SCRIPT_FILE_FORMAT</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.CSHARP_SCRIPT_POSTFIX","title":"<code>CSHARP_SCRIPT_POSTFIX = DEFAULT_SCRIPT_NAME + CSHARP_SCRIPT_FILE_FORMAT</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.CSHARP_CONFIG_SCRIPT_POSTFIX","title":"<code>CSHARP_CONFIG_SCRIPT_POSTFIX = DEFAULT_CONFIG_NAME + CSHARP_SCRIPT_FILE_FORMAT</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.VB_SCRIPT_POSTFIX","title":"<code>VB_SCRIPT_POSTFIX = DEFAULT_SCRIPT_NAME + VB_SCRIPT_FILE_FORMAT</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.VB_CONFIG_SCRIPT_POSTFIX","title":"<code>VB_CONFIG_SCRIPT_POSTFIX = DEFAULT_CONFIG_NAME + VB_SCRIPT_FILE_FORMAT</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.RUBY_SCRIPT_POSTFIX","title":"<code>RUBY_SCRIPT_POSTFIX = DEFAULT_SCRIPT_NAME + RUBY_SCRIPT_FILE_FORMAT</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.RUBY_CONFIG_SCRIPT_POSTFIX","title":"<code>RUBY_CONFIG_SCRIPT_POSTFIX = DEFAULT_CONFIG_NAME + RUBY_SCRIPT_FILE_FORMAT</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.DYNAMO_SCRIPT_POSTFIX","title":"<code>DYNAMO_SCRIPT_POSTFIX = DEFAULT_SCRIPT_NAME + DYNAMO_SCRIPT_FILE_FORMAT</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.DYNAMO_CONFIG_SCRIPT_POSTFIX","title":"<code>DYNAMO_CONFIG_SCRIPT_POSTFIX = DEFAULT_CONFIG_NAME + DYNAMO_SCRIPT_FILE_FORMAT</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.GRASSHOPPER_SCRIPT_POSTFIX","title":"<code>GRASSHOPPER_SCRIPT_POSTFIX = DEFAULT_SCRIPT_NAME + GRASSHOPPER_SCRIPT_FILE_FORMAT</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.GRASSHOPPER_CONFIG_SCRIPT_POSTFIX","title":"<code>GRASSHOPPER_CONFIG_SCRIPT_POSTFIX = DEFAULT_CONFIG_NAME + GRASSHOPPER_SCRIPT_FILE_FORMAT</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.GRASSHOPPERX_SCRIPT_POSTFIX","title":"<code>GRASSHOPPERX_SCRIPT_POSTFIX = DEFAULT_SCRIPT_NAME + GRASSHOPPERX_SCRIPT_FILE_FORMAT</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.GRASSHOPPERX_CONFIG_SCRIPT_POSTFIX","title":"<code>GRASSHOPPERX_CONFIG_SCRIPT_POSTFIX = DEFAULT_CONFIG_NAME + GRASSHOPPERX_SCRIPT_FILE_FORMAT</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.DEFAULT_CONTENT_NAME","title":"<code>DEFAULT_CONTENT_NAME = 'content'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.DEFAULT_ALT_CONTENT_NAME","title":"<code>DEFAULT_ALT_CONTENT_NAME = 'other'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.CONTENT_POSTFIX","title":"<code>CONTENT_POSTFIX = DEFAULT_CONTENT_NAME + CONTENT_FILE_FORMAT</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.CONTENT_VERSION_POSTFIX","title":"<code>CONTENT_VERSION_POSTFIX = DEFAULT_CONTENT_NAME + '_{version}' + CONTENT_FILE_FORMAT</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.ALT_CONTENT_POSTFIX","title":"<code>ALT_CONTENT_POSTFIX = DEFAULT_ALT_CONTENT_NAME + CONTENT_FILE_FORMAT</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.ALT_CONTENT_VERSION_POSTFIX","title":"<code>ALT_CONTENT_VERSION_POSTFIX = DEFAULT_ALT_CONTENT_NAME + '_{version}' + CONTENT_FILE_FORMAT</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.HELP_FILE_PATTERN","title":"<code>HELP_FILE_PATTERN = '.*help\\\\..+'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.CTX_SELETION","title":"<code>CTX_SELETION = 'selection'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.CTX_ZERODOC","title":"<code>CTX_ZERODOC = 'zero-doc'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions-classes","title":"Classes","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.UIExtensionType","title":"<code>UIExtensionType</code>","text":"<p>UI extension type.</p>"},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.UIExtensionType-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.UIExtensionType.ID","title":"<code>ID = 'extension'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.UIExtensionType.POSTFIX","title":"<code>POSTFIX = '.extension'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.LIBExtensionType","title":"<code>LIBExtensionType</code>","text":"<p>Library extension type.</p>"},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.LIBExtensionType-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.LIBExtensionType.ID","title":"<code>ID = 'lib'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.LIBExtensionType.POSTFIX","title":"<code>POSTFIX = '.lib'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.ExtensionTypes","title":"<code>ExtensionTypes</code>","text":"<p>Extension types.</p>"},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.ExtensionTypes-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.ExtensionTypes.UI_EXTENSION","title":"<code>UI_EXTENSION = UIExtensionType</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.ExtensionTypes.LIB_EXTENSION","title":"<code>LIB_EXTENSION = LIBExtensionType</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.ExtensionTypes-functions","title":"Functions","text":""},{"location":"reference/pyrevit/extensions/#pyrevit.extensions.ExtensionTypes.get_ext_types","title":"<code>get_ext_types()</code>  <code>classmethod</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/__init__.py</code> <pre><code>@classmethod\ndef get_ext_types(cls):\n    ext_types = set()\n    for attr in dir(cls):\n        if attr.endswith('_EXTENSION'):\n            ext_types.add(getattr(cls, attr))\n    return ext_types\n</code></pre>"},{"location":"reference/pyrevit/extensions/cacher_asc/","title":"cacher_asc","text":"<p>Base module to handle extension ASCII caching.</p>"},{"location":"reference/pyrevit/extensions/cacher_asc/#pyrevit.extensions.cacher_asc-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/extensions/cacher_asc/#pyrevit.extensions.cacher_asc.mlogger","title":"<code>mlogger = get_logger(__name__)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/cacher_asc/#pyrevit.extensions.cacher_asc-classes","title":"Classes","text":""},{"location":"reference/pyrevit/extensions/cacher_asc/#pyrevit.extensions.cacher_asc-functions","title":"Functions","text":""},{"location":"reference/pyrevit/extensions/cacher_asc/#pyrevit.extensions.cacher_asc.update_cache","title":"<code>update_cache(parsed_ext)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/cacher_asc.py</code> <pre><code>def update_cache(parsed_ext):\n    mlogger.debug('Updating cache for tab: %s ...', parsed_ext.name)\n    _write_cache_for(parsed_ext)\n    mlogger.debug('Cache updated for tab: %s', parsed_ext.name)\n</code></pre>"},{"location":"reference/pyrevit/extensions/cacher_asc/#pyrevit.extensions.cacher_asc.get_cached_extension","title":"<code>get_cached_extension(installed_ext)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/cacher_asc.py</code> <pre><code>def get_cached_extension(installed_ext):\n    cached_ext_dict = _read_cache_for(installed_ext)\n    # try:\n    mlogger.debug('Constructing components from cache for: %s',\n                    installed_ext)\n    # get cached sub component dictionary and call recursive maker function\n    _make_sub_cmp_from_cache(installed_ext,\n                                cached_ext_dict.pop(gencomps.SUB_CMP_KEY))\n    mlogger.debug('Load successful...')\n    # except Exception as err:\n    #     mlogger.debug('Error reading cache...')\n    #     raise PyRevitException('Error creating ext from cache for: {} | {}'\n    #                            .format(installed_ext.name, err))\n\n    return installed_ext\n</code></pre>"},{"location":"reference/pyrevit/extensions/cacher_asc/#pyrevit.extensions.cacher_asc.is_cache_valid","title":"<code>is_cache_valid(extension)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/cacher_asc.py</code> <pre><code>def is_cache_valid(extension):\n    try:\n        cached_ext_dict = _read_cache_for(extension)  # type: dict\n        mlogger.debug('Extension cache directory is: %s for: %s',\n                      extension.directory, extension)\n        cache_dir_valid = cached_ext_dict[gencomps.EXT_DIR_KEY] == extension.directory\n\n        mlogger.debug('Extension cache version is: %s for: %s',\n                      extension.pyrvt_version, extension)\n        cache_version_valid = \\\n            cached_ext_dict[comps.EXT_HASH_VERSION_KEY] == extension.pyrvt_version\n\n        mlogger.debug('Extension hash value is: %s for:%s',\n                      extension.dir_hash_value, extension)\n        cache_hash_valid = \\\n            cached_ext_dict[comps.EXT_HASH_VALUE_KEY] == extension.dir_hash_value\n\n        cache_valid = \\\n            cache_dir_valid and cache_version_valid and cache_hash_valid\n\n        # cache is valid if both version and hash value match\n        return cache_valid\n\n    except PyRevitException as err:\n        mlogger.debug(err)\n        return False\n\n    except Exception as err:\n        mlogger.debug('Error determining cache validity: %s | %s',\n                      extension, err)\n</code></pre>"},{"location":"reference/pyrevit/extensions/cacher_bin/","title":"cacher_bin","text":"<p>Base module to handle extension binary caching.</p>"},{"location":"reference/pyrevit/extensions/cacher_bin/#pyrevit.extensions.cacher_bin-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/extensions/cacher_bin/#pyrevit.extensions.cacher_bin.mlogger","title":"<code>mlogger = get_logger(__name__)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/cacher_bin/#pyrevit.extensions.cacher_bin.loaded_extensions","title":"<code>loaded_extensions = []</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/cacher_bin/#pyrevit.extensions.cacher_bin-classes","title":"Classes","text":""},{"location":"reference/pyrevit/extensions/cacher_bin/#pyrevit.extensions.cacher_bin-functions","title":"Functions","text":""},{"location":"reference/pyrevit/extensions/cacher_bin/#pyrevit.extensions.cacher_bin.update_cache","title":"<code>update_cache(parsed_ext)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/cacher_bin.py</code> <pre><code>def update_cache(parsed_ext):\n    try:\n        mlogger.debug('Writing cache for: %s', parsed_ext)\n        cache_file = _get_cache_file(parsed_ext)\n        mlogger.debug('Cache file is: %s', cache_file)\n        with open(cache_file, 'wb') as bin_cache_file:\n            pickle.dump(parsed_ext, bin_cache_file, pickle.HIGHEST_PROTOCOL)\n    except Exception as err:\n        raise PyRevitException('Error writing cache for: {} | {}'\n                               .format(parsed_ext, err))\n</code></pre>"},{"location":"reference/pyrevit/extensions/cacher_bin/#pyrevit.extensions.cacher_bin.get_cached_extension","title":"<code>get_cached_extension(installed_ext)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/cacher_bin.py</code> <pre><code>def get_cached_extension(installed_ext):\n    for loaded_ext in loaded_extensions:\n        if loaded_ext.name == installed_ext.name:\n            return loaded_ext\n\n    try:\n        mlogger.debug('Reading cache for: %s', installed_ext)\n        cache_file = _get_cache_file(installed_ext)\n        mlogger.debug('Cache file is: %s', cache_file)\n        with open(cache_file, 'rb') as bin_cache_file:\n            unpickled_pkg = pickle.load(bin_cache_file)\n    except Exception as err:\n        raise PyRevitException('Error reading cache for: {} | {}'\n                               .format(installed_ext, err))\n\n    return unpickled_pkg\n</code></pre>"},{"location":"reference/pyrevit/extensions/cacher_bin/#pyrevit.extensions.cacher_bin.is_cache_valid","title":"<code>is_cache_valid(extension)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/cacher_bin.py</code> <pre><code>def is_cache_valid(extension):\n    try:\n        cached_ext = get_cached_extension(extension)\n        mlogger.debug('Extension cache directory is: %s for: %s',\n                      extension.directory, extension)\n        cache_dir_valid = \\\n            cached_ext.directory == extension.directory\n\n        mlogger.debug('Extension cache version is: %s for: %s',\n                      extension.pyrvt_version, extension)\n        cache_version_valid = \\\n            cached_ext.pyrvt_version == extension.pyrvt_version\n\n        mlogger.debug('Extension hash value is: %s for: %s',\n                      extension.dir_hash_value, extension)\n        cache_hash_valid = \\\n            cached_ext.dir_hash_value == extension.dir_hash_value\n\n        cache_valid = \\\n            cache_dir_valid and cache_version_valid and cache_hash_valid\n\n        # add loaded package to list so it can be recovered later\n        if cache_valid:\n            loaded_extensions.append(cached_ext)\n\n        # cache is valid if both version and hash value match\n        return cache_valid\n\n    except PyRevitException as err:\n        mlogger.debug('Error reading cache file or file is not available: %s',\n                      err)\n        return False\n\n    except Exception as err:\n        mlogger.debug('Error determining cache validity: %s | %s',\n                      extension, err)\n        return False\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/","title":"components","text":"<p>Base classes for pyRevit extension components.</p>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.mlogger","title":"<code>mlogger = get_logger(__name__)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.EXT_HASH_VALUE_KEY","title":"<code>EXT_HASH_VALUE_KEY = 'dir_hash_value'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.EXT_HASH_VERSION_KEY","title":"<code>EXT_HASH_VERSION_KEY = 'pyrvt_version'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components-classes","title":"Classes","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoButton","title":"<code>NoButton(cmp_path=None, needs_script=True)</code>","text":"<p>               Bases: <code>GenericUICommand</code></p> <p>This is not a button.</p> Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def __init__(self, cmp_path=None, needs_script=True):\n    self.needs_script = needs_script\n    self.script_file = self.config_script_file = None\n    self.arguments = []\n    self.context = None\n    self.class_name = self.avail_class_name = None\n    self.requires_clean_engine = False\n    self.requires_fullframe_engine = False\n    self.requires_persistent_engine = False\n    self.requires_mainthread_engine = False\n    # engine options specific to dynamo\n    self.dynamo_path = None\n    # self.dynamo_path_exec = False\n    self.dynamo_path_check_existing = False\n    self.dynamo_force_manual_run = False\n    self.dynamo_model_nodes_info = None\n    # using classname otherwise exceptions in superclasses won't show\n    GenericUIComponent.__init__(self, cmp_path=cmp_path)\n\n    mlogger.debug('Maximum host version: %s', self.max_revit_ver)\n    mlogger.debug('Minimum host version: %s', self.min_revit_ver)\n    mlogger.debug('command tooltip: %s', self._tooltip)\n    mlogger.debug('Command author: %s', self.author)\n    mlogger.debug('Command help url: %s', self._help_url)\n\n    if self.is_beta:\n        mlogger.debug('Command is in beta.')\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoButton-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoButton.name","title":"<code>name = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoButton.is_container","title":"<code>is_container</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoButton.directory","title":"<code>directory = cmp_path</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoButton.unique_name","title":"<code>unique_name = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoButton.parent_ctrl_id","title":"<code>parent_ctrl_id = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoButton.icon_file","title":"<code>icon_file = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoButton.author","title":"<code>author = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoButton.media_file","title":"<code>media_file = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoButton.min_revit_ver","title":"<code>min_revit_ver = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoButton.max_revit_ver","title":"<code>max_revit_ver = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoButton.is_beta","title":"<code>is_beta = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoButton.highlight_type","title":"<code>highlight_type = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoButton.collapsed","title":"<code>collapsed = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoButton.version","title":"<code>version = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoButton.meta","title":"<code>meta = {}</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoButton.meta_file","title":"<code>meta_file = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoButton.modules","title":"<code>modules = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoButton.module_paths","title":"<code>module_paths = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoButton.binary_path","title":"<code>binary_path = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoButton.library_path","title":"<code>library_path = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoButton.control_id","title":"<code>control_id</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoButton.ui_title","title":"<code>ui_title</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoButton.tooltip","title":"<code>tooltip</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoButton.help_url","title":"<code>help_url</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoButton.is_supported","title":"<code>is_supported</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoButton.needs_script","title":"<code>needs_script = needs_script</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoButton.script_file","title":"<code>script_file = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoButton.config_script_file","title":"<code>config_script_file = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoButton.arguments","title":"<code>arguments = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoButton.context","title":"<code>context = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoButton.class_name","title":"<code>class_name = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoButton.avail_class_name","title":"<code>avail_class_name = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoButton.requires_clean_engine","title":"<code>requires_clean_engine = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoButton.requires_fullframe_engine","title":"<code>requires_fullframe_engine = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoButton.requires_persistent_engine","title":"<code>requires_persistent_engine = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoButton.requires_mainthread_engine","title":"<code>requires_mainthread_engine = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoButton.dynamo_path","title":"<code>dynamo_path = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoButton.dynamo_path_check_existing","title":"<code>dynamo_path_check_existing = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoButton.dynamo_force_manual_run","title":"<code>dynamo_force_manual_run = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoButton.dynamo_model_nodes_info","title":"<code>dynamo_model_nodes_info = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoButton.script_language","title":"<code>script_language</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoButton.is_cpython","title":"<code>is_cpython</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoButton.type_id","title":"<code>type_id = exts.NOGUI_COMMAND_POSTFIX</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoButton-functions","title":"Functions","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoButton.get_cache_data","title":"<code>get_cache_data()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def get_cache_data(self):\n    cache_dict = self.__dict__.copy()\n    if hasattr(self, TYPE_ID_KEY):\n        cache_dict[TYPE_ID_KEY] = getattr(self, TYPE_ID_KEY)\n    return cache_dict\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoButton.load_cache_data","title":"<code>load_cache_data(cache_dict)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def load_cache_data(self, cache_dict):\n    for k, v in cache_dict.items():\n        self.__dict__[k] = v\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoButton.matches","title":"<code>matches(component_path)</code>  <code>classmethod</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>@classmethod\ndef matches(cls, component_path):\n    return component_path.lower().endswith(cls.type_id)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoButton.make_unique_name","title":"<code>make_unique_name(cmp_path)</code>  <code>classmethod</code>","text":"<p>Creates a unique name for the command.</p> <p>This is used to uniquely identify this command and also to create the class in pyRevit dll assembly. Current method create a unique name based on the command full directory address.</p> <p>Examples:</p> <p>for 'pyRevit.extension/pyRevit.tab/Edit.panel/Flip doors.pushbutton' unique name would be: 'pyrevit-pyrevit-edit-flipdoors'.</p> Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>@classmethod\ndef make_unique_name(cls, cmp_path):\n    \"\"\"Creates a unique name for the command.\n\n    This is used to uniquely identify this command\n    and also to create the class in pyRevit dll assembly.\n    Current method create a unique name based on the command\n    full directory address.\n\n    Examples:\n        for 'pyRevit.extension/pyRevit.tab/Edit.panel/Flip doors.pushbutton'\n        unique name would be: 'pyrevit-pyrevit-edit-flipdoors'.\n    \"\"\"\n    pieces = []\n    inside_ext = False\n    for dname in cmp_path.split(op.sep):\n        if exts.ExtensionTypes.UI_EXTENSION.POSTFIX in dname:\n            inside_ext = True\n\n        name, ext = op.splitext(dname)\n        if ext != '' and inside_ext:\n            pieces.append(name)\n        else:\n            continue\n    return coreutils.cleanup_string(\n        exts.UNIQUE_ID_SEPARATOR.join(pieces),\n        skip=[exts.UNIQUE_ID_SEPARATOR]\n        ).lower()\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoButton.get_full_bundle_name","title":"<code>get_full_bundle_name()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def get_full_bundle_name(self):\n    return self.name + self.type_id\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoButton.has_module_path","title":"<code>has_module_path(path)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def has_module_path(self, path):\n    return path in self.module_paths\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoButton.add_module_path","title":"<code>add_module_path(path)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def add_module_path(self, path):\n    if path and not self.has_module_path(path):\n        mlogger.debug('Appending syspath: %s to %s', path, self)\n        self.module_paths.append(path)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoButton.remove_module_path","title":"<code>remove_module_path(path)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def remove_module_path(self, path):\n    if path and self.has_module_path(path):\n        mlogger.debug('Removing syspath: %s from %s', path, self)\n        return self.module_paths.remove(path)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoButton.get_bundle_file","title":"<code>get_bundle_file(file_name)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def get_bundle_file(self, file_name):\n    if self.directory and file_name:\n        file_addr = op.join(self.directory, file_name)\n        return file_addr if op.exists(file_addr) else None\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoButton.find_bundle_file","title":"<code>find_bundle_file(patterns, finder='postfix')</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def find_bundle_file(self, patterns, finder='postfix'):\n    if self.directory:\n        for bundle_file in os.listdir(self.directory):\n            if 'name' == finder:\n                for file_name in patterns:\n                    if op.splitext(bundle_file)[0] == file_name:\n                        return op.join(self.directory, bundle_file)\n            elif 'postfix' == finder:\n                for file_postfix in patterns:\n                    if bundle_file.endswith(file_postfix):\n                        return op.join(self.directory, bundle_file)\n            elif 'regex' == finder:\n                for regex_pattern in patterns:\n                    if re.match(regex_pattern, bundle_file):\n                        return op.join(self.directory, bundle_file)\n    return None\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoButton.find_bundle_module","title":"<code>find_bundle_module(module, by_host=False)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def find_bundle_module(self, module, by_host=False):\n    # test of file_name is an actually path to a file\n    if op.isfile(module):\n        return module\n\n    def build_assm_filename(module_filename):\n        # build assembly by host version (assm_file_2020.ext)\n        assm_name, assm_ext = op.splitext(module_filename)\n        return assm_name + '_' + HOST_APP.version + assm_ext\n\n    if by_host:\n        module = build_assm_filename(module)\n\n    # test if module is inside search paths\n    for module_path in self.module_paths:\n        possible_module_path = op.join(module_path, module)\n        if op.isfile(possible_module_path):\n            return possible_module_path\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoButton.configure","title":"<code>configure(config_dict)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def configure(self, config_dict):\n    configurable_params = \\\n        ['_ui_title', '_tooltip', '_help_url', 'author']\n    # get root key:value pairs\n    for key, value in config_dict.items():\n        for param_name in configurable_params:\n            self._resolve_liquid_tag(param_name, key, value)\n    # get key:value pairs grouped under special key, if exists\n    templates = config_dict.get(exts.MDATA_TEMPLATES_KEY, {})\n    for key, value in templates.items():\n        for param_name in configurable_params:\n            self._resolve_liquid_tag(param_name, key, value)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoButton.has_config_script","title":"<code>has_config_script()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def has_config_script(self):\n    return self.config_script_file != self.script_file\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoScriptButton","title":"<code>NoScriptButton(cmp_path=None, needs_commandclass=False)</code>","text":"<p>               Bases: <code>GenericUICommand</code></p> <p>Base for buttons that doesn't run a script.</p> Source code in <code>pyrevitlib/pyrevit/extensions/components.py</code> <pre><code>def __init__(self, cmp_path=None, needs_commandclass=False):\n    # using classname otherwise exceptions in superclasses won't show\n    GenericUICommand.__init__(self, cmp_path=cmp_path, needs_script=False)\n    self.assembly = self.command_class = self.avail_command_class = None\n    # read metadata from metadata file\n    if self.meta:\n        # get the target assembly from metadata\n        self.assembly = \\\n            self.meta.get(exts.MDATA_LINK_BUTTON_ASSEMBLY, None)\n\n        # get the target command class from metadata\n        self.command_class = \\\n            self.meta.get(exts.MDATA_LINK_BUTTON_COMMAND_CLASS, None)\n\n        # get the target command class from metadata\n        self.avail_command_class = \\\n            self.meta.get(exts.MDATA_LINK_BUTTON_AVAIL_COMMAND_CLASS, None)\n\n        # for invoke buttons there is no script source so\n        # assign the metadata file to the script\n        self.script_file = self.config_script_file = self.meta_file\n    else:\n        mlogger.debug(\"%s does not specify target assembly::class.\", self)\n\n    if self.directory and not self.assembly:\n        mlogger.error(\"%s does not specify target assembly.\", self)\n\n    if self.directory and needs_commandclass and not self.command_class:\n        mlogger.error(\"%s does not specify target command class.\", self)\n\n    mlogger.debug('%s assembly.class: %s.%s',\n                  self, self.assembly, self.command_class)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoScriptButton-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoScriptButton.type_id","title":"<code>type_id = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoScriptButton.name","title":"<code>name = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoScriptButton.is_container","title":"<code>is_container</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoScriptButton.directory","title":"<code>directory = cmp_path</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoScriptButton.unique_name","title":"<code>unique_name = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoScriptButton.parent_ctrl_id","title":"<code>parent_ctrl_id = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoScriptButton.icon_file","title":"<code>icon_file = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoScriptButton.author","title":"<code>author = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoScriptButton.media_file","title":"<code>media_file = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoScriptButton.min_revit_ver","title":"<code>min_revit_ver = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoScriptButton.max_revit_ver","title":"<code>max_revit_ver = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoScriptButton.is_beta","title":"<code>is_beta = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoScriptButton.highlight_type","title":"<code>highlight_type = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoScriptButton.collapsed","title":"<code>collapsed = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoScriptButton.version","title":"<code>version = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoScriptButton.meta","title":"<code>meta = {}</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoScriptButton.meta_file","title":"<code>meta_file = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoScriptButton.modules","title":"<code>modules = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoScriptButton.module_paths","title":"<code>module_paths = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoScriptButton.binary_path","title":"<code>binary_path = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoScriptButton.library_path","title":"<code>library_path = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoScriptButton.control_id","title":"<code>control_id</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoScriptButton.ui_title","title":"<code>ui_title</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoScriptButton.tooltip","title":"<code>tooltip</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoScriptButton.help_url","title":"<code>help_url</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoScriptButton.is_supported","title":"<code>is_supported</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoScriptButton.needs_script","title":"<code>needs_script = needs_script</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoScriptButton.arguments","title":"<code>arguments = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoScriptButton.context","title":"<code>context = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoScriptButton.class_name","title":"<code>class_name = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoScriptButton.avail_class_name","title":"<code>avail_class_name = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoScriptButton.requires_clean_engine","title":"<code>requires_clean_engine = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoScriptButton.requires_fullframe_engine","title":"<code>requires_fullframe_engine = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoScriptButton.requires_persistent_engine","title":"<code>requires_persistent_engine = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoScriptButton.requires_mainthread_engine","title":"<code>requires_mainthread_engine = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoScriptButton.dynamo_path","title":"<code>dynamo_path = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoScriptButton.dynamo_path_check_existing","title":"<code>dynamo_path_check_existing = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoScriptButton.dynamo_force_manual_run","title":"<code>dynamo_force_manual_run = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoScriptButton.dynamo_model_nodes_info","title":"<code>dynamo_model_nodes_info = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoScriptButton.script_language","title":"<code>script_language</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoScriptButton.is_cpython","title":"<code>is_cpython</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoScriptButton.assembly","title":"<code>assembly = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoScriptButton.command_class","title":"<code>command_class = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoScriptButton.avail_command_class","title":"<code>avail_command_class = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoScriptButton.script_file","title":"<code>script_file = self.meta_file</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoScriptButton.config_script_file","title":"<code>config_script_file = self.meta_file</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoScriptButton-functions","title":"Functions","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoScriptButton.get_cache_data","title":"<code>get_cache_data()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def get_cache_data(self):\n    cache_dict = self.__dict__.copy()\n    if hasattr(self, TYPE_ID_KEY):\n        cache_dict[TYPE_ID_KEY] = getattr(self, TYPE_ID_KEY)\n    return cache_dict\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoScriptButton.load_cache_data","title":"<code>load_cache_data(cache_dict)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def load_cache_data(self, cache_dict):\n    for k, v in cache_dict.items():\n        self.__dict__[k] = v\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoScriptButton.matches","title":"<code>matches(component_path)</code>  <code>classmethod</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>@classmethod\ndef matches(cls, component_path):\n    return component_path.lower().endswith(cls.type_id)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoScriptButton.make_unique_name","title":"<code>make_unique_name(cmp_path)</code>  <code>classmethod</code>","text":"<p>Creates a unique name for the command.</p> <p>This is used to uniquely identify this command and also to create the class in pyRevit dll assembly. Current method create a unique name based on the command full directory address.</p> <p>Examples:</p> <p>for 'pyRevit.extension/pyRevit.tab/Edit.panel/Flip doors.pushbutton' unique name would be: 'pyrevit-pyrevit-edit-flipdoors'.</p> Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>@classmethod\ndef make_unique_name(cls, cmp_path):\n    \"\"\"Creates a unique name for the command.\n\n    This is used to uniquely identify this command\n    and also to create the class in pyRevit dll assembly.\n    Current method create a unique name based on the command\n    full directory address.\n\n    Examples:\n        for 'pyRevit.extension/pyRevit.tab/Edit.panel/Flip doors.pushbutton'\n        unique name would be: 'pyrevit-pyrevit-edit-flipdoors'.\n    \"\"\"\n    pieces = []\n    inside_ext = False\n    for dname in cmp_path.split(op.sep):\n        if exts.ExtensionTypes.UI_EXTENSION.POSTFIX in dname:\n            inside_ext = True\n\n        name, ext = op.splitext(dname)\n        if ext != '' and inside_ext:\n            pieces.append(name)\n        else:\n            continue\n    return coreutils.cleanup_string(\n        exts.UNIQUE_ID_SEPARATOR.join(pieces),\n        skip=[exts.UNIQUE_ID_SEPARATOR]\n        ).lower()\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoScriptButton.get_full_bundle_name","title":"<code>get_full_bundle_name()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def get_full_bundle_name(self):\n    return self.name + self.type_id\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoScriptButton.has_module_path","title":"<code>has_module_path(path)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def has_module_path(self, path):\n    return path in self.module_paths\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoScriptButton.add_module_path","title":"<code>add_module_path(path)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def add_module_path(self, path):\n    if path and not self.has_module_path(path):\n        mlogger.debug('Appending syspath: %s to %s', path, self)\n        self.module_paths.append(path)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoScriptButton.remove_module_path","title":"<code>remove_module_path(path)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def remove_module_path(self, path):\n    if path and self.has_module_path(path):\n        mlogger.debug('Removing syspath: %s from %s', path, self)\n        return self.module_paths.remove(path)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoScriptButton.get_bundle_file","title":"<code>get_bundle_file(file_name)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def get_bundle_file(self, file_name):\n    if self.directory and file_name:\n        file_addr = op.join(self.directory, file_name)\n        return file_addr if op.exists(file_addr) else None\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoScriptButton.find_bundle_file","title":"<code>find_bundle_file(patterns, finder='postfix')</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def find_bundle_file(self, patterns, finder='postfix'):\n    if self.directory:\n        for bundle_file in os.listdir(self.directory):\n            if 'name' == finder:\n                for file_name in patterns:\n                    if op.splitext(bundle_file)[0] == file_name:\n                        return op.join(self.directory, bundle_file)\n            elif 'postfix' == finder:\n                for file_postfix in patterns:\n                    if bundle_file.endswith(file_postfix):\n                        return op.join(self.directory, bundle_file)\n            elif 'regex' == finder:\n                for regex_pattern in patterns:\n                    if re.match(regex_pattern, bundle_file):\n                        return op.join(self.directory, bundle_file)\n    return None\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoScriptButton.find_bundle_module","title":"<code>find_bundle_module(module, by_host=False)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def find_bundle_module(self, module, by_host=False):\n    # test of file_name is an actually path to a file\n    if op.isfile(module):\n        return module\n\n    def build_assm_filename(module_filename):\n        # build assembly by host version (assm_file_2020.ext)\n        assm_name, assm_ext = op.splitext(module_filename)\n        return assm_name + '_' + HOST_APP.version + assm_ext\n\n    if by_host:\n        module = build_assm_filename(module)\n\n    # test if module is inside search paths\n    for module_path in self.module_paths:\n        possible_module_path = op.join(module_path, module)\n        if op.isfile(possible_module_path):\n            return possible_module_path\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoScriptButton.configure","title":"<code>configure(config_dict)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def configure(self, config_dict):\n    configurable_params = \\\n        ['_ui_title', '_tooltip', '_help_url', 'author']\n    # get root key:value pairs\n    for key, value in config_dict.items():\n        for param_name in configurable_params:\n            self._resolve_liquid_tag(param_name, key, value)\n    # get key:value pairs grouped under special key, if exists\n    templates = config_dict.get(exts.MDATA_TEMPLATES_KEY, {})\n    for key, value in templates.items():\n        for param_name in configurable_params:\n            self._resolve_liquid_tag(param_name, key, value)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoScriptButton.has_config_script","title":"<code>has_config_script()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def has_config_script(self):\n    return self.config_script_file != self.script_file\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.NoScriptButton.get_target_assembly","title":"<code>get_target_assembly(required=False)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/components.py</code> <pre><code>def get_target_assembly(self, required=False):\n    assm_file = self.assembly.lower()\n    if not assm_file.endswith(framework.ASSEMBLY_FILE_TYPE):\n        assm_file += '.' + framework.ASSEMBLY_FILE_TYPE\n\n    # try finding assembly for this specific host version\n    target_asm_by_host = self.find_bundle_module(assm_file, by_host=True)\n    if target_asm_by_host:\n        return target_asm_by_host\n    # try find assembly by its name\n    target_asm = self.find_bundle_module(assm_file)\n    if target_asm:\n        return target_asm\n\n    if required:\n        mlogger.error(\"%s can not find target assembly.\", self)\n\n    return ''\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.LinkButton","title":"<code>LinkButton(cmp_path=None)</code>","text":"<p>               Bases: <code>NoScriptButton</code></p> <p>Link button.</p> Source code in <code>pyrevitlib/pyrevit/extensions/components.py</code> <pre><code>def __init__(self, cmp_path=None):\n    # using classname otherwise exceptions in superclasses won't show\n    NoScriptButton.__init__(\n        self,\n        cmp_path=cmp_path,\n        needs_commandclass=True\n        )\n\n    if self.context:\n        mlogger.warn(\n            \"Linkbutton bundles do not support \\\"context:\\\". \"\n            \"Use \\\"availability_class:\\\" instead and specify name of \"\n            \"availability class in target assembly | %s\", self\n            )\n        self.context = None\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.LinkButton-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.LinkButton.name","title":"<code>name = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.LinkButton.is_container","title":"<code>is_container</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.LinkButton.directory","title":"<code>directory = cmp_path</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.LinkButton.unique_name","title":"<code>unique_name = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.LinkButton.parent_ctrl_id","title":"<code>parent_ctrl_id = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.LinkButton.icon_file","title":"<code>icon_file = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.LinkButton.author","title":"<code>author = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.LinkButton.media_file","title":"<code>media_file = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.LinkButton.min_revit_ver","title":"<code>min_revit_ver = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.LinkButton.max_revit_ver","title":"<code>max_revit_ver = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.LinkButton.is_beta","title":"<code>is_beta = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.LinkButton.highlight_type","title":"<code>highlight_type = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.LinkButton.collapsed","title":"<code>collapsed = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.LinkButton.version","title":"<code>version = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.LinkButton.meta","title":"<code>meta = {}</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.LinkButton.meta_file","title":"<code>meta_file = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.LinkButton.modules","title":"<code>modules = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.LinkButton.module_paths","title":"<code>module_paths = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.LinkButton.binary_path","title":"<code>binary_path = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.LinkButton.library_path","title":"<code>library_path = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.LinkButton.control_id","title":"<code>control_id</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.LinkButton.ui_title","title":"<code>ui_title</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.LinkButton.tooltip","title":"<code>tooltip</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.LinkButton.help_url","title":"<code>help_url</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.LinkButton.is_supported","title":"<code>is_supported</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.LinkButton.needs_script","title":"<code>needs_script = needs_script</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.LinkButton.script_file","title":"<code>script_file = self.meta_file</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.LinkButton.config_script_file","title":"<code>config_script_file = self.meta_file</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.LinkButton.arguments","title":"<code>arguments = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.LinkButton.class_name","title":"<code>class_name = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.LinkButton.avail_class_name","title":"<code>avail_class_name = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.LinkButton.requires_clean_engine","title":"<code>requires_clean_engine = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.LinkButton.requires_fullframe_engine","title":"<code>requires_fullframe_engine = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.LinkButton.requires_persistent_engine","title":"<code>requires_persistent_engine = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.LinkButton.requires_mainthread_engine","title":"<code>requires_mainthread_engine = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.LinkButton.dynamo_path","title":"<code>dynamo_path = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.LinkButton.dynamo_path_check_existing","title":"<code>dynamo_path_check_existing = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.LinkButton.dynamo_force_manual_run","title":"<code>dynamo_force_manual_run = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.LinkButton.dynamo_model_nodes_info","title":"<code>dynamo_model_nodes_info = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.LinkButton.script_language","title":"<code>script_language</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.LinkButton.is_cpython","title":"<code>is_cpython</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.LinkButton.assembly","title":"<code>assembly = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.LinkButton.command_class","title":"<code>command_class = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.LinkButton.avail_command_class","title":"<code>avail_command_class = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.LinkButton.type_id","title":"<code>type_id = exts.LINK_BUTTON_POSTFIX</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.LinkButton.context","title":"<code>context = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.LinkButton-functions","title":"Functions","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.LinkButton.get_cache_data","title":"<code>get_cache_data()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def get_cache_data(self):\n    cache_dict = self.__dict__.copy()\n    if hasattr(self, TYPE_ID_KEY):\n        cache_dict[TYPE_ID_KEY] = getattr(self, TYPE_ID_KEY)\n    return cache_dict\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.LinkButton.load_cache_data","title":"<code>load_cache_data(cache_dict)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def load_cache_data(self, cache_dict):\n    for k, v in cache_dict.items():\n        self.__dict__[k] = v\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.LinkButton.matches","title":"<code>matches(component_path)</code>  <code>classmethod</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>@classmethod\ndef matches(cls, component_path):\n    return component_path.lower().endswith(cls.type_id)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.LinkButton.make_unique_name","title":"<code>make_unique_name(cmp_path)</code>  <code>classmethod</code>","text":"<p>Creates a unique name for the command.</p> <p>This is used to uniquely identify this command and also to create the class in pyRevit dll assembly. Current method create a unique name based on the command full directory address.</p> <p>Examples:</p> <p>for 'pyRevit.extension/pyRevit.tab/Edit.panel/Flip doors.pushbutton' unique name would be: 'pyrevit-pyrevit-edit-flipdoors'.</p> Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>@classmethod\ndef make_unique_name(cls, cmp_path):\n    \"\"\"Creates a unique name for the command.\n\n    This is used to uniquely identify this command\n    and also to create the class in pyRevit dll assembly.\n    Current method create a unique name based on the command\n    full directory address.\n\n    Examples:\n        for 'pyRevit.extension/pyRevit.tab/Edit.panel/Flip doors.pushbutton'\n        unique name would be: 'pyrevit-pyrevit-edit-flipdoors'.\n    \"\"\"\n    pieces = []\n    inside_ext = False\n    for dname in cmp_path.split(op.sep):\n        if exts.ExtensionTypes.UI_EXTENSION.POSTFIX in dname:\n            inside_ext = True\n\n        name, ext = op.splitext(dname)\n        if ext != '' and inside_ext:\n            pieces.append(name)\n        else:\n            continue\n    return coreutils.cleanup_string(\n        exts.UNIQUE_ID_SEPARATOR.join(pieces),\n        skip=[exts.UNIQUE_ID_SEPARATOR]\n        ).lower()\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.LinkButton.get_full_bundle_name","title":"<code>get_full_bundle_name()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def get_full_bundle_name(self):\n    return self.name + self.type_id\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.LinkButton.has_module_path","title":"<code>has_module_path(path)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def has_module_path(self, path):\n    return path in self.module_paths\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.LinkButton.add_module_path","title":"<code>add_module_path(path)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def add_module_path(self, path):\n    if path and not self.has_module_path(path):\n        mlogger.debug('Appending syspath: %s to %s', path, self)\n        self.module_paths.append(path)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.LinkButton.remove_module_path","title":"<code>remove_module_path(path)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def remove_module_path(self, path):\n    if path and self.has_module_path(path):\n        mlogger.debug('Removing syspath: %s from %s', path, self)\n        return self.module_paths.remove(path)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.LinkButton.get_bundle_file","title":"<code>get_bundle_file(file_name)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def get_bundle_file(self, file_name):\n    if self.directory and file_name:\n        file_addr = op.join(self.directory, file_name)\n        return file_addr if op.exists(file_addr) else None\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.LinkButton.find_bundle_file","title":"<code>find_bundle_file(patterns, finder='postfix')</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def find_bundle_file(self, patterns, finder='postfix'):\n    if self.directory:\n        for bundle_file in os.listdir(self.directory):\n            if 'name' == finder:\n                for file_name in patterns:\n                    if op.splitext(bundle_file)[0] == file_name:\n                        return op.join(self.directory, bundle_file)\n            elif 'postfix' == finder:\n                for file_postfix in patterns:\n                    if bundle_file.endswith(file_postfix):\n                        return op.join(self.directory, bundle_file)\n            elif 'regex' == finder:\n                for regex_pattern in patterns:\n                    if re.match(regex_pattern, bundle_file):\n                        return op.join(self.directory, bundle_file)\n    return None\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.LinkButton.find_bundle_module","title":"<code>find_bundle_module(module, by_host=False)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def find_bundle_module(self, module, by_host=False):\n    # test of file_name is an actually path to a file\n    if op.isfile(module):\n        return module\n\n    def build_assm_filename(module_filename):\n        # build assembly by host version (assm_file_2020.ext)\n        assm_name, assm_ext = op.splitext(module_filename)\n        return assm_name + '_' + HOST_APP.version + assm_ext\n\n    if by_host:\n        module = build_assm_filename(module)\n\n    # test if module is inside search paths\n    for module_path in self.module_paths:\n        possible_module_path = op.join(module_path, module)\n        if op.isfile(possible_module_path):\n            return possible_module_path\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.LinkButton.configure","title":"<code>configure(config_dict)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def configure(self, config_dict):\n    configurable_params = \\\n        ['_ui_title', '_tooltip', '_help_url', 'author']\n    # get root key:value pairs\n    for key, value in config_dict.items():\n        for param_name in configurable_params:\n            self._resolve_liquid_tag(param_name, key, value)\n    # get key:value pairs grouped under special key, if exists\n    templates = config_dict.get(exts.MDATA_TEMPLATES_KEY, {})\n    for key, value in templates.items():\n        for param_name in configurable_params:\n            self._resolve_liquid_tag(param_name, key, value)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.LinkButton.has_config_script","title":"<code>has_config_script()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def has_config_script(self):\n    return self.config_script_file != self.script_file\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.LinkButton.get_target_assembly","title":"<code>get_target_assembly(required=False)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/components.py</code> <pre><code>def get_target_assembly(self, required=False):\n    assm_file = self.assembly.lower()\n    if not assm_file.endswith(framework.ASSEMBLY_FILE_TYPE):\n        assm_file += '.' + framework.ASSEMBLY_FILE_TYPE\n\n    # try finding assembly for this specific host version\n    target_asm_by_host = self.find_bundle_module(assm_file, by_host=True)\n    if target_asm_by_host:\n        return target_asm_by_host\n    # try find assembly by its name\n    target_asm = self.find_bundle_module(assm_file)\n    if target_asm:\n        return target_asm\n\n    if required:\n        mlogger.error(\"%s can not find target assembly.\", self)\n\n    return ''\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.InvokeButton","title":"<code>InvokeButton(cmp_path=None)</code>","text":"<p>               Bases: <code>NoScriptButton</code></p> <p>Invoke button.</p> Source code in <code>pyrevitlib/pyrevit/extensions/components.py</code> <pre><code>def __init__(self, cmp_path=None):\n    # using classname otherwise exceptions in superclasses won't show\n    NoScriptButton.__init__(self, cmp_path=cmp_path)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.InvokeButton-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.InvokeButton.name","title":"<code>name = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.InvokeButton.is_container","title":"<code>is_container</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.InvokeButton.directory","title":"<code>directory = cmp_path</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.InvokeButton.unique_name","title":"<code>unique_name = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.InvokeButton.parent_ctrl_id","title":"<code>parent_ctrl_id = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.InvokeButton.icon_file","title":"<code>icon_file = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.InvokeButton.author","title":"<code>author = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.InvokeButton.media_file","title":"<code>media_file = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.InvokeButton.min_revit_ver","title":"<code>min_revit_ver = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.InvokeButton.max_revit_ver","title":"<code>max_revit_ver = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.InvokeButton.is_beta","title":"<code>is_beta = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.InvokeButton.highlight_type","title":"<code>highlight_type = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.InvokeButton.collapsed","title":"<code>collapsed = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.InvokeButton.version","title":"<code>version = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.InvokeButton.meta","title":"<code>meta = {}</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.InvokeButton.meta_file","title":"<code>meta_file = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.InvokeButton.modules","title":"<code>modules = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.InvokeButton.module_paths","title":"<code>module_paths = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.InvokeButton.binary_path","title":"<code>binary_path = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.InvokeButton.library_path","title":"<code>library_path = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.InvokeButton.control_id","title":"<code>control_id</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.InvokeButton.ui_title","title":"<code>ui_title</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.InvokeButton.tooltip","title":"<code>tooltip</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.InvokeButton.help_url","title":"<code>help_url</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.InvokeButton.is_supported","title":"<code>is_supported</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.InvokeButton.needs_script","title":"<code>needs_script = needs_script</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.InvokeButton.script_file","title":"<code>script_file = self.meta_file</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.InvokeButton.config_script_file","title":"<code>config_script_file = self.meta_file</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.InvokeButton.arguments","title":"<code>arguments = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.InvokeButton.context","title":"<code>context = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.InvokeButton.class_name","title":"<code>class_name = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.InvokeButton.avail_class_name","title":"<code>avail_class_name = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.InvokeButton.requires_clean_engine","title":"<code>requires_clean_engine = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.InvokeButton.requires_fullframe_engine","title":"<code>requires_fullframe_engine = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.InvokeButton.requires_persistent_engine","title":"<code>requires_persistent_engine = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.InvokeButton.requires_mainthread_engine","title":"<code>requires_mainthread_engine = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.InvokeButton.dynamo_path","title":"<code>dynamo_path = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.InvokeButton.dynamo_path_check_existing","title":"<code>dynamo_path_check_existing = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.InvokeButton.dynamo_force_manual_run","title":"<code>dynamo_force_manual_run = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.InvokeButton.dynamo_model_nodes_info","title":"<code>dynamo_model_nodes_info = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.InvokeButton.script_language","title":"<code>script_language</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.InvokeButton.is_cpython","title":"<code>is_cpython</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.InvokeButton.assembly","title":"<code>assembly = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.InvokeButton.command_class","title":"<code>command_class = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.InvokeButton.avail_command_class","title":"<code>avail_command_class = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.InvokeButton.type_id","title":"<code>type_id = exts.INVOKE_BUTTON_POSTFIX</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.InvokeButton-functions","title":"Functions","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.InvokeButton.get_cache_data","title":"<code>get_cache_data()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def get_cache_data(self):\n    cache_dict = self.__dict__.copy()\n    if hasattr(self, TYPE_ID_KEY):\n        cache_dict[TYPE_ID_KEY] = getattr(self, TYPE_ID_KEY)\n    return cache_dict\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.InvokeButton.load_cache_data","title":"<code>load_cache_data(cache_dict)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def load_cache_data(self, cache_dict):\n    for k, v in cache_dict.items():\n        self.__dict__[k] = v\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.InvokeButton.matches","title":"<code>matches(component_path)</code>  <code>classmethod</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>@classmethod\ndef matches(cls, component_path):\n    return component_path.lower().endswith(cls.type_id)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.InvokeButton.make_unique_name","title":"<code>make_unique_name(cmp_path)</code>  <code>classmethod</code>","text":"<p>Creates a unique name for the command.</p> <p>This is used to uniquely identify this command and also to create the class in pyRevit dll assembly. Current method create a unique name based on the command full directory address.</p> <p>Examples:</p> <p>for 'pyRevit.extension/pyRevit.tab/Edit.panel/Flip doors.pushbutton' unique name would be: 'pyrevit-pyrevit-edit-flipdoors'.</p> Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>@classmethod\ndef make_unique_name(cls, cmp_path):\n    \"\"\"Creates a unique name for the command.\n\n    This is used to uniquely identify this command\n    and also to create the class in pyRevit dll assembly.\n    Current method create a unique name based on the command\n    full directory address.\n\n    Examples:\n        for 'pyRevit.extension/pyRevit.tab/Edit.panel/Flip doors.pushbutton'\n        unique name would be: 'pyrevit-pyrevit-edit-flipdoors'.\n    \"\"\"\n    pieces = []\n    inside_ext = False\n    for dname in cmp_path.split(op.sep):\n        if exts.ExtensionTypes.UI_EXTENSION.POSTFIX in dname:\n            inside_ext = True\n\n        name, ext = op.splitext(dname)\n        if ext != '' and inside_ext:\n            pieces.append(name)\n        else:\n            continue\n    return coreutils.cleanup_string(\n        exts.UNIQUE_ID_SEPARATOR.join(pieces),\n        skip=[exts.UNIQUE_ID_SEPARATOR]\n        ).lower()\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.InvokeButton.get_full_bundle_name","title":"<code>get_full_bundle_name()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def get_full_bundle_name(self):\n    return self.name + self.type_id\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.InvokeButton.has_module_path","title":"<code>has_module_path(path)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def has_module_path(self, path):\n    return path in self.module_paths\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.InvokeButton.add_module_path","title":"<code>add_module_path(path)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def add_module_path(self, path):\n    if path and not self.has_module_path(path):\n        mlogger.debug('Appending syspath: %s to %s', path, self)\n        self.module_paths.append(path)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.InvokeButton.remove_module_path","title":"<code>remove_module_path(path)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def remove_module_path(self, path):\n    if path and self.has_module_path(path):\n        mlogger.debug('Removing syspath: %s from %s', path, self)\n        return self.module_paths.remove(path)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.InvokeButton.get_bundle_file","title":"<code>get_bundle_file(file_name)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def get_bundle_file(self, file_name):\n    if self.directory and file_name:\n        file_addr = op.join(self.directory, file_name)\n        return file_addr if op.exists(file_addr) else None\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.InvokeButton.find_bundle_file","title":"<code>find_bundle_file(patterns, finder='postfix')</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def find_bundle_file(self, patterns, finder='postfix'):\n    if self.directory:\n        for bundle_file in os.listdir(self.directory):\n            if 'name' == finder:\n                for file_name in patterns:\n                    if op.splitext(bundle_file)[0] == file_name:\n                        return op.join(self.directory, bundle_file)\n            elif 'postfix' == finder:\n                for file_postfix in patterns:\n                    if bundle_file.endswith(file_postfix):\n                        return op.join(self.directory, bundle_file)\n            elif 'regex' == finder:\n                for regex_pattern in patterns:\n                    if re.match(regex_pattern, bundle_file):\n                        return op.join(self.directory, bundle_file)\n    return None\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.InvokeButton.find_bundle_module","title":"<code>find_bundle_module(module, by_host=False)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def find_bundle_module(self, module, by_host=False):\n    # test of file_name is an actually path to a file\n    if op.isfile(module):\n        return module\n\n    def build_assm_filename(module_filename):\n        # build assembly by host version (assm_file_2020.ext)\n        assm_name, assm_ext = op.splitext(module_filename)\n        return assm_name + '_' + HOST_APP.version + assm_ext\n\n    if by_host:\n        module = build_assm_filename(module)\n\n    # test if module is inside search paths\n    for module_path in self.module_paths:\n        possible_module_path = op.join(module_path, module)\n        if op.isfile(possible_module_path):\n            return possible_module_path\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.InvokeButton.configure","title":"<code>configure(config_dict)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def configure(self, config_dict):\n    configurable_params = \\\n        ['_ui_title', '_tooltip', '_help_url', 'author']\n    # get root key:value pairs\n    for key, value in config_dict.items():\n        for param_name in configurable_params:\n            self._resolve_liquid_tag(param_name, key, value)\n    # get key:value pairs grouped under special key, if exists\n    templates = config_dict.get(exts.MDATA_TEMPLATES_KEY, {})\n    for key, value in templates.items():\n        for param_name in configurable_params:\n            self._resolve_liquid_tag(param_name, key, value)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.InvokeButton.has_config_script","title":"<code>has_config_script()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def has_config_script(self):\n    return self.config_script_file != self.script_file\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.InvokeButton.get_target_assembly","title":"<code>get_target_assembly(required=False)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/components.py</code> <pre><code>def get_target_assembly(self, required=False):\n    assm_file = self.assembly.lower()\n    if not assm_file.endswith(framework.ASSEMBLY_FILE_TYPE):\n        assm_file += '.' + framework.ASSEMBLY_FILE_TYPE\n\n    # try finding assembly for this specific host version\n    target_asm_by_host = self.find_bundle_module(assm_file, by_host=True)\n    if target_asm_by_host:\n        return target_asm_by_host\n    # try find assembly by its name\n    target_asm = self.find_bundle_module(assm_file)\n    if target_asm:\n        return target_asm\n\n    if required:\n        mlogger.error(\"%s can not find target assembly.\", self)\n\n    return ''\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PushButton","title":"<code>PushButton(cmp_path=None, needs_script=True)</code>","text":"<p>               Bases: <code>GenericUICommand</code></p> <p>Push button.</p> Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def __init__(self, cmp_path=None, needs_script=True):\n    self.needs_script = needs_script\n    self.script_file = self.config_script_file = None\n    self.arguments = []\n    self.context = None\n    self.class_name = self.avail_class_name = None\n    self.requires_clean_engine = False\n    self.requires_fullframe_engine = False\n    self.requires_persistent_engine = False\n    self.requires_mainthread_engine = False\n    # engine options specific to dynamo\n    self.dynamo_path = None\n    # self.dynamo_path_exec = False\n    self.dynamo_path_check_existing = False\n    self.dynamo_force_manual_run = False\n    self.dynamo_model_nodes_info = None\n    # using classname otherwise exceptions in superclasses won't show\n    GenericUIComponent.__init__(self, cmp_path=cmp_path)\n\n    mlogger.debug('Maximum host version: %s', self.max_revit_ver)\n    mlogger.debug('Minimum host version: %s', self.min_revit_ver)\n    mlogger.debug('command tooltip: %s', self._tooltip)\n    mlogger.debug('Command author: %s', self.author)\n    mlogger.debug('Command help url: %s', self._help_url)\n\n    if self.is_beta:\n        mlogger.debug('Command is in beta.')\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PushButton-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PushButton.name","title":"<code>name = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PushButton.is_container","title":"<code>is_container</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PushButton.directory","title":"<code>directory = cmp_path</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PushButton.unique_name","title":"<code>unique_name = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PushButton.parent_ctrl_id","title":"<code>parent_ctrl_id = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PushButton.icon_file","title":"<code>icon_file = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PushButton.author","title":"<code>author = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PushButton.media_file","title":"<code>media_file = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PushButton.min_revit_ver","title":"<code>min_revit_ver = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PushButton.max_revit_ver","title":"<code>max_revit_ver = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PushButton.is_beta","title":"<code>is_beta = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PushButton.highlight_type","title":"<code>highlight_type = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PushButton.collapsed","title":"<code>collapsed = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PushButton.version","title":"<code>version = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PushButton.meta","title":"<code>meta = {}</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PushButton.meta_file","title":"<code>meta_file = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PushButton.modules","title":"<code>modules = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PushButton.module_paths","title":"<code>module_paths = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PushButton.binary_path","title":"<code>binary_path = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PushButton.library_path","title":"<code>library_path = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PushButton.control_id","title":"<code>control_id</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PushButton.ui_title","title":"<code>ui_title</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PushButton.tooltip","title":"<code>tooltip</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PushButton.help_url","title":"<code>help_url</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PushButton.is_supported","title":"<code>is_supported</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PushButton.needs_script","title":"<code>needs_script = needs_script</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PushButton.script_file","title":"<code>script_file = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PushButton.config_script_file","title":"<code>config_script_file = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PushButton.arguments","title":"<code>arguments = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PushButton.context","title":"<code>context = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PushButton.class_name","title":"<code>class_name = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PushButton.avail_class_name","title":"<code>avail_class_name = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PushButton.requires_clean_engine","title":"<code>requires_clean_engine = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PushButton.requires_fullframe_engine","title":"<code>requires_fullframe_engine = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PushButton.requires_persistent_engine","title":"<code>requires_persistent_engine = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PushButton.requires_mainthread_engine","title":"<code>requires_mainthread_engine = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PushButton.dynamo_path","title":"<code>dynamo_path = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PushButton.dynamo_path_check_existing","title":"<code>dynamo_path_check_existing = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PushButton.dynamo_force_manual_run","title":"<code>dynamo_force_manual_run = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PushButton.dynamo_model_nodes_info","title":"<code>dynamo_model_nodes_info = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PushButton.script_language","title":"<code>script_language</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PushButton.is_cpython","title":"<code>is_cpython</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PushButton.type_id","title":"<code>type_id = exts.PUSH_BUTTON_POSTFIX</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PushButton-functions","title":"Functions","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PushButton.get_cache_data","title":"<code>get_cache_data()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def get_cache_data(self):\n    cache_dict = self.__dict__.copy()\n    if hasattr(self, TYPE_ID_KEY):\n        cache_dict[TYPE_ID_KEY] = getattr(self, TYPE_ID_KEY)\n    return cache_dict\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PushButton.load_cache_data","title":"<code>load_cache_data(cache_dict)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def load_cache_data(self, cache_dict):\n    for k, v in cache_dict.items():\n        self.__dict__[k] = v\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PushButton.matches","title":"<code>matches(component_path)</code>  <code>classmethod</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>@classmethod\ndef matches(cls, component_path):\n    return component_path.lower().endswith(cls.type_id)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PushButton.make_unique_name","title":"<code>make_unique_name(cmp_path)</code>  <code>classmethod</code>","text":"<p>Creates a unique name for the command.</p> <p>This is used to uniquely identify this command and also to create the class in pyRevit dll assembly. Current method create a unique name based on the command full directory address.</p> <p>Examples:</p> <p>for 'pyRevit.extension/pyRevit.tab/Edit.panel/Flip doors.pushbutton' unique name would be: 'pyrevit-pyrevit-edit-flipdoors'.</p> Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>@classmethod\ndef make_unique_name(cls, cmp_path):\n    \"\"\"Creates a unique name for the command.\n\n    This is used to uniquely identify this command\n    and also to create the class in pyRevit dll assembly.\n    Current method create a unique name based on the command\n    full directory address.\n\n    Examples:\n        for 'pyRevit.extension/pyRevit.tab/Edit.panel/Flip doors.pushbutton'\n        unique name would be: 'pyrevit-pyrevit-edit-flipdoors'.\n    \"\"\"\n    pieces = []\n    inside_ext = False\n    for dname in cmp_path.split(op.sep):\n        if exts.ExtensionTypes.UI_EXTENSION.POSTFIX in dname:\n            inside_ext = True\n\n        name, ext = op.splitext(dname)\n        if ext != '' and inside_ext:\n            pieces.append(name)\n        else:\n            continue\n    return coreutils.cleanup_string(\n        exts.UNIQUE_ID_SEPARATOR.join(pieces),\n        skip=[exts.UNIQUE_ID_SEPARATOR]\n        ).lower()\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PushButton.get_full_bundle_name","title":"<code>get_full_bundle_name()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def get_full_bundle_name(self):\n    return self.name + self.type_id\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PushButton.has_module_path","title":"<code>has_module_path(path)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def has_module_path(self, path):\n    return path in self.module_paths\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PushButton.add_module_path","title":"<code>add_module_path(path)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def add_module_path(self, path):\n    if path and not self.has_module_path(path):\n        mlogger.debug('Appending syspath: %s to %s', path, self)\n        self.module_paths.append(path)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PushButton.remove_module_path","title":"<code>remove_module_path(path)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def remove_module_path(self, path):\n    if path and self.has_module_path(path):\n        mlogger.debug('Removing syspath: %s from %s', path, self)\n        return self.module_paths.remove(path)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PushButton.get_bundle_file","title":"<code>get_bundle_file(file_name)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def get_bundle_file(self, file_name):\n    if self.directory and file_name:\n        file_addr = op.join(self.directory, file_name)\n        return file_addr if op.exists(file_addr) else None\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PushButton.find_bundle_file","title":"<code>find_bundle_file(patterns, finder='postfix')</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def find_bundle_file(self, patterns, finder='postfix'):\n    if self.directory:\n        for bundle_file in os.listdir(self.directory):\n            if 'name' == finder:\n                for file_name in patterns:\n                    if op.splitext(bundle_file)[0] == file_name:\n                        return op.join(self.directory, bundle_file)\n            elif 'postfix' == finder:\n                for file_postfix in patterns:\n                    if bundle_file.endswith(file_postfix):\n                        return op.join(self.directory, bundle_file)\n            elif 'regex' == finder:\n                for regex_pattern in patterns:\n                    if re.match(regex_pattern, bundle_file):\n                        return op.join(self.directory, bundle_file)\n    return None\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PushButton.find_bundle_module","title":"<code>find_bundle_module(module, by_host=False)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def find_bundle_module(self, module, by_host=False):\n    # test of file_name is an actually path to a file\n    if op.isfile(module):\n        return module\n\n    def build_assm_filename(module_filename):\n        # build assembly by host version (assm_file_2020.ext)\n        assm_name, assm_ext = op.splitext(module_filename)\n        return assm_name + '_' + HOST_APP.version + assm_ext\n\n    if by_host:\n        module = build_assm_filename(module)\n\n    # test if module is inside search paths\n    for module_path in self.module_paths:\n        possible_module_path = op.join(module_path, module)\n        if op.isfile(possible_module_path):\n            return possible_module_path\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PushButton.configure","title":"<code>configure(config_dict)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def configure(self, config_dict):\n    configurable_params = \\\n        ['_ui_title', '_tooltip', '_help_url', 'author']\n    # get root key:value pairs\n    for key, value in config_dict.items():\n        for param_name in configurable_params:\n            self._resolve_liquid_tag(param_name, key, value)\n    # get key:value pairs grouped under special key, if exists\n    templates = config_dict.get(exts.MDATA_TEMPLATES_KEY, {})\n    for key, value in templates.items():\n        for param_name in configurable_params:\n            self._resolve_liquid_tag(param_name, key, value)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PushButton.has_config_script","title":"<code>has_config_script()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def has_config_script(self):\n    return self.config_script_file != self.script_file\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PanelPushButton","title":"<code>PanelPushButton(cmp_path=None, needs_script=True)</code>","text":"<p>               Bases: <code>GenericUICommand</code></p> <p>Panel push button.</p> Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def __init__(self, cmp_path=None, needs_script=True):\n    self.needs_script = needs_script\n    self.script_file = self.config_script_file = None\n    self.arguments = []\n    self.context = None\n    self.class_name = self.avail_class_name = None\n    self.requires_clean_engine = False\n    self.requires_fullframe_engine = False\n    self.requires_persistent_engine = False\n    self.requires_mainthread_engine = False\n    # engine options specific to dynamo\n    self.dynamo_path = None\n    # self.dynamo_path_exec = False\n    self.dynamo_path_check_existing = False\n    self.dynamo_force_manual_run = False\n    self.dynamo_model_nodes_info = None\n    # using classname otherwise exceptions in superclasses won't show\n    GenericUIComponent.__init__(self, cmp_path=cmp_path)\n\n    mlogger.debug('Maximum host version: %s', self.max_revit_ver)\n    mlogger.debug('Minimum host version: %s', self.min_revit_ver)\n    mlogger.debug('command tooltip: %s', self._tooltip)\n    mlogger.debug('Command author: %s', self.author)\n    mlogger.debug('Command help url: %s', self._help_url)\n\n    if self.is_beta:\n        mlogger.debug('Command is in beta.')\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PanelPushButton-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PanelPushButton.name","title":"<code>name = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PanelPushButton.is_container","title":"<code>is_container</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PanelPushButton.directory","title":"<code>directory = cmp_path</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PanelPushButton.unique_name","title":"<code>unique_name = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PanelPushButton.parent_ctrl_id","title":"<code>parent_ctrl_id = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PanelPushButton.icon_file","title":"<code>icon_file = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PanelPushButton.author","title":"<code>author = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PanelPushButton.media_file","title":"<code>media_file = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PanelPushButton.min_revit_ver","title":"<code>min_revit_ver = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PanelPushButton.max_revit_ver","title":"<code>max_revit_ver = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PanelPushButton.is_beta","title":"<code>is_beta = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PanelPushButton.highlight_type","title":"<code>highlight_type = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PanelPushButton.collapsed","title":"<code>collapsed = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PanelPushButton.version","title":"<code>version = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PanelPushButton.meta","title":"<code>meta = {}</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PanelPushButton.meta_file","title":"<code>meta_file = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PanelPushButton.modules","title":"<code>modules = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PanelPushButton.module_paths","title":"<code>module_paths = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PanelPushButton.binary_path","title":"<code>binary_path = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PanelPushButton.library_path","title":"<code>library_path = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PanelPushButton.control_id","title":"<code>control_id</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PanelPushButton.ui_title","title":"<code>ui_title</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PanelPushButton.tooltip","title":"<code>tooltip</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PanelPushButton.help_url","title":"<code>help_url</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PanelPushButton.is_supported","title":"<code>is_supported</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PanelPushButton.needs_script","title":"<code>needs_script = needs_script</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PanelPushButton.script_file","title":"<code>script_file = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PanelPushButton.config_script_file","title":"<code>config_script_file = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PanelPushButton.arguments","title":"<code>arguments = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PanelPushButton.context","title":"<code>context = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PanelPushButton.class_name","title":"<code>class_name = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PanelPushButton.avail_class_name","title":"<code>avail_class_name = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PanelPushButton.requires_clean_engine","title":"<code>requires_clean_engine = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PanelPushButton.requires_fullframe_engine","title":"<code>requires_fullframe_engine = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PanelPushButton.requires_persistent_engine","title":"<code>requires_persistent_engine = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PanelPushButton.requires_mainthread_engine","title":"<code>requires_mainthread_engine = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PanelPushButton.dynamo_path","title":"<code>dynamo_path = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PanelPushButton.dynamo_path_check_existing","title":"<code>dynamo_path_check_existing = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PanelPushButton.dynamo_force_manual_run","title":"<code>dynamo_force_manual_run = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PanelPushButton.dynamo_model_nodes_info","title":"<code>dynamo_model_nodes_info = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PanelPushButton.script_language","title":"<code>script_language</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PanelPushButton.is_cpython","title":"<code>is_cpython</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PanelPushButton.type_id","title":"<code>type_id = exts.PANEL_PUSH_BUTTON_POSTFIX</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PanelPushButton-functions","title":"Functions","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PanelPushButton.get_cache_data","title":"<code>get_cache_data()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def get_cache_data(self):\n    cache_dict = self.__dict__.copy()\n    if hasattr(self, TYPE_ID_KEY):\n        cache_dict[TYPE_ID_KEY] = getattr(self, TYPE_ID_KEY)\n    return cache_dict\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PanelPushButton.load_cache_data","title":"<code>load_cache_data(cache_dict)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def load_cache_data(self, cache_dict):\n    for k, v in cache_dict.items():\n        self.__dict__[k] = v\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PanelPushButton.matches","title":"<code>matches(component_path)</code>  <code>classmethod</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>@classmethod\ndef matches(cls, component_path):\n    return component_path.lower().endswith(cls.type_id)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PanelPushButton.make_unique_name","title":"<code>make_unique_name(cmp_path)</code>  <code>classmethod</code>","text":"<p>Creates a unique name for the command.</p> <p>This is used to uniquely identify this command and also to create the class in pyRevit dll assembly. Current method create a unique name based on the command full directory address.</p> <p>Examples:</p> <p>for 'pyRevit.extension/pyRevit.tab/Edit.panel/Flip doors.pushbutton' unique name would be: 'pyrevit-pyrevit-edit-flipdoors'.</p> Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>@classmethod\ndef make_unique_name(cls, cmp_path):\n    \"\"\"Creates a unique name for the command.\n\n    This is used to uniquely identify this command\n    and also to create the class in pyRevit dll assembly.\n    Current method create a unique name based on the command\n    full directory address.\n\n    Examples:\n        for 'pyRevit.extension/pyRevit.tab/Edit.panel/Flip doors.pushbutton'\n        unique name would be: 'pyrevit-pyrevit-edit-flipdoors'.\n    \"\"\"\n    pieces = []\n    inside_ext = False\n    for dname in cmp_path.split(op.sep):\n        if exts.ExtensionTypes.UI_EXTENSION.POSTFIX in dname:\n            inside_ext = True\n\n        name, ext = op.splitext(dname)\n        if ext != '' and inside_ext:\n            pieces.append(name)\n        else:\n            continue\n    return coreutils.cleanup_string(\n        exts.UNIQUE_ID_SEPARATOR.join(pieces),\n        skip=[exts.UNIQUE_ID_SEPARATOR]\n        ).lower()\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PanelPushButton.get_full_bundle_name","title":"<code>get_full_bundle_name()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def get_full_bundle_name(self):\n    return self.name + self.type_id\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PanelPushButton.has_module_path","title":"<code>has_module_path(path)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def has_module_path(self, path):\n    return path in self.module_paths\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PanelPushButton.add_module_path","title":"<code>add_module_path(path)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def add_module_path(self, path):\n    if path and not self.has_module_path(path):\n        mlogger.debug('Appending syspath: %s to %s', path, self)\n        self.module_paths.append(path)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PanelPushButton.remove_module_path","title":"<code>remove_module_path(path)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def remove_module_path(self, path):\n    if path and self.has_module_path(path):\n        mlogger.debug('Removing syspath: %s from %s', path, self)\n        return self.module_paths.remove(path)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PanelPushButton.get_bundle_file","title":"<code>get_bundle_file(file_name)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def get_bundle_file(self, file_name):\n    if self.directory and file_name:\n        file_addr = op.join(self.directory, file_name)\n        return file_addr if op.exists(file_addr) else None\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PanelPushButton.find_bundle_file","title":"<code>find_bundle_file(patterns, finder='postfix')</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def find_bundle_file(self, patterns, finder='postfix'):\n    if self.directory:\n        for bundle_file in os.listdir(self.directory):\n            if 'name' == finder:\n                for file_name in patterns:\n                    if op.splitext(bundle_file)[0] == file_name:\n                        return op.join(self.directory, bundle_file)\n            elif 'postfix' == finder:\n                for file_postfix in patterns:\n                    if bundle_file.endswith(file_postfix):\n                        return op.join(self.directory, bundle_file)\n            elif 'regex' == finder:\n                for regex_pattern in patterns:\n                    if re.match(regex_pattern, bundle_file):\n                        return op.join(self.directory, bundle_file)\n    return None\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PanelPushButton.find_bundle_module","title":"<code>find_bundle_module(module, by_host=False)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def find_bundle_module(self, module, by_host=False):\n    # test of file_name is an actually path to a file\n    if op.isfile(module):\n        return module\n\n    def build_assm_filename(module_filename):\n        # build assembly by host version (assm_file_2020.ext)\n        assm_name, assm_ext = op.splitext(module_filename)\n        return assm_name + '_' + HOST_APP.version + assm_ext\n\n    if by_host:\n        module = build_assm_filename(module)\n\n    # test if module is inside search paths\n    for module_path in self.module_paths:\n        possible_module_path = op.join(module_path, module)\n        if op.isfile(possible_module_path):\n            return possible_module_path\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PanelPushButton.configure","title":"<code>configure(config_dict)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def configure(self, config_dict):\n    configurable_params = \\\n        ['_ui_title', '_tooltip', '_help_url', 'author']\n    # get root key:value pairs\n    for key, value in config_dict.items():\n        for param_name in configurable_params:\n            self._resolve_liquid_tag(param_name, key, value)\n    # get key:value pairs grouped under special key, if exists\n    templates = config_dict.get(exts.MDATA_TEMPLATES_KEY, {})\n    for key, value in templates.items():\n        for param_name in configurable_params:\n            self._resolve_liquid_tag(param_name, key, value)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PanelPushButton.has_config_script","title":"<code>has_config_script()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def has_config_script(self):\n    return self.config_script_file != self.script_file\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SmartButton","title":"<code>SmartButton(cmp_path=None, needs_script=True)</code>","text":"<p>               Bases: <code>GenericUICommand</code></p> <p>Smart button.</p> Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def __init__(self, cmp_path=None, needs_script=True):\n    self.needs_script = needs_script\n    self.script_file = self.config_script_file = None\n    self.arguments = []\n    self.context = None\n    self.class_name = self.avail_class_name = None\n    self.requires_clean_engine = False\n    self.requires_fullframe_engine = False\n    self.requires_persistent_engine = False\n    self.requires_mainthread_engine = False\n    # engine options specific to dynamo\n    self.dynamo_path = None\n    # self.dynamo_path_exec = False\n    self.dynamo_path_check_existing = False\n    self.dynamo_force_manual_run = False\n    self.dynamo_model_nodes_info = None\n    # using classname otherwise exceptions in superclasses won't show\n    GenericUIComponent.__init__(self, cmp_path=cmp_path)\n\n    mlogger.debug('Maximum host version: %s', self.max_revit_ver)\n    mlogger.debug('Minimum host version: %s', self.min_revit_ver)\n    mlogger.debug('command tooltip: %s', self._tooltip)\n    mlogger.debug('Command author: %s', self.author)\n    mlogger.debug('Command help url: %s', self._help_url)\n\n    if self.is_beta:\n        mlogger.debug('Command is in beta.')\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SmartButton-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SmartButton.name","title":"<code>name = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SmartButton.is_container","title":"<code>is_container</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SmartButton.directory","title":"<code>directory = cmp_path</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SmartButton.unique_name","title":"<code>unique_name = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SmartButton.parent_ctrl_id","title":"<code>parent_ctrl_id = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SmartButton.icon_file","title":"<code>icon_file = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SmartButton.author","title":"<code>author = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SmartButton.media_file","title":"<code>media_file = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SmartButton.min_revit_ver","title":"<code>min_revit_ver = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SmartButton.max_revit_ver","title":"<code>max_revit_ver = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SmartButton.is_beta","title":"<code>is_beta = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SmartButton.highlight_type","title":"<code>highlight_type = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SmartButton.collapsed","title":"<code>collapsed = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SmartButton.version","title":"<code>version = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SmartButton.meta","title":"<code>meta = {}</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SmartButton.meta_file","title":"<code>meta_file = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SmartButton.modules","title":"<code>modules = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SmartButton.module_paths","title":"<code>module_paths = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SmartButton.binary_path","title":"<code>binary_path = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SmartButton.library_path","title":"<code>library_path = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SmartButton.control_id","title":"<code>control_id</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SmartButton.ui_title","title":"<code>ui_title</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SmartButton.tooltip","title":"<code>tooltip</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SmartButton.help_url","title":"<code>help_url</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SmartButton.is_supported","title":"<code>is_supported</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SmartButton.needs_script","title":"<code>needs_script = needs_script</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SmartButton.script_file","title":"<code>script_file = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SmartButton.config_script_file","title":"<code>config_script_file = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SmartButton.arguments","title":"<code>arguments = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SmartButton.context","title":"<code>context = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SmartButton.class_name","title":"<code>class_name = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SmartButton.avail_class_name","title":"<code>avail_class_name = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SmartButton.requires_clean_engine","title":"<code>requires_clean_engine = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SmartButton.requires_fullframe_engine","title":"<code>requires_fullframe_engine = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SmartButton.requires_persistent_engine","title":"<code>requires_persistent_engine = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SmartButton.requires_mainthread_engine","title":"<code>requires_mainthread_engine = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SmartButton.dynamo_path","title":"<code>dynamo_path = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SmartButton.dynamo_path_check_existing","title":"<code>dynamo_path_check_existing = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SmartButton.dynamo_force_manual_run","title":"<code>dynamo_force_manual_run = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SmartButton.dynamo_model_nodes_info","title":"<code>dynamo_model_nodes_info = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SmartButton.script_language","title":"<code>script_language</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SmartButton.is_cpython","title":"<code>is_cpython</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SmartButton.type_id","title":"<code>type_id = exts.SMART_BUTTON_POSTFIX</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SmartButton-functions","title":"Functions","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SmartButton.get_cache_data","title":"<code>get_cache_data()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def get_cache_data(self):\n    cache_dict = self.__dict__.copy()\n    if hasattr(self, TYPE_ID_KEY):\n        cache_dict[TYPE_ID_KEY] = getattr(self, TYPE_ID_KEY)\n    return cache_dict\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SmartButton.load_cache_data","title":"<code>load_cache_data(cache_dict)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def load_cache_data(self, cache_dict):\n    for k, v in cache_dict.items():\n        self.__dict__[k] = v\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SmartButton.matches","title":"<code>matches(component_path)</code>  <code>classmethod</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>@classmethod\ndef matches(cls, component_path):\n    return component_path.lower().endswith(cls.type_id)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SmartButton.make_unique_name","title":"<code>make_unique_name(cmp_path)</code>  <code>classmethod</code>","text":"<p>Creates a unique name for the command.</p> <p>This is used to uniquely identify this command and also to create the class in pyRevit dll assembly. Current method create a unique name based on the command full directory address.</p> <p>Examples:</p> <p>for 'pyRevit.extension/pyRevit.tab/Edit.panel/Flip doors.pushbutton' unique name would be: 'pyrevit-pyrevit-edit-flipdoors'.</p> Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>@classmethod\ndef make_unique_name(cls, cmp_path):\n    \"\"\"Creates a unique name for the command.\n\n    This is used to uniquely identify this command\n    and also to create the class in pyRevit dll assembly.\n    Current method create a unique name based on the command\n    full directory address.\n\n    Examples:\n        for 'pyRevit.extension/pyRevit.tab/Edit.panel/Flip doors.pushbutton'\n        unique name would be: 'pyrevit-pyrevit-edit-flipdoors'.\n    \"\"\"\n    pieces = []\n    inside_ext = False\n    for dname in cmp_path.split(op.sep):\n        if exts.ExtensionTypes.UI_EXTENSION.POSTFIX in dname:\n            inside_ext = True\n\n        name, ext = op.splitext(dname)\n        if ext != '' and inside_ext:\n            pieces.append(name)\n        else:\n            continue\n    return coreutils.cleanup_string(\n        exts.UNIQUE_ID_SEPARATOR.join(pieces),\n        skip=[exts.UNIQUE_ID_SEPARATOR]\n        ).lower()\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SmartButton.get_full_bundle_name","title":"<code>get_full_bundle_name()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def get_full_bundle_name(self):\n    return self.name + self.type_id\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SmartButton.has_module_path","title":"<code>has_module_path(path)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def has_module_path(self, path):\n    return path in self.module_paths\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SmartButton.add_module_path","title":"<code>add_module_path(path)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def add_module_path(self, path):\n    if path and not self.has_module_path(path):\n        mlogger.debug('Appending syspath: %s to %s', path, self)\n        self.module_paths.append(path)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SmartButton.remove_module_path","title":"<code>remove_module_path(path)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def remove_module_path(self, path):\n    if path and self.has_module_path(path):\n        mlogger.debug('Removing syspath: %s from %s', path, self)\n        return self.module_paths.remove(path)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SmartButton.get_bundle_file","title":"<code>get_bundle_file(file_name)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def get_bundle_file(self, file_name):\n    if self.directory and file_name:\n        file_addr = op.join(self.directory, file_name)\n        return file_addr if op.exists(file_addr) else None\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SmartButton.find_bundle_file","title":"<code>find_bundle_file(patterns, finder='postfix')</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def find_bundle_file(self, patterns, finder='postfix'):\n    if self.directory:\n        for bundle_file in os.listdir(self.directory):\n            if 'name' == finder:\n                for file_name in patterns:\n                    if op.splitext(bundle_file)[0] == file_name:\n                        return op.join(self.directory, bundle_file)\n            elif 'postfix' == finder:\n                for file_postfix in patterns:\n                    if bundle_file.endswith(file_postfix):\n                        return op.join(self.directory, bundle_file)\n            elif 'regex' == finder:\n                for regex_pattern in patterns:\n                    if re.match(regex_pattern, bundle_file):\n                        return op.join(self.directory, bundle_file)\n    return None\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SmartButton.find_bundle_module","title":"<code>find_bundle_module(module, by_host=False)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def find_bundle_module(self, module, by_host=False):\n    # test of file_name is an actually path to a file\n    if op.isfile(module):\n        return module\n\n    def build_assm_filename(module_filename):\n        # build assembly by host version (assm_file_2020.ext)\n        assm_name, assm_ext = op.splitext(module_filename)\n        return assm_name + '_' + HOST_APP.version + assm_ext\n\n    if by_host:\n        module = build_assm_filename(module)\n\n    # test if module is inside search paths\n    for module_path in self.module_paths:\n        possible_module_path = op.join(module_path, module)\n        if op.isfile(possible_module_path):\n            return possible_module_path\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SmartButton.configure","title":"<code>configure(config_dict)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def configure(self, config_dict):\n    configurable_params = \\\n        ['_ui_title', '_tooltip', '_help_url', 'author']\n    # get root key:value pairs\n    for key, value in config_dict.items():\n        for param_name in configurable_params:\n            self._resolve_liquid_tag(param_name, key, value)\n    # get key:value pairs grouped under special key, if exists\n    templates = config_dict.get(exts.MDATA_TEMPLATES_KEY, {})\n    for key, value in templates.items():\n        for param_name in configurable_params:\n            self._resolve_liquid_tag(param_name, key, value)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SmartButton.has_config_script","title":"<code>has_config_script()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def has_config_script(self):\n    return self.config_script_file != self.script_file\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.ContentButton","title":"<code>ContentButton(cmp_path=None)</code>","text":"<p>               Bases: <code>GenericUICommand</code></p> <p>Content Button.</p> Source code in <code>pyrevitlib/pyrevit/extensions/components.py</code> <pre><code>def __init__(self, cmp_path=None):\n    # using classname otherwise exceptions in superclasses won't show\n    GenericUICommand.__init__(\n        self,\n        cmp_path=cmp_path,\n        needs_script=False\n        )\n    # find content file\n    self.script_file = \\\n        self.find_bundle_file([\n            exts.CONTENT_VERSION_POSTFIX.format(\n                version=HOST_APP.version\n                ),\n            ])\n    if not self.script_file:\n        self.script_file = \\\n            self.find_bundle_file([\n                exts.CONTENT_POSTFIX,\n                ])\n    # requires at least one bundles\n    if self.directory and not self.script_file:\n        mlogger.error('Command %s: Does not have content file.', self)\n        self.script_file = ''\n\n    # find alternative content file\n    self.config_script_file = \\\n        self.find_bundle_file([\n            exts.ALT_CONTENT_VERSION_POSTFIX.format(\n                version=HOST_APP.version\n                ),\n            ])\n    if not self.config_script_file:\n        self.config_script_file = \\\n            self.find_bundle_file([\n                exts.ALT_CONTENT_POSTFIX,\n                ])\n    if not self.config_script_file:\n        self.config_script_file = self.script_file\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.ContentButton-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.ContentButton.name","title":"<code>name = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.ContentButton.is_container","title":"<code>is_container</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.ContentButton.directory","title":"<code>directory = cmp_path</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.ContentButton.unique_name","title":"<code>unique_name = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.ContentButton.parent_ctrl_id","title":"<code>parent_ctrl_id = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.ContentButton.icon_file","title":"<code>icon_file = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.ContentButton.author","title":"<code>author = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.ContentButton.media_file","title":"<code>media_file = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.ContentButton.min_revit_ver","title":"<code>min_revit_ver = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.ContentButton.max_revit_ver","title":"<code>max_revit_ver = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.ContentButton.is_beta","title":"<code>is_beta = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.ContentButton.highlight_type","title":"<code>highlight_type = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.ContentButton.collapsed","title":"<code>collapsed = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.ContentButton.version","title":"<code>version = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.ContentButton.meta","title":"<code>meta = {}</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.ContentButton.meta_file","title":"<code>meta_file = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.ContentButton.modules","title":"<code>modules = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.ContentButton.module_paths","title":"<code>module_paths = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.ContentButton.binary_path","title":"<code>binary_path = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.ContentButton.library_path","title":"<code>library_path = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.ContentButton.control_id","title":"<code>control_id</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.ContentButton.ui_title","title":"<code>ui_title</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.ContentButton.tooltip","title":"<code>tooltip</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.ContentButton.help_url","title":"<code>help_url</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.ContentButton.is_supported","title":"<code>is_supported</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.ContentButton.needs_script","title":"<code>needs_script = needs_script</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.ContentButton.arguments","title":"<code>arguments = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.ContentButton.context","title":"<code>context = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.ContentButton.class_name","title":"<code>class_name = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.ContentButton.avail_class_name","title":"<code>avail_class_name = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.ContentButton.requires_clean_engine","title":"<code>requires_clean_engine = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.ContentButton.requires_fullframe_engine","title":"<code>requires_fullframe_engine = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.ContentButton.requires_persistent_engine","title":"<code>requires_persistent_engine = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.ContentButton.requires_mainthread_engine","title":"<code>requires_mainthread_engine = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.ContentButton.dynamo_path","title":"<code>dynamo_path = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.ContentButton.dynamo_path_check_existing","title":"<code>dynamo_path_check_existing = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.ContentButton.dynamo_force_manual_run","title":"<code>dynamo_force_manual_run = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.ContentButton.dynamo_model_nodes_info","title":"<code>dynamo_model_nodes_info = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.ContentButton.script_language","title":"<code>script_language</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.ContentButton.is_cpython","title":"<code>is_cpython</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.ContentButton.type_id","title":"<code>type_id = exts.CONTENT_BUTTON_POSTFIX</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.ContentButton.script_file","title":"<code>script_file = self.find_bundle_file([exts.CONTENT_VERSION_POSTFIX.format(version=HOST_APP.version)])</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.ContentButton.config_script_file","title":"<code>config_script_file = self.find_bundle_file([exts.ALT_CONTENT_VERSION_POSTFIX.format(version=HOST_APP.version)])</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.ContentButton-functions","title":"Functions","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.ContentButton.get_cache_data","title":"<code>get_cache_data()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def get_cache_data(self):\n    cache_dict = self.__dict__.copy()\n    if hasattr(self, TYPE_ID_KEY):\n        cache_dict[TYPE_ID_KEY] = getattr(self, TYPE_ID_KEY)\n    return cache_dict\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.ContentButton.load_cache_data","title":"<code>load_cache_data(cache_dict)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def load_cache_data(self, cache_dict):\n    for k, v in cache_dict.items():\n        self.__dict__[k] = v\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.ContentButton.matches","title":"<code>matches(component_path)</code>  <code>classmethod</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>@classmethod\ndef matches(cls, component_path):\n    return component_path.lower().endswith(cls.type_id)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.ContentButton.make_unique_name","title":"<code>make_unique_name(cmp_path)</code>  <code>classmethod</code>","text":"<p>Creates a unique name for the command.</p> <p>This is used to uniquely identify this command and also to create the class in pyRevit dll assembly. Current method create a unique name based on the command full directory address.</p> <p>Examples:</p> <p>for 'pyRevit.extension/pyRevit.tab/Edit.panel/Flip doors.pushbutton' unique name would be: 'pyrevit-pyrevit-edit-flipdoors'.</p> Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>@classmethod\ndef make_unique_name(cls, cmp_path):\n    \"\"\"Creates a unique name for the command.\n\n    This is used to uniquely identify this command\n    and also to create the class in pyRevit dll assembly.\n    Current method create a unique name based on the command\n    full directory address.\n\n    Examples:\n        for 'pyRevit.extension/pyRevit.tab/Edit.panel/Flip doors.pushbutton'\n        unique name would be: 'pyrevit-pyrevit-edit-flipdoors'.\n    \"\"\"\n    pieces = []\n    inside_ext = False\n    for dname in cmp_path.split(op.sep):\n        if exts.ExtensionTypes.UI_EXTENSION.POSTFIX in dname:\n            inside_ext = True\n\n        name, ext = op.splitext(dname)\n        if ext != '' and inside_ext:\n            pieces.append(name)\n        else:\n            continue\n    return coreutils.cleanup_string(\n        exts.UNIQUE_ID_SEPARATOR.join(pieces),\n        skip=[exts.UNIQUE_ID_SEPARATOR]\n        ).lower()\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.ContentButton.get_full_bundle_name","title":"<code>get_full_bundle_name()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def get_full_bundle_name(self):\n    return self.name + self.type_id\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.ContentButton.has_module_path","title":"<code>has_module_path(path)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def has_module_path(self, path):\n    return path in self.module_paths\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.ContentButton.add_module_path","title":"<code>add_module_path(path)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def add_module_path(self, path):\n    if path and not self.has_module_path(path):\n        mlogger.debug('Appending syspath: %s to %s', path, self)\n        self.module_paths.append(path)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.ContentButton.remove_module_path","title":"<code>remove_module_path(path)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def remove_module_path(self, path):\n    if path and self.has_module_path(path):\n        mlogger.debug('Removing syspath: %s from %s', path, self)\n        return self.module_paths.remove(path)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.ContentButton.get_bundle_file","title":"<code>get_bundle_file(file_name)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def get_bundle_file(self, file_name):\n    if self.directory and file_name:\n        file_addr = op.join(self.directory, file_name)\n        return file_addr if op.exists(file_addr) else None\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.ContentButton.find_bundle_file","title":"<code>find_bundle_file(patterns, finder='postfix')</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def find_bundle_file(self, patterns, finder='postfix'):\n    if self.directory:\n        for bundle_file in os.listdir(self.directory):\n            if 'name' == finder:\n                for file_name in patterns:\n                    if op.splitext(bundle_file)[0] == file_name:\n                        return op.join(self.directory, bundle_file)\n            elif 'postfix' == finder:\n                for file_postfix in patterns:\n                    if bundle_file.endswith(file_postfix):\n                        return op.join(self.directory, bundle_file)\n            elif 'regex' == finder:\n                for regex_pattern in patterns:\n                    if re.match(regex_pattern, bundle_file):\n                        return op.join(self.directory, bundle_file)\n    return None\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.ContentButton.find_bundle_module","title":"<code>find_bundle_module(module, by_host=False)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def find_bundle_module(self, module, by_host=False):\n    # test of file_name is an actually path to a file\n    if op.isfile(module):\n        return module\n\n    def build_assm_filename(module_filename):\n        # build assembly by host version (assm_file_2020.ext)\n        assm_name, assm_ext = op.splitext(module_filename)\n        return assm_name + '_' + HOST_APP.version + assm_ext\n\n    if by_host:\n        module = build_assm_filename(module)\n\n    # test if module is inside search paths\n    for module_path in self.module_paths:\n        possible_module_path = op.join(module_path, module)\n        if op.isfile(possible_module_path):\n            return possible_module_path\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.ContentButton.configure","title":"<code>configure(config_dict)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def configure(self, config_dict):\n    configurable_params = \\\n        ['_ui_title', '_tooltip', '_help_url', 'author']\n    # get root key:value pairs\n    for key, value in config_dict.items():\n        for param_name in configurable_params:\n            self._resolve_liquid_tag(param_name, key, value)\n    # get key:value pairs grouped under special key, if exists\n    templates = config_dict.get(exts.MDATA_TEMPLATES_KEY, {})\n    for key, value in templates.items():\n        for param_name in configurable_params:\n            self._resolve_liquid_tag(param_name, key, value)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.ContentButton.has_config_script","title":"<code>has_config_script()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def has_config_script(self):\n    return self.config_script_file != self.script_file\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.URLButton","title":"<code>URLButton(cmp_path=None)</code>","text":"<p>               Bases: <code>GenericUICommand</code></p> <p>URL button.</p> Source code in <code>pyrevitlib/pyrevit/extensions/components.py</code> <pre><code>def __init__(self, cmp_path=None):\n    # using classname otherwise exceptions in superclasses won't show\n    GenericUICommand.__init__(self, cmp_path=cmp_path, needs_script=False)\n    self.target_url = None\n    # read metadata from metadata file\n    if self.meta:\n        # get the target url from metadata\n        self.target_url = \\\n            self.meta.get(exts.MDATA_URL_BUTTON_HYPERLINK, None)\n        # for url buttons there is no script source so\n        # assign the metadata file to the script\n        self.script_file = self.config_script_file = self.meta_file\n    else:\n        mlogger.debug(\"%s does not specify target assembly::class.\", self)\n\n    if self.directory and not self.target_url:\n        mlogger.error(\"%s does not specify target url.\", self)\n\n    mlogger.debug('%s target url: %s', self, self.target_url)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.URLButton-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.URLButton.name","title":"<code>name = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.URLButton.is_container","title":"<code>is_container</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.URLButton.directory","title":"<code>directory = cmp_path</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.URLButton.unique_name","title":"<code>unique_name = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.URLButton.parent_ctrl_id","title":"<code>parent_ctrl_id = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.URLButton.icon_file","title":"<code>icon_file = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.URLButton.author","title":"<code>author = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.URLButton.media_file","title":"<code>media_file = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.URLButton.min_revit_ver","title":"<code>min_revit_ver = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.URLButton.max_revit_ver","title":"<code>max_revit_ver = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.URLButton.is_beta","title":"<code>is_beta = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.URLButton.highlight_type","title":"<code>highlight_type = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.URLButton.collapsed","title":"<code>collapsed = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.URLButton.version","title":"<code>version = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.URLButton.meta","title":"<code>meta = {}</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.URLButton.meta_file","title":"<code>meta_file = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.URLButton.modules","title":"<code>modules = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.URLButton.module_paths","title":"<code>module_paths = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.URLButton.binary_path","title":"<code>binary_path = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.URLButton.library_path","title":"<code>library_path = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.URLButton.control_id","title":"<code>control_id</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.URLButton.ui_title","title":"<code>ui_title</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.URLButton.tooltip","title":"<code>tooltip</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.URLButton.help_url","title":"<code>help_url</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.URLButton.is_supported","title":"<code>is_supported</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.URLButton.needs_script","title":"<code>needs_script = needs_script</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.URLButton.arguments","title":"<code>arguments = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.URLButton.context","title":"<code>context = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.URLButton.class_name","title":"<code>class_name = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.URLButton.avail_class_name","title":"<code>avail_class_name = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.URLButton.requires_clean_engine","title":"<code>requires_clean_engine = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.URLButton.requires_fullframe_engine","title":"<code>requires_fullframe_engine = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.URLButton.requires_persistent_engine","title":"<code>requires_persistent_engine = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.URLButton.requires_mainthread_engine","title":"<code>requires_mainthread_engine = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.URLButton.dynamo_path","title":"<code>dynamo_path = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.URLButton.dynamo_path_check_existing","title":"<code>dynamo_path_check_existing = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.URLButton.dynamo_force_manual_run","title":"<code>dynamo_force_manual_run = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.URLButton.dynamo_model_nodes_info","title":"<code>dynamo_model_nodes_info = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.URLButton.script_language","title":"<code>script_language</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.URLButton.is_cpython","title":"<code>is_cpython</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.URLButton.type_id","title":"<code>type_id = exts.URL_BUTTON_POSTFIX</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.URLButton.target_url","title":"<code>target_url = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.URLButton.script_file","title":"<code>script_file = self.meta_file</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.URLButton.config_script_file","title":"<code>config_script_file = self.meta_file</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.URLButton-functions","title":"Functions","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.URLButton.get_cache_data","title":"<code>get_cache_data()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def get_cache_data(self):\n    cache_dict = self.__dict__.copy()\n    if hasattr(self, TYPE_ID_KEY):\n        cache_dict[TYPE_ID_KEY] = getattr(self, TYPE_ID_KEY)\n    return cache_dict\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.URLButton.load_cache_data","title":"<code>load_cache_data(cache_dict)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def load_cache_data(self, cache_dict):\n    for k, v in cache_dict.items():\n        self.__dict__[k] = v\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.URLButton.matches","title":"<code>matches(component_path)</code>  <code>classmethod</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>@classmethod\ndef matches(cls, component_path):\n    return component_path.lower().endswith(cls.type_id)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.URLButton.make_unique_name","title":"<code>make_unique_name(cmp_path)</code>  <code>classmethod</code>","text":"<p>Creates a unique name for the command.</p> <p>This is used to uniquely identify this command and also to create the class in pyRevit dll assembly. Current method create a unique name based on the command full directory address.</p> <p>Examples:</p> <p>for 'pyRevit.extension/pyRevit.tab/Edit.panel/Flip doors.pushbutton' unique name would be: 'pyrevit-pyrevit-edit-flipdoors'.</p> Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>@classmethod\ndef make_unique_name(cls, cmp_path):\n    \"\"\"Creates a unique name for the command.\n\n    This is used to uniquely identify this command\n    and also to create the class in pyRevit dll assembly.\n    Current method create a unique name based on the command\n    full directory address.\n\n    Examples:\n        for 'pyRevit.extension/pyRevit.tab/Edit.panel/Flip doors.pushbutton'\n        unique name would be: 'pyrevit-pyrevit-edit-flipdoors'.\n    \"\"\"\n    pieces = []\n    inside_ext = False\n    for dname in cmp_path.split(op.sep):\n        if exts.ExtensionTypes.UI_EXTENSION.POSTFIX in dname:\n            inside_ext = True\n\n        name, ext = op.splitext(dname)\n        if ext != '' and inside_ext:\n            pieces.append(name)\n        else:\n            continue\n    return coreutils.cleanup_string(\n        exts.UNIQUE_ID_SEPARATOR.join(pieces),\n        skip=[exts.UNIQUE_ID_SEPARATOR]\n        ).lower()\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.URLButton.get_full_bundle_name","title":"<code>get_full_bundle_name()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def get_full_bundle_name(self):\n    return self.name + self.type_id\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.URLButton.has_module_path","title":"<code>has_module_path(path)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def has_module_path(self, path):\n    return path in self.module_paths\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.URLButton.add_module_path","title":"<code>add_module_path(path)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def add_module_path(self, path):\n    if path and not self.has_module_path(path):\n        mlogger.debug('Appending syspath: %s to %s', path, self)\n        self.module_paths.append(path)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.URLButton.remove_module_path","title":"<code>remove_module_path(path)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def remove_module_path(self, path):\n    if path and self.has_module_path(path):\n        mlogger.debug('Removing syspath: %s from %s', path, self)\n        return self.module_paths.remove(path)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.URLButton.get_bundle_file","title":"<code>get_bundle_file(file_name)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def get_bundle_file(self, file_name):\n    if self.directory and file_name:\n        file_addr = op.join(self.directory, file_name)\n        return file_addr if op.exists(file_addr) else None\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.URLButton.find_bundle_file","title":"<code>find_bundle_file(patterns, finder='postfix')</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def find_bundle_file(self, patterns, finder='postfix'):\n    if self.directory:\n        for bundle_file in os.listdir(self.directory):\n            if 'name' == finder:\n                for file_name in patterns:\n                    if op.splitext(bundle_file)[0] == file_name:\n                        return op.join(self.directory, bundle_file)\n            elif 'postfix' == finder:\n                for file_postfix in patterns:\n                    if bundle_file.endswith(file_postfix):\n                        return op.join(self.directory, bundle_file)\n            elif 'regex' == finder:\n                for regex_pattern in patterns:\n                    if re.match(regex_pattern, bundle_file):\n                        return op.join(self.directory, bundle_file)\n    return None\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.URLButton.find_bundle_module","title":"<code>find_bundle_module(module, by_host=False)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def find_bundle_module(self, module, by_host=False):\n    # test of file_name is an actually path to a file\n    if op.isfile(module):\n        return module\n\n    def build_assm_filename(module_filename):\n        # build assembly by host version (assm_file_2020.ext)\n        assm_name, assm_ext = op.splitext(module_filename)\n        return assm_name + '_' + HOST_APP.version + assm_ext\n\n    if by_host:\n        module = build_assm_filename(module)\n\n    # test if module is inside search paths\n    for module_path in self.module_paths:\n        possible_module_path = op.join(module_path, module)\n        if op.isfile(possible_module_path):\n            return possible_module_path\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.URLButton.configure","title":"<code>configure(config_dict)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def configure(self, config_dict):\n    configurable_params = \\\n        ['_ui_title', '_tooltip', '_help_url', 'author']\n    # get root key:value pairs\n    for key, value in config_dict.items():\n        for param_name in configurable_params:\n            self._resolve_liquid_tag(param_name, key, value)\n    # get key:value pairs grouped under special key, if exists\n    templates = config_dict.get(exts.MDATA_TEMPLATES_KEY, {})\n    for key, value in templates.items():\n        for param_name in configurable_params:\n            self._resolve_liquid_tag(param_name, key, value)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.URLButton.has_config_script","title":"<code>has_config_script()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def has_config_script(self):\n    return self.config_script_file != self.script_file\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.URLButton.get_target_url","title":"<code>get_target_url()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/components.py</code> <pre><code>def get_target_url(self):\n    return self.target_url or \"\"\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericUICommandGroup","title":"<code>GenericUICommandGroup(cmp_path=None)</code>","text":"<p>               Bases: <code>GenericUIContainer</code></p> <p>Generic UI command group.</p> <p>Command groups only include commands. These classes can include GenericUICommand as sub components.</p> Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def __init__(self, cmp_path=None):\n    self.layout_items = []\n    self.components = []\n    # using classname otherwise exceptions in superclasses won't show\n    GenericUIComponent.__init__(self, cmp_path=cmp_path)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericUICommandGroup-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericUICommandGroup.type_id","title":"<code>type_id = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericUICommandGroup.name","title":"<code>name = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericUICommandGroup.is_container","title":"<code>is_container</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericUICommandGroup.directory","title":"<code>directory = cmp_path</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericUICommandGroup.unique_name","title":"<code>unique_name = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericUICommandGroup.parent_ctrl_id","title":"<code>parent_ctrl_id = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericUICommandGroup.icon_file","title":"<code>icon_file = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericUICommandGroup.author","title":"<code>author = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericUICommandGroup.media_file","title":"<code>media_file = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericUICommandGroup.min_revit_ver","title":"<code>min_revit_ver = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericUICommandGroup.max_revit_ver","title":"<code>max_revit_ver = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericUICommandGroup.is_beta","title":"<code>is_beta = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericUICommandGroup.highlight_type","title":"<code>highlight_type = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericUICommandGroup.collapsed","title":"<code>collapsed = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericUICommandGroup.version","title":"<code>version = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericUICommandGroup.meta","title":"<code>meta = {}</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericUICommandGroup.meta_file","title":"<code>meta_file = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericUICommandGroup.modules","title":"<code>modules = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericUICommandGroup.module_paths","title":"<code>module_paths = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericUICommandGroup.binary_path","title":"<code>binary_path = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericUICommandGroup.library_path","title":"<code>library_path = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericUICommandGroup.ui_title","title":"<code>ui_title</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericUICommandGroup.tooltip","title":"<code>tooltip</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericUICommandGroup.help_url","title":"<code>help_url</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericUICommandGroup.is_supported","title":"<code>is_supported</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericUICommandGroup.layout_items","title":"<code>layout_items = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericUICommandGroup.components","title":"<code>components = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericUICommandGroup.allowed_sub_cmps","title":"<code>allowed_sub_cmps = [GenericUICommand, NoScriptButton]</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericUICommandGroup.control_id","title":"<code>control_id</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericUICommandGroup-functions","title":"Functions","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericUICommandGroup.get_cache_data","title":"<code>get_cache_data()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def get_cache_data(self):\n    cache_dict = self.__dict__.copy()\n    if hasattr(self, TYPE_ID_KEY):\n        cache_dict[TYPE_ID_KEY] = getattr(self, TYPE_ID_KEY)\n    return cache_dict\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericUICommandGroup.load_cache_data","title":"<code>load_cache_data(cache_dict)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def load_cache_data(self, cache_dict):\n    for k, v in cache_dict.items():\n        self.__dict__[k] = v\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericUICommandGroup.matches","title":"<code>matches(component_path)</code>  <code>classmethod</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>@classmethod\ndef matches(cls, component_path):\n    return component_path.lower().endswith(cls.type_id)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericUICommandGroup.make_unique_name","title":"<code>make_unique_name(cmp_path)</code>  <code>classmethod</code>","text":"<p>Creates a unique name for the command.</p> <p>This is used to uniquely identify this command and also to create the class in pyRevit dll assembly. Current method create a unique name based on the command full directory address.</p> <p>Examples:</p> <p>for 'pyRevit.extension/pyRevit.tab/Edit.panel/Flip doors.pushbutton' unique name would be: 'pyrevit-pyrevit-edit-flipdoors'.</p> Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>@classmethod\ndef make_unique_name(cls, cmp_path):\n    \"\"\"Creates a unique name for the command.\n\n    This is used to uniquely identify this command\n    and also to create the class in pyRevit dll assembly.\n    Current method create a unique name based on the command\n    full directory address.\n\n    Examples:\n        for 'pyRevit.extension/pyRevit.tab/Edit.panel/Flip doors.pushbutton'\n        unique name would be: 'pyrevit-pyrevit-edit-flipdoors'.\n    \"\"\"\n    pieces = []\n    inside_ext = False\n    for dname in cmp_path.split(op.sep):\n        if exts.ExtensionTypes.UI_EXTENSION.POSTFIX in dname:\n            inside_ext = True\n\n        name, ext = op.splitext(dname)\n        if ext != '' and inside_ext:\n            pieces.append(name)\n        else:\n            continue\n    return coreutils.cleanup_string(\n        exts.UNIQUE_ID_SEPARATOR.join(pieces),\n        skip=[exts.UNIQUE_ID_SEPARATOR]\n        ).lower()\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericUICommandGroup.get_full_bundle_name","title":"<code>get_full_bundle_name()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def get_full_bundle_name(self):\n    return self.name + self.type_id\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericUICommandGroup.has_module_path","title":"<code>has_module_path(path)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def has_module_path(self, path):\n    return path in self.module_paths\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericUICommandGroup.add_module_path","title":"<code>add_module_path(path)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def add_module_path(self, path):\n    if path and not self.has_module_path(path):\n        mlogger.debug('Appending syspath: %s to %s', path, self)\n        for component in self.components:\n            component.add_module_path(path)\n        self.module_paths.append(path)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericUICommandGroup.remove_module_path","title":"<code>remove_module_path(path)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def remove_module_path(self, path):\n    if path and self.has_module_path(path):\n        mlogger.debug('Removing syspath: %s from %s', path, self)\n        for component in self.components:\n            component.remove_module_path(path)\n        return self.module_paths.remove(path)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericUICommandGroup.get_bundle_file","title":"<code>get_bundle_file(file_name)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def get_bundle_file(self, file_name):\n    if self.directory and file_name:\n        file_addr = op.join(self.directory, file_name)\n        return file_addr if op.exists(file_addr) else None\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericUICommandGroup.find_bundle_file","title":"<code>find_bundle_file(patterns, finder='postfix')</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def find_bundle_file(self, patterns, finder='postfix'):\n    if self.directory:\n        for bundle_file in os.listdir(self.directory):\n            if 'name' == finder:\n                for file_name in patterns:\n                    if op.splitext(bundle_file)[0] == file_name:\n                        return op.join(self.directory, bundle_file)\n            elif 'postfix' == finder:\n                for file_postfix in patterns:\n                    if bundle_file.endswith(file_postfix):\n                        return op.join(self.directory, bundle_file)\n            elif 'regex' == finder:\n                for regex_pattern in patterns:\n                    if re.match(regex_pattern, bundle_file):\n                        return op.join(self.directory, bundle_file)\n    return None\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericUICommandGroup.find_bundle_module","title":"<code>find_bundle_module(module, by_host=False)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def find_bundle_module(self, module, by_host=False):\n    # test of file_name is an actually path to a file\n    if op.isfile(module):\n        return module\n\n    def build_assm_filename(module_filename):\n        # build assembly by host version (assm_file_2020.ext)\n        assm_name, assm_ext = op.splitext(module_filename)\n        return assm_name + '_' + HOST_APP.version + assm_ext\n\n    if by_host:\n        module = build_assm_filename(module)\n\n    # test if module is inside search paths\n    for module_path in self.module_paths:\n        possible_module_path = op.join(module_path, module)\n        if op.isfile(possible_module_path):\n            return possible_module_path\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericUICommandGroup.configure","title":"<code>configure(config_dict)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def configure(self, config_dict):\n    # update self meta\n    GenericUIComponent.configure(self, config_dict=config_dict)\n    # create an updated dict to pass to children\n    updated_dict = copy.deepcopy(config_dict)\n    updated_dict = pyutils.merge(updated_dict, self.meta)\n    # replace the meta values with the expanded values\n    # so children can use the expanded\n    updated_dict[exts.MDATA_UI_TITLE] = self.ui_title\n    updated_dict[exts.MDATA_TOOLTIP] = self.tooltip\n    updated_dict[exts.MDATA_COMMAND_HELP_URL] = self.help_url\n    updated_dict[exts.AUTHOR_PARAM] = self.author\n    if exts.AUTHORS_PARAM in updated_dict:\n        updated_dict.pop(exts.AUTHORS_PARAM)\n    for component in self:\n        component.configure(updated_dict)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericUICommandGroup.parse_layout_directive","title":"<code>parse_layout_directive(layout_line)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def parse_layout_directive(self, layout_line):\n    parts = re.findall(r'(.+)\\[(.+):(.*)\\]', layout_line)\n    if parts:\n        source_item, directive, target_value = parts[0]\n        # cleanup values\n        directive = directive.lower().strip()\n        target_value = target_value.strip()\n        # process any escape characters in target value\n        # https://stackoverflow.com/a/4020824/2350244\n        target_value = target_value.encode('utf-8')\n        if PY3:\n            target_value = target_value.decode('unicode_escape')\n        else:\n            target_value = target_value.decode('string_escape')\n        # create directive obj\n        return source_item, LayoutDirective(directive_type=directive,\n                                            target=target_value)\n    return layout_line, None\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericUICommandGroup.parse_layout_item","title":"<code>parse_layout_item(layout_line)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def parse_layout_item(self, layout_line):\n    if layout_line:\n        layout_item_name, layout_item_drctv = \\\n            self.parse_layout_directive(layout_line)\n        return LayoutItem(name=layout_item_name,\n                          directive=layout_item_drctv)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericUICommandGroup.parse_layout_items","title":"<code>parse_layout_items(layout_lines)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def parse_layout_items(self, layout_lines):\n    for layout_line in layout_lines:\n        layout_item = self.parse_layout_item(layout_line)\n        if layout_item:\n            self.layout_items.append(layout_item)\n    mlogger.debug('Layout is: %s', self.layout_items)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericUICommandGroup.parse_layout_metadata","title":"<code>parse_layout_metadata()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def parse_layout_metadata(self):\n    layout = self.meta.get(exts.MDATA_LAYOUT, [])\n    if layout:\n        self.parse_layout_items(layout)\n        return True\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericUICommandGroup.contains","title":"<code>contains(item_name)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def contains(self, item_name):\n    return any([x.name == item_name for x in self.components])\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericUICommandGroup.add_component","title":"<code>add_component(comp)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def add_component(self, comp):\n    # set search paths\n    for path in self.module_paths:\n        comp.add_module_path(path)\n    # set its own control id on the child component\n    if hasattr(comp, 'parent_ctrl_id'):\n        comp.parent_ctrl_id = self.control_id\n    # now add to list\n    self.components.append(comp)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericUICommandGroup.find_components_of_type","title":"<code>find_components_of_type(cmp_type)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def find_components_of_type(self, cmp_type):\n    sub_comp_list = []\n    for sub_comp in self.components:\n        if isinstance(sub_comp, cmp_type):\n            sub_comp_list.append(sub_comp)\n        elif sub_comp.is_container:\n            sub_comp_list.extend(sub_comp.find_components_of_type(cmp_type))\n\n    return sub_comp_list\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericUICommandGroup.find_layout_items","title":"<code>find_layout_items()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def find_layout_items(self):\n    layout_items = []\n    layout_items.extend(self.layout_items)\n    for sub_comp in self.components:\n        if sub_comp.is_container:\n            layout_items.extend(sub_comp.find_layout_items())\n    return layout_items\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericUICommandGroup.has_commands","title":"<code>has_commands()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/components.py</code> <pre><code>def has_commands(self):\n    for component in self:\n        if isinstance(component, GenericUICommand):\n            return True\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PullDownButtonGroup","title":"<code>PullDownButtonGroup(cmp_path=None)</code>","text":"<p>               Bases: <code>GenericUICommandGroup</code></p> <p>Pulldown button group.</p> Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def __init__(self, cmp_path=None):\n    self.layout_items = []\n    self.components = []\n    # using classname otherwise exceptions in superclasses won't show\n    GenericUIComponent.__init__(self, cmp_path=cmp_path)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PullDownButtonGroup-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PullDownButtonGroup.name","title":"<code>name = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PullDownButtonGroup.is_container","title":"<code>is_container</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PullDownButtonGroup.directory","title":"<code>directory = cmp_path</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PullDownButtonGroup.unique_name","title":"<code>unique_name = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PullDownButtonGroup.parent_ctrl_id","title":"<code>parent_ctrl_id = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PullDownButtonGroup.icon_file","title":"<code>icon_file = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PullDownButtonGroup.author","title":"<code>author = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PullDownButtonGroup.media_file","title":"<code>media_file = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PullDownButtonGroup.min_revit_ver","title":"<code>min_revit_ver = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PullDownButtonGroup.max_revit_ver","title":"<code>max_revit_ver = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PullDownButtonGroup.is_beta","title":"<code>is_beta = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PullDownButtonGroup.highlight_type","title":"<code>highlight_type = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PullDownButtonGroup.collapsed","title":"<code>collapsed = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PullDownButtonGroup.version","title":"<code>version = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PullDownButtonGroup.meta","title":"<code>meta = {}</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PullDownButtonGroup.meta_file","title":"<code>meta_file = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PullDownButtonGroup.modules","title":"<code>modules = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PullDownButtonGroup.module_paths","title":"<code>module_paths = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PullDownButtonGroup.binary_path","title":"<code>binary_path = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PullDownButtonGroup.library_path","title":"<code>library_path = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PullDownButtonGroup.control_id","title":"<code>control_id</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PullDownButtonGroup.ui_title","title":"<code>ui_title</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PullDownButtonGroup.tooltip","title":"<code>tooltip</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PullDownButtonGroup.help_url","title":"<code>help_url</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PullDownButtonGroup.is_supported","title":"<code>is_supported</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PullDownButtonGroup.allowed_sub_cmps","title":"<code>allowed_sub_cmps = [GenericUICommand, NoScriptButton]</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PullDownButtonGroup.layout_items","title":"<code>layout_items = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PullDownButtonGroup.components","title":"<code>components = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PullDownButtonGroup.type_id","title":"<code>type_id = exts.PULLDOWN_BUTTON_POSTFIX</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PullDownButtonGroup-functions","title":"Functions","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PullDownButtonGroup.get_cache_data","title":"<code>get_cache_data()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def get_cache_data(self):\n    cache_dict = self.__dict__.copy()\n    if hasattr(self, TYPE_ID_KEY):\n        cache_dict[TYPE_ID_KEY] = getattr(self, TYPE_ID_KEY)\n    return cache_dict\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PullDownButtonGroup.load_cache_data","title":"<code>load_cache_data(cache_dict)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def load_cache_data(self, cache_dict):\n    for k, v in cache_dict.items():\n        self.__dict__[k] = v\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PullDownButtonGroup.matches","title":"<code>matches(component_path)</code>  <code>classmethod</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>@classmethod\ndef matches(cls, component_path):\n    return component_path.lower().endswith(cls.type_id)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PullDownButtonGroup.make_unique_name","title":"<code>make_unique_name(cmp_path)</code>  <code>classmethod</code>","text":"<p>Creates a unique name for the command.</p> <p>This is used to uniquely identify this command and also to create the class in pyRevit dll assembly. Current method create a unique name based on the command full directory address.</p> <p>Examples:</p> <p>for 'pyRevit.extension/pyRevit.tab/Edit.panel/Flip doors.pushbutton' unique name would be: 'pyrevit-pyrevit-edit-flipdoors'.</p> Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>@classmethod\ndef make_unique_name(cls, cmp_path):\n    \"\"\"Creates a unique name for the command.\n\n    This is used to uniquely identify this command\n    and also to create the class in pyRevit dll assembly.\n    Current method create a unique name based on the command\n    full directory address.\n\n    Examples:\n        for 'pyRevit.extension/pyRevit.tab/Edit.panel/Flip doors.pushbutton'\n        unique name would be: 'pyrevit-pyrevit-edit-flipdoors'.\n    \"\"\"\n    pieces = []\n    inside_ext = False\n    for dname in cmp_path.split(op.sep):\n        if exts.ExtensionTypes.UI_EXTENSION.POSTFIX in dname:\n            inside_ext = True\n\n        name, ext = op.splitext(dname)\n        if ext != '' and inside_ext:\n            pieces.append(name)\n        else:\n            continue\n    return coreutils.cleanup_string(\n        exts.UNIQUE_ID_SEPARATOR.join(pieces),\n        skip=[exts.UNIQUE_ID_SEPARATOR]\n        ).lower()\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PullDownButtonGroup.get_full_bundle_name","title":"<code>get_full_bundle_name()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def get_full_bundle_name(self):\n    return self.name + self.type_id\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PullDownButtonGroup.has_module_path","title":"<code>has_module_path(path)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def has_module_path(self, path):\n    return path in self.module_paths\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PullDownButtonGroup.add_module_path","title":"<code>add_module_path(path)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def add_module_path(self, path):\n    if path and not self.has_module_path(path):\n        mlogger.debug('Appending syspath: %s to %s', path, self)\n        for component in self.components:\n            component.add_module_path(path)\n        self.module_paths.append(path)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PullDownButtonGroup.remove_module_path","title":"<code>remove_module_path(path)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def remove_module_path(self, path):\n    if path and self.has_module_path(path):\n        mlogger.debug('Removing syspath: %s from %s', path, self)\n        for component in self.components:\n            component.remove_module_path(path)\n        return self.module_paths.remove(path)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PullDownButtonGroup.get_bundle_file","title":"<code>get_bundle_file(file_name)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def get_bundle_file(self, file_name):\n    if self.directory and file_name:\n        file_addr = op.join(self.directory, file_name)\n        return file_addr if op.exists(file_addr) else None\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PullDownButtonGroup.find_bundle_file","title":"<code>find_bundle_file(patterns, finder='postfix')</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def find_bundle_file(self, patterns, finder='postfix'):\n    if self.directory:\n        for bundle_file in os.listdir(self.directory):\n            if 'name' == finder:\n                for file_name in patterns:\n                    if op.splitext(bundle_file)[0] == file_name:\n                        return op.join(self.directory, bundle_file)\n            elif 'postfix' == finder:\n                for file_postfix in patterns:\n                    if bundle_file.endswith(file_postfix):\n                        return op.join(self.directory, bundle_file)\n            elif 'regex' == finder:\n                for regex_pattern in patterns:\n                    if re.match(regex_pattern, bundle_file):\n                        return op.join(self.directory, bundle_file)\n    return None\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PullDownButtonGroup.find_bundle_module","title":"<code>find_bundle_module(module, by_host=False)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def find_bundle_module(self, module, by_host=False):\n    # test of file_name is an actually path to a file\n    if op.isfile(module):\n        return module\n\n    def build_assm_filename(module_filename):\n        # build assembly by host version (assm_file_2020.ext)\n        assm_name, assm_ext = op.splitext(module_filename)\n        return assm_name + '_' + HOST_APP.version + assm_ext\n\n    if by_host:\n        module = build_assm_filename(module)\n\n    # test if module is inside search paths\n    for module_path in self.module_paths:\n        possible_module_path = op.join(module_path, module)\n        if op.isfile(possible_module_path):\n            return possible_module_path\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PullDownButtonGroup.configure","title":"<code>configure(config_dict)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def configure(self, config_dict):\n    # update self meta\n    GenericUIComponent.configure(self, config_dict=config_dict)\n    # create an updated dict to pass to children\n    updated_dict = copy.deepcopy(config_dict)\n    updated_dict = pyutils.merge(updated_dict, self.meta)\n    # replace the meta values with the expanded values\n    # so children can use the expanded\n    updated_dict[exts.MDATA_UI_TITLE] = self.ui_title\n    updated_dict[exts.MDATA_TOOLTIP] = self.tooltip\n    updated_dict[exts.MDATA_COMMAND_HELP_URL] = self.help_url\n    updated_dict[exts.AUTHOR_PARAM] = self.author\n    if exts.AUTHORS_PARAM in updated_dict:\n        updated_dict.pop(exts.AUTHORS_PARAM)\n    for component in self:\n        component.configure(updated_dict)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PullDownButtonGroup.parse_layout_directive","title":"<code>parse_layout_directive(layout_line)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def parse_layout_directive(self, layout_line):\n    parts = re.findall(r'(.+)\\[(.+):(.*)\\]', layout_line)\n    if parts:\n        source_item, directive, target_value = parts[0]\n        # cleanup values\n        directive = directive.lower().strip()\n        target_value = target_value.strip()\n        # process any escape characters in target value\n        # https://stackoverflow.com/a/4020824/2350244\n        target_value = target_value.encode('utf-8')\n        if PY3:\n            target_value = target_value.decode('unicode_escape')\n        else:\n            target_value = target_value.decode('string_escape')\n        # create directive obj\n        return source_item, LayoutDirective(directive_type=directive,\n                                            target=target_value)\n    return layout_line, None\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PullDownButtonGroup.parse_layout_item","title":"<code>parse_layout_item(layout_line)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def parse_layout_item(self, layout_line):\n    if layout_line:\n        layout_item_name, layout_item_drctv = \\\n            self.parse_layout_directive(layout_line)\n        return LayoutItem(name=layout_item_name,\n                          directive=layout_item_drctv)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PullDownButtonGroup.parse_layout_items","title":"<code>parse_layout_items(layout_lines)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def parse_layout_items(self, layout_lines):\n    for layout_line in layout_lines:\n        layout_item = self.parse_layout_item(layout_line)\n        if layout_item:\n            self.layout_items.append(layout_item)\n    mlogger.debug('Layout is: %s', self.layout_items)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PullDownButtonGroup.parse_layout_metadata","title":"<code>parse_layout_metadata()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def parse_layout_metadata(self):\n    layout = self.meta.get(exts.MDATA_LAYOUT, [])\n    if layout:\n        self.parse_layout_items(layout)\n        return True\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PullDownButtonGroup.contains","title":"<code>contains(item_name)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def contains(self, item_name):\n    return any([x.name == item_name for x in self.components])\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PullDownButtonGroup.add_component","title":"<code>add_component(comp)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def add_component(self, comp):\n    # set search paths\n    for path in self.module_paths:\n        comp.add_module_path(path)\n    # set its own control id on the child component\n    if hasattr(comp, 'parent_ctrl_id'):\n        comp.parent_ctrl_id = self.control_id\n    # now add to list\n    self.components.append(comp)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PullDownButtonGroup.find_components_of_type","title":"<code>find_components_of_type(cmp_type)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def find_components_of_type(self, cmp_type):\n    sub_comp_list = []\n    for sub_comp in self.components:\n        if isinstance(sub_comp, cmp_type):\n            sub_comp_list.append(sub_comp)\n        elif sub_comp.is_container:\n            sub_comp_list.extend(sub_comp.find_components_of_type(cmp_type))\n\n    return sub_comp_list\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PullDownButtonGroup.find_layout_items","title":"<code>find_layout_items()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def find_layout_items(self):\n    layout_items = []\n    layout_items.extend(self.layout_items)\n    for sub_comp in self.components:\n        if sub_comp.is_container:\n            layout_items.extend(sub_comp.find_layout_items())\n    return layout_items\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.PullDownButtonGroup.has_commands","title":"<code>has_commands()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/components.py</code> <pre><code>def has_commands(self):\n    for component in self:\n        if isinstance(component, GenericUICommand):\n            return True\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitPushButtonGroup","title":"<code>SplitPushButtonGroup(cmp_path=None)</code>","text":"<p>               Bases: <code>GenericUICommandGroup</code></p> <p>Split push button group.</p> Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def __init__(self, cmp_path=None):\n    self.layout_items = []\n    self.components = []\n    # using classname otherwise exceptions in superclasses won't show\n    GenericUIComponent.__init__(self, cmp_path=cmp_path)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitPushButtonGroup-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitPushButtonGroup.name","title":"<code>name = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitPushButtonGroup.is_container","title":"<code>is_container</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitPushButtonGroup.directory","title":"<code>directory = cmp_path</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitPushButtonGroup.unique_name","title":"<code>unique_name = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitPushButtonGroup.parent_ctrl_id","title":"<code>parent_ctrl_id = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitPushButtonGroup.icon_file","title":"<code>icon_file = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitPushButtonGroup.author","title":"<code>author = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitPushButtonGroup.media_file","title":"<code>media_file = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitPushButtonGroup.min_revit_ver","title":"<code>min_revit_ver = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitPushButtonGroup.max_revit_ver","title":"<code>max_revit_ver = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitPushButtonGroup.is_beta","title":"<code>is_beta = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitPushButtonGroup.highlight_type","title":"<code>highlight_type = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitPushButtonGroup.collapsed","title":"<code>collapsed = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitPushButtonGroup.version","title":"<code>version = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitPushButtonGroup.meta","title":"<code>meta = {}</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitPushButtonGroup.meta_file","title":"<code>meta_file = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitPushButtonGroup.modules","title":"<code>modules = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitPushButtonGroup.module_paths","title":"<code>module_paths = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitPushButtonGroup.binary_path","title":"<code>binary_path = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitPushButtonGroup.library_path","title":"<code>library_path = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitPushButtonGroup.control_id","title":"<code>control_id</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitPushButtonGroup.ui_title","title":"<code>ui_title</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitPushButtonGroup.tooltip","title":"<code>tooltip</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitPushButtonGroup.help_url","title":"<code>help_url</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitPushButtonGroup.is_supported","title":"<code>is_supported</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitPushButtonGroup.allowed_sub_cmps","title":"<code>allowed_sub_cmps = [GenericUICommand, NoScriptButton]</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitPushButtonGroup.layout_items","title":"<code>layout_items = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitPushButtonGroup.components","title":"<code>components = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitPushButtonGroup.type_id","title":"<code>type_id = exts.SPLITPUSH_BUTTON_POSTFIX</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitPushButtonGroup-functions","title":"Functions","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitPushButtonGroup.get_cache_data","title":"<code>get_cache_data()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def get_cache_data(self):\n    cache_dict = self.__dict__.copy()\n    if hasattr(self, TYPE_ID_KEY):\n        cache_dict[TYPE_ID_KEY] = getattr(self, TYPE_ID_KEY)\n    return cache_dict\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitPushButtonGroup.load_cache_data","title":"<code>load_cache_data(cache_dict)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def load_cache_data(self, cache_dict):\n    for k, v in cache_dict.items():\n        self.__dict__[k] = v\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitPushButtonGroup.matches","title":"<code>matches(component_path)</code>  <code>classmethod</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>@classmethod\ndef matches(cls, component_path):\n    return component_path.lower().endswith(cls.type_id)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitPushButtonGroup.make_unique_name","title":"<code>make_unique_name(cmp_path)</code>  <code>classmethod</code>","text":"<p>Creates a unique name for the command.</p> <p>This is used to uniquely identify this command and also to create the class in pyRevit dll assembly. Current method create a unique name based on the command full directory address.</p> <p>Examples:</p> <p>for 'pyRevit.extension/pyRevit.tab/Edit.panel/Flip doors.pushbutton' unique name would be: 'pyrevit-pyrevit-edit-flipdoors'.</p> Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>@classmethod\ndef make_unique_name(cls, cmp_path):\n    \"\"\"Creates a unique name for the command.\n\n    This is used to uniquely identify this command\n    and also to create the class in pyRevit dll assembly.\n    Current method create a unique name based on the command\n    full directory address.\n\n    Examples:\n        for 'pyRevit.extension/pyRevit.tab/Edit.panel/Flip doors.pushbutton'\n        unique name would be: 'pyrevit-pyrevit-edit-flipdoors'.\n    \"\"\"\n    pieces = []\n    inside_ext = False\n    for dname in cmp_path.split(op.sep):\n        if exts.ExtensionTypes.UI_EXTENSION.POSTFIX in dname:\n            inside_ext = True\n\n        name, ext = op.splitext(dname)\n        if ext != '' and inside_ext:\n            pieces.append(name)\n        else:\n            continue\n    return coreutils.cleanup_string(\n        exts.UNIQUE_ID_SEPARATOR.join(pieces),\n        skip=[exts.UNIQUE_ID_SEPARATOR]\n        ).lower()\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitPushButtonGroup.get_full_bundle_name","title":"<code>get_full_bundle_name()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def get_full_bundle_name(self):\n    return self.name + self.type_id\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitPushButtonGroup.has_module_path","title":"<code>has_module_path(path)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def has_module_path(self, path):\n    return path in self.module_paths\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitPushButtonGroup.add_module_path","title":"<code>add_module_path(path)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def add_module_path(self, path):\n    if path and not self.has_module_path(path):\n        mlogger.debug('Appending syspath: %s to %s', path, self)\n        for component in self.components:\n            component.add_module_path(path)\n        self.module_paths.append(path)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitPushButtonGroup.remove_module_path","title":"<code>remove_module_path(path)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def remove_module_path(self, path):\n    if path and self.has_module_path(path):\n        mlogger.debug('Removing syspath: %s from %s', path, self)\n        for component in self.components:\n            component.remove_module_path(path)\n        return self.module_paths.remove(path)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitPushButtonGroup.get_bundle_file","title":"<code>get_bundle_file(file_name)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def get_bundle_file(self, file_name):\n    if self.directory and file_name:\n        file_addr = op.join(self.directory, file_name)\n        return file_addr if op.exists(file_addr) else None\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitPushButtonGroup.find_bundle_file","title":"<code>find_bundle_file(patterns, finder='postfix')</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def find_bundle_file(self, patterns, finder='postfix'):\n    if self.directory:\n        for bundle_file in os.listdir(self.directory):\n            if 'name' == finder:\n                for file_name in patterns:\n                    if op.splitext(bundle_file)[0] == file_name:\n                        return op.join(self.directory, bundle_file)\n            elif 'postfix' == finder:\n                for file_postfix in patterns:\n                    if bundle_file.endswith(file_postfix):\n                        return op.join(self.directory, bundle_file)\n            elif 'regex' == finder:\n                for regex_pattern in patterns:\n                    if re.match(regex_pattern, bundle_file):\n                        return op.join(self.directory, bundle_file)\n    return None\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitPushButtonGroup.find_bundle_module","title":"<code>find_bundle_module(module, by_host=False)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def find_bundle_module(self, module, by_host=False):\n    # test of file_name is an actually path to a file\n    if op.isfile(module):\n        return module\n\n    def build_assm_filename(module_filename):\n        # build assembly by host version (assm_file_2020.ext)\n        assm_name, assm_ext = op.splitext(module_filename)\n        return assm_name + '_' + HOST_APP.version + assm_ext\n\n    if by_host:\n        module = build_assm_filename(module)\n\n    # test if module is inside search paths\n    for module_path in self.module_paths:\n        possible_module_path = op.join(module_path, module)\n        if op.isfile(possible_module_path):\n            return possible_module_path\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitPushButtonGroup.configure","title":"<code>configure(config_dict)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def configure(self, config_dict):\n    # update self meta\n    GenericUIComponent.configure(self, config_dict=config_dict)\n    # create an updated dict to pass to children\n    updated_dict = copy.deepcopy(config_dict)\n    updated_dict = pyutils.merge(updated_dict, self.meta)\n    # replace the meta values with the expanded values\n    # so children can use the expanded\n    updated_dict[exts.MDATA_UI_TITLE] = self.ui_title\n    updated_dict[exts.MDATA_TOOLTIP] = self.tooltip\n    updated_dict[exts.MDATA_COMMAND_HELP_URL] = self.help_url\n    updated_dict[exts.AUTHOR_PARAM] = self.author\n    if exts.AUTHORS_PARAM in updated_dict:\n        updated_dict.pop(exts.AUTHORS_PARAM)\n    for component in self:\n        component.configure(updated_dict)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitPushButtonGroup.parse_layout_directive","title":"<code>parse_layout_directive(layout_line)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def parse_layout_directive(self, layout_line):\n    parts = re.findall(r'(.+)\\[(.+):(.*)\\]', layout_line)\n    if parts:\n        source_item, directive, target_value = parts[0]\n        # cleanup values\n        directive = directive.lower().strip()\n        target_value = target_value.strip()\n        # process any escape characters in target value\n        # https://stackoverflow.com/a/4020824/2350244\n        target_value = target_value.encode('utf-8')\n        if PY3:\n            target_value = target_value.decode('unicode_escape')\n        else:\n            target_value = target_value.decode('string_escape')\n        # create directive obj\n        return source_item, LayoutDirective(directive_type=directive,\n                                            target=target_value)\n    return layout_line, None\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitPushButtonGroup.parse_layout_item","title":"<code>parse_layout_item(layout_line)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def parse_layout_item(self, layout_line):\n    if layout_line:\n        layout_item_name, layout_item_drctv = \\\n            self.parse_layout_directive(layout_line)\n        return LayoutItem(name=layout_item_name,\n                          directive=layout_item_drctv)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitPushButtonGroup.parse_layout_items","title":"<code>parse_layout_items(layout_lines)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def parse_layout_items(self, layout_lines):\n    for layout_line in layout_lines:\n        layout_item = self.parse_layout_item(layout_line)\n        if layout_item:\n            self.layout_items.append(layout_item)\n    mlogger.debug('Layout is: %s', self.layout_items)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitPushButtonGroup.parse_layout_metadata","title":"<code>parse_layout_metadata()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def parse_layout_metadata(self):\n    layout = self.meta.get(exts.MDATA_LAYOUT, [])\n    if layout:\n        self.parse_layout_items(layout)\n        return True\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitPushButtonGroup.contains","title":"<code>contains(item_name)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def contains(self, item_name):\n    return any([x.name == item_name for x in self.components])\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitPushButtonGroup.add_component","title":"<code>add_component(comp)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def add_component(self, comp):\n    # set search paths\n    for path in self.module_paths:\n        comp.add_module_path(path)\n    # set its own control id on the child component\n    if hasattr(comp, 'parent_ctrl_id'):\n        comp.parent_ctrl_id = self.control_id\n    # now add to list\n    self.components.append(comp)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitPushButtonGroup.find_components_of_type","title":"<code>find_components_of_type(cmp_type)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def find_components_of_type(self, cmp_type):\n    sub_comp_list = []\n    for sub_comp in self.components:\n        if isinstance(sub_comp, cmp_type):\n            sub_comp_list.append(sub_comp)\n        elif sub_comp.is_container:\n            sub_comp_list.extend(sub_comp.find_components_of_type(cmp_type))\n\n    return sub_comp_list\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitPushButtonGroup.find_layout_items","title":"<code>find_layout_items()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def find_layout_items(self):\n    layout_items = []\n    layout_items.extend(self.layout_items)\n    for sub_comp in self.components:\n        if sub_comp.is_container:\n            layout_items.extend(sub_comp.find_layout_items())\n    return layout_items\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitPushButtonGroup.has_commands","title":"<code>has_commands()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/components.py</code> <pre><code>def has_commands(self):\n    for component in self:\n        if isinstance(component, GenericUICommand):\n            return True\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitButtonGroup","title":"<code>SplitButtonGroup(cmp_path=None)</code>","text":"<p>               Bases: <code>GenericUICommandGroup</code></p> <p>Split button group.</p> Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def __init__(self, cmp_path=None):\n    self.layout_items = []\n    self.components = []\n    # using classname otherwise exceptions in superclasses won't show\n    GenericUIComponent.__init__(self, cmp_path=cmp_path)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitButtonGroup-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitButtonGroup.name","title":"<code>name = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitButtonGroup.is_container","title":"<code>is_container</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitButtonGroup.directory","title":"<code>directory = cmp_path</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitButtonGroup.unique_name","title":"<code>unique_name = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitButtonGroup.parent_ctrl_id","title":"<code>parent_ctrl_id = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitButtonGroup.icon_file","title":"<code>icon_file = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitButtonGroup.author","title":"<code>author = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitButtonGroup.media_file","title":"<code>media_file = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitButtonGroup.min_revit_ver","title":"<code>min_revit_ver = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitButtonGroup.max_revit_ver","title":"<code>max_revit_ver = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitButtonGroup.is_beta","title":"<code>is_beta = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitButtonGroup.highlight_type","title":"<code>highlight_type = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitButtonGroup.collapsed","title":"<code>collapsed = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitButtonGroup.version","title":"<code>version = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitButtonGroup.meta","title":"<code>meta = {}</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitButtonGroup.meta_file","title":"<code>meta_file = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitButtonGroup.modules","title":"<code>modules = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitButtonGroup.module_paths","title":"<code>module_paths = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitButtonGroup.binary_path","title":"<code>binary_path = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitButtonGroup.library_path","title":"<code>library_path = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitButtonGroup.control_id","title":"<code>control_id</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitButtonGroup.ui_title","title":"<code>ui_title</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitButtonGroup.tooltip","title":"<code>tooltip</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitButtonGroup.help_url","title":"<code>help_url</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitButtonGroup.is_supported","title":"<code>is_supported</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitButtonGroup.allowed_sub_cmps","title":"<code>allowed_sub_cmps = [GenericUICommand, NoScriptButton]</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitButtonGroup.layout_items","title":"<code>layout_items = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitButtonGroup.components","title":"<code>components = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitButtonGroup.type_id","title":"<code>type_id = exts.SPLIT_BUTTON_POSTFIX</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitButtonGroup-functions","title":"Functions","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitButtonGroup.get_cache_data","title":"<code>get_cache_data()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def get_cache_data(self):\n    cache_dict = self.__dict__.copy()\n    if hasattr(self, TYPE_ID_KEY):\n        cache_dict[TYPE_ID_KEY] = getattr(self, TYPE_ID_KEY)\n    return cache_dict\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitButtonGroup.load_cache_data","title":"<code>load_cache_data(cache_dict)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def load_cache_data(self, cache_dict):\n    for k, v in cache_dict.items():\n        self.__dict__[k] = v\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitButtonGroup.matches","title":"<code>matches(component_path)</code>  <code>classmethod</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>@classmethod\ndef matches(cls, component_path):\n    return component_path.lower().endswith(cls.type_id)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitButtonGroup.make_unique_name","title":"<code>make_unique_name(cmp_path)</code>  <code>classmethod</code>","text":"<p>Creates a unique name for the command.</p> <p>This is used to uniquely identify this command and also to create the class in pyRevit dll assembly. Current method create a unique name based on the command full directory address.</p> <p>Examples:</p> <p>for 'pyRevit.extension/pyRevit.tab/Edit.panel/Flip doors.pushbutton' unique name would be: 'pyrevit-pyrevit-edit-flipdoors'.</p> Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>@classmethod\ndef make_unique_name(cls, cmp_path):\n    \"\"\"Creates a unique name for the command.\n\n    This is used to uniquely identify this command\n    and also to create the class in pyRevit dll assembly.\n    Current method create a unique name based on the command\n    full directory address.\n\n    Examples:\n        for 'pyRevit.extension/pyRevit.tab/Edit.panel/Flip doors.pushbutton'\n        unique name would be: 'pyrevit-pyrevit-edit-flipdoors'.\n    \"\"\"\n    pieces = []\n    inside_ext = False\n    for dname in cmp_path.split(op.sep):\n        if exts.ExtensionTypes.UI_EXTENSION.POSTFIX in dname:\n            inside_ext = True\n\n        name, ext = op.splitext(dname)\n        if ext != '' and inside_ext:\n            pieces.append(name)\n        else:\n            continue\n    return coreutils.cleanup_string(\n        exts.UNIQUE_ID_SEPARATOR.join(pieces),\n        skip=[exts.UNIQUE_ID_SEPARATOR]\n        ).lower()\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitButtonGroup.get_full_bundle_name","title":"<code>get_full_bundle_name()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def get_full_bundle_name(self):\n    return self.name + self.type_id\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitButtonGroup.has_module_path","title":"<code>has_module_path(path)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def has_module_path(self, path):\n    return path in self.module_paths\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitButtonGroup.add_module_path","title":"<code>add_module_path(path)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def add_module_path(self, path):\n    if path and not self.has_module_path(path):\n        mlogger.debug('Appending syspath: %s to %s', path, self)\n        for component in self.components:\n            component.add_module_path(path)\n        self.module_paths.append(path)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitButtonGroup.remove_module_path","title":"<code>remove_module_path(path)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def remove_module_path(self, path):\n    if path and self.has_module_path(path):\n        mlogger.debug('Removing syspath: %s from %s', path, self)\n        for component in self.components:\n            component.remove_module_path(path)\n        return self.module_paths.remove(path)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitButtonGroup.get_bundle_file","title":"<code>get_bundle_file(file_name)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def get_bundle_file(self, file_name):\n    if self.directory and file_name:\n        file_addr = op.join(self.directory, file_name)\n        return file_addr if op.exists(file_addr) else None\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitButtonGroup.find_bundle_file","title":"<code>find_bundle_file(patterns, finder='postfix')</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def find_bundle_file(self, patterns, finder='postfix'):\n    if self.directory:\n        for bundle_file in os.listdir(self.directory):\n            if 'name' == finder:\n                for file_name in patterns:\n                    if op.splitext(bundle_file)[0] == file_name:\n                        return op.join(self.directory, bundle_file)\n            elif 'postfix' == finder:\n                for file_postfix in patterns:\n                    if bundle_file.endswith(file_postfix):\n                        return op.join(self.directory, bundle_file)\n            elif 'regex' == finder:\n                for regex_pattern in patterns:\n                    if re.match(regex_pattern, bundle_file):\n                        return op.join(self.directory, bundle_file)\n    return None\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitButtonGroup.find_bundle_module","title":"<code>find_bundle_module(module, by_host=False)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def find_bundle_module(self, module, by_host=False):\n    # test of file_name is an actually path to a file\n    if op.isfile(module):\n        return module\n\n    def build_assm_filename(module_filename):\n        # build assembly by host version (assm_file_2020.ext)\n        assm_name, assm_ext = op.splitext(module_filename)\n        return assm_name + '_' + HOST_APP.version + assm_ext\n\n    if by_host:\n        module = build_assm_filename(module)\n\n    # test if module is inside search paths\n    for module_path in self.module_paths:\n        possible_module_path = op.join(module_path, module)\n        if op.isfile(possible_module_path):\n            return possible_module_path\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitButtonGroup.configure","title":"<code>configure(config_dict)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def configure(self, config_dict):\n    # update self meta\n    GenericUIComponent.configure(self, config_dict=config_dict)\n    # create an updated dict to pass to children\n    updated_dict = copy.deepcopy(config_dict)\n    updated_dict = pyutils.merge(updated_dict, self.meta)\n    # replace the meta values with the expanded values\n    # so children can use the expanded\n    updated_dict[exts.MDATA_UI_TITLE] = self.ui_title\n    updated_dict[exts.MDATA_TOOLTIP] = self.tooltip\n    updated_dict[exts.MDATA_COMMAND_HELP_URL] = self.help_url\n    updated_dict[exts.AUTHOR_PARAM] = self.author\n    if exts.AUTHORS_PARAM in updated_dict:\n        updated_dict.pop(exts.AUTHORS_PARAM)\n    for component in self:\n        component.configure(updated_dict)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitButtonGroup.parse_layout_directive","title":"<code>parse_layout_directive(layout_line)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def parse_layout_directive(self, layout_line):\n    parts = re.findall(r'(.+)\\[(.+):(.*)\\]', layout_line)\n    if parts:\n        source_item, directive, target_value = parts[0]\n        # cleanup values\n        directive = directive.lower().strip()\n        target_value = target_value.strip()\n        # process any escape characters in target value\n        # https://stackoverflow.com/a/4020824/2350244\n        target_value = target_value.encode('utf-8')\n        if PY3:\n            target_value = target_value.decode('unicode_escape')\n        else:\n            target_value = target_value.decode('string_escape')\n        # create directive obj\n        return source_item, LayoutDirective(directive_type=directive,\n                                            target=target_value)\n    return layout_line, None\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitButtonGroup.parse_layout_item","title":"<code>parse_layout_item(layout_line)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def parse_layout_item(self, layout_line):\n    if layout_line:\n        layout_item_name, layout_item_drctv = \\\n            self.parse_layout_directive(layout_line)\n        return LayoutItem(name=layout_item_name,\n                          directive=layout_item_drctv)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitButtonGroup.parse_layout_items","title":"<code>parse_layout_items(layout_lines)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def parse_layout_items(self, layout_lines):\n    for layout_line in layout_lines:\n        layout_item = self.parse_layout_item(layout_line)\n        if layout_item:\n            self.layout_items.append(layout_item)\n    mlogger.debug('Layout is: %s', self.layout_items)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitButtonGroup.parse_layout_metadata","title":"<code>parse_layout_metadata()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def parse_layout_metadata(self):\n    layout = self.meta.get(exts.MDATA_LAYOUT, [])\n    if layout:\n        self.parse_layout_items(layout)\n        return True\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitButtonGroup.contains","title":"<code>contains(item_name)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def contains(self, item_name):\n    return any([x.name == item_name for x in self.components])\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitButtonGroup.add_component","title":"<code>add_component(comp)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def add_component(self, comp):\n    # set search paths\n    for path in self.module_paths:\n        comp.add_module_path(path)\n    # set its own control id on the child component\n    if hasattr(comp, 'parent_ctrl_id'):\n        comp.parent_ctrl_id = self.control_id\n    # now add to list\n    self.components.append(comp)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitButtonGroup.find_components_of_type","title":"<code>find_components_of_type(cmp_type)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def find_components_of_type(self, cmp_type):\n    sub_comp_list = []\n    for sub_comp in self.components:\n        if isinstance(sub_comp, cmp_type):\n            sub_comp_list.append(sub_comp)\n        elif sub_comp.is_container:\n            sub_comp_list.extend(sub_comp.find_components_of_type(cmp_type))\n\n    return sub_comp_list\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitButtonGroup.find_layout_items","title":"<code>find_layout_items()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def find_layout_items(self):\n    layout_items = []\n    layout_items.extend(self.layout_items)\n    for sub_comp in self.components:\n        if sub_comp.is_container:\n            layout_items.extend(sub_comp.find_layout_items())\n    return layout_items\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.SplitButtonGroup.has_commands","title":"<code>has_commands()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/components.py</code> <pre><code>def has_commands(self):\n    for component in self:\n        if isinstance(component, GenericUICommand):\n            return True\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericStack","title":"<code>GenericStack(cmp_path=None)</code>","text":"<p>               Bases: <code>GenericUIContainer</code></p> <p>Generic UI stack.</p> <p>Stacks include GenericUICommand, or GenericUICommandGroup.</p> Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def __init__(self, cmp_path=None):\n    self.layout_items = []\n    self.components = []\n    # using classname otherwise exceptions in superclasses won't show\n    GenericUIComponent.__init__(self, cmp_path=cmp_path)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericStack-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericStack.name","title":"<code>name = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericStack.is_container","title":"<code>is_container</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericStack.directory","title":"<code>directory = cmp_path</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericStack.unique_name","title":"<code>unique_name = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericStack.parent_ctrl_id","title":"<code>parent_ctrl_id = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericStack.icon_file","title":"<code>icon_file = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericStack.author","title":"<code>author = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericStack.media_file","title":"<code>media_file = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericStack.min_revit_ver","title":"<code>min_revit_ver = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericStack.max_revit_ver","title":"<code>max_revit_ver = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericStack.is_beta","title":"<code>is_beta = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericStack.highlight_type","title":"<code>highlight_type = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericStack.collapsed","title":"<code>collapsed = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericStack.version","title":"<code>version = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericStack.meta","title":"<code>meta = {}</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericStack.meta_file","title":"<code>meta_file = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericStack.modules","title":"<code>modules = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericStack.module_paths","title":"<code>module_paths = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericStack.binary_path","title":"<code>binary_path = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericStack.library_path","title":"<code>library_path = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericStack.ui_title","title":"<code>ui_title</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericStack.tooltip","title":"<code>tooltip</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericStack.help_url","title":"<code>help_url</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericStack.is_supported","title":"<code>is_supported</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericStack.layout_items","title":"<code>layout_items = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericStack.components","title":"<code>components = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericStack.type_id","title":"<code>type_id = exts.STACK_BUTTON_POSTFIX</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericStack.allowed_sub_cmps","title":"<code>allowed_sub_cmps = [GenericUICommandGroup, GenericUICommand, NoScriptButton]</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericStack.control_id","title":"<code>control_id</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericStack-functions","title":"Functions","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericStack.get_cache_data","title":"<code>get_cache_data()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def get_cache_data(self):\n    cache_dict = self.__dict__.copy()\n    if hasattr(self, TYPE_ID_KEY):\n        cache_dict[TYPE_ID_KEY] = getattr(self, TYPE_ID_KEY)\n    return cache_dict\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericStack.load_cache_data","title":"<code>load_cache_data(cache_dict)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def load_cache_data(self, cache_dict):\n    for k, v in cache_dict.items():\n        self.__dict__[k] = v\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericStack.matches","title":"<code>matches(component_path)</code>  <code>classmethod</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>@classmethod\ndef matches(cls, component_path):\n    return component_path.lower().endswith(cls.type_id)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericStack.make_unique_name","title":"<code>make_unique_name(cmp_path)</code>  <code>classmethod</code>","text":"<p>Creates a unique name for the command.</p> <p>This is used to uniquely identify this command and also to create the class in pyRevit dll assembly. Current method create a unique name based on the command full directory address.</p> <p>Examples:</p> <p>for 'pyRevit.extension/pyRevit.tab/Edit.panel/Flip doors.pushbutton' unique name would be: 'pyrevit-pyrevit-edit-flipdoors'.</p> Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>@classmethod\ndef make_unique_name(cls, cmp_path):\n    \"\"\"Creates a unique name for the command.\n\n    This is used to uniquely identify this command\n    and also to create the class in pyRevit dll assembly.\n    Current method create a unique name based on the command\n    full directory address.\n\n    Examples:\n        for 'pyRevit.extension/pyRevit.tab/Edit.panel/Flip doors.pushbutton'\n        unique name would be: 'pyrevit-pyrevit-edit-flipdoors'.\n    \"\"\"\n    pieces = []\n    inside_ext = False\n    for dname in cmp_path.split(op.sep):\n        if exts.ExtensionTypes.UI_EXTENSION.POSTFIX in dname:\n            inside_ext = True\n\n        name, ext = op.splitext(dname)\n        if ext != '' and inside_ext:\n            pieces.append(name)\n        else:\n            continue\n    return coreutils.cleanup_string(\n        exts.UNIQUE_ID_SEPARATOR.join(pieces),\n        skip=[exts.UNIQUE_ID_SEPARATOR]\n        ).lower()\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericStack.get_full_bundle_name","title":"<code>get_full_bundle_name()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def get_full_bundle_name(self):\n    return self.name + self.type_id\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericStack.has_module_path","title":"<code>has_module_path(path)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def has_module_path(self, path):\n    return path in self.module_paths\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericStack.add_module_path","title":"<code>add_module_path(path)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def add_module_path(self, path):\n    if path and not self.has_module_path(path):\n        mlogger.debug('Appending syspath: %s to %s', path, self)\n        for component in self.components:\n            component.add_module_path(path)\n        self.module_paths.append(path)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericStack.remove_module_path","title":"<code>remove_module_path(path)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def remove_module_path(self, path):\n    if path and self.has_module_path(path):\n        mlogger.debug('Removing syspath: %s from %s', path, self)\n        for component in self.components:\n            component.remove_module_path(path)\n        return self.module_paths.remove(path)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericStack.get_bundle_file","title":"<code>get_bundle_file(file_name)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def get_bundle_file(self, file_name):\n    if self.directory and file_name:\n        file_addr = op.join(self.directory, file_name)\n        return file_addr if op.exists(file_addr) else None\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericStack.find_bundle_file","title":"<code>find_bundle_file(patterns, finder='postfix')</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def find_bundle_file(self, patterns, finder='postfix'):\n    if self.directory:\n        for bundle_file in os.listdir(self.directory):\n            if 'name' == finder:\n                for file_name in patterns:\n                    if op.splitext(bundle_file)[0] == file_name:\n                        return op.join(self.directory, bundle_file)\n            elif 'postfix' == finder:\n                for file_postfix in patterns:\n                    if bundle_file.endswith(file_postfix):\n                        return op.join(self.directory, bundle_file)\n            elif 'regex' == finder:\n                for regex_pattern in patterns:\n                    if re.match(regex_pattern, bundle_file):\n                        return op.join(self.directory, bundle_file)\n    return None\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericStack.find_bundle_module","title":"<code>find_bundle_module(module, by_host=False)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def find_bundle_module(self, module, by_host=False):\n    # test of file_name is an actually path to a file\n    if op.isfile(module):\n        return module\n\n    def build_assm_filename(module_filename):\n        # build assembly by host version (assm_file_2020.ext)\n        assm_name, assm_ext = op.splitext(module_filename)\n        return assm_name + '_' + HOST_APP.version + assm_ext\n\n    if by_host:\n        module = build_assm_filename(module)\n\n    # test if module is inside search paths\n    for module_path in self.module_paths:\n        possible_module_path = op.join(module_path, module)\n        if op.isfile(possible_module_path):\n            return possible_module_path\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericStack.configure","title":"<code>configure(config_dict)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def configure(self, config_dict):\n    # update self meta\n    GenericUIComponent.configure(self, config_dict=config_dict)\n    # create an updated dict to pass to children\n    updated_dict = copy.deepcopy(config_dict)\n    updated_dict = pyutils.merge(updated_dict, self.meta)\n    # replace the meta values with the expanded values\n    # so children can use the expanded\n    updated_dict[exts.MDATA_UI_TITLE] = self.ui_title\n    updated_dict[exts.MDATA_TOOLTIP] = self.tooltip\n    updated_dict[exts.MDATA_COMMAND_HELP_URL] = self.help_url\n    updated_dict[exts.AUTHOR_PARAM] = self.author\n    if exts.AUTHORS_PARAM in updated_dict:\n        updated_dict.pop(exts.AUTHORS_PARAM)\n    for component in self:\n        component.configure(updated_dict)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericStack.parse_layout_directive","title":"<code>parse_layout_directive(layout_line)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def parse_layout_directive(self, layout_line):\n    parts = re.findall(r'(.+)\\[(.+):(.*)\\]', layout_line)\n    if parts:\n        source_item, directive, target_value = parts[0]\n        # cleanup values\n        directive = directive.lower().strip()\n        target_value = target_value.strip()\n        # process any escape characters in target value\n        # https://stackoverflow.com/a/4020824/2350244\n        target_value = target_value.encode('utf-8')\n        if PY3:\n            target_value = target_value.decode('unicode_escape')\n        else:\n            target_value = target_value.decode('string_escape')\n        # create directive obj\n        return source_item, LayoutDirective(directive_type=directive,\n                                            target=target_value)\n    return layout_line, None\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericStack.parse_layout_item","title":"<code>parse_layout_item(layout_line)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def parse_layout_item(self, layout_line):\n    if layout_line:\n        layout_item_name, layout_item_drctv = \\\n            self.parse_layout_directive(layout_line)\n        return LayoutItem(name=layout_item_name,\n                          directive=layout_item_drctv)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericStack.parse_layout_items","title":"<code>parse_layout_items(layout_lines)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def parse_layout_items(self, layout_lines):\n    for layout_line in layout_lines:\n        layout_item = self.parse_layout_item(layout_line)\n        if layout_item:\n            self.layout_items.append(layout_item)\n    mlogger.debug('Layout is: %s', self.layout_items)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericStack.parse_layout_metadata","title":"<code>parse_layout_metadata()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def parse_layout_metadata(self):\n    layout = self.meta.get(exts.MDATA_LAYOUT, [])\n    if layout:\n        self.parse_layout_items(layout)\n        return True\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericStack.contains","title":"<code>contains(item_name)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def contains(self, item_name):\n    return any([x.name == item_name for x in self.components])\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericStack.add_component","title":"<code>add_component(comp)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def add_component(self, comp):\n    # set search paths\n    for path in self.module_paths:\n        comp.add_module_path(path)\n    # set its own control id on the child component\n    if hasattr(comp, 'parent_ctrl_id'):\n        comp.parent_ctrl_id = self.control_id\n    # now add to list\n    self.components.append(comp)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericStack.find_components_of_type","title":"<code>find_components_of_type(cmp_type)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def find_components_of_type(self, cmp_type):\n    sub_comp_list = []\n    for sub_comp in self.components:\n        if isinstance(sub_comp, cmp_type):\n            sub_comp_list.append(sub_comp)\n        elif sub_comp.is_container:\n            sub_comp_list.extend(sub_comp.find_components_of_type(cmp_type))\n\n    return sub_comp_list\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericStack.find_layout_items","title":"<code>find_layout_items()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def find_layout_items(self):\n    layout_items = []\n    layout_items.extend(self.layout_items)\n    for sub_comp in self.components:\n        if sub_comp.is_container:\n            layout_items.extend(sub_comp.find_layout_items())\n    return layout_items\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.GenericStack.has_commands","title":"<code>has_commands()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/components.py</code> <pre><code>def has_commands(self):\n    for component in self:\n        if not component.is_container:\n            if isinstance(component, GenericUICommand):\n                return True\n        else:\n            if component.has_commands():\n                return True\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.StackButtonGroup","title":"<code>StackButtonGroup(cmp_path=None)</code>","text":"<p>               Bases: <code>GenericStack</code></p> <p>Stack buttons group.</p> Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def __init__(self, cmp_path=None):\n    self.layout_items = []\n    self.components = []\n    # using classname otherwise exceptions in superclasses won't show\n    GenericUIComponent.__init__(self, cmp_path=cmp_path)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.StackButtonGroup-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.StackButtonGroup.name","title":"<code>name = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.StackButtonGroup.is_container","title":"<code>is_container</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.StackButtonGroup.directory","title":"<code>directory = cmp_path</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.StackButtonGroup.unique_name","title":"<code>unique_name = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.StackButtonGroup.parent_ctrl_id","title":"<code>parent_ctrl_id = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.StackButtonGroup.icon_file","title":"<code>icon_file = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.StackButtonGroup.author","title":"<code>author = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.StackButtonGroup.media_file","title":"<code>media_file = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.StackButtonGroup.min_revit_ver","title":"<code>min_revit_ver = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.StackButtonGroup.max_revit_ver","title":"<code>max_revit_ver = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.StackButtonGroup.is_beta","title":"<code>is_beta = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.StackButtonGroup.highlight_type","title":"<code>highlight_type = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.StackButtonGroup.collapsed","title":"<code>collapsed = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.StackButtonGroup.version","title":"<code>version = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.StackButtonGroup.meta","title":"<code>meta = {}</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.StackButtonGroup.meta_file","title":"<code>meta_file = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.StackButtonGroup.modules","title":"<code>modules = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.StackButtonGroup.module_paths","title":"<code>module_paths = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.StackButtonGroup.binary_path","title":"<code>binary_path = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.StackButtonGroup.library_path","title":"<code>library_path = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.StackButtonGroup.control_id","title":"<code>control_id</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.StackButtonGroup.ui_title","title":"<code>ui_title</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.StackButtonGroup.tooltip","title":"<code>tooltip</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.StackButtonGroup.help_url","title":"<code>help_url</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.StackButtonGroup.is_supported","title":"<code>is_supported</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.StackButtonGroup.allowed_sub_cmps","title":"<code>allowed_sub_cmps = [GenericUICommandGroup, GenericUICommand, NoScriptButton]</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.StackButtonGroup.layout_items","title":"<code>layout_items = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.StackButtonGroup.components","title":"<code>components = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.StackButtonGroup.type_id","title":"<code>type_id = exts.STACK_BUTTON_POSTFIX</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.StackButtonGroup-functions","title":"Functions","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.StackButtonGroup.get_cache_data","title":"<code>get_cache_data()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def get_cache_data(self):\n    cache_dict = self.__dict__.copy()\n    if hasattr(self, TYPE_ID_KEY):\n        cache_dict[TYPE_ID_KEY] = getattr(self, TYPE_ID_KEY)\n    return cache_dict\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.StackButtonGroup.load_cache_data","title":"<code>load_cache_data(cache_dict)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def load_cache_data(self, cache_dict):\n    for k, v in cache_dict.items():\n        self.__dict__[k] = v\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.StackButtonGroup.matches","title":"<code>matches(component_path)</code>  <code>classmethod</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>@classmethod\ndef matches(cls, component_path):\n    return component_path.lower().endswith(cls.type_id)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.StackButtonGroup.make_unique_name","title":"<code>make_unique_name(cmp_path)</code>  <code>classmethod</code>","text":"<p>Creates a unique name for the command.</p> <p>This is used to uniquely identify this command and also to create the class in pyRevit dll assembly. Current method create a unique name based on the command full directory address.</p> <p>Examples:</p> <p>for 'pyRevit.extension/pyRevit.tab/Edit.panel/Flip doors.pushbutton' unique name would be: 'pyrevit-pyrevit-edit-flipdoors'.</p> Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>@classmethod\ndef make_unique_name(cls, cmp_path):\n    \"\"\"Creates a unique name for the command.\n\n    This is used to uniquely identify this command\n    and also to create the class in pyRevit dll assembly.\n    Current method create a unique name based on the command\n    full directory address.\n\n    Examples:\n        for 'pyRevit.extension/pyRevit.tab/Edit.panel/Flip doors.pushbutton'\n        unique name would be: 'pyrevit-pyrevit-edit-flipdoors'.\n    \"\"\"\n    pieces = []\n    inside_ext = False\n    for dname in cmp_path.split(op.sep):\n        if exts.ExtensionTypes.UI_EXTENSION.POSTFIX in dname:\n            inside_ext = True\n\n        name, ext = op.splitext(dname)\n        if ext != '' and inside_ext:\n            pieces.append(name)\n        else:\n            continue\n    return coreutils.cleanup_string(\n        exts.UNIQUE_ID_SEPARATOR.join(pieces),\n        skip=[exts.UNIQUE_ID_SEPARATOR]\n        ).lower()\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.StackButtonGroup.get_full_bundle_name","title":"<code>get_full_bundle_name()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def get_full_bundle_name(self):\n    return self.name + self.type_id\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.StackButtonGroup.has_module_path","title":"<code>has_module_path(path)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def has_module_path(self, path):\n    return path in self.module_paths\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.StackButtonGroup.add_module_path","title":"<code>add_module_path(path)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def add_module_path(self, path):\n    if path and not self.has_module_path(path):\n        mlogger.debug('Appending syspath: %s to %s', path, self)\n        for component in self.components:\n            component.add_module_path(path)\n        self.module_paths.append(path)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.StackButtonGroup.remove_module_path","title":"<code>remove_module_path(path)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def remove_module_path(self, path):\n    if path and self.has_module_path(path):\n        mlogger.debug('Removing syspath: %s from %s', path, self)\n        for component in self.components:\n            component.remove_module_path(path)\n        return self.module_paths.remove(path)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.StackButtonGroup.get_bundle_file","title":"<code>get_bundle_file(file_name)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def get_bundle_file(self, file_name):\n    if self.directory and file_name:\n        file_addr = op.join(self.directory, file_name)\n        return file_addr if op.exists(file_addr) else None\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.StackButtonGroup.find_bundle_file","title":"<code>find_bundle_file(patterns, finder='postfix')</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def find_bundle_file(self, patterns, finder='postfix'):\n    if self.directory:\n        for bundle_file in os.listdir(self.directory):\n            if 'name' == finder:\n                for file_name in patterns:\n                    if op.splitext(bundle_file)[0] == file_name:\n                        return op.join(self.directory, bundle_file)\n            elif 'postfix' == finder:\n                for file_postfix in patterns:\n                    if bundle_file.endswith(file_postfix):\n                        return op.join(self.directory, bundle_file)\n            elif 'regex' == finder:\n                for regex_pattern in patterns:\n                    if re.match(regex_pattern, bundle_file):\n                        return op.join(self.directory, bundle_file)\n    return None\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.StackButtonGroup.find_bundle_module","title":"<code>find_bundle_module(module, by_host=False)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def find_bundle_module(self, module, by_host=False):\n    # test of file_name is an actually path to a file\n    if op.isfile(module):\n        return module\n\n    def build_assm_filename(module_filename):\n        # build assembly by host version (assm_file_2020.ext)\n        assm_name, assm_ext = op.splitext(module_filename)\n        return assm_name + '_' + HOST_APP.version + assm_ext\n\n    if by_host:\n        module = build_assm_filename(module)\n\n    # test if module is inside search paths\n    for module_path in self.module_paths:\n        possible_module_path = op.join(module_path, module)\n        if op.isfile(possible_module_path):\n            return possible_module_path\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.StackButtonGroup.configure","title":"<code>configure(config_dict)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def configure(self, config_dict):\n    # update self meta\n    GenericUIComponent.configure(self, config_dict=config_dict)\n    # create an updated dict to pass to children\n    updated_dict = copy.deepcopy(config_dict)\n    updated_dict = pyutils.merge(updated_dict, self.meta)\n    # replace the meta values with the expanded values\n    # so children can use the expanded\n    updated_dict[exts.MDATA_UI_TITLE] = self.ui_title\n    updated_dict[exts.MDATA_TOOLTIP] = self.tooltip\n    updated_dict[exts.MDATA_COMMAND_HELP_URL] = self.help_url\n    updated_dict[exts.AUTHOR_PARAM] = self.author\n    if exts.AUTHORS_PARAM in updated_dict:\n        updated_dict.pop(exts.AUTHORS_PARAM)\n    for component in self:\n        component.configure(updated_dict)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.StackButtonGroup.parse_layout_directive","title":"<code>parse_layout_directive(layout_line)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def parse_layout_directive(self, layout_line):\n    parts = re.findall(r'(.+)\\[(.+):(.*)\\]', layout_line)\n    if parts:\n        source_item, directive, target_value = parts[0]\n        # cleanup values\n        directive = directive.lower().strip()\n        target_value = target_value.strip()\n        # process any escape characters in target value\n        # https://stackoverflow.com/a/4020824/2350244\n        target_value = target_value.encode('utf-8')\n        if PY3:\n            target_value = target_value.decode('unicode_escape')\n        else:\n            target_value = target_value.decode('string_escape')\n        # create directive obj\n        return source_item, LayoutDirective(directive_type=directive,\n                                            target=target_value)\n    return layout_line, None\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.StackButtonGroup.parse_layout_item","title":"<code>parse_layout_item(layout_line)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def parse_layout_item(self, layout_line):\n    if layout_line:\n        layout_item_name, layout_item_drctv = \\\n            self.parse_layout_directive(layout_line)\n        return LayoutItem(name=layout_item_name,\n                          directive=layout_item_drctv)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.StackButtonGroup.parse_layout_items","title":"<code>parse_layout_items(layout_lines)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def parse_layout_items(self, layout_lines):\n    for layout_line in layout_lines:\n        layout_item = self.parse_layout_item(layout_line)\n        if layout_item:\n            self.layout_items.append(layout_item)\n    mlogger.debug('Layout is: %s', self.layout_items)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.StackButtonGroup.parse_layout_metadata","title":"<code>parse_layout_metadata()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def parse_layout_metadata(self):\n    layout = self.meta.get(exts.MDATA_LAYOUT, [])\n    if layout:\n        self.parse_layout_items(layout)\n        return True\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.StackButtonGroup.contains","title":"<code>contains(item_name)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def contains(self, item_name):\n    return any([x.name == item_name for x in self.components])\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.StackButtonGroup.add_component","title":"<code>add_component(comp)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def add_component(self, comp):\n    # set search paths\n    for path in self.module_paths:\n        comp.add_module_path(path)\n    # set its own control id on the child component\n    if hasattr(comp, 'parent_ctrl_id'):\n        comp.parent_ctrl_id = self.control_id\n    # now add to list\n    self.components.append(comp)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.StackButtonGroup.find_components_of_type","title":"<code>find_components_of_type(cmp_type)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def find_components_of_type(self, cmp_type):\n    sub_comp_list = []\n    for sub_comp in self.components:\n        if isinstance(sub_comp, cmp_type):\n            sub_comp_list.append(sub_comp)\n        elif sub_comp.is_container:\n            sub_comp_list.extend(sub_comp.find_components_of_type(cmp_type))\n\n    return sub_comp_list\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.StackButtonGroup.find_layout_items","title":"<code>find_layout_items()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def find_layout_items(self):\n    layout_items = []\n    layout_items.extend(self.layout_items)\n    for sub_comp in self.components:\n        if sub_comp.is_container:\n            layout_items.extend(sub_comp.find_layout_items())\n    return layout_items\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.StackButtonGroup.has_commands","title":"<code>has_commands()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/components.py</code> <pre><code>def has_commands(self):\n    for component in self:\n        if not component.is_container:\n            if isinstance(component, GenericUICommand):\n                return True\n        else:\n            if component.has_commands():\n                return True\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Panel","title":"<code>Panel(cmp_path=None)</code>","text":"<p>               Bases: <code>GenericUIContainer</code></p> <p>Panel container.</p> <p>Panels include GenericStack, GenericUICommand, or GenericUICommandGroup</p> Source code in <code>pyrevitlib/pyrevit/extensions/components.py</code> <pre><code>def __init__(self, cmp_path=None):\n    # using classname otherwise exceptions in superclasses won't show\n    GenericUIContainer.__init__(self, cmp_path=cmp_path)\n    self.panel_background = \\\n        self.title_background = \\\n            self.slideout_background = None\n    # read metadata from metadata file\n    if self.meta:\n        # check for background color configs\n        self.panel_background = \\\n            self.meta.get(exts.MDATA_BACKGROUND_KEY, None)\n        if self.panel_background:\n            if isinstance(self.panel_background, dict):\n                self.title_background = self.panel_background.get(\n                    exts.MDATA_BACKGROUND_TITLE_KEY, None)\n                self.slideout_background = self.panel_background.get(\n                    exts.MDATA_BACKGROUND_SLIDEOUT_KEY, None)\n                self.panel_background = self.panel_background.get(\n                    exts.MDATA_BACKGROUND_PANEL_KEY, None)\n            elif not isinstance(self.panel_background, str):\n                mlogger.error(\n                    \"%s bad background definition in metadata.\", self)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Panel-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Panel.name","title":"<code>name = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Panel.is_container","title":"<code>is_container</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Panel.directory","title":"<code>directory = cmp_path</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Panel.unique_name","title":"<code>unique_name = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Panel.parent_ctrl_id","title":"<code>parent_ctrl_id = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Panel.icon_file","title":"<code>icon_file = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Panel.author","title":"<code>author = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Panel.media_file","title":"<code>media_file = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Panel.min_revit_ver","title":"<code>min_revit_ver = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Panel.max_revit_ver","title":"<code>max_revit_ver = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Panel.is_beta","title":"<code>is_beta = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Panel.highlight_type","title":"<code>highlight_type = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Panel.collapsed","title":"<code>collapsed = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Panel.version","title":"<code>version = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Panel.meta","title":"<code>meta = {}</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Panel.meta_file","title":"<code>meta_file = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Panel.modules","title":"<code>modules = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Panel.module_paths","title":"<code>module_paths = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Panel.binary_path","title":"<code>binary_path = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Panel.library_path","title":"<code>library_path = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Panel.control_id","title":"<code>control_id</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Panel.ui_title","title":"<code>ui_title</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Panel.tooltip","title":"<code>tooltip</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Panel.help_url","title":"<code>help_url</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Panel.is_supported","title":"<code>is_supported</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Panel.layout_items","title":"<code>layout_items = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Panel.components","title":"<code>components = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Panel.type_id","title":"<code>type_id = exts.PANEL_POSTFIX</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Panel.allowed_sub_cmps","title":"<code>allowed_sub_cmps = [GenericStack, GenericUICommandGroup, GenericUICommand, NoScriptButton]</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Panel.panel_background","title":"<code>panel_background = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Panel.title_background","title":"<code>title_background = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Panel.slideout_background","title":"<code>slideout_background = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Panel-functions","title":"Functions","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Panel.get_cache_data","title":"<code>get_cache_data()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def get_cache_data(self):\n    cache_dict = self.__dict__.copy()\n    if hasattr(self, TYPE_ID_KEY):\n        cache_dict[TYPE_ID_KEY] = getattr(self, TYPE_ID_KEY)\n    return cache_dict\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Panel.load_cache_data","title":"<code>load_cache_data(cache_dict)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def load_cache_data(self, cache_dict):\n    for k, v in cache_dict.items():\n        self.__dict__[k] = v\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Panel.matches","title":"<code>matches(component_path)</code>  <code>classmethod</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>@classmethod\ndef matches(cls, component_path):\n    return component_path.lower().endswith(cls.type_id)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Panel.make_unique_name","title":"<code>make_unique_name(cmp_path)</code>  <code>classmethod</code>","text":"<p>Creates a unique name for the command.</p> <p>This is used to uniquely identify this command and also to create the class in pyRevit dll assembly. Current method create a unique name based on the command full directory address.</p> <p>Examples:</p> <p>for 'pyRevit.extension/pyRevit.tab/Edit.panel/Flip doors.pushbutton' unique name would be: 'pyrevit-pyrevit-edit-flipdoors'.</p> Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>@classmethod\ndef make_unique_name(cls, cmp_path):\n    \"\"\"Creates a unique name for the command.\n\n    This is used to uniquely identify this command\n    and also to create the class in pyRevit dll assembly.\n    Current method create a unique name based on the command\n    full directory address.\n\n    Examples:\n        for 'pyRevit.extension/pyRevit.tab/Edit.panel/Flip doors.pushbutton'\n        unique name would be: 'pyrevit-pyrevit-edit-flipdoors'.\n    \"\"\"\n    pieces = []\n    inside_ext = False\n    for dname in cmp_path.split(op.sep):\n        if exts.ExtensionTypes.UI_EXTENSION.POSTFIX in dname:\n            inside_ext = True\n\n        name, ext = op.splitext(dname)\n        if ext != '' and inside_ext:\n            pieces.append(name)\n        else:\n            continue\n    return coreutils.cleanup_string(\n        exts.UNIQUE_ID_SEPARATOR.join(pieces),\n        skip=[exts.UNIQUE_ID_SEPARATOR]\n        ).lower()\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Panel.get_full_bundle_name","title":"<code>get_full_bundle_name()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def get_full_bundle_name(self):\n    return self.name + self.type_id\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Panel.has_module_path","title":"<code>has_module_path(path)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def has_module_path(self, path):\n    return path in self.module_paths\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Panel.add_module_path","title":"<code>add_module_path(path)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def add_module_path(self, path):\n    if path and not self.has_module_path(path):\n        mlogger.debug('Appending syspath: %s to %s', path, self)\n        for component in self.components:\n            component.add_module_path(path)\n        self.module_paths.append(path)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Panel.remove_module_path","title":"<code>remove_module_path(path)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def remove_module_path(self, path):\n    if path and self.has_module_path(path):\n        mlogger.debug('Removing syspath: %s from %s', path, self)\n        for component in self.components:\n            component.remove_module_path(path)\n        return self.module_paths.remove(path)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Panel.get_bundle_file","title":"<code>get_bundle_file(file_name)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def get_bundle_file(self, file_name):\n    if self.directory and file_name:\n        file_addr = op.join(self.directory, file_name)\n        return file_addr if op.exists(file_addr) else None\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Panel.find_bundle_file","title":"<code>find_bundle_file(patterns, finder='postfix')</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def find_bundle_file(self, patterns, finder='postfix'):\n    if self.directory:\n        for bundle_file in os.listdir(self.directory):\n            if 'name' == finder:\n                for file_name in patterns:\n                    if op.splitext(bundle_file)[0] == file_name:\n                        return op.join(self.directory, bundle_file)\n            elif 'postfix' == finder:\n                for file_postfix in patterns:\n                    if bundle_file.endswith(file_postfix):\n                        return op.join(self.directory, bundle_file)\n            elif 'regex' == finder:\n                for regex_pattern in patterns:\n                    if re.match(regex_pattern, bundle_file):\n                        return op.join(self.directory, bundle_file)\n    return None\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Panel.find_bundle_module","title":"<code>find_bundle_module(module, by_host=False)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def find_bundle_module(self, module, by_host=False):\n    # test of file_name is an actually path to a file\n    if op.isfile(module):\n        return module\n\n    def build_assm_filename(module_filename):\n        # build assembly by host version (assm_file_2020.ext)\n        assm_name, assm_ext = op.splitext(module_filename)\n        return assm_name + '_' + HOST_APP.version + assm_ext\n\n    if by_host:\n        module = build_assm_filename(module)\n\n    # test if module is inside search paths\n    for module_path in self.module_paths:\n        possible_module_path = op.join(module_path, module)\n        if op.isfile(possible_module_path):\n            return possible_module_path\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Panel.configure","title":"<code>configure(config_dict)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def configure(self, config_dict):\n    # update self meta\n    GenericUIComponent.configure(self, config_dict=config_dict)\n    # create an updated dict to pass to children\n    updated_dict = copy.deepcopy(config_dict)\n    updated_dict = pyutils.merge(updated_dict, self.meta)\n    # replace the meta values with the expanded values\n    # so children can use the expanded\n    updated_dict[exts.MDATA_UI_TITLE] = self.ui_title\n    updated_dict[exts.MDATA_TOOLTIP] = self.tooltip\n    updated_dict[exts.MDATA_COMMAND_HELP_URL] = self.help_url\n    updated_dict[exts.AUTHOR_PARAM] = self.author\n    if exts.AUTHORS_PARAM in updated_dict:\n        updated_dict.pop(exts.AUTHORS_PARAM)\n    for component in self:\n        component.configure(updated_dict)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Panel.parse_layout_directive","title":"<code>parse_layout_directive(layout_line)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def parse_layout_directive(self, layout_line):\n    parts = re.findall(r'(.+)\\[(.+):(.*)\\]', layout_line)\n    if parts:\n        source_item, directive, target_value = parts[0]\n        # cleanup values\n        directive = directive.lower().strip()\n        target_value = target_value.strip()\n        # process any escape characters in target value\n        # https://stackoverflow.com/a/4020824/2350244\n        target_value = target_value.encode('utf-8')\n        if PY3:\n            target_value = target_value.decode('unicode_escape')\n        else:\n            target_value = target_value.decode('string_escape')\n        # create directive obj\n        return source_item, LayoutDirective(directive_type=directive,\n                                            target=target_value)\n    return layout_line, None\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Panel.parse_layout_item","title":"<code>parse_layout_item(layout_line)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def parse_layout_item(self, layout_line):\n    if layout_line:\n        layout_item_name, layout_item_drctv = \\\n            self.parse_layout_directive(layout_line)\n        return LayoutItem(name=layout_item_name,\n                          directive=layout_item_drctv)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Panel.parse_layout_items","title":"<code>parse_layout_items(layout_lines)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def parse_layout_items(self, layout_lines):\n    for layout_line in layout_lines:\n        layout_item = self.parse_layout_item(layout_line)\n        if layout_item:\n            self.layout_items.append(layout_item)\n    mlogger.debug('Layout is: %s', self.layout_items)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Panel.parse_layout_metadata","title":"<code>parse_layout_metadata()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def parse_layout_metadata(self):\n    layout = self.meta.get(exts.MDATA_LAYOUT, [])\n    if layout:\n        self.parse_layout_items(layout)\n        return True\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Panel.add_component","title":"<code>add_component(comp)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def add_component(self, comp):\n    # set search paths\n    for path in self.module_paths:\n        comp.add_module_path(path)\n    # set its own control id on the child component\n    if hasattr(comp, 'parent_ctrl_id'):\n        comp.parent_ctrl_id = self.control_id\n    # now add to list\n    self.components.append(comp)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Panel.find_components_of_type","title":"<code>find_components_of_type(cmp_type)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def find_components_of_type(self, cmp_type):\n    sub_comp_list = []\n    for sub_comp in self.components:\n        if isinstance(sub_comp, cmp_type):\n            sub_comp_list.append(sub_comp)\n        elif sub_comp.is_container:\n            sub_comp_list.extend(sub_comp.find_components_of_type(cmp_type))\n\n    return sub_comp_list\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Panel.find_layout_items","title":"<code>find_layout_items()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def find_layout_items(self):\n    layout_items = []\n    layout_items.extend(self.layout_items)\n    for sub_comp in self.components:\n        if sub_comp.is_container:\n            layout_items.extend(sub_comp.find_layout_items())\n    return layout_items\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Panel.has_commands","title":"<code>has_commands()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/components.py</code> <pre><code>def has_commands(self):\n    for component in self:\n        if not component.is_container:\n            if isinstance(component, GenericUICommand):\n                return True\n        else:\n            if component.has_commands():\n                return True\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Panel.contains","title":"<code>contains(item_name)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/components.py</code> <pre><code>def contains(self, item_name):\n    # Panels contain stacks. But stacks itself does not have any ui and its\n    # subitems are displayed within the ui of the parent panel.\n    # This is different from pulldowns and other button groups.\n    # Button groups, contain and display their sub components in their\n    # own drop down menu. So when checking if panel has a button,\n    # panel should check all the items visible to the user and respond.\n    item_exists = GenericUIContainer.contains(self, item_name)\n    if item_exists:\n        return True\n    else:\n        # if child is a stack item, check its children too\n        for component in self:\n            if isinstance(component, GenericStack) \\\n                    and component.contains(item_name):\n                return True\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Tab","title":"<code>Tab(cmp_path=None)</code>","text":"<p>               Bases: <code>GenericUIContainer</code></p> <p>Tab container for Panels.</p> Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def __init__(self, cmp_path=None):\n    self.layout_items = []\n    self.components = []\n    # using classname otherwise exceptions in superclasses won't show\n    GenericUIComponent.__init__(self, cmp_path=cmp_path)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Tab-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Tab.name","title":"<code>name = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Tab.is_container","title":"<code>is_container</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Tab.directory","title":"<code>directory = cmp_path</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Tab.unique_name","title":"<code>unique_name = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Tab.parent_ctrl_id","title":"<code>parent_ctrl_id = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Tab.icon_file","title":"<code>icon_file = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Tab.author","title":"<code>author = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Tab.media_file","title":"<code>media_file = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Tab.min_revit_ver","title":"<code>min_revit_ver = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Tab.max_revit_ver","title":"<code>max_revit_ver = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Tab.is_beta","title":"<code>is_beta = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Tab.highlight_type","title":"<code>highlight_type = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Tab.collapsed","title":"<code>collapsed = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Tab.version","title":"<code>version = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Tab.meta","title":"<code>meta = {}</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Tab.meta_file","title":"<code>meta_file = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Tab.modules","title":"<code>modules = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Tab.module_paths","title":"<code>module_paths = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Tab.binary_path","title":"<code>binary_path = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Tab.library_path","title":"<code>library_path = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Tab.control_id","title":"<code>control_id</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Tab.ui_title","title":"<code>ui_title</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Tab.tooltip","title":"<code>tooltip</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Tab.help_url","title":"<code>help_url</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Tab.is_supported","title":"<code>is_supported</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Tab.layout_items","title":"<code>layout_items = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Tab.components","title":"<code>components = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Tab.type_id","title":"<code>type_id = exts.TAB_POSTFIX</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Tab.allowed_sub_cmps","title":"<code>allowed_sub_cmps = [Panel]</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Tab-functions","title":"Functions","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Tab.get_cache_data","title":"<code>get_cache_data()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def get_cache_data(self):\n    cache_dict = self.__dict__.copy()\n    if hasattr(self, TYPE_ID_KEY):\n        cache_dict[TYPE_ID_KEY] = getattr(self, TYPE_ID_KEY)\n    return cache_dict\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Tab.load_cache_data","title":"<code>load_cache_data(cache_dict)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def load_cache_data(self, cache_dict):\n    for k, v in cache_dict.items():\n        self.__dict__[k] = v\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Tab.matches","title":"<code>matches(component_path)</code>  <code>classmethod</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>@classmethod\ndef matches(cls, component_path):\n    return component_path.lower().endswith(cls.type_id)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Tab.make_unique_name","title":"<code>make_unique_name(cmp_path)</code>  <code>classmethod</code>","text":"<p>Creates a unique name for the command.</p> <p>This is used to uniquely identify this command and also to create the class in pyRevit dll assembly. Current method create a unique name based on the command full directory address.</p> <p>Examples:</p> <p>for 'pyRevit.extension/pyRevit.tab/Edit.panel/Flip doors.pushbutton' unique name would be: 'pyrevit-pyrevit-edit-flipdoors'.</p> Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>@classmethod\ndef make_unique_name(cls, cmp_path):\n    \"\"\"Creates a unique name for the command.\n\n    This is used to uniquely identify this command\n    and also to create the class in pyRevit dll assembly.\n    Current method create a unique name based on the command\n    full directory address.\n\n    Examples:\n        for 'pyRevit.extension/pyRevit.tab/Edit.panel/Flip doors.pushbutton'\n        unique name would be: 'pyrevit-pyrevit-edit-flipdoors'.\n    \"\"\"\n    pieces = []\n    inside_ext = False\n    for dname in cmp_path.split(op.sep):\n        if exts.ExtensionTypes.UI_EXTENSION.POSTFIX in dname:\n            inside_ext = True\n\n        name, ext = op.splitext(dname)\n        if ext != '' and inside_ext:\n            pieces.append(name)\n        else:\n            continue\n    return coreutils.cleanup_string(\n        exts.UNIQUE_ID_SEPARATOR.join(pieces),\n        skip=[exts.UNIQUE_ID_SEPARATOR]\n        ).lower()\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Tab.get_full_bundle_name","title":"<code>get_full_bundle_name()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def get_full_bundle_name(self):\n    return self.name + self.type_id\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Tab.has_module_path","title":"<code>has_module_path(path)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def has_module_path(self, path):\n    return path in self.module_paths\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Tab.add_module_path","title":"<code>add_module_path(path)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def add_module_path(self, path):\n    if path and not self.has_module_path(path):\n        mlogger.debug('Appending syspath: %s to %s', path, self)\n        for component in self.components:\n            component.add_module_path(path)\n        self.module_paths.append(path)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Tab.remove_module_path","title":"<code>remove_module_path(path)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def remove_module_path(self, path):\n    if path and self.has_module_path(path):\n        mlogger.debug('Removing syspath: %s from %s', path, self)\n        for component in self.components:\n            component.remove_module_path(path)\n        return self.module_paths.remove(path)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Tab.get_bundle_file","title":"<code>get_bundle_file(file_name)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def get_bundle_file(self, file_name):\n    if self.directory and file_name:\n        file_addr = op.join(self.directory, file_name)\n        return file_addr if op.exists(file_addr) else None\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Tab.find_bundle_file","title":"<code>find_bundle_file(patterns, finder='postfix')</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def find_bundle_file(self, patterns, finder='postfix'):\n    if self.directory:\n        for bundle_file in os.listdir(self.directory):\n            if 'name' == finder:\n                for file_name in patterns:\n                    if op.splitext(bundle_file)[0] == file_name:\n                        return op.join(self.directory, bundle_file)\n            elif 'postfix' == finder:\n                for file_postfix in patterns:\n                    if bundle_file.endswith(file_postfix):\n                        return op.join(self.directory, bundle_file)\n            elif 'regex' == finder:\n                for regex_pattern in patterns:\n                    if re.match(regex_pattern, bundle_file):\n                        return op.join(self.directory, bundle_file)\n    return None\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Tab.find_bundle_module","title":"<code>find_bundle_module(module, by_host=False)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def find_bundle_module(self, module, by_host=False):\n    # test of file_name is an actually path to a file\n    if op.isfile(module):\n        return module\n\n    def build_assm_filename(module_filename):\n        # build assembly by host version (assm_file_2020.ext)\n        assm_name, assm_ext = op.splitext(module_filename)\n        return assm_name + '_' + HOST_APP.version + assm_ext\n\n    if by_host:\n        module = build_assm_filename(module)\n\n    # test if module is inside search paths\n    for module_path in self.module_paths:\n        possible_module_path = op.join(module_path, module)\n        if op.isfile(possible_module_path):\n            return possible_module_path\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Tab.configure","title":"<code>configure(config_dict)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def configure(self, config_dict):\n    # update self meta\n    GenericUIComponent.configure(self, config_dict=config_dict)\n    # create an updated dict to pass to children\n    updated_dict = copy.deepcopy(config_dict)\n    updated_dict = pyutils.merge(updated_dict, self.meta)\n    # replace the meta values with the expanded values\n    # so children can use the expanded\n    updated_dict[exts.MDATA_UI_TITLE] = self.ui_title\n    updated_dict[exts.MDATA_TOOLTIP] = self.tooltip\n    updated_dict[exts.MDATA_COMMAND_HELP_URL] = self.help_url\n    updated_dict[exts.AUTHOR_PARAM] = self.author\n    if exts.AUTHORS_PARAM in updated_dict:\n        updated_dict.pop(exts.AUTHORS_PARAM)\n    for component in self:\n        component.configure(updated_dict)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Tab.parse_layout_directive","title":"<code>parse_layout_directive(layout_line)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def parse_layout_directive(self, layout_line):\n    parts = re.findall(r'(.+)\\[(.+):(.*)\\]', layout_line)\n    if parts:\n        source_item, directive, target_value = parts[0]\n        # cleanup values\n        directive = directive.lower().strip()\n        target_value = target_value.strip()\n        # process any escape characters in target value\n        # https://stackoverflow.com/a/4020824/2350244\n        target_value = target_value.encode('utf-8')\n        if PY3:\n            target_value = target_value.decode('unicode_escape')\n        else:\n            target_value = target_value.decode('string_escape')\n        # create directive obj\n        return source_item, LayoutDirective(directive_type=directive,\n                                            target=target_value)\n    return layout_line, None\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Tab.parse_layout_item","title":"<code>parse_layout_item(layout_line)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def parse_layout_item(self, layout_line):\n    if layout_line:\n        layout_item_name, layout_item_drctv = \\\n            self.parse_layout_directive(layout_line)\n        return LayoutItem(name=layout_item_name,\n                          directive=layout_item_drctv)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Tab.parse_layout_items","title":"<code>parse_layout_items(layout_lines)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def parse_layout_items(self, layout_lines):\n    for layout_line in layout_lines:\n        layout_item = self.parse_layout_item(layout_line)\n        if layout_item:\n            self.layout_items.append(layout_item)\n    mlogger.debug('Layout is: %s', self.layout_items)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Tab.parse_layout_metadata","title":"<code>parse_layout_metadata()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def parse_layout_metadata(self):\n    layout = self.meta.get(exts.MDATA_LAYOUT, [])\n    if layout:\n        self.parse_layout_items(layout)\n        return True\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Tab.contains","title":"<code>contains(item_name)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def contains(self, item_name):\n    return any([x.name == item_name for x in self.components])\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Tab.add_component","title":"<code>add_component(comp)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def add_component(self, comp):\n    # set search paths\n    for path in self.module_paths:\n        comp.add_module_path(path)\n    # set its own control id on the child component\n    if hasattr(comp, 'parent_ctrl_id'):\n        comp.parent_ctrl_id = self.control_id\n    # now add to list\n    self.components.append(comp)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Tab.find_components_of_type","title":"<code>find_components_of_type(cmp_type)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def find_components_of_type(self, cmp_type):\n    sub_comp_list = []\n    for sub_comp in self.components:\n        if isinstance(sub_comp, cmp_type):\n            sub_comp_list.append(sub_comp)\n        elif sub_comp.is_container:\n            sub_comp_list.extend(sub_comp.find_components_of_type(cmp_type))\n\n    return sub_comp_list\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Tab.find_layout_items","title":"<code>find_layout_items()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def find_layout_items(self):\n    layout_items = []\n    layout_items.extend(self.layout_items)\n    for sub_comp in self.components:\n        if sub_comp.is_container:\n            layout_items.extend(sub_comp.find_layout_items())\n    return layout_items\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Tab.has_commands","title":"<code>has_commands()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/components.py</code> <pre><code>def has_commands(self):\n    for panel in self:\n        if panel.has_commands():\n            return True\n    return False\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Extension","title":"<code>Extension(cmp_path=None)</code>","text":"<p>               Bases: <code>GenericUIContainer</code></p> <p>UI Tools extension.</p> Source code in <code>pyrevitlib/pyrevit/extensions/components.py</code> <pre><code>def __init__(self, cmp_path=None):\n    self.pyrvt_version = None\n    self.dir_hash_value = None\n    # using classname otherwise exceptions in superclasses won't show\n    GenericUIContainer.__init__(self, cmp_path=cmp_path)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Extension-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Extension.name","title":"<code>name = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Extension.is_container","title":"<code>is_container</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Extension.directory","title":"<code>directory = cmp_path</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Extension.unique_name","title":"<code>unique_name = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Extension.parent_ctrl_id","title":"<code>parent_ctrl_id = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Extension.icon_file","title":"<code>icon_file = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Extension.author","title":"<code>author = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Extension.media_file","title":"<code>media_file = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Extension.min_revit_ver","title":"<code>min_revit_ver = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Extension.max_revit_ver","title":"<code>max_revit_ver = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Extension.is_beta","title":"<code>is_beta = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Extension.highlight_type","title":"<code>highlight_type = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Extension.collapsed","title":"<code>collapsed = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Extension.version","title":"<code>version = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Extension.meta","title":"<code>meta = {}</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Extension.meta_file","title":"<code>meta_file = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Extension.modules","title":"<code>modules = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Extension.module_paths","title":"<code>module_paths = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Extension.binary_path","title":"<code>binary_path = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Extension.library_path","title":"<code>library_path = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Extension.ui_title","title":"<code>ui_title</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Extension.tooltip","title":"<code>tooltip</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Extension.help_url","title":"<code>help_url</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Extension.is_supported","title":"<code>is_supported</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Extension.layout_items","title":"<code>layout_items = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Extension.components","title":"<code>components = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Extension.type_id","title":"<code>type_id = exts.ExtensionTypes.UI_EXTENSION.POSTFIX</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Extension.allowed_sub_cmps","title":"<code>allowed_sub_cmps = [Tab]</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Extension.pyrvt_version","title":"<code>pyrvt_version = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Extension.dir_hash_value","title":"<code>dir_hash_value = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Extension.control_id","title":"<code>control_id</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Extension.startup_script","title":"<code>startup_script</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Extension-functions","title":"Functions","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Extension.get_cache_data","title":"<code>get_cache_data()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def get_cache_data(self):\n    cache_dict = self.__dict__.copy()\n    if hasattr(self, TYPE_ID_KEY):\n        cache_dict[TYPE_ID_KEY] = getattr(self, TYPE_ID_KEY)\n    return cache_dict\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Extension.load_cache_data","title":"<code>load_cache_data(cache_dict)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def load_cache_data(self, cache_dict):\n    for k, v in cache_dict.items():\n        self.__dict__[k] = v\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Extension.matches","title":"<code>matches(component_path)</code>  <code>classmethod</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>@classmethod\ndef matches(cls, component_path):\n    return component_path.lower().endswith(cls.type_id)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Extension.make_unique_name","title":"<code>make_unique_name(cmp_path)</code>  <code>classmethod</code>","text":"<p>Creates a unique name for the command.</p> <p>This is used to uniquely identify this command and also to create the class in pyRevit dll assembly. Current method create a unique name based on the command full directory address.</p> <p>Examples:</p> <p>for 'pyRevit.extension/pyRevit.tab/Edit.panel/Flip doors.pushbutton' unique name would be: 'pyrevit-pyrevit-edit-flipdoors'.</p> Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>@classmethod\ndef make_unique_name(cls, cmp_path):\n    \"\"\"Creates a unique name for the command.\n\n    This is used to uniquely identify this command\n    and also to create the class in pyRevit dll assembly.\n    Current method create a unique name based on the command\n    full directory address.\n\n    Examples:\n        for 'pyRevit.extension/pyRevit.tab/Edit.panel/Flip doors.pushbutton'\n        unique name would be: 'pyrevit-pyrevit-edit-flipdoors'.\n    \"\"\"\n    pieces = []\n    inside_ext = False\n    for dname in cmp_path.split(op.sep):\n        if exts.ExtensionTypes.UI_EXTENSION.POSTFIX in dname:\n            inside_ext = True\n\n        name, ext = op.splitext(dname)\n        if ext != '' and inside_ext:\n            pieces.append(name)\n        else:\n            continue\n    return coreutils.cleanup_string(\n        exts.UNIQUE_ID_SEPARATOR.join(pieces),\n        skip=[exts.UNIQUE_ID_SEPARATOR]\n        ).lower()\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Extension.get_full_bundle_name","title":"<code>get_full_bundle_name()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def get_full_bundle_name(self):\n    return self.name + self.type_id\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Extension.has_module_path","title":"<code>has_module_path(path)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def has_module_path(self, path):\n    return path in self.module_paths\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Extension.add_module_path","title":"<code>add_module_path(path)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def add_module_path(self, path):\n    if path and not self.has_module_path(path):\n        mlogger.debug('Appending syspath: %s to %s', path, self)\n        for component in self.components:\n            component.add_module_path(path)\n        self.module_paths.append(path)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Extension.remove_module_path","title":"<code>remove_module_path(path)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def remove_module_path(self, path):\n    if path and self.has_module_path(path):\n        mlogger.debug('Removing syspath: %s from %s', path, self)\n        for component in self.components:\n            component.remove_module_path(path)\n        return self.module_paths.remove(path)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Extension.get_bundle_file","title":"<code>get_bundle_file(file_name)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def get_bundle_file(self, file_name):\n    if self.directory and file_name:\n        file_addr = op.join(self.directory, file_name)\n        return file_addr if op.exists(file_addr) else None\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Extension.find_bundle_file","title":"<code>find_bundle_file(patterns, finder='postfix')</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def find_bundle_file(self, patterns, finder='postfix'):\n    if self.directory:\n        for bundle_file in os.listdir(self.directory):\n            if 'name' == finder:\n                for file_name in patterns:\n                    if op.splitext(bundle_file)[0] == file_name:\n                        return op.join(self.directory, bundle_file)\n            elif 'postfix' == finder:\n                for file_postfix in patterns:\n                    if bundle_file.endswith(file_postfix):\n                        return op.join(self.directory, bundle_file)\n            elif 'regex' == finder:\n                for regex_pattern in patterns:\n                    if re.match(regex_pattern, bundle_file):\n                        return op.join(self.directory, bundle_file)\n    return None\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Extension.find_bundle_module","title":"<code>find_bundle_module(module, by_host=False)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def find_bundle_module(self, module, by_host=False):\n    # test of file_name is an actually path to a file\n    if op.isfile(module):\n        return module\n\n    def build_assm_filename(module_filename):\n        # build assembly by host version (assm_file_2020.ext)\n        assm_name, assm_ext = op.splitext(module_filename)\n        return assm_name + '_' + HOST_APP.version + assm_ext\n\n    if by_host:\n        module = build_assm_filename(module)\n\n    # test if module is inside search paths\n    for module_path in self.module_paths:\n        possible_module_path = op.join(module_path, module)\n        if op.isfile(possible_module_path):\n            return possible_module_path\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Extension.parse_layout_directive","title":"<code>parse_layout_directive(layout_line)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def parse_layout_directive(self, layout_line):\n    parts = re.findall(r'(.+)\\[(.+):(.*)\\]', layout_line)\n    if parts:\n        source_item, directive, target_value = parts[0]\n        # cleanup values\n        directive = directive.lower().strip()\n        target_value = target_value.strip()\n        # process any escape characters in target value\n        # https://stackoverflow.com/a/4020824/2350244\n        target_value = target_value.encode('utf-8')\n        if PY3:\n            target_value = target_value.decode('unicode_escape')\n        else:\n            target_value = target_value.decode('string_escape')\n        # create directive obj\n        return source_item, LayoutDirective(directive_type=directive,\n                                            target=target_value)\n    return layout_line, None\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Extension.parse_layout_item","title":"<code>parse_layout_item(layout_line)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def parse_layout_item(self, layout_line):\n    if layout_line:\n        layout_item_name, layout_item_drctv = \\\n            self.parse_layout_directive(layout_line)\n        return LayoutItem(name=layout_item_name,\n                          directive=layout_item_drctv)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Extension.parse_layout_items","title":"<code>parse_layout_items(layout_lines)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def parse_layout_items(self, layout_lines):\n    for layout_line in layout_lines:\n        layout_item = self.parse_layout_item(layout_line)\n        if layout_item:\n            self.layout_items.append(layout_item)\n    mlogger.debug('Layout is: %s', self.layout_items)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Extension.parse_layout_metadata","title":"<code>parse_layout_metadata()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def parse_layout_metadata(self):\n    layout = self.meta.get(exts.MDATA_LAYOUT, [])\n    if layout:\n        self.parse_layout_items(layout)\n        return True\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Extension.contains","title":"<code>contains(item_name)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def contains(self, item_name):\n    return any([x.name == item_name for x in self.components])\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Extension.add_component","title":"<code>add_component(comp)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def add_component(self, comp):\n    # set search paths\n    for path in self.module_paths:\n        comp.add_module_path(path)\n    # set its own control id on the child component\n    if hasattr(comp, 'parent_ctrl_id'):\n        comp.parent_ctrl_id = self.control_id\n    # now add to list\n    self.components.append(comp)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Extension.find_components_of_type","title":"<code>find_components_of_type(cmp_type)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def find_components_of_type(self, cmp_type):\n    sub_comp_list = []\n    for sub_comp in self.components:\n        if isinstance(sub_comp, cmp_type):\n            sub_comp_list.append(sub_comp)\n        elif sub_comp.is_container:\n            sub_comp_list.extend(sub_comp.find_components_of_type(cmp_type))\n\n    return sub_comp_list\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Extension.find_layout_items","title":"<code>find_layout_items()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def find_layout_items(self):\n    layout_items = []\n    layout_items.extend(self.layout_items)\n    for sub_comp in self.components:\n        if sub_comp.is_container:\n            layout_items.extend(sub_comp.find_layout_items())\n    return layout_items\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Extension.get_hash","title":"<code>get_hash()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/components.py</code> <pre><code>def get_hash(self):\n    return coreutils.get_str_hash(safe_strtype(self.get_cache_data()))\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Extension.get_all_commands","title":"<code>get_all_commands()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/components.py</code> <pre><code>def get_all_commands(self):\n    return self.find_components_of_type(GenericUICommand)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Extension.get_manifest_file","title":"<code>get_manifest_file()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/components.py</code> <pre><code>def get_manifest_file(self):\n    return self.get_bundle_file(exts.EXT_MANIFEST_FILE)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Extension.get_manifest","title":"<code>get_manifest()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/components.py</code> <pre><code>def get_manifest(self):\n    manifest_file = self.get_manifest_file()\n    if manifest_file:\n        with codecs.open(manifest_file, 'r', 'utf-8') as mfile:\n            try:\n                manifest_cfg = json.load(mfile)\n                return manifest_cfg\n            except Exception as manfload_err:\n                print('Can not parse ext manifest file: {} '\n                      '| {}'.format(manifest_file, manfload_err))\n                return\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Extension.configure","title":"<code>configure()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/components.py</code> <pre><code>def configure(self):\n    cfg_dict = self.get_manifest()\n    if cfg_dict:\n        for component in self:\n            component.configure(cfg_dict)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Extension.get_extension_modules","title":"<code>get_extension_modules()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/components.py</code> <pre><code>def get_extension_modules(self):\n    modules = []\n    if self.binary_path and op.exists(self.binary_path):\n        for item in os.listdir(self.binary_path):\n            item_path = op.join(self.binary_path, item)\n            item_name = item.lower()\n            if op.isfile(item_path) \\\n                    and item_name.endswith(framework.ASSEMBLY_FILE_TYPE):\n                modules.append(item_path)\n    return modules\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Extension.get_command_modules","title":"<code>get_command_modules()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/components.py</code> <pre><code>def get_command_modules(self):\n    referenced_modules = set()\n    for cmd in self.get_all_commands():\n        for module in cmd.modules:\n            cmd_module = cmd.find_bundle_module(module)\n            if cmd_module:\n                referenced_modules.add(cmd_module)\n    return referenced_modules\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Extension.get_hooks","title":"<code>get_hooks()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/components.py</code> <pre><code>def get_hooks(self):\n    hook_scripts = os.listdir(self.hooks_path) if self.hooks_path else []\n    return [op.join(self.hooks_path, x) for x in hook_scripts]\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.Extension.get_checks","title":"<code>get_checks()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/components.py</code> <pre><code>def get_checks(self):\n    check_scripts = os.listdir(self.checks_path) if self.checks_path else []\n    return [op.join(self.checks_path, x) for x in check_scripts]\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.LibraryExtension","title":"<code>LibraryExtension(cmp_path=None)</code>","text":"<p>               Bases: <code>GenericComponent</code></p> <p>Library extension.</p> Source code in <code>pyrevitlib/pyrevit/extensions/components.py</code> <pre><code>def __init__(self, cmp_path=None):\n    # using classname otherwise exceptions in superclasses won't show\n    GenericComponent.__init__(self)\n    self.directory = cmp_path\n\n    if self.directory:\n        self.name = op.splitext(op.basename(self.directory))[0]\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.LibraryExtension-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.LibraryExtension.is_container","title":"<code>is_container</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.LibraryExtension.type_id","title":"<code>type_id = exts.ExtensionTypes.LIB_EXTENSION.POSTFIX</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.LibraryExtension.directory","title":"<code>directory = cmp_path</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.LibraryExtension.name","title":"<code>name = op.splitext(op.basename(self.directory))[0]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.LibraryExtension-functions","title":"Functions","text":""},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.LibraryExtension.get_cache_data","title":"<code>get_cache_data()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def get_cache_data(self):\n    cache_dict = self.__dict__.copy()\n    if hasattr(self, TYPE_ID_KEY):\n        cache_dict[TYPE_ID_KEY] = getattr(self, TYPE_ID_KEY)\n    return cache_dict\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.LibraryExtension.load_cache_data","title":"<code>load_cache_data(cache_dict)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def load_cache_data(self, cache_dict):\n    for k, v in cache_dict.items():\n        self.__dict__[k] = v\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components.LibraryExtension.matches","title":"<code>matches(component_path)</code>  <code>classmethod</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/components.py</code> <pre><code>@classmethod\ndef matches(cls, component_path):\n    return component_path.lower().endswith(cls.type_id)\n</code></pre>"},{"location":"reference/pyrevit/extensions/components/#pyrevit.extensions.components-functions","title":"Functions","text":""},{"location":"reference/pyrevit/extensions/extensionmgr/","title":"extensionmgr","text":"<p>Find, parse and cache extensions.</p> <p>There are two types of extensions: UI Extensions (components.Extension) and Library Extensions (components.LibraryExtension).</p> <p>This module, finds the ui extensions installed and parses their directory for tools or loads them from cache. It also finds the library extensions and adds their directory address to the ui extensions so the python tools can use the shared libraries.</p> <p>To do its job correctly, this module needs to communicate with pyrevit.userconfig to get a list of user extension folder and also pyrevit.extensions.extpackages to check whether an extension is active or not.</p>"},{"location":"reference/pyrevit/extensions/extensionmgr/#pyrevit.extensions.extensionmgr-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/extensions/extensionmgr/#pyrevit.extensions.extensionmgr.mlogger","title":"<code>mlogger = get_logger(__name__)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/extensionmgr/#pyrevit.extensions.extensionmgr-classes","title":"Classes","text":""},{"location":"reference/pyrevit/extensions/extensionmgr/#pyrevit.extensions.extensionmgr-functions","title":"Functions","text":""},{"location":"reference/pyrevit/extensions/extensionmgr/#pyrevit.extensions.extensionmgr.get_thirdparty_extension_data","title":"<code>get_thirdparty_extension_data()</code>","text":"<p>Returns all installed and active UI and Library extensions (not parsed).</p> <p>Returns:</p> Type Description <code>list</code> <p>list of components.Extension or components.LibraryExtension</p> Source code in <code>pyrevitlib/pyrevit/extensions/extensionmgr.py</code> <pre><code>def get_thirdparty_extension_data():\n    \"\"\"Returns all installed and active UI and Library extensions (not parsed).\n\n    Returns:\n        (list): list of components.Extension or components.LibraryExtension\n    \"\"\"\n    # FIXME: reorganzie this code to use one single method to collect\n    # extension data for both lib and ui\n    ext_data_list = []\n\n    for root_dir in user_config.get_thirdparty_ext_root_dirs():\n        ext_data_list.extend(\n            [ui_ext for ui_ext in parse_dir_for_ext_type(root_dir,\n                                                         Extension)])\n        ext_data_list.extend(\n            [lib_ext for lib_ext in parse_dir_for_ext_type(root_dir,\n                                                           LibraryExtension)])\n\n    return _remove_disabled_extensions(ext_data_list)\n</code></pre>"},{"location":"reference/pyrevit/extensions/extensionmgr/#pyrevit.extensions.extensionmgr.get_installed_lib_extensions","title":"<code>get_installed_lib_extensions(root_dir)</code>","text":"<p>Returns all the installed and active Library extensions (not parsed).</p> <p>Parameters:</p> Name Type Description Default <code>root_dir</code> <code>str</code> <p>Extensions directory address</p> required <p>Returns:</p> Type Description <code>list[LibraryExtension]</code> <p>list of components.LibraryExtension objects</p> Source code in <code>pyrevitlib/pyrevit/extensions/extensionmgr.py</code> <pre><code>def get_installed_lib_extensions(root_dir):\n    \"\"\"Returns all the installed and active Library extensions (not parsed).\n\n    Args:\n        root_dir (str): Extensions directory address\n\n    Returns:\n        (list[LibraryExtension]): list of components.LibraryExtension objects\n    \"\"\"\n    lib_ext_list = \\\n        [lib_ext for lib_ext in parse_dir_for_ext_type(root_dir,\n                                                       LibraryExtension)]\n    return _remove_disabled_extensions(lib_ext_list)\n</code></pre>"},{"location":"reference/pyrevit/extensions/extensionmgr/#pyrevit.extensions.extensionmgr.get_installed_ui_extensions","title":"<code>get_installed_ui_extensions()</code>","text":"<p>Returns all UI extensions (fully parsed) under the given directory.</p> <p>This will also process the Library extensions and will add their path to the syspath of the UI extensions.</p> <p>Returns:</p> Type Description <code>list[Extension]</code> <p>list of components.Extension objects</p> Source code in <code>pyrevitlib/pyrevit/extensions/extensionmgr.py</code> <pre><code>def get_installed_ui_extensions():\n    \"\"\"Returns all UI extensions (fully parsed) under the given directory.\n\n    This will also process the Library extensions and will add\n    their path to the syspath of the UI extensions.\n\n    Returns:\n        (list[Extension]): list of components.Extension objects\n    \"\"\"\n    ui_ext_list = []\n    lib_ext_list = []\n\n    # get a list of all directories that could include extensions\n    ext_search_dirs = user_config.get_ext_root_dirs()\n    mlogger.debug('Extension Directories: %s', ext_search_dirs)\n\n    # collect all library extensions. Their dir paths need to be added\n    # to sys.path for all commands\n    for root_dir in ext_search_dirs:\n        lib_ext_list.extend(get_installed_lib_extensions(root_dir))\n        # Get a list of all installed extensions in this directory\n        # _parser.parse_dir_for_ext_type() returns a list of extensions\n        # in given directory\n\n    for root_dir in ext_search_dirs:\n        for ext_info in parse_dir_for_ext_type(root_dir, Extension):\n            # test if cache is valid for this ui_extension\n            # it might seem unusual to create a ui_extension and then\n            # re-load it from cache but minimum information about the\n            # ui_extension needs to be passed to the cache module for proper\n            # hash calculation and ui_extension recovery. at this point\n            # `ui_extension` does not include any sub-components\n            # (e.g, tabs, panels, etc) ui_extension object is very small and\n            # its creation doesn't add much overhead.\n\n            if _is_extension_enabled(ext_info):\n                ui_extension = _parse_or_cache(ext_info)\n                ui_ext_list.append(ui_extension)\n            else:\n                mlogger.debug('Skipping disabled ui extension: %s',\n                             ext_info.name)\n\n    # update extension master syspaths with standard pyrevit lib paths and\n    # lib address of other lib extensions (to support extensions that provide\n    # library only to be used by other extensions)\n    # all other lib paths internal to the extension and tool bundles have\n    # already been set inside the extension bundles and will take precedence\n    # over paths added by this method (they're the first paths added to the\n    # search paths list, and these paths will follow)\n    for ui_extension in ui_ext_list:\n        _update_extension_search_paths(\n            ui_extension,\n            lib_ext_list,\n            [MAIN_LIB_DIR, MISC_LIB_DIR]\n            )\n\n    return ui_ext_list\n</code></pre>"},{"location":"reference/pyrevit/extensions/extpackages/","title":"extpackages","text":"<p>Base module to handle processing extensions as packages.</p>"},{"location":"reference/pyrevit/extensions/extpackages/#pyrevit.extensions.extpackages-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/extensions/extpackages/#pyrevit.extensions.extpackages.mlogger","title":"<code>mlogger = get_logger(__name__)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/extpackages/#pyrevit.extensions.extpackages.PLUGIN_EXT_DEF_MANIFEST_NAME","title":"<code>PLUGIN_EXT_DEF_MANIFEST_NAME = 'extensions'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/extpackages/#pyrevit.extensions.extpackages.PLUGIN_EXT_DEF_FILE","title":"<code>PLUGIN_EXT_DEF_FILE = PLUGIN_EXT_DEF_MANIFEST_NAME + exts.JSON_FILE_FORMAT</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/extpackages/#pyrevit.extensions.extpackages.EXTENSION_POSTFIXES","title":"<code>EXTENSION_POSTFIXES = [x.POSTFIX for x in exts.ExtensionTypes.get_ext_types()]</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/extpackages/#pyrevit.extensions.extpackages-classes","title":"Classes","text":""},{"location":"reference/pyrevit/extensions/extpackages/#pyrevit.extensions.extpackages.PyRevitPluginAlreadyInstalledException","title":"<code>PyRevitPluginAlreadyInstalledException(extpkg)</code>","text":"<p>               Bases: <code>PyRevitException</code></p> <p>Exception raised when extension is already installed.</p> Source code in <code>pyrevitlib/pyrevit/extensions/extpackages.py</code> <pre><code>def __init__(self, extpkg):\n    super(PyRevitPluginAlreadyInstalledException, self).__init__()\n    self.extpkg = extpkg\n    PyRevitException(self)\n</code></pre>"},{"location":"reference/pyrevit/extensions/extpackages/#pyrevit.extensions.extpackages.PyRevitPluginAlreadyInstalledException-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/extensions/extpackages/#pyrevit.extensions.extpackages.PyRevitPluginAlreadyInstalledException.msg","title":"<code>msg</code>  <code>property</code>","text":"<p>Return exception message.</p>"},{"location":"reference/pyrevit/extensions/extpackages/#pyrevit.extensions.extpackages.PyRevitPluginAlreadyInstalledException.extpkg","title":"<code>extpkg = extpkg</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/extpackages/#pyrevit.extensions.extpackages.PyRevitPluginNoInstallLinkException","title":"<code>PyRevitPluginNoInstallLinkException</code>","text":"<p>               Bases: <code>PyRevitException</code></p> <p>Exception raised when extension does not have an install link.</p>"},{"location":"reference/pyrevit/extensions/extpackages/#pyrevit.extensions.extpackages.PyRevitPluginNoInstallLinkException-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/extensions/extpackages/#pyrevit.extensions.extpackages.PyRevitPluginNoInstallLinkException.msg","title":"<code>msg</code>  <code>property</code>","text":"<p>Return exception message.</p>"},{"location":"reference/pyrevit/extensions/extpackages/#pyrevit.extensions.extpackages.PyRevitPluginRemoveException","title":"<code>PyRevitPluginRemoveException</code>","text":"<p>               Bases: <code>PyRevitException</code></p> <p>Exception raised when removing an extension.</p>"},{"location":"reference/pyrevit/extensions/extpackages/#pyrevit.extensions.extpackages.PyRevitPluginRemoveException-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/extensions/extpackages/#pyrevit.extensions.extpackages.PyRevitPluginRemoveException.msg","title":"<code>msg</code>  <code>property</code>","text":"<p>Return exception message.</p>"},{"location":"reference/pyrevit/extensions/extpackages/#pyrevit.extensions.extpackages.DependencyGraph","title":"<code>DependencyGraph(extpkg_list)</code>","text":"<p>Extension packages dependency graph.</p> Source code in <code>pyrevitlib/pyrevit/extensions/extpackages.py</code> <pre><code>def __init__(self, extpkg_list):\n    self.dep_dict = defaultdict(list)\n    self.extpkgs = extpkg_list\n    for extpkg in extpkg_list:\n        if extpkg.dependencies:\n            for dep_pkg_name in extpkg.dependencies:\n                self.dep_dict[dep_pkg_name].append(extpkg)\n</code></pre>"},{"location":"reference/pyrevit/extensions/extpackages/#pyrevit.extensions.extpackages.DependencyGraph-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/extensions/extpackages/#pyrevit.extensions.extpackages.DependencyGraph.dep_dict","title":"<code>dep_dict = defaultdict(list)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/extpackages/#pyrevit.extensions.extpackages.DependencyGraph.extpkgs","title":"<code>extpkgs = extpkg_list</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/extpackages/#pyrevit.extensions.extpackages.DependencyGraph-functions","title":"Functions","text":""},{"location":"reference/pyrevit/extensions/extpackages/#pyrevit.extensions.extpackages.DependencyGraph.has_installed_dependents","title":"<code>has_installed_dependents(extpkg_name)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/extpackages.py</code> <pre><code>def has_installed_dependents(self, extpkg_name):\n    if extpkg_name in self.dep_dict:\n        for dep_pkg in self.dep_dict[extpkg_name]:\n            if dep_pkg.is_installed:\n                return True\n    else:\n        return False\n</code></pre>"},{"location":"reference/pyrevit/extensions/extpackages/#pyrevit.extensions.extpackages.ExtensionPackage","title":"<code>ExtensionPackage(info_dict, def_file_path=None)</code>","text":"<p>Extension package class.</p> <p>This class contains the extension information and also manages installation, user configuration, and removal of the extension. See the <code>__init__</code> class documentation for the required and optional extension information.</p> <p>Attributes:</p> Name Type Description <code>type</code> <code>ExtensionTypes</code> <p>Extension type</p> <code>name</code> <code>str</code> <p>Extension name</p> <code>description</code> <code>str</code> <p>Extension description</p> <code>url</code> <code>str</code> <p>Url of online git repository</p> <code>website</code> <code>str</code> <p>Url of extension website</p> <code>image</code> <code>str</code> <p>Url of extension icon image (.png file)</p> <code>author</code> <code>str</code> <p>Name of extension author</p> <code>author_profile</code> <code>str</code> <p>Url of author profile</p> <p>Initialized the extension class based on provide information.</p> <p>Required info (Dictionary keys):     type, name, description, url</p> Optional info <p>website, image, author, author-url, authusers</p> <p>Parameters:</p> Name Type Description Default <code>info_dict</code> <code>dict</code> <p>A dictionary containing the required information               for initializing the extension.</p> required <code>def_file_path</code> <code>str</code> <p>The file path of the extension definition file</p> <code>None</code> Source code in <code>pyrevitlib/pyrevit/extensions/extpackages.py</code> <pre><code>def __init__(self, info_dict, def_file_path=None):\n    \"\"\"Initialized the extension class based on provide information.\n\n    Required info (Dictionary keys):\n        type, name, description, url\n\n    Optional info:\n        website, image, author, author-url, authusers\n\n    Args:\n        info_dict (dict): A dictionary containing the required information\n                          for initializing the extension.\n        def_file_path (str): The file path of the extension definition file\n    \"\"\"\n    self.type = exts.ExtensionTypes.UI_EXTENSION\n    self.builtin = False\n    self.default_enabled = True\n    self.name = None\n    self.description = None\n    self.url = None\n    self.def_file_path = set()\n    self.authusers = set()\n    self.authgroups = set()\n    self.rocket_mode_compatible = False\n    self.website = None\n    self.image = None\n    self.author = None\n    self.author_profile = None\n    self.dependencies = set()\n\n    self.update_info(info_dict, def_file_path=def_file_path)\n</code></pre>"},{"location":"reference/pyrevit/extensions/extpackages/#pyrevit.extensions.extpackages.ExtensionPackage-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/extensions/extpackages/#pyrevit.extensions.extpackages.ExtensionPackage.type","title":"<code>type = exts.ExtensionTypes.UI_EXTENSION</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/extpackages/#pyrevit.extensions.extpackages.ExtensionPackage.builtin","title":"<code>builtin = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/extpackages/#pyrevit.extensions.extpackages.ExtensionPackage.default_enabled","title":"<code>default_enabled = True</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/extpackages/#pyrevit.extensions.extpackages.ExtensionPackage.name","title":"<code>name = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/extpackages/#pyrevit.extensions.extpackages.ExtensionPackage.description","title":"<code>description = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/extpackages/#pyrevit.extensions.extpackages.ExtensionPackage.url","title":"<code>url = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/extpackages/#pyrevit.extensions.extpackages.ExtensionPackage.def_file_path","title":"<code>def_file_path = set()</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/extpackages/#pyrevit.extensions.extpackages.ExtensionPackage.authusers","title":"<code>authusers = set()</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/extpackages/#pyrevit.extensions.extpackages.ExtensionPackage.authgroups","title":"<code>authgroups = set()</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/extpackages/#pyrevit.extensions.extpackages.ExtensionPackage.rocket_mode_compatible","title":"<code>rocket_mode_compatible = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/extpackages/#pyrevit.extensions.extpackages.ExtensionPackage.website","title":"<code>website = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/extpackages/#pyrevit.extensions.extpackages.ExtensionPackage.image","title":"<code>image = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/extpackages/#pyrevit.extensions.extpackages.ExtensionPackage.author","title":"<code>author = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/extpackages/#pyrevit.extensions.extpackages.ExtensionPackage.author_profile","title":"<code>author_profile = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/extpackages/#pyrevit.extensions.extpackages.ExtensionPackage.dependencies","title":"<code>dependencies = set()</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/extpackages/#pyrevit.extensions.extpackages.ExtensionPackage.ext_dirname","title":"<code>ext_dirname</code>  <code>property</code>","text":"<p>Installation directory name to use.</p> <p>Returns:</p> Type Description <code>str</code> <p>The name that should be used for the installation directory (based on the extension type).</p>"},{"location":"reference/pyrevit/extensions/extpackages/#pyrevit.extensions.extpackages.ExtensionPackage.is_installed","title":"<code>is_installed</code>  <code>property</code>","text":"<p>Installation directory.</p> <p>Returns:</p> Type Description <code>str</code> <p>Installed directory path or empty string if not installed.</p>"},{"location":"reference/pyrevit/extensions/extpackages/#pyrevit.extensions.extpackages.ExtensionPackage.installed_dir","title":"<code>installed_dir</code>  <code>property</code>","text":"<p>Installation directory.</p> <p>Returns:</p> Type Description <code>str</code> <p>Installed directory path or empty string if not installed.</p>"},{"location":"reference/pyrevit/extensions/extpackages/#pyrevit.extensions.extpackages.ExtensionPackage.is_removable","title":"<code>is_removable</code>  <code>property</code>","text":"<p>Whether the extension is safe to remove.</p> <p>Checks whether it is safe to remove this extension by confirming if a git url is provided for this extension for later re-install.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if removable, False if not</p>"},{"location":"reference/pyrevit/extensions/extpackages/#pyrevit.extensions.extpackages.ExtensionPackage.version","title":"<code>version</code>  <code>property</code>","text":"<p>Extension version.</p> <p>Returns:</p> Type Description <code>str</code> <p>Last commit hash of the extension git repo.</p>"},{"location":"reference/pyrevit/extensions/extpackages/#pyrevit.extensions.extpackages.ExtensionPackage.config","title":"<code>config</code>  <code>property</code>","text":"<p>Returns a valid config manager for this extension.</p> <p>All config parameters will be saved in user config file.</p> <p>Returns:</p> Type Description <code>PyRevitConfigSectionParser</code> <p>Config section handler</p>"},{"location":"reference/pyrevit/extensions/extpackages/#pyrevit.extensions.extpackages.ExtensionPackage.is_enabled","title":"<code>is_enabled</code>  <code>property</code>","text":"<p>Checks the default and user configured load state of the extension.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if package should be loaded</p>"},{"location":"reference/pyrevit/extensions/extpackages/#pyrevit.extensions.extpackages.ExtensionPackage.user_has_access","title":"<code>user_has_access</code>  <code>property</code>","text":"<p>Checks whether current user has access to this extension.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True is current user has access</p>"},{"location":"reference/pyrevit/extensions/extpackages/#pyrevit.extensions.extpackages.ExtensionPackage-functions","title":"Functions","text":""},{"location":"reference/pyrevit/extensions/extpackages/#pyrevit.extensions.extpackages.ExtensionPackage.update_info","title":"<code>update_info(info_dict, def_file_path=None)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/extpackages.py</code> <pre><code>def update_info(self, info_dict, def_file_path=None):\n    ext_def_type = info_dict.get('type', None)\n    for ext_type in exts.ExtensionTypes.get_ext_types():\n        if ext_def_type == ext_type.ID:\n            self.type = ext_type\n\n    self.builtin = \\\n        safe_strtype(info_dict.get('builtin',\n                                   self.builtin)).lower() == 'true'\n\n    self.default_enabled = safe_strtype(\n        info_dict.get('default_enabled', self.default_enabled)\n        ).lower() == 'true'\n\n    self.name = info_dict.get('name', self.name)\n    self.description = info_dict.get('description', self.description)\n    self.url = info_dict.get('url', self.url)\n\n    if def_file_path:\n        self.def_file_path.add(def_file_path)\n\n    # update list of authorized users\n    authusers = info_dict.get('authusers', [])\n    if authusers:\n        self.authusers.update(authusers)\n\n    # update list of authorized user groups\n    authgroups = info_dict.get('authgroups', [])\n    if authgroups:\n        self.authgroups.update(authgroups)\n\n    # rocket mode compatibility\n    self.rocket_mode_compatible = \\\n        safe_strtype(\n            info_dict.get('rocket_mode_compatible',\n                          self.rocket_mode_compatible)\n            ).lower() == 'true'\n\n    # extended attributes\n    self.website = info_dict.get(\n        'website',\n        self.url.replace('.git', '') if self.url else self.website\n        )\n    self.image = info_dict.get('image', self.image)\n    self.author = info_dict.get('author', self.author)\n\n    self.author_profile = info_dict.get('author_profile',\n                                        self.author_profile)\n    # update list dependencies\n    depends = info_dict.get('dependencies', [])\n    if depends:\n        self.dependencies.update(depends)\n</code></pre>"},{"location":"reference/pyrevit/extensions/extpackages/#pyrevit.extensions.extpackages.ExtensionPackage.is_valid","title":"<code>is_valid()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/extpackages.py</code> <pre><code>def is_valid(self):\n    return self.name is not None and self.url is not None\n</code></pre>"},{"location":"reference/pyrevit/extensions/extpackages/#pyrevit.extensions.extpackages.ExtensionPackage.remove_pkg_config","title":"<code>remove_pkg_config()</code>","text":"<p>Removes the installed extension configuration.</p> Source code in <code>pyrevitlib/pyrevit/extensions/extpackages.py</code> <pre><code>def remove_pkg_config(self):\n    \"\"\"Removes the installed extension configuration.\"\"\"\n    user_config.remove_section(self.ext_dirname)\n    user_config.save_changes()\n</code></pre>"},{"location":"reference/pyrevit/extensions/extpackages/#pyrevit.extensions.extpackages.ExtensionPackage.disable_package","title":"<code>disable_package()</code>","text":"<p>Disables package in pyRevit configuration.</p> <p>It won't be loaded in the next session.</p> Source code in <code>pyrevitlib/pyrevit/extensions/extpackages.py</code> <pre><code>def disable_package(self):\n    \"\"\"Disables package in pyRevit configuration.\n\n    It won't be loaded in the next session.\n    \"\"\"\n    self.config.disabled = True\n    user_config.save_changes()\n</code></pre>"},{"location":"reference/pyrevit/extensions/extpackages/#pyrevit.extensions.extpackages.ExtensionPackage.toggle_package","title":"<code>toggle_package()</code>","text":"<p>Disables/Enables package in pyRevit configuration.</p> <p>A disabled package won't be loaded in the next session.</p> Source code in <code>pyrevitlib/pyrevit/extensions/extpackages.py</code> <pre><code>def toggle_package(self):\n    \"\"\"Disables/Enables package in pyRevit configuration.\n\n    A disabled package won't be loaded in the next session.\n    \"\"\"\n    self.config.disabled = not self.config.disabled\n    user_config.save_changes()\n</code></pre>"},{"location":"reference/pyrevit/extensions/extpackages/#pyrevit.extensions.extpackages-functions","title":"Functions","text":""},{"location":"reference/pyrevit/extensions/extpackages/#pyrevit.extensions.extpackages.get_ext_packages","title":"<code>get_ext_packages(authorized_only=True)</code>","text":"<p>Returns the registered plugin extensions packages.</p> <p>Reads the list of registered plug-in extensions and returns a list of ExtensionPackage classes which contain information on the plug-in extension.</p> <p>Parameters:</p> Name Type Description Default <code>authorized_only</code> <code>bool</code> <p>Only return authorized extensions</p> <code>True</code> <p>Returns:</p> Type Description <code>list[ExtensionPackage]</code> <p>list of registered plugin extensions</p> Source code in <code>pyrevitlib/pyrevit/extensions/extpackages.py</code> <pre><code>def get_ext_packages(authorized_only=True):\n    \"\"\"Returns the registered plugin extensions packages.\n\n    Reads the list of registered plug-in extensions and returns a list of\n    ExtensionPackage classes which contain information on the plug-in extension.\n\n    Args:\n        authorized_only (bool): Only return authorized extensions\n\n    Returns:\n        (list[ExtensionPackage]): list of registered plugin extensions\n    \"\"\"\n    extpkgs = []\n    for ext_dir in user_config.get_ext_root_dirs():\n        # make a list of all availabe extension definition sources\n        # default is under the extensions directory that ships with pyrevit\n        extpkg_def_files = {op.join(ext_dir, PLUGIN_EXT_DEF_FILE)}\n        # add other sources added by the user (using the cli)\n        extpkg_def_files.update(user_config.get_ext_sources())\n        for extpkg_def_file in extpkg_def_files:\n            mlogger.debug('Looking for %s', extpkg_def_file)\n            # check for external ext def file\n            if op.exists(extpkg_def_file):\n                mlogger.debug('Found %s', extpkg_def_file)\n                _update_extpkgs(extpkg_def_file, extpkgs)\n            # check internals now\n            internal_extpkg_defs = _find_internal_extpkgs(ext_dir)\n            for int_def_file in internal_extpkg_defs:\n                _update_extpkgs(int_def_file, extpkgs)\n\n    if authorized_only:\n        return [x for x in extpkgs if x.user_has_access]\n\n    return extpkgs\n</code></pre>"},{"location":"reference/pyrevit/extensions/extpackages/#pyrevit.extensions.extpackages.get_ext_package_by_name","title":"<code>get_ext_package_by_name(extpkg_name)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/extpackages.py</code> <pre><code>def get_ext_package_by_name(extpkg_name):\n    for extpkg in get_ext_packages(authorized_only=False):\n        if extpkg.name == extpkg_name:\n            return extpkg\n    return None\n</code></pre>"},{"location":"reference/pyrevit/extensions/extpackages/#pyrevit.extensions.extpackages.get_dependency_graph","title":"<code>get_dependency_graph()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/extpackages.py</code> <pre><code>def get_dependency_graph():\n    return DependencyGraph(get_ext_packages(authorized_only=False))\n</code></pre>"},{"location":"reference/pyrevit/extensions/extpackages/#pyrevit.extensions.extpackages.install","title":"<code>install(extpkg, install_dir, install_dependencies=True)</code>","text":"<p>Install the extension in the given parent directory.</p> <p>This method uses .installed_dir property of extension object  as installation directory name for this extension. This method also handles installation of extension dependencies.</p> <p>Parameters:</p> Name Type Description Default <code>extpkg</code> <code>ExtensionPackage</code> <p>Extension package to be installed</p> required <code>install_dir</code> <code>str</code> <p>Parent directory to install extension in.</p> required <code>install_dependencies</code> <code>bool</code> <p>Install the dependencies as well</p> <code>True</code> <p>Raises:</p> Type Description <code>PyRevitException</code> <p>on install error with error message</p> Source code in <code>pyrevitlib/pyrevit/extensions/extpackages.py</code> <pre><code>def install(extpkg, install_dir, install_dependencies=True):\n    \"\"\"Install the extension in the given parent directory.\n\n    This method uses .installed_dir property of extension object \n    as installation directory name for this extension.\n    This method also handles installation of extension dependencies.\n\n    Args:\n        extpkg (ExtensionPackage): Extension package to be installed\n        install_dir (str): Parent directory to install extension in.\n        install_dependencies (bool): Install the dependencies as well\n\n    Raises:\n        PyRevitException: on install error with error message\n    \"\"\"\n    try:\n        _install_extpkg(extpkg, install_dir, install_dependencies)\n    except PyRevitPluginAlreadyInstalledException as already_installed_err:\n        mlogger.warning('%s extension is already installed under %s',\n                        already_installed_err.extpkg.name,\n                        already_installed_err.extpkg.is_installed)\n    except PyRevitPluginNoInstallLinkException:\n        mlogger.error('Extension does not have an install link '\n                      'and can not be installed.')\n</code></pre>"},{"location":"reference/pyrevit/extensions/extpackages/#pyrevit.extensions.extpackages.remove","title":"<code>remove(extpkg, remove_dependencies=True)</code>","text":"<p>Removes the extension.</p> <p>Removes the extension from its installed directory and clears its configuration.</p> <p>Parameters:</p> Name Type Description Default <code>extpkg</code> <code>ExtensionPackage</code> <p>Extension package to be removed</p> required <code>remove_dependencies</code> <code>bool</code> <p>Remove the dependencies as well</p> <code>True</code> <p>Raises:</p> Type Description <code>PyRevitException</code> <p>on remove error with error message</p> Source code in <code>pyrevitlib/pyrevit/extensions/extpackages.py</code> <pre><code>def remove(extpkg, remove_dependencies=True):\n    \"\"\"Removes the extension.\n\n    Removes the extension from its installed directory\n    and clears its configuration.\n\n    Args:\n        extpkg (ExtensionPackage): Extension package to be removed\n        remove_dependencies (bool): Remove the dependencies as well\n\n    Raises:\n        PyRevitException: on remove error with error message\n    \"\"\"\n    try:\n        _remove_extpkg(extpkg, remove_dependencies)\n    except PyRevitPluginRemoveException as remove_err:\n        mlogger.error('Error removing extension: %s | %s',\n                      extpkg.name, remove_err)\n</code></pre>"},{"location":"reference/pyrevit/extensions/genericcomps/","title":"genericcomps","text":"<p>Generic extension components.</p>"},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.mlogger","title":"<code>mlogger = coreutils.logger.get_logger(__name__)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.EXT_DIR_KEY","title":"<code>EXT_DIR_KEY = 'directory'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.SUB_CMP_KEY","title":"<code>SUB_CMP_KEY = 'components'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.LAYOUT_ITEM_KEY","title":"<code>LAYOUT_ITEM_KEY = 'layout_items'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.LAYOUT_DIR_KEY","title":"<code>LAYOUT_DIR_KEY = 'directive'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.TYPE_ID_KEY","title":"<code>TYPE_ID_KEY = 'type_id'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.NAME_KEY","title":"<code>NAME_KEY = 'name'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps-classes","title":"Classes","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.TypedComponent","title":"<code>TypedComponent</code>","text":"<p>               Bases: <code>object</code></p> <p>Component with a type id.</p>"},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.TypedComponent-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.TypedComponent.type_id","title":"<code>type_id = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.CachableComponent","title":"<code>CachableComponent</code>","text":"<p>               Bases: <code>TypedComponent</code></p> <p>Cacheable Component.</p>"},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.CachableComponent-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.CachableComponent.type_id","title":"<code>type_id = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.CachableComponent-functions","title":"Functions","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.CachableComponent.get_cache_data","title":"<code>get_cache_data()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def get_cache_data(self):\n    cache_dict = self.__dict__.copy()\n    if hasattr(self, TYPE_ID_KEY):\n        cache_dict[TYPE_ID_KEY] = getattr(self, TYPE_ID_KEY)\n    return cache_dict\n</code></pre>"},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.CachableComponent.load_cache_data","title":"<code>load_cache_data(cache_dict)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def load_cache_data(self, cache_dict):\n    for k, v in cache_dict.items():\n        self.__dict__[k] = v\n</code></pre>"},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.LayoutDirective","title":"<code>LayoutDirective(directive_type=None, target=None)</code>","text":"<p>               Bases: <code>CachableComponent</code></p> <p>Layout directive.</p> Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def __init__(self, directive_type=None, target=None):\n    self.directive_type = directive_type\n    self.target = target\n</code></pre>"},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.LayoutDirective-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.LayoutDirective.type_id","title":"<code>type_id = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.LayoutDirective.directive_type","title":"<code>directive_type = directive_type</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.LayoutDirective.target","title":"<code>target = target</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.LayoutDirective-functions","title":"Functions","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.LayoutDirective.get_cache_data","title":"<code>get_cache_data()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def get_cache_data(self):\n    cache_dict = self.__dict__.copy()\n    if hasattr(self, TYPE_ID_KEY):\n        cache_dict[TYPE_ID_KEY] = getattr(self, TYPE_ID_KEY)\n    return cache_dict\n</code></pre>"},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.LayoutDirective.load_cache_data","title":"<code>load_cache_data(cache_dict)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def load_cache_data(self, cache_dict):\n    for k, v in cache_dict.items():\n        self.__dict__[k] = v\n</code></pre>"},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.LayoutItem","title":"<code>LayoutItem(name=None, directive=None)</code>","text":"<p>               Bases: <code>CachableComponent</code></p> <p>Layout item.</p> Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def __init__(self, name=None, directive=None):\n    self.name = name\n    self.directive = directive\n</code></pre>"},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.LayoutItem-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.LayoutItem.type_id","title":"<code>type_id = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.LayoutItem.name","title":"<code>name = name</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.LayoutItem.directive","title":"<code>directive = directive</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.LayoutItem-functions","title":"Functions","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.LayoutItem.get_cache_data","title":"<code>get_cache_data()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def get_cache_data(self):\n    cache_dict = self.__dict__.copy()\n    if hasattr(self, TYPE_ID_KEY):\n        cache_dict[TYPE_ID_KEY] = getattr(self, TYPE_ID_KEY)\n    return cache_dict\n</code></pre>"},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.LayoutItem.load_cache_data","title":"<code>load_cache_data(cache_dict)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def load_cache_data(self, cache_dict):\n    for k, v in cache_dict.items():\n        self.__dict__[k] = v\n</code></pre>"},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericComponent","title":"<code>GenericComponent()</code>","text":"<p>               Bases: <code>CachableComponent</code></p> <p>Generic component object.</p> Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def __init__(self):\n    self.name = None\n</code></pre>"},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericComponent-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericComponent.type_id","title":"<code>type_id = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericComponent.name","title":"<code>name = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericComponent.is_container","title":"<code>is_container</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericComponent-functions","title":"Functions","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericComponent.get_cache_data","title":"<code>get_cache_data()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def get_cache_data(self):\n    cache_dict = self.__dict__.copy()\n    if hasattr(self, TYPE_ID_KEY):\n        cache_dict[TYPE_ID_KEY] = getattr(self, TYPE_ID_KEY)\n    return cache_dict\n</code></pre>"},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericComponent.load_cache_data","title":"<code>load_cache_data(cache_dict)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def load_cache_data(self, cache_dict):\n    for k, v in cache_dict.items():\n        self.__dict__[k] = v\n</code></pre>"},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIComponent","title":"<code>GenericUIComponent(cmp_path=None)</code>","text":"<p>               Bases: <code>GenericComponent</code></p> <p>Generic UI component.</p> Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def __init__(self, cmp_path=None):\n    # using classname otherwise exceptions in superclasses won't show\n    GenericComponent.__init__(self)\n    self.directory = cmp_path\n    self.unique_name = self.parent_ctrl_id = None\n    self.icon_file = None\n    self._ui_title = None\n    self._tooltip = self.author = self._help_url = None\n    self.media_file = None\n    self.min_revit_ver = self.max_revit_ver = None\n    self.is_beta = False\n    self.highlight_type = None\n    self.collapsed = False\n    self.version = None\n\n    self.meta = {}\n    self.meta_file = None\n\n    self.modules = []\n    self.module_paths = []\n\n    self.binary_path = None\n    self.library_path = None\n\n    if self.directory:\n        self._update_from_directory()\n</code></pre>"},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIComponent-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIComponent.type_id","title":"<code>type_id = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIComponent.name","title":"<code>name = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIComponent.is_container","title":"<code>is_container</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIComponent.directory","title":"<code>directory = cmp_path</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIComponent.unique_name","title":"<code>unique_name = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIComponent.parent_ctrl_id","title":"<code>parent_ctrl_id = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIComponent.icon_file","title":"<code>icon_file = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIComponent.author","title":"<code>author = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIComponent.media_file","title":"<code>media_file = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIComponent.min_revit_ver","title":"<code>min_revit_ver = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIComponent.max_revit_ver","title":"<code>max_revit_ver = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIComponent.is_beta","title":"<code>is_beta = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIComponent.highlight_type","title":"<code>highlight_type = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIComponent.collapsed","title":"<code>collapsed = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIComponent.version","title":"<code>version = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIComponent.meta","title":"<code>meta = {}</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIComponent.meta_file","title":"<code>meta_file = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIComponent.modules","title":"<code>modules = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIComponent.module_paths","title":"<code>module_paths = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIComponent.binary_path","title":"<code>binary_path = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIComponent.library_path","title":"<code>library_path = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIComponent.control_id","title":"<code>control_id</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIComponent.ui_title","title":"<code>ui_title</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIComponent.tooltip","title":"<code>tooltip</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIComponent.help_url","title":"<code>help_url</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIComponent.is_supported","title":"<code>is_supported</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIComponent-functions","title":"Functions","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIComponent.get_cache_data","title":"<code>get_cache_data()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def get_cache_data(self):\n    cache_dict = self.__dict__.copy()\n    if hasattr(self, TYPE_ID_KEY):\n        cache_dict[TYPE_ID_KEY] = getattr(self, TYPE_ID_KEY)\n    return cache_dict\n</code></pre>"},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIComponent.load_cache_data","title":"<code>load_cache_data(cache_dict)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def load_cache_data(self, cache_dict):\n    for k, v in cache_dict.items():\n        self.__dict__[k] = v\n</code></pre>"},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIComponent.matches","title":"<code>matches(component_path)</code>  <code>classmethod</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>@classmethod\ndef matches(cls, component_path):\n    return component_path.lower().endswith(cls.type_id)\n</code></pre>"},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIComponent.make_unique_name","title":"<code>make_unique_name(cmp_path)</code>  <code>classmethod</code>","text":"<p>Creates a unique name for the command.</p> <p>This is used to uniquely identify this command and also to create the class in pyRevit dll assembly. Current method create a unique name based on the command full directory address.</p> <p>Examples:</p> <p>for 'pyRevit.extension/pyRevit.tab/Edit.panel/Flip doors.pushbutton' unique name would be: 'pyrevit-pyrevit-edit-flipdoors'.</p> Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>@classmethod\ndef make_unique_name(cls, cmp_path):\n    \"\"\"Creates a unique name for the command.\n\n    This is used to uniquely identify this command\n    and also to create the class in pyRevit dll assembly.\n    Current method create a unique name based on the command\n    full directory address.\n\n    Examples:\n        for 'pyRevit.extension/pyRevit.tab/Edit.panel/Flip doors.pushbutton'\n        unique name would be: 'pyrevit-pyrevit-edit-flipdoors'.\n    \"\"\"\n    pieces = []\n    inside_ext = False\n    for dname in cmp_path.split(op.sep):\n        if exts.ExtensionTypes.UI_EXTENSION.POSTFIX in dname:\n            inside_ext = True\n\n        name, ext = op.splitext(dname)\n        if ext != '' and inside_ext:\n            pieces.append(name)\n        else:\n            continue\n    return coreutils.cleanup_string(\n        exts.UNIQUE_ID_SEPARATOR.join(pieces),\n        skip=[exts.UNIQUE_ID_SEPARATOR]\n        ).lower()\n</code></pre>"},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIComponent.get_full_bundle_name","title":"<code>get_full_bundle_name()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def get_full_bundle_name(self):\n    return self.name + self.type_id\n</code></pre>"},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIComponent.has_module_path","title":"<code>has_module_path(path)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def has_module_path(self, path):\n    return path in self.module_paths\n</code></pre>"},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIComponent.add_module_path","title":"<code>add_module_path(path)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def add_module_path(self, path):\n    if path and not self.has_module_path(path):\n        mlogger.debug('Appending syspath: %s to %s', path, self)\n        self.module_paths.append(path)\n</code></pre>"},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIComponent.remove_module_path","title":"<code>remove_module_path(path)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def remove_module_path(self, path):\n    if path and self.has_module_path(path):\n        mlogger.debug('Removing syspath: %s from %s', path, self)\n        return self.module_paths.remove(path)\n</code></pre>"},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIComponent.get_bundle_file","title":"<code>get_bundle_file(file_name)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def get_bundle_file(self, file_name):\n    if self.directory and file_name:\n        file_addr = op.join(self.directory, file_name)\n        return file_addr if op.exists(file_addr) else None\n</code></pre>"},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIComponent.find_bundle_file","title":"<code>find_bundle_file(patterns, finder='postfix')</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def find_bundle_file(self, patterns, finder='postfix'):\n    if self.directory:\n        for bundle_file in os.listdir(self.directory):\n            if 'name' == finder:\n                for file_name in patterns:\n                    if op.splitext(bundle_file)[0] == file_name:\n                        return op.join(self.directory, bundle_file)\n            elif 'postfix' == finder:\n                for file_postfix in patterns:\n                    if bundle_file.endswith(file_postfix):\n                        return op.join(self.directory, bundle_file)\n            elif 'regex' == finder:\n                for regex_pattern in patterns:\n                    if re.match(regex_pattern, bundle_file):\n                        return op.join(self.directory, bundle_file)\n    return None\n</code></pre>"},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIComponent.find_bundle_module","title":"<code>find_bundle_module(module, by_host=False)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def find_bundle_module(self, module, by_host=False):\n    # test of file_name is an actually path to a file\n    if op.isfile(module):\n        return module\n\n    def build_assm_filename(module_filename):\n        # build assembly by host version (assm_file_2020.ext)\n        assm_name, assm_ext = op.splitext(module_filename)\n        return assm_name + '_' + HOST_APP.version + assm_ext\n\n    if by_host:\n        module = build_assm_filename(module)\n\n    # test if module is inside search paths\n    for module_path in self.module_paths:\n        possible_module_path = op.join(module_path, module)\n        if op.isfile(possible_module_path):\n            return possible_module_path\n</code></pre>"},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIComponent.configure","title":"<code>configure(config_dict)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def configure(self, config_dict):\n    configurable_params = \\\n        ['_ui_title', '_tooltip', '_help_url', 'author']\n    # get root key:value pairs\n    for key, value in config_dict.items():\n        for param_name in configurable_params:\n            self._resolve_liquid_tag(param_name, key, value)\n    # get key:value pairs grouped under special key, if exists\n    templates = config_dict.get(exts.MDATA_TEMPLATES_KEY, {})\n    for key, value in templates.items():\n        for param_name in configurable_params:\n            self._resolve_liquid_tag(param_name, key, value)\n</code></pre>"},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIContainer","title":"<code>GenericUIContainer(cmp_path=None)</code>","text":"<p>               Bases: <code>GenericUIComponent</code></p> <p>Superclass for all UI group items (tab, panel, button groups, stacks).</p> Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def __init__(self, cmp_path=None):\n    self.layout_items = []\n    self.components = []\n    # using classname otherwise exceptions in superclasses won't show\n    GenericUIComponent.__init__(self, cmp_path=cmp_path)\n</code></pre>"},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIContainer-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIContainer.type_id","title":"<code>type_id = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIContainer.name","title":"<code>name = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIContainer.is_container","title":"<code>is_container</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIContainer.directory","title":"<code>directory = cmp_path</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIContainer.unique_name","title":"<code>unique_name = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIContainer.parent_ctrl_id","title":"<code>parent_ctrl_id = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIContainer.icon_file","title":"<code>icon_file = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIContainer.author","title":"<code>author = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIContainer.media_file","title":"<code>media_file = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIContainer.min_revit_ver","title":"<code>min_revit_ver = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIContainer.max_revit_ver","title":"<code>max_revit_ver = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIContainer.is_beta","title":"<code>is_beta = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIContainer.highlight_type","title":"<code>highlight_type = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIContainer.collapsed","title":"<code>collapsed = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIContainer.version","title":"<code>version = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIContainer.meta","title":"<code>meta = {}</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIContainer.meta_file","title":"<code>meta_file = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIContainer.modules","title":"<code>modules = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIContainer.module_paths","title":"<code>module_paths = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIContainer.binary_path","title":"<code>binary_path = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIContainer.library_path","title":"<code>library_path = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIContainer.control_id","title":"<code>control_id</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIContainer.ui_title","title":"<code>ui_title</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIContainer.tooltip","title":"<code>tooltip</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIContainer.help_url","title":"<code>help_url</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIContainer.is_supported","title":"<code>is_supported</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIContainer.allowed_sub_cmps","title":"<code>allowed_sub_cmps = []</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIContainer.layout_items","title":"<code>layout_items = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIContainer.components","title":"<code>components = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIContainer-functions","title":"Functions","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIContainer.get_cache_data","title":"<code>get_cache_data()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def get_cache_data(self):\n    cache_dict = self.__dict__.copy()\n    if hasattr(self, TYPE_ID_KEY):\n        cache_dict[TYPE_ID_KEY] = getattr(self, TYPE_ID_KEY)\n    return cache_dict\n</code></pre>"},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIContainer.load_cache_data","title":"<code>load_cache_data(cache_dict)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def load_cache_data(self, cache_dict):\n    for k, v in cache_dict.items():\n        self.__dict__[k] = v\n</code></pre>"},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIContainer.matches","title":"<code>matches(component_path)</code>  <code>classmethod</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>@classmethod\ndef matches(cls, component_path):\n    return component_path.lower().endswith(cls.type_id)\n</code></pre>"},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIContainer.make_unique_name","title":"<code>make_unique_name(cmp_path)</code>  <code>classmethod</code>","text":"<p>Creates a unique name for the command.</p> <p>This is used to uniquely identify this command and also to create the class in pyRevit dll assembly. Current method create a unique name based on the command full directory address.</p> <p>Examples:</p> <p>for 'pyRevit.extension/pyRevit.tab/Edit.panel/Flip doors.pushbutton' unique name would be: 'pyrevit-pyrevit-edit-flipdoors'.</p> Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>@classmethod\ndef make_unique_name(cls, cmp_path):\n    \"\"\"Creates a unique name for the command.\n\n    This is used to uniquely identify this command\n    and also to create the class in pyRevit dll assembly.\n    Current method create a unique name based on the command\n    full directory address.\n\n    Examples:\n        for 'pyRevit.extension/pyRevit.tab/Edit.panel/Flip doors.pushbutton'\n        unique name would be: 'pyrevit-pyrevit-edit-flipdoors'.\n    \"\"\"\n    pieces = []\n    inside_ext = False\n    for dname in cmp_path.split(op.sep):\n        if exts.ExtensionTypes.UI_EXTENSION.POSTFIX in dname:\n            inside_ext = True\n\n        name, ext = op.splitext(dname)\n        if ext != '' and inside_ext:\n            pieces.append(name)\n        else:\n            continue\n    return coreutils.cleanup_string(\n        exts.UNIQUE_ID_SEPARATOR.join(pieces),\n        skip=[exts.UNIQUE_ID_SEPARATOR]\n        ).lower()\n</code></pre>"},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIContainer.get_full_bundle_name","title":"<code>get_full_bundle_name()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def get_full_bundle_name(self):\n    return self.name + self.type_id\n</code></pre>"},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIContainer.has_module_path","title":"<code>has_module_path(path)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def has_module_path(self, path):\n    return path in self.module_paths\n</code></pre>"},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIContainer.get_bundle_file","title":"<code>get_bundle_file(file_name)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def get_bundle_file(self, file_name):\n    if self.directory and file_name:\n        file_addr = op.join(self.directory, file_name)\n        return file_addr if op.exists(file_addr) else None\n</code></pre>"},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIContainer.find_bundle_file","title":"<code>find_bundle_file(patterns, finder='postfix')</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def find_bundle_file(self, patterns, finder='postfix'):\n    if self.directory:\n        for bundle_file in os.listdir(self.directory):\n            if 'name' == finder:\n                for file_name in patterns:\n                    if op.splitext(bundle_file)[0] == file_name:\n                        return op.join(self.directory, bundle_file)\n            elif 'postfix' == finder:\n                for file_postfix in patterns:\n                    if bundle_file.endswith(file_postfix):\n                        return op.join(self.directory, bundle_file)\n            elif 'regex' == finder:\n                for regex_pattern in patterns:\n                    if re.match(regex_pattern, bundle_file):\n                        return op.join(self.directory, bundle_file)\n    return None\n</code></pre>"},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIContainer.find_bundle_module","title":"<code>find_bundle_module(module, by_host=False)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def find_bundle_module(self, module, by_host=False):\n    # test of file_name is an actually path to a file\n    if op.isfile(module):\n        return module\n\n    def build_assm_filename(module_filename):\n        # build assembly by host version (assm_file_2020.ext)\n        assm_name, assm_ext = op.splitext(module_filename)\n        return assm_name + '_' + HOST_APP.version + assm_ext\n\n    if by_host:\n        module = build_assm_filename(module)\n\n    # test if module is inside search paths\n    for module_path in self.module_paths:\n        possible_module_path = op.join(module_path, module)\n        if op.isfile(possible_module_path):\n            return possible_module_path\n</code></pre>"},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIContainer.parse_layout_directive","title":"<code>parse_layout_directive(layout_line)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def parse_layout_directive(self, layout_line):\n    parts = re.findall(r'(.+)\\[(.+):(.*)\\]', layout_line)\n    if parts:\n        source_item, directive, target_value = parts[0]\n        # cleanup values\n        directive = directive.lower().strip()\n        target_value = target_value.strip()\n        # process any escape characters in target value\n        # https://stackoverflow.com/a/4020824/2350244\n        target_value = target_value.encode('utf-8')\n        if PY3:\n            target_value = target_value.decode('unicode_escape')\n        else:\n            target_value = target_value.decode('string_escape')\n        # create directive obj\n        return source_item, LayoutDirective(directive_type=directive,\n                                            target=target_value)\n    return layout_line, None\n</code></pre>"},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIContainer.parse_layout_item","title":"<code>parse_layout_item(layout_line)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def parse_layout_item(self, layout_line):\n    if layout_line:\n        layout_item_name, layout_item_drctv = \\\n            self.parse_layout_directive(layout_line)\n        return LayoutItem(name=layout_item_name,\n                          directive=layout_item_drctv)\n</code></pre>"},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIContainer.parse_layout_items","title":"<code>parse_layout_items(layout_lines)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def parse_layout_items(self, layout_lines):\n    for layout_line in layout_lines:\n        layout_item = self.parse_layout_item(layout_line)\n        if layout_item:\n            self.layout_items.append(layout_item)\n    mlogger.debug('Layout is: %s', self.layout_items)\n</code></pre>"},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIContainer.parse_layout_metadata","title":"<code>parse_layout_metadata()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def parse_layout_metadata(self):\n    layout = self.meta.get(exts.MDATA_LAYOUT, [])\n    if layout:\n        self.parse_layout_items(layout)\n        return True\n</code></pre>"},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIContainer.contains","title":"<code>contains(item_name)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def contains(self, item_name):\n    return any([x.name == item_name for x in self.components])\n</code></pre>"},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIContainer.add_module_path","title":"<code>add_module_path(path)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def add_module_path(self, path):\n    if path and not self.has_module_path(path):\n        mlogger.debug('Appending syspath: %s to %s', path, self)\n        for component in self.components:\n            component.add_module_path(path)\n        self.module_paths.append(path)\n</code></pre>"},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIContainer.remove_module_path","title":"<code>remove_module_path(path)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def remove_module_path(self, path):\n    if path and self.has_module_path(path):\n        mlogger.debug('Removing syspath: %s from %s', path, self)\n        for component in self.components:\n            component.remove_module_path(path)\n        return self.module_paths.remove(path)\n</code></pre>"},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIContainer.add_component","title":"<code>add_component(comp)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def add_component(self, comp):\n    # set search paths\n    for path in self.module_paths:\n        comp.add_module_path(path)\n    # set its own control id on the child component\n    if hasattr(comp, 'parent_ctrl_id'):\n        comp.parent_ctrl_id = self.control_id\n    # now add to list\n    self.components.append(comp)\n</code></pre>"},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIContainer.find_components_of_type","title":"<code>find_components_of_type(cmp_type)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def find_components_of_type(self, cmp_type):\n    sub_comp_list = []\n    for sub_comp in self.components:\n        if isinstance(sub_comp, cmp_type):\n            sub_comp_list.append(sub_comp)\n        elif sub_comp.is_container:\n            sub_comp_list.extend(sub_comp.find_components_of_type(cmp_type))\n\n    return sub_comp_list\n</code></pre>"},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIContainer.find_layout_items","title":"<code>find_layout_items()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def find_layout_items(self):\n    layout_items = []\n    layout_items.extend(self.layout_items)\n    for sub_comp in self.components:\n        if sub_comp.is_container:\n            layout_items.extend(sub_comp.find_layout_items())\n    return layout_items\n</code></pre>"},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUIContainer.configure","title":"<code>configure(config_dict)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def configure(self, config_dict):\n    # update self meta\n    GenericUIComponent.configure(self, config_dict=config_dict)\n    # create an updated dict to pass to children\n    updated_dict = copy.deepcopy(config_dict)\n    updated_dict = pyutils.merge(updated_dict, self.meta)\n    # replace the meta values with the expanded values\n    # so children can use the expanded\n    updated_dict[exts.MDATA_UI_TITLE] = self.ui_title\n    updated_dict[exts.MDATA_TOOLTIP] = self.tooltip\n    updated_dict[exts.MDATA_COMMAND_HELP_URL] = self.help_url\n    updated_dict[exts.AUTHOR_PARAM] = self.author\n    if exts.AUTHORS_PARAM in updated_dict:\n        updated_dict.pop(exts.AUTHORS_PARAM)\n    for component in self:\n        component.configure(updated_dict)\n</code></pre>"},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUICommand","title":"<code>GenericUICommand(cmp_path=None, needs_script=True)</code>","text":"<p>               Bases: <code>GenericUIComponent</code></p> <p>Superclass for all single commands.</p> <p>The information provided by these classes will be used to create a push button under Revit UI. However, pyRevit expands the capabilities of push button beyond what is provided by Revit UI. (e.g. Toggle button changes it's icon based on its on/off status) See LinkButton and ToggleButton classes.</p> Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def __init__(self, cmp_path=None, needs_script=True):\n    self.needs_script = needs_script\n    self.script_file = self.config_script_file = None\n    self.arguments = []\n    self.context = None\n    self.class_name = self.avail_class_name = None\n    self.requires_clean_engine = False\n    self.requires_fullframe_engine = False\n    self.requires_persistent_engine = False\n    self.requires_mainthread_engine = False\n    # engine options specific to dynamo\n    self.dynamo_path = None\n    # self.dynamo_path_exec = False\n    self.dynamo_path_check_existing = False\n    self.dynamo_force_manual_run = False\n    self.dynamo_model_nodes_info = None\n    # using classname otherwise exceptions in superclasses won't show\n    GenericUIComponent.__init__(self, cmp_path=cmp_path)\n\n    mlogger.debug('Maximum host version: %s', self.max_revit_ver)\n    mlogger.debug('Minimum host version: %s', self.min_revit_ver)\n    mlogger.debug('command tooltip: %s', self._tooltip)\n    mlogger.debug('Command author: %s', self.author)\n    mlogger.debug('Command help url: %s', self._help_url)\n\n    if self.is_beta:\n        mlogger.debug('Command is in beta.')\n</code></pre>"},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUICommand-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUICommand.type_id","title":"<code>type_id = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUICommand.name","title":"<code>name = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUICommand.is_container","title":"<code>is_container</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUICommand.directory","title":"<code>directory = cmp_path</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUICommand.unique_name","title":"<code>unique_name = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUICommand.parent_ctrl_id","title":"<code>parent_ctrl_id = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUICommand.icon_file","title":"<code>icon_file = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUICommand.author","title":"<code>author = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUICommand.media_file","title":"<code>media_file = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUICommand.min_revit_ver","title":"<code>min_revit_ver = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUICommand.max_revit_ver","title":"<code>max_revit_ver = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUICommand.is_beta","title":"<code>is_beta = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUICommand.highlight_type","title":"<code>highlight_type = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUICommand.collapsed","title":"<code>collapsed = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUICommand.version","title":"<code>version = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUICommand.meta","title":"<code>meta = {}</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUICommand.meta_file","title":"<code>meta_file = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUICommand.modules","title":"<code>modules = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUICommand.module_paths","title":"<code>module_paths = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUICommand.binary_path","title":"<code>binary_path = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUICommand.library_path","title":"<code>library_path = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUICommand.ui_title","title":"<code>ui_title</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUICommand.tooltip","title":"<code>tooltip</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUICommand.help_url","title":"<code>help_url</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUICommand.is_supported","title":"<code>is_supported</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUICommand.needs_script","title":"<code>needs_script = needs_script</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUICommand.script_file","title":"<code>script_file = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUICommand.config_script_file","title":"<code>config_script_file = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUICommand.arguments","title":"<code>arguments = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUICommand.context","title":"<code>context = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUICommand.class_name","title":"<code>class_name = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUICommand.avail_class_name","title":"<code>avail_class_name = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUICommand.requires_clean_engine","title":"<code>requires_clean_engine = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUICommand.requires_fullframe_engine","title":"<code>requires_fullframe_engine = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUICommand.requires_persistent_engine","title":"<code>requires_persistent_engine = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUICommand.requires_mainthread_engine","title":"<code>requires_mainthread_engine = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUICommand.dynamo_path","title":"<code>dynamo_path = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUICommand.dynamo_path_check_existing","title":"<code>dynamo_path_check_existing = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUICommand.dynamo_force_manual_run","title":"<code>dynamo_force_manual_run = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUICommand.dynamo_model_nodes_info","title":"<code>dynamo_model_nodes_info = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUICommand.script_language","title":"<code>script_language</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUICommand.control_id","title":"<code>control_id</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUICommand.is_cpython","title":"<code>is_cpython</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUICommand-functions","title":"Functions","text":""},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUICommand.get_cache_data","title":"<code>get_cache_data()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def get_cache_data(self):\n    cache_dict = self.__dict__.copy()\n    if hasattr(self, TYPE_ID_KEY):\n        cache_dict[TYPE_ID_KEY] = getattr(self, TYPE_ID_KEY)\n    return cache_dict\n</code></pre>"},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUICommand.load_cache_data","title":"<code>load_cache_data(cache_dict)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def load_cache_data(self, cache_dict):\n    for k, v in cache_dict.items():\n        self.__dict__[k] = v\n</code></pre>"},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUICommand.matches","title":"<code>matches(component_path)</code>  <code>classmethod</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>@classmethod\ndef matches(cls, component_path):\n    return component_path.lower().endswith(cls.type_id)\n</code></pre>"},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUICommand.make_unique_name","title":"<code>make_unique_name(cmp_path)</code>  <code>classmethod</code>","text":"<p>Creates a unique name for the command.</p> <p>This is used to uniquely identify this command and also to create the class in pyRevit dll assembly. Current method create a unique name based on the command full directory address.</p> <p>Examples:</p> <p>for 'pyRevit.extension/pyRevit.tab/Edit.panel/Flip doors.pushbutton' unique name would be: 'pyrevit-pyrevit-edit-flipdoors'.</p> Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>@classmethod\ndef make_unique_name(cls, cmp_path):\n    \"\"\"Creates a unique name for the command.\n\n    This is used to uniquely identify this command\n    and also to create the class in pyRevit dll assembly.\n    Current method create a unique name based on the command\n    full directory address.\n\n    Examples:\n        for 'pyRevit.extension/pyRevit.tab/Edit.panel/Flip doors.pushbutton'\n        unique name would be: 'pyrevit-pyrevit-edit-flipdoors'.\n    \"\"\"\n    pieces = []\n    inside_ext = False\n    for dname in cmp_path.split(op.sep):\n        if exts.ExtensionTypes.UI_EXTENSION.POSTFIX in dname:\n            inside_ext = True\n\n        name, ext = op.splitext(dname)\n        if ext != '' and inside_ext:\n            pieces.append(name)\n        else:\n            continue\n    return coreutils.cleanup_string(\n        exts.UNIQUE_ID_SEPARATOR.join(pieces),\n        skip=[exts.UNIQUE_ID_SEPARATOR]\n        ).lower()\n</code></pre>"},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUICommand.get_full_bundle_name","title":"<code>get_full_bundle_name()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def get_full_bundle_name(self):\n    return self.name + self.type_id\n</code></pre>"},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUICommand.has_module_path","title":"<code>has_module_path(path)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def has_module_path(self, path):\n    return path in self.module_paths\n</code></pre>"},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUICommand.add_module_path","title":"<code>add_module_path(path)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def add_module_path(self, path):\n    if path and not self.has_module_path(path):\n        mlogger.debug('Appending syspath: %s to %s', path, self)\n        self.module_paths.append(path)\n</code></pre>"},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUICommand.remove_module_path","title":"<code>remove_module_path(path)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def remove_module_path(self, path):\n    if path and self.has_module_path(path):\n        mlogger.debug('Removing syspath: %s from %s', path, self)\n        return self.module_paths.remove(path)\n</code></pre>"},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUICommand.get_bundle_file","title":"<code>get_bundle_file(file_name)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def get_bundle_file(self, file_name):\n    if self.directory and file_name:\n        file_addr = op.join(self.directory, file_name)\n        return file_addr if op.exists(file_addr) else None\n</code></pre>"},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUICommand.find_bundle_file","title":"<code>find_bundle_file(patterns, finder='postfix')</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def find_bundle_file(self, patterns, finder='postfix'):\n    if self.directory:\n        for bundle_file in os.listdir(self.directory):\n            if 'name' == finder:\n                for file_name in patterns:\n                    if op.splitext(bundle_file)[0] == file_name:\n                        return op.join(self.directory, bundle_file)\n            elif 'postfix' == finder:\n                for file_postfix in patterns:\n                    if bundle_file.endswith(file_postfix):\n                        return op.join(self.directory, bundle_file)\n            elif 'regex' == finder:\n                for regex_pattern in patterns:\n                    if re.match(regex_pattern, bundle_file):\n                        return op.join(self.directory, bundle_file)\n    return None\n</code></pre>"},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUICommand.find_bundle_module","title":"<code>find_bundle_module(module, by_host=False)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def find_bundle_module(self, module, by_host=False):\n    # test of file_name is an actually path to a file\n    if op.isfile(module):\n        return module\n\n    def build_assm_filename(module_filename):\n        # build assembly by host version (assm_file_2020.ext)\n        assm_name, assm_ext = op.splitext(module_filename)\n        return assm_name + '_' + HOST_APP.version + assm_ext\n\n    if by_host:\n        module = build_assm_filename(module)\n\n    # test if module is inside search paths\n    for module_path in self.module_paths:\n        possible_module_path = op.join(module_path, module)\n        if op.isfile(possible_module_path):\n            return possible_module_path\n</code></pre>"},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUICommand.configure","title":"<code>configure(config_dict)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def configure(self, config_dict):\n    configurable_params = \\\n        ['_ui_title', '_tooltip', '_help_url', 'author']\n    # get root key:value pairs\n    for key, value in config_dict.items():\n        for param_name in configurable_params:\n            self._resolve_liquid_tag(param_name, key, value)\n    # get key:value pairs grouped under special key, if exists\n    templates = config_dict.get(exts.MDATA_TEMPLATES_KEY, {})\n    for key, value in templates.items():\n        for param_name in configurable_params:\n            self._resolve_liquid_tag(param_name, key, value)\n</code></pre>"},{"location":"reference/pyrevit/extensions/genericcomps/#pyrevit.extensions.genericcomps.GenericUICommand.has_config_script","title":"<code>has_config_script()</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/genericcomps.py</code> <pre><code>def has_config_script(self):\n    return self.config_script_file != self.script_file\n</code></pre>"},{"location":"reference/pyrevit/extensions/parser/","title":"parser","text":"<p>Base module ofr parsing extensions.</p>"},{"location":"reference/pyrevit/extensions/parser/#pyrevit.extensions.parser-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/extensions/parser/#pyrevit.extensions.parser.mlogger","title":"<code>mlogger = get_logger(__name__)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/extensions/parser/#pyrevit.extensions.parser-functions","title":"Functions","text":""},{"location":"reference/pyrevit/extensions/parser/#pyrevit.extensions.parser.parse_comp_dir","title":"<code>parse_comp_dir(comp_path, comp_class)</code>","text":"Source code in <code>pyrevitlib/pyrevit/extensions/parser.py</code> <pre><code>def parse_comp_dir(comp_path, comp_class):\n    return _create_subcomponents(\n        comp_path,\n        _get_subcomponents_classes([comp_class]),\n        create_from_search_dir=True\n        )\n</code></pre>"},{"location":"reference/pyrevit/extensions/parser/#pyrevit.extensions.parser.get_parsed_extension","title":"<code>get_parsed_extension(extension)</code>","text":"<p>Creates and adds the extensions components to the package.</p> <p>Each package object is the root to a tree of components that exists under that package. (e.g. tabs, buttons, ...) sub components of package can be accessed by iterating the _get_component. See _basecomponents for types.</p> Source code in <code>pyrevitlib/pyrevit/extensions/parser.py</code> <pre><code>def get_parsed_extension(extension):\n    \"\"\"Creates and adds the extensions components to the package.\n\n    Each package object is the root to a tree of components that exists\n    under that package. (e.g. tabs, buttons, ...) sub components of package\n    can be accessed by iterating the _get_component.\n    See _basecomponents for types.\n    \"\"\"\n    _parse_for_components(extension)\n    return extension\n</code></pre>"},{"location":"reference/pyrevit/extensions/parser/#pyrevit.extensions.parser.parse_dir_for_ext_type","title":"<code>parse_dir_for_ext_type(root_dir, parent_cmp_type)</code>","text":"<p>Return the objects of type parent_cmp_type of the extensions in root_dir.</p> <p>The package objects won't be parsed at this level. This is useful for collecting basic info on an extension type for cache cheching or updating extensions using their directory paths.</p> <p>Parameters:</p> Name Type Description Default <code>root_dir</code> <code>str</code> <p>directory to parse</p> required <code>parent_cmp_type</code> <code>type</code> <p>type of objects to return</p> required Source code in <code>pyrevitlib/pyrevit/extensions/parser.py</code> <pre><code>def parse_dir_for_ext_type(root_dir, parent_cmp_type):\n    \"\"\"Return the objects of type parent_cmp_type of the extensions in root_dir.\n\n    The package objects won't be parsed at this level.\n    This is useful for collecting basic info on an extension type\n    for cache cheching or updating extensions using their directory paths.\n\n    Args:\n        root_dir (str): directory to parse\n        parent_cmp_type (type): type of objects to return\n    \"\"\"\n    # making sure the provided directory exists.\n    # This is mainly for the user defined package directories\n    if not op.exists(root_dir):\n        mlogger.debug('Extension search directory does not exist: %s', root_dir)\n        return []\n\n    # try creating extensions in given directory\n    ext_data_list = []\n\n    mlogger.debug('Parsing directory for extensions of type: %s',\n                  parent_cmp_type)\n    for ext_data in _create_subcomponents(root_dir, [parent_cmp_type]):\n        mlogger.debug('Extension directory found: %s', ext_data)\n        ext_data_list.append(ext_data)\n\n    return ext_data_list\n</code></pre>"},{"location":"reference/pyrevit/forms/","title":"forms","text":"<p>Reusable WPF forms for pyRevit.</p> <p>Examples:</p> <pre><code>from pyrevit.forms import WPFWindow\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.mlogger","title":"<code>mlogger = get_logger(__name__)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.DEFAULT_CMDSWITCHWND_WIDTH","title":"<code>DEFAULT_CMDSWITCHWND_WIDTH = 600</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.DEFAULT_SEARCHWND_WIDTH","title":"<code>DEFAULT_SEARCHWND_WIDTH = 600</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.DEFAULT_SEARCHWND_HEIGHT","title":"<code>DEFAULT_SEARCHWND_HEIGHT = 100</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.DEFAULT_INPUTWINDOW_WIDTH","title":"<code>DEFAULT_INPUTWINDOW_WIDTH = 500</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.DEFAULT_INPUTWINDOW_HEIGHT","title":"<code>DEFAULT_INPUTWINDOW_HEIGHT = 600</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.DEFAULT_RECOGNIZE_ACCESS_KEY","title":"<code>DEFAULT_RECOGNIZE_ACCESS_KEY = False</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.WPF_HIDDEN","title":"<code>WPF_HIDDEN = framework.Windows.Visibility.Hidden</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.WPF_COLLAPSED","title":"<code>WPF_COLLAPSED = framework.Windows.Visibility.Collapsed</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.WPF_VISIBLE","title":"<code>WPF_VISIBLE = framework.Windows.Visibility.Visible</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.XAML_FILES_DIR","title":"<code>XAML_FILES_DIR = op.dirname(__file__)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.ParamDef","title":"<code>ParamDef = namedtuple('ParamDef', ['name', 'istype', 'definition', 'isreadonly'])</code>  <code>module-attribute</code>","text":"<p>Parameter definition tuple.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>parameter name</p> <code>istype</code> <code>bool</code> <p>true if type parameter, otherwise false</p> <code>definition</code> <code>Definition</code> <p>parameter definition object</p> <code>isreadonly</code> <code>bool</code> <p>true if the parameter value can't be edited</p>"},{"location":"reference/pyrevit/forms/#pyrevit.forms-classes","title":"Classes","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.reactive","title":"<code>reactive(getter)</code>","text":"<p>               Bases: <code>property</code></p> <p>Decorator for WPF bound properties.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def __init__(self, getter):\n    def newgetter(ui_control):\n        try:\n            return getter(ui_control)\n        except AttributeError:\n            return None\n    super(reactive, self).__init__(newgetter)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.reactive-functions","title":"Functions","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.reactive.setter","title":"<code>setter(setter)</code>","text":"<p>Property setter.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def setter(self, setter):\n    \"\"\"Property setter.\"\"\"\n    def newsetter(ui_control, newvalue):\n        oldvalue = self.fget(ui_control)\n        if oldvalue != newvalue:\n            setter(ui_control, newvalue)\n            ui_control.OnPropertyChanged(setter.__name__)\n    return property(\n        fget=self.fget,\n        fset=newsetter,\n        fdel=self.fdel,\n        doc=self.__doc__)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.Reactive","title":"<code>Reactive</code>","text":"<p>               Bases: <code>INotifyPropertyChanged</code></p> <p>WPF property updator base mixin.</p>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.Reactive-functions","title":"Functions","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.Reactive.add_PropertyChanged","title":"<code>add_PropertyChanged(value)</code>","text":"<p>Called when a property is added to the object.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def add_PropertyChanged(self, value):\n    \"\"\"Called when a property is added to the object.\"\"\"\n    self.PropertyChanged += value\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.Reactive.remove_PropertyChanged","title":"<code>remove_PropertyChanged(value)</code>","text":"<p>Called when a property is removed from the object.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def remove_PropertyChanged(self, value):\n    \"\"\"Called when a property is removed from the object.\"\"\"\n    self.PropertyChanged -= value\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.Reactive.OnPropertyChanged","title":"<code>OnPropertyChanged(prop_name)</code>","text":"<p>Called when a property is changed.</p> <p>Parameters:</p> Name Type Description Default <code>prop_name</code> <code>str</code> <p>property name</p> required Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def OnPropertyChanged(self, prop_name):\n    \"\"\"Called when a property is changed.\n\n    Args:\n        prop_name (str): property name\n    \"\"\"\n    if self._propertyChangedCaller:\n        args = ComponentModel.PropertyChangedEventArgs(prop_name)\n        self._propertyChangedCaller(self, args)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.WindowToggler","title":"<code>WindowToggler(window)</code>","text":"<p>               Bases: <code>object</code></p> <p>Context manager to toggle window visibility.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def __init__(self, window):\n    self._window = window\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.WPFWindow","title":"<code>WPFWindow(xaml_source, literal_string=False, handle_esc=True, set_owner=True)</code>","text":"<p>               Bases: <code>Window</code></p> <p>WPF Window base class for all pyRevit forms.</p> <p>Parameters:</p> Name Type Description Default <code>xaml_source</code> <code>str</code> <p>xaml source filepath or xaml content</p> required <code>literal_string</code> <code>bool</code> <p>xaml_source contains xaml content, not filepath</p> <code>False</code> <code>handle_esc</code> <code>bool</code> <p>handle Escape button and close the window</p> <code>True</code> <code>set_owner</code> <code>bool</code> <p>set the owner of window to host app window</p> <code>True</code> <p>Examples:</p> <pre><code>from pyrevit import forms\nlayout = '&lt;Window ' \\\n         'xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\" ' \\\n         'xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\" ' \\\n         'ShowInTaskbar=\"False\" ResizeMode=\"NoResize\" ' \\\n         'WindowStartupLocation=\"CenterScreen\" ' \\\n         'HorizontalContentAlignment=\"Center\"&gt;' \\\n         '&lt;/Window&gt;'\nw = forms.WPFWindow(layout, literal_string=True)\nw.show()\n</code></pre> <p>Initialize WPF window and resources.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def __init__(self, xaml_source, literal_string=False, handle_esc=True, set_owner=True):\n    \"\"\"Initialize WPF window and resources.\"\"\"\n    # load xaml\n    self.load_xaml(\n        xaml_source,\n        literal_string=literal_string,\n        handle_esc=handle_esc,\n        set_owner=set_owner\n        )\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.WPFWindow-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.WPFWindow.pyrevit_version","title":"<code>pyrevit_version</code>  <code>property</code>","text":"<p>Active pyRevit formatted version e.g. '4.9-beta'.</p>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.WPFWindow-functions","title":"Functions","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.WPFWindow.load_xaml","title":"<code>load_xaml(xaml_source, literal_string=False, handle_esc=True, set_owner=True)</code>","text":"<p>Load the window XAML file.</p> <p>Parameters:</p> Name Type Description Default <code>xaml_source</code> <code>str</code> <p>The XAML content or file path to load.</p> required <code>literal_string</code> <code>bool</code> <p>True if <code>xaml_source</code> is content, False if it is a path. Defaults to False.</p> <code>False</code> <code>handle_esc</code> <code>bool</code> <p>Whether the ESC key should be handled. Defaults to True.</p> <code>True</code> <code>set_owner</code> <code>bool</code> <p>Whether to se the window owner. Defaults to True.</p> <code>True</code> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def load_xaml(self, xaml_source, literal_string=False, handle_esc=True, set_owner=True):\n    \"\"\"Load the window XAML file.\n\n    Args:\n        xaml_source (str): The XAML content or file path to load.\n        literal_string (bool, optional): True if `xaml_source` is content,\n            False if it is a path. Defaults to False.\n        handle_esc (bool, optional): Whether the ESC key should be handled.\n            Defaults to True.\n        set_owner (bool, optional): Whether to se the window owner.\n            Defaults to True.\n    \"\"\"\n    # create new id for this window\n    self.window_id = coreutils.new_uuid()\n\n    if not literal_string:\n        wpf.LoadComponent(self, self._determine_xaml(xaml_source))\n    else:\n        wpf.LoadComponent(self, framework.StringReader(xaml_source))\n\n    # set properties\n    self.thread_id = framework.get_current_thread_id()\n    if set_owner:\n        self.setup_owner()\n    self.setup_icon()\n    WPFWindow.setup_resources(self)\n    if handle_esc:\n        self.setup_default_handlers()\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.WPFWindow.merge_resource_dict","title":"<code>merge_resource_dict(xaml_source)</code>","text":"<p>Merge a ResourceDictionary xaml file with this window.</p> <p>Parameters:</p> Name Type Description Default <code>xaml_source</code> <code>str</code> <p>xaml file with the resource dictionary</p> required Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def merge_resource_dict(self, xaml_source):\n    \"\"\"Merge a ResourceDictionary xaml file with this window.\n\n    Args:\n        xaml_source (str): xaml file with the resource dictionary\n    \"\"\"\n    lang_dictionary = ResourceDictionary()\n    lang_dictionary.Source = Uri(xaml_source, UriKind.Absolute)\n    self.Resources.MergedDictionaries.Add(lang_dictionary)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.WPFWindow.get_locale_string","title":"<code>get_locale_string(string_name)</code>","text":"<p>Get localized string.</p> <p>Parameters:</p> Name Type Description Default <code>string_name</code> <code>str</code> <p>string name</p> required <p>Returns:</p> Type Description <code>str</code> <p>localized string</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def get_locale_string(self, string_name):\n    \"\"\"Get localized string.\n\n    Args:\n        string_name (str): string name\n\n    Returns:\n        (str): localized string\n    \"\"\"\n    return self.FindResource(string_name)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.WPFWindow.setup_owner","title":"<code>setup_owner()</code>","text":"<p>Set the window owner.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def setup_owner(self):\n    \"\"\"Set the window owner.\"\"\"\n    wih = Interop.WindowInteropHelper(self)\n    wih.Owner = AdWindows.ComponentManager.ApplicationWindow\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.WPFWindow.setup_resources","title":"<code>setup_resources(wpf_ctrl)</code>  <code>staticmethod</code>","text":"<p>Sets the WPF resources.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>@staticmethod\ndef setup_resources(wpf_ctrl):\n    \"\"\"Sets the WPF resources.\"\"\"\n    #2c3e50\n    wpf_ctrl.Resources['pyRevitDarkColor'] = \\\n        Media.Color.FromArgb(0xFF, 0x2c, 0x3e, 0x50)\n\n    #23303d\n    wpf_ctrl.Resources['pyRevitDarkerDarkColor'] = \\\n        Media.Color.FromArgb(0xFF, 0x23, 0x30, 0x3d)\n\n    #ffffff\n    wpf_ctrl.Resources['pyRevitButtonColor'] = \\\n        Media.Color.FromArgb(0xFF, 0xff, 0xff, 0xff)\n\n    #f39c12\n    wpf_ctrl.Resources['pyRevitAccentColor'] = \\\n        Media.Color.FromArgb(0xFF, 0xf3, 0x9c, 0x12)\n\n    wpf_ctrl.Resources['pyRevitDarkBrush'] = \\\n        Media.SolidColorBrush(wpf_ctrl.Resources['pyRevitDarkColor'])\n    wpf_ctrl.Resources['pyRevitAccentBrush'] = \\\n        Media.SolidColorBrush(wpf_ctrl.Resources['pyRevitAccentColor'])\n\n    wpf_ctrl.Resources['pyRevitDarkerDarkBrush'] = \\\n        Media.SolidColorBrush(wpf_ctrl.Resources['pyRevitDarkerDarkColor'])\n\n    wpf_ctrl.Resources['pyRevitButtonForgroundBrush'] = \\\n        Media.SolidColorBrush(wpf_ctrl.Resources['pyRevitButtonColor'])\n\n    wpf_ctrl.Resources['pyRevitRecognizesAccessKey'] = \\\n        DEFAULT_RECOGNIZE_ACCESS_KEY\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.WPFWindow.setup_default_handlers","title":"<code>setup_default_handlers()</code>","text":"<p>Set the default handlers.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def setup_default_handlers(self):\n    \"\"\"Set the default handlers.\"\"\"\n    self.PreviewKeyDown += self.handle_input_key    #pylint: disable=E1101\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.WPFWindow.handle_input_key","title":"<code>handle_input_key(sender, args)</code>","text":"<p>Handle keyboard input and close the window on Escape.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def handle_input_key(self, sender, args):    #pylint: disable=W0613\n    \"\"\"Handle keyboard input and close the window on Escape.\"\"\"\n    if args.Key == Input.Key.Escape:\n        self.Close()\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.WPFWindow.set_icon","title":"<code>set_icon(icon_path)</code>","text":"<p>Set window icon to given icon path.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def set_icon(self, icon_path):\n    \"\"\"Set window icon to given icon path.\"\"\"\n    self.Icon = utils.bitmap_from_file(icon_path)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.WPFWindow.setup_icon","title":"<code>setup_icon()</code>","text":"<p>Setup default window icon.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def setup_icon(self):\n    \"\"\"Setup default window icon.\"\"\"\n    self.set_icon(op.join(BIN_DIR, 'pyrevit_settings.png'))\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.WPFWindow.hide","title":"<code>hide()</code>","text":"<p>Hide window.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def hide(self):\n    \"\"\"Hide window.\"\"\"\n    self.Hide()\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.WPFWindow.show","title":"<code>show(modal=False)</code>","text":"<p>Show window.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def show(self, modal=False):\n    \"\"\"Show window.\"\"\"\n    if modal:\n        return self.ShowDialog()\n    # else open non-modal\n    self.Show()\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.WPFWindow.show_dialog","title":"<code>show_dialog()</code>","text":"<p>Show modal window.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def show_dialog(self):\n    \"\"\"Show modal window.\"\"\"\n    return self.ShowDialog()\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.WPFWindow.set_image_source_file","title":"<code>set_image_source_file(wpf_element, image_file)</code>  <code>staticmethod</code>","text":"<p>Set source file for image element.</p> <p>Parameters:</p> Name Type Description Default <code>wpf_element</code> <code>Image</code> <p>xaml image element</p> required <code>image_file</code> <code>str</code> <p>image file path</p> required Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>@staticmethod\ndef set_image_source_file(wpf_element, image_file):\n    \"\"\"Set source file for image element.\n\n    Args:\n        wpf_element (System.Windows.Controls.Image): xaml image element\n        image_file (str): image file path\n    \"\"\"\n    if not op.exists(image_file):\n        wpf_element.Source = \\\n            utils.bitmap_from_file(\n                os.path.join(EXEC_PARAMS.command_path,\n                             image_file)\n                )\n    else:\n        wpf_element.Source = utils.bitmap_from_file(image_file)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.WPFWindow.set_image_source","title":"<code>set_image_source(wpf_element, image_file)</code>","text":"<p>Set source file for image element.</p> <p>Parameters:</p> Name Type Description Default <code>wpf_element</code> <code>Image</code> <p>xaml image element</p> required <code>image_file</code> <code>str</code> <p>image file path</p> required Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def set_image_source(self, wpf_element, image_file):\n    \"\"\"Set source file for image element.\n\n    Args:\n        wpf_element (System.Windows.Controls.Image): xaml image element\n        image_file (str): image file path\n    \"\"\"\n    WPFWindow.set_image_source_file(wpf_element, image_file)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.WPFWindow.dispatch","title":"<code>dispatch(func, *args, **kwargs)</code>","text":"<p>Runs the function in a new thread.</p> <p>Parameters:</p> Name Type Description Default <code>func</code> <code>Callable</code> <p>function to run</p> required <code>*args</code> <code>Any</code> <p>positional arguments to pass to func</p> <code>()</code> <code>**kwargs</code> <code>Any</code> <p>keyword arguments to pass to func</p> <code>{}</code> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def dispatch(self, func, *args, **kwargs):\n    \"\"\"Runs the function in a new thread.\n\n    Args:\n        func (Callable): function to run\n        *args (Any): positional arguments to pass to func\n        **kwargs (Any): keyword arguments to pass to func\n    \"\"\"\n    if framework.get_current_thread_id() == self.thread_id:\n        t = threading.Thread(\n            target=func,\n            args=args,\n            kwargs=kwargs\n            )\n        t.start()\n    else:\n        # ask ui thread to call the func with args and kwargs\n        self.Dispatcher.Invoke(\n            System.Action(\n                lambda: func(*args, **kwargs)\n                ),\n            Threading.DispatcherPriority.Background\n            )\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.WPFWindow.conceal","title":"<code>conceal()</code>","text":"<p>Conceal window.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def conceal(self):\n    \"\"\"Conceal window.\"\"\"\n    return WindowToggler(self)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.WPFWindow.hide_element","title":"<code>hide_element(*wpf_elements)</code>  <code>staticmethod</code>","text":"<p>Collapse elements.</p> <p>Parameters:</p> Name Type Description Default <code>*wpf_elements</code> <code>list[UIElement]</code> <p>WPF framework elements to be collaped</p> <code>()</code> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>@staticmethod\ndef hide_element(*wpf_elements):\n    \"\"\"Collapse elements.\n\n    Args:\n        *wpf_elements (list[UIElement]): WPF framework elements to be collaped\n    \"\"\"\n    for wpfel in wpf_elements:\n        wpfel.Visibility = WPF_COLLAPSED\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.WPFWindow.show_element","title":"<code>show_element(*wpf_elements)</code>  <code>staticmethod</code>","text":"<p>Show collapsed elements.</p> <p>Parameters:</p> Name Type Description Default <code>*wpf_elements</code> <code>list[UIElement]</code> <p>WPF framework elements to be set to visible.</p> <code>()</code> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>@staticmethod\ndef show_element(*wpf_elements):\n    \"\"\"Show collapsed elements.\n\n    Args:\n        *wpf_elements (list[UIElement]): WPF framework elements to be set to visible.\n    \"\"\"\n    for wpfel in wpf_elements:\n        wpfel.Visibility = WPF_VISIBLE\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.WPFWindow.toggle_element","title":"<code>toggle_element(*wpf_elements)</code>  <code>staticmethod</code>","text":"<p>Toggle visibility of elements.</p> <p>Parameters:</p> Name Type Description Default <code>*wpf_elements</code> <code>list[UIElement]</code> <p>WPF framework elements to be toggled.</p> <code>()</code> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>@staticmethod\ndef toggle_element(*wpf_elements):\n    \"\"\"Toggle visibility of elements.\n\n    Args:\n        *wpf_elements (list[UIElement]): WPF framework elements to be toggled.\n    \"\"\"\n    for wpfel in wpf_elements:\n        if wpfel.Visibility == WPF_VISIBLE:\n            WPFWindow.hide_element(wpfel)\n        elif wpfel.Visibility == WPF_COLLAPSED:\n            WPFWindow.show_element(wpfel)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.WPFWindow.disable_element","title":"<code>disable_element(*wpf_elements)</code>  <code>staticmethod</code>","text":"<p>Enable elements.</p> <p>Parameters:</p> Name Type Description Default <code>*wpf_elements</code> <code>list[UIElement]</code> <p>WPF framework elements to be enabled</p> <code>()</code> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>@staticmethod\ndef disable_element(*wpf_elements):\n    \"\"\"Enable elements.\n\n    Args:\n        *wpf_elements (list[UIElement]): WPF framework elements to be enabled\n    \"\"\"\n    for wpfel in wpf_elements:\n        wpfel.IsEnabled = False\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.WPFWindow.enable_element","title":"<code>enable_element(*wpf_elements)</code>  <code>staticmethod</code>","text":"<p>Enable elements.</p> <p>Parameters:</p> Name Type Description Default <code>*wpf_elements</code> <code>list[UIElement]</code> <p>WPF framework elements to be enabled</p> <code>()</code> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>@staticmethod\ndef enable_element(*wpf_elements):\n    \"\"\"Enable elements.\n\n    Args:\n        *wpf_elements (list[UIElement]): WPF framework elements to be enabled\n    \"\"\"\n    for wpfel in wpf_elements:\n        wpfel.IsEnabled = True\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.WPFWindow.handle_url_click","title":"<code>handle_url_click(sender, args)</code>","text":"<p>Callback for handling click on package website url.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def handle_url_click(self, sender, args): #pylint: disable=unused-argument\n    \"\"\"Callback for handling click on package website url.\"\"\"\n    return webbrowser.open_new_tab(sender.NavigateUri.AbsoluteUri)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.WPFPanel","title":"<code>WPFPanel()</code>","text":"<p>               Bases: <code>Page</code></p> <p>WPF panel base class for all pyRevit dockable panels.</p> <p>panel_id (str) must be set on the type to dockable panel uuid panel_source (str): xaml source filepath</p> <p>Examples:</p> <pre><code>from pyrevit import forms\nclass MyPanel(forms.WPFPanel):\n    panel_id = \"181e05a4-28f6-4311-8a9f-d2aa528c8755\"\n    panel_source = \"MyPanel.xaml\"\n\nforms.register_dockable_panel(MyPanel)\n# then from the button that needs to open the panel\nforms.open_dockable_panel(\"181e05a4-28f6-4311-8a9f-d2aa528c8755\")\n</code></pre> <p>Initialize WPF panel and resources.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def __init__(self):\n    \"\"\"Initialize WPF panel and resources.\"\"\"\n    if not self.panel_id:\n        raise PyRevitException(\"\\\"panel_id\\\" property is not set\")\n    if not self.panel_source:\n        raise PyRevitException(\"\\\"panel_source\\\" property is not set\")\n\n    if not op.exists(self.panel_source):\n        wpf.LoadComponent(self,\n                          os.path.join(EXEC_PARAMS.command_path,\n                          self.panel_source))\n    else:\n        wpf.LoadComponent(self, self.panel_source)\n\n    # set properties\n    self.thread_id = framework.get_current_thread_id()\n    WPFWindow.setup_resources(self)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.WPFPanel-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.WPFPanel.panel_id","title":"<code>panel_id = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.WPFPanel.panel_source","title":"<code>panel_source = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.WPFPanel.thread_id","title":"<code>thread_id = framework.get_current_thread_id()</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.WPFPanel-functions","title":"Functions","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.WPFPanel.set_image_source","title":"<code>set_image_source(wpf_element, image_file)</code>","text":"<p>Set source file for image element.</p> <p>Parameters:</p> Name Type Description Default <code>wpf_element</code> <code>Image</code> <p>xaml image element</p> required <code>image_file</code> <code>str</code> <p>image file path</p> required Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def set_image_source(self, wpf_element, image_file):\n    \"\"\"Set source file for image element.\n\n    Args:\n        wpf_element (System.Windows.Controls.Image): xaml image element\n        image_file (str): image file path\n    \"\"\"\n    WPFWindow.set_image_source_file(wpf_element, image_file)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.WPFPanel.hide_element","title":"<code>hide_element(*wpf_elements)</code>  <code>staticmethod</code>","text":"<p>Collapse elements.</p> <p>Parameters:</p> Name Type Description Default <code>*wpf_elements</code> <code>list[UIElement]</code> <p>WPF framework elements to be collaped</p> <code>()</code> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>@staticmethod\ndef hide_element(*wpf_elements):\n    \"\"\"Collapse elements.\n\n    Args:\n        *wpf_elements (list[UIElement]): WPF framework elements to be collaped\n    \"\"\"\n    WPFPanel.hide_element(*wpf_elements)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.WPFPanel.show_element","title":"<code>show_element(*wpf_elements)</code>  <code>staticmethod</code>","text":"<p>Show collapsed elements.</p> <p>Parameters:</p> Name Type Description Default <code>*wpf_elements</code> <code>list[UIElement]</code> <p>WPF framework elements to be set to visible.</p> <code>()</code> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>@staticmethod\ndef show_element(*wpf_elements):\n    \"\"\"Show collapsed elements.\n\n    Args:\n        *wpf_elements (list[UIElement]): WPF framework elements to be set to visible.\n    \"\"\"\n    WPFPanel.show_element(*wpf_elements)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.WPFPanel.toggle_element","title":"<code>toggle_element(*wpf_elements)</code>  <code>staticmethod</code>","text":"<p>Toggle visibility of elements.</p> <p>Parameters:</p> Name Type Description Default <code>*wpf_elements</code> <code>list[UIElement]</code> <p>WPF framework elements to be toggled.</p> <code>()</code> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>@staticmethod\ndef toggle_element(*wpf_elements):\n    \"\"\"Toggle visibility of elements.\n\n    Args:\n        *wpf_elements (list[UIElement]): WPF framework elements to be toggled.\n    \"\"\"\n    WPFPanel.toggle_element(*wpf_elements)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.WPFPanel.disable_element","title":"<code>disable_element(*wpf_elements)</code>  <code>staticmethod</code>","text":"<p>Enable elements.</p> <p>Parameters:</p> Name Type Description Default <code>*wpf_elements</code> <code>list[UIElement]</code> <p>WPF framework elements to be enabled</p> <code>()</code> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>@staticmethod\ndef disable_element(*wpf_elements):\n    \"\"\"Enable elements.\n\n    Args:\n        *wpf_elements (list[UIElement]): WPF framework elements to be enabled\n    \"\"\"\n    WPFPanel.disable_element(*wpf_elements)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.WPFPanel.enable_element","title":"<code>enable_element(*wpf_elements)</code>  <code>staticmethod</code>","text":"<p>Enable elements.</p> <p>Parameters:</p> Name Type Description Default <code>*wpf_elements</code> <code>list</code> <p>WPF framework elements to be enabled</p> <code>()</code> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>@staticmethod\ndef enable_element(*wpf_elements):\n    \"\"\"Enable elements.\n\n    Args:\n        *wpf_elements (list): WPF framework elements to be enabled\n    \"\"\"\n    WPFPanel.enable_element(*wpf_elements)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.WPFPanel.handle_url_click","title":"<code>handle_url_click(sender, args)</code>","text":"<p>Callback for handling click on package website url.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def handle_url_click(self, sender, args): #pylint: disable=unused-argument\n    \"\"\"Callback for handling click on package website url.\"\"\"\n    return webbrowser.open_new_tab(sender.NavigateUri.AbsoluteUri)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.TemplateUserInputWindow","title":"<code>TemplateUserInputWindow(context, title, width, height, **kwargs)</code>","text":"<p>               Bases: <code>WPFWindow</code></p> <p>Base class for pyRevit user input standard forms.</p> <p>Parameters:</p> Name Type Description Default <code>context</code> <code>any</code> <p>window context element(s)</p> required <code>title</code> <code>str</code> <p>window title</p> required <code>width</code> <code>int</code> <p>window width</p> required <code>height</code> <code>int</code> <p>window height</p> required <code>**kwargs</code> <code>Any</code> <p>other arguments to be passed to :func:<code>_setup</code></p> <code>{}</code> <p>Initialize user input window.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def __init__(self, context, title, width, height, **kwargs):\n    \"\"\"Initialize user input window.\"\"\"\n    WPFWindow.__init__(self,\n                       op.join(XAML_FILES_DIR, self.xaml_source),\n                       handle_esc=True)\n    self.Title = title or 'pyRevit'\n    self.Width = width\n    self.Height = height\n\n    self._context = context\n    self.response = None\n\n    # parent window?\n    owner = kwargs.get('owner', None)\n    if owner:\n        # set wpf windows directly\n        self.Owner = owner\n        self.WindowStartupLocation = \\\n            framework.Windows.WindowStartupLocation.CenterOwner\n\n    self._setup(**kwargs)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.TemplateUserInputWindow-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.TemplateUserInputWindow.pyrevit_version","title":"<code>pyrevit_version</code>  <code>property</code>","text":"<p>Active pyRevit formatted version e.g. '4.9-beta'.</p>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.TemplateUserInputWindow.xaml_source","title":"<code>xaml_source = 'BaseWindow.xaml'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.TemplateUserInputWindow.Title","title":"<code>Title = title or 'pyRevit'</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.TemplateUserInputWindow.Width","title":"<code>Width = width</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.TemplateUserInputWindow.Height","title":"<code>Height = height</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.TemplateUserInputWindow.response","title":"<code>response = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.TemplateUserInputWindow.Owner","title":"<code>Owner = owner</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.TemplateUserInputWindow.WindowStartupLocation","title":"<code>WindowStartupLocation = framework.Windows.WindowStartupLocation.CenterOwner</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.TemplateUserInputWindow-functions","title":"Functions","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.TemplateUserInputWindow.load_xaml","title":"<code>load_xaml(xaml_source, literal_string=False, handle_esc=True, set_owner=True)</code>","text":"<p>Load the window XAML file.</p> <p>Parameters:</p> Name Type Description Default <code>xaml_source</code> <code>str</code> <p>The XAML content or file path to load.</p> required <code>literal_string</code> <code>bool</code> <p>True if <code>xaml_source</code> is content, False if it is a path. Defaults to False.</p> <code>False</code> <code>handle_esc</code> <code>bool</code> <p>Whether the ESC key should be handled. Defaults to True.</p> <code>True</code> <code>set_owner</code> <code>bool</code> <p>Whether to se the window owner. Defaults to True.</p> <code>True</code> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def load_xaml(self, xaml_source, literal_string=False, handle_esc=True, set_owner=True):\n    \"\"\"Load the window XAML file.\n\n    Args:\n        xaml_source (str): The XAML content or file path to load.\n        literal_string (bool, optional): True if `xaml_source` is content,\n            False if it is a path. Defaults to False.\n        handle_esc (bool, optional): Whether the ESC key should be handled.\n            Defaults to True.\n        set_owner (bool, optional): Whether to se the window owner.\n            Defaults to True.\n    \"\"\"\n    # create new id for this window\n    self.window_id = coreutils.new_uuid()\n\n    if not literal_string:\n        wpf.LoadComponent(self, self._determine_xaml(xaml_source))\n    else:\n        wpf.LoadComponent(self, framework.StringReader(xaml_source))\n\n    # set properties\n    self.thread_id = framework.get_current_thread_id()\n    if set_owner:\n        self.setup_owner()\n    self.setup_icon()\n    WPFWindow.setup_resources(self)\n    if handle_esc:\n        self.setup_default_handlers()\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.TemplateUserInputWindow.merge_resource_dict","title":"<code>merge_resource_dict(xaml_source)</code>","text":"<p>Merge a ResourceDictionary xaml file with this window.</p> <p>Parameters:</p> Name Type Description Default <code>xaml_source</code> <code>str</code> <p>xaml file with the resource dictionary</p> required Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def merge_resource_dict(self, xaml_source):\n    \"\"\"Merge a ResourceDictionary xaml file with this window.\n\n    Args:\n        xaml_source (str): xaml file with the resource dictionary\n    \"\"\"\n    lang_dictionary = ResourceDictionary()\n    lang_dictionary.Source = Uri(xaml_source, UriKind.Absolute)\n    self.Resources.MergedDictionaries.Add(lang_dictionary)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.TemplateUserInputWindow.get_locale_string","title":"<code>get_locale_string(string_name)</code>","text":"<p>Get localized string.</p> <p>Parameters:</p> Name Type Description Default <code>string_name</code> <code>str</code> <p>string name</p> required <p>Returns:</p> Type Description <code>str</code> <p>localized string</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def get_locale_string(self, string_name):\n    \"\"\"Get localized string.\n\n    Args:\n        string_name (str): string name\n\n    Returns:\n        (str): localized string\n    \"\"\"\n    return self.FindResource(string_name)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.TemplateUserInputWindow.setup_owner","title":"<code>setup_owner()</code>","text":"<p>Set the window owner.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def setup_owner(self):\n    \"\"\"Set the window owner.\"\"\"\n    wih = Interop.WindowInteropHelper(self)\n    wih.Owner = AdWindows.ComponentManager.ApplicationWindow\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.TemplateUserInputWindow.setup_resources","title":"<code>setup_resources(wpf_ctrl)</code>  <code>staticmethod</code>","text":"<p>Sets the WPF resources.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>@staticmethod\ndef setup_resources(wpf_ctrl):\n    \"\"\"Sets the WPF resources.\"\"\"\n    #2c3e50\n    wpf_ctrl.Resources['pyRevitDarkColor'] = \\\n        Media.Color.FromArgb(0xFF, 0x2c, 0x3e, 0x50)\n\n    #23303d\n    wpf_ctrl.Resources['pyRevitDarkerDarkColor'] = \\\n        Media.Color.FromArgb(0xFF, 0x23, 0x30, 0x3d)\n\n    #ffffff\n    wpf_ctrl.Resources['pyRevitButtonColor'] = \\\n        Media.Color.FromArgb(0xFF, 0xff, 0xff, 0xff)\n\n    #f39c12\n    wpf_ctrl.Resources['pyRevitAccentColor'] = \\\n        Media.Color.FromArgb(0xFF, 0xf3, 0x9c, 0x12)\n\n    wpf_ctrl.Resources['pyRevitDarkBrush'] = \\\n        Media.SolidColorBrush(wpf_ctrl.Resources['pyRevitDarkColor'])\n    wpf_ctrl.Resources['pyRevitAccentBrush'] = \\\n        Media.SolidColorBrush(wpf_ctrl.Resources['pyRevitAccentColor'])\n\n    wpf_ctrl.Resources['pyRevitDarkerDarkBrush'] = \\\n        Media.SolidColorBrush(wpf_ctrl.Resources['pyRevitDarkerDarkColor'])\n\n    wpf_ctrl.Resources['pyRevitButtonForgroundBrush'] = \\\n        Media.SolidColorBrush(wpf_ctrl.Resources['pyRevitButtonColor'])\n\n    wpf_ctrl.Resources['pyRevitRecognizesAccessKey'] = \\\n        DEFAULT_RECOGNIZE_ACCESS_KEY\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.TemplateUserInputWindow.setup_default_handlers","title":"<code>setup_default_handlers()</code>","text":"<p>Set the default handlers.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def setup_default_handlers(self):\n    \"\"\"Set the default handlers.\"\"\"\n    self.PreviewKeyDown += self.handle_input_key    #pylint: disable=E1101\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.TemplateUserInputWindow.handle_input_key","title":"<code>handle_input_key(sender, args)</code>","text":"<p>Handle keyboard input and close the window on Escape.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def handle_input_key(self, sender, args):    #pylint: disable=W0613\n    \"\"\"Handle keyboard input and close the window on Escape.\"\"\"\n    if args.Key == Input.Key.Escape:\n        self.Close()\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.TemplateUserInputWindow.set_icon","title":"<code>set_icon(icon_path)</code>","text":"<p>Set window icon to given icon path.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def set_icon(self, icon_path):\n    \"\"\"Set window icon to given icon path.\"\"\"\n    self.Icon = utils.bitmap_from_file(icon_path)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.TemplateUserInputWindow.setup_icon","title":"<code>setup_icon()</code>","text":"<p>Setup default window icon.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def setup_icon(self):\n    \"\"\"Setup default window icon.\"\"\"\n    self.set_icon(op.join(BIN_DIR, 'pyrevit_settings.png'))\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.TemplateUserInputWindow.hide","title":"<code>hide()</code>","text":"<p>Hide window.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def hide(self):\n    \"\"\"Hide window.\"\"\"\n    self.Hide()\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.TemplateUserInputWindow.show_dialog","title":"<code>show_dialog()</code>","text":"<p>Show modal window.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def show_dialog(self):\n    \"\"\"Show modal window.\"\"\"\n    return self.ShowDialog()\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.TemplateUserInputWindow.set_image_source_file","title":"<code>set_image_source_file(wpf_element, image_file)</code>  <code>staticmethod</code>","text":"<p>Set source file for image element.</p> <p>Parameters:</p> Name Type Description Default <code>wpf_element</code> <code>Image</code> <p>xaml image element</p> required <code>image_file</code> <code>str</code> <p>image file path</p> required Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>@staticmethod\ndef set_image_source_file(wpf_element, image_file):\n    \"\"\"Set source file for image element.\n\n    Args:\n        wpf_element (System.Windows.Controls.Image): xaml image element\n        image_file (str): image file path\n    \"\"\"\n    if not op.exists(image_file):\n        wpf_element.Source = \\\n            utils.bitmap_from_file(\n                os.path.join(EXEC_PARAMS.command_path,\n                             image_file)\n                )\n    else:\n        wpf_element.Source = utils.bitmap_from_file(image_file)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.TemplateUserInputWindow.set_image_source","title":"<code>set_image_source(wpf_element, image_file)</code>","text":"<p>Set source file for image element.</p> <p>Parameters:</p> Name Type Description Default <code>wpf_element</code> <code>Image</code> <p>xaml image element</p> required <code>image_file</code> <code>str</code> <p>image file path</p> required Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def set_image_source(self, wpf_element, image_file):\n    \"\"\"Set source file for image element.\n\n    Args:\n        wpf_element (System.Windows.Controls.Image): xaml image element\n        image_file (str): image file path\n    \"\"\"\n    WPFWindow.set_image_source_file(wpf_element, image_file)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.TemplateUserInputWindow.dispatch","title":"<code>dispatch(func, *args, **kwargs)</code>","text":"<p>Runs the function in a new thread.</p> <p>Parameters:</p> Name Type Description Default <code>func</code> <code>Callable</code> <p>function to run</p> required <code>*args</code> <code>Any</code> <p>positional arguments to pass to func</p> <code>()</code> <code>**kwargs</code> <code>Any</code> <p>keyword arguments to pass to func</p> <code>{}</code> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def dispatch(self, func, *args, **kwargs):\n    \"\"\"Runs the function in a new thread.\n\n    Args:\n        func (Callable): function to run\n        *args (Any): positional arguments to pass to func\n        **kwargs (Any): keyword arguments to pass to func\n    \"\"\"\n    if framework.get_current_thread_id() == self.thread_id:\n        t = threading.Thread(\n            target=func,\n            args=args,\n            kwargs=kwargs\n            )\n        t.start()\n    else:\n        # ask ui thread to call the func with args and kwargs\n        self.Dispatcher.Invoke(\n            System.Action(\n                lambda: func(*args, **kwargs)\n                ),\n            Threading.DispatcherPriority.Background\n            )\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.TemplateUserInputWindow.conceal","title":"<code>conceal()</code>","text":"<p>Conceal window.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def conceal(self):\n    \"\"\"Conceal window.\"\"\"\n    return WindowToggler(self)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.TemplateUserInputWindow.hide_element","title":"<code>hide_element(*wpf_elements)</code>  <code>staticmethod</code>","text":"<p>Collapse elements.</p> <p>Parameters:</p> Name Type Description Default <code>*wpf_elements</code> <code>list[UIElement]</code> <p>WPF framework elements to be collaped</p> <code>()</code> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>@staticmethod\ndef hide_element(*wpf_elements):\n    \"\"\"Collapse elements.\n\n    Args:\n        *wpf_elements (list[UIElement]): WPF framework elements to be collaped\n    \"\"\"\n    for wpfel in wpf_elements:\n        wpfel.Visibility = WPF_COLLAPSED\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.TemplateUserInputWindow.show_element","title":"<code>show_element(*wpf_elements)</code>  <code>staticmethod</code>","text":"<p>Show collapsed elements.</p> <p>Parameters:</p> Name Type Description Default <code>*wpf_elements</code> <code>list[UIElement]</code> <p>WPF framework elements to be set to visible.</p> <code>()</code> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>@staticmethod\ndef show_element(*wpf_elements):\n    \"\"\"Show collapsed elements.\n\n    Args:\n        *wpf_elements (list[UIElement]): WPF framework elements to be set to visible.\n    \"\"\"\n    for wpfel in wpf_elements:\n        wpfel.Visibility = WPF_VISIBLE\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.TemplateUserInputWindow.toggle_element","title":"<code>toggle_element(*wpf_elements)</code>  <code>staticmethod</code>","text":"<p>Toggle visibility of elements.</p> <p>Parameters:</p> Name Type Description Default <code>*wpf_elements</code> <code>list[UIElement]</code> <p>WPF framework elements to be toggled.</p> <code>()</code> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>@staticmethod\ndef toggle_element(*wpf_elements):\n    \"\"\"Toggle visibility of elements.\n\n    Args:\n        *wpf_elements (list[UIElement]): WPF framework elements to be toggled.\n    \"\"\"\n    for wpfel in wpf_elements:\n        if wpfel.Visibility == WPF_VISIBLE:\n            WPFWindow.hide_element(wpfel)\n        elif wpfel.Visibility == WPF_COLLAPSED:\n            WPFWindow.show_element(wpfel)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.TemplateUserInputWindow.disable_element","title":"<code>disable_element(*wpf_elements)</code>  <code>staticmethod</code>","text":"<p>Enable elements.</p> <p>Parameters:</p> Name Type Description Default <code>*wpf_elements</code> <code>list[UIElement]</code> <p>WPF framework elements to be enabled</p> <code>()</code> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>@staticmethod\ndef disable_element(*wpf_elements):\n    \"\"\"Enable elements.\n\n    Args:\n        *wpf_elements (list[UIElement]): WPF framework elements to be enabled\n    \"\"\"\n    for wpfel in wpf_elements:\n        wpfel.IsEnabled = False\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.TemplateUserInputWindow.enable_element","title":"<code>enable_element(*wpf_elements)</code>  <code>staticmethod</code>","text":"<p>Enable elements.</p> <p>Parameters:</p> Name Type Description Default <code>*wpf_elements</code> <code>list[UIElement]</code> <p>WPF framework elements to be enabled</p> <code>()</code> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>@staticmethod\ndef enable_element(*wpf_elements):\n    \"\"\"Enable elements.\n\n    Args:\n        *wpf_elements (list[UIElement]): WPF framework elements to be enabled\n    \"\"\"\n    for wpfel in wpf_elements:\n        wpfel.IsEnabled = True\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.TemplateUserInputWindow.handle_url_click","title":"<code>handle_url_click(sender, args)</code>","text":"<p>Callback for handling click on package website url.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def handle_url_click(self, sender, args): #pylint: disable=unused-argument\n    \"\"\"Callback for handling click on package website url.\"\"\"\n    return webbrowser.open_new_tab(sender.NavigateUri.AbsoluteUri)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.TemplateUserInputWindow.show","title":"<code>show(context, title='User Input', width=DEFAULT_INPUTWINDOW_WIDTH, height=DEFAULT_INPUTWINDOW_HEIGHT, **kwargs)</code>  <code>classmethod</code>","text":"<p>Show user input window.</p> <p>Parameters:</p> Name Type Description Default <code>context</code> <code>any</code> <p>window context element(s)</p> required <code>title</code> <code>str</code> <p>window title</p> <code>'User Input'</code> <code>width</code> <code>int</code> <p>window width</p> <code>DEFAULT_INPUTWINDOW_WIDTH</code> <code>height</code> <code>int</code> <p>window height</p> <code>DEFAULT_INPUTWINDOW_HEIGHT</code> <code>**kwargs</code> <code>any</code> <p>other arguments to be passed to window</p> <code>{}</code> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>@classmethod\ndef show(cls, context,  #pylint: disable=W0221\n         title='User Input',\n         width=DEFAULT_INPUTWINDOW_WIDTH,\n         height=DEFAULT_INPUTWINDOW_HEIGHT, **kwargs):\n    \"\"\"Show user input window.\n\n    Args:\n        context (any): window context element(s)\n        title (str): window title\n        width (int): window width\n        height (int): window height\n        **kwargs (any): other arguments to be passed to window\n    \"\"\"\n    dlg = cls(context, title, width, height, **kwargs)\n    dlg.ShowDialog()\n    return dlg.response\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.TemplateListItem","title":"<code>TemplateListItem(orig_item, checked=False, checkable=True, name_attr=None)</code>","text":"<p>               Bases: <code>Reactive</code></p> <p>Base class for checkbox option wrapping another object.</p> <p>Initialize the checkbox option and wrap given obj.</p> <p>Parameters:</p> Name Type Description Default <code>orig_item</code> <code>any</code> <p>Object to wrap (must have name property              or be convertable to string with str()</p> required <code>checked</code> <code>bool</code> <p>Initial state. Defaults to False</p> <code>False</code> <code>checkable</code> <code>bool</code> <p>Use checkbox for items</p> <code>True</code> <code>name_attr</code> <code>str</code> <p>Get this attribute of wrapped object as name</p> <code>None</code> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def __init__(self, orig_item,\n             checked=False, checkable=True, name_attr=None):\n    \"\"\"Initialize the checkbox option and wrap given obj.\n\n    Args:\n        orig_item (any): Object to wrap (must have name property\n                         or be convertable to string with str()\n        checked (bool): Initial state. Defaults to False\n        checkable (bool): Use checkbox for items\n        name_attr (str): Get this attribute of wrapped object as name\n    \"\"\"\n    super(TemplateListItem, self).__init__()\n    self.item = orig_item\n    self.state = checked\n    self._nameattr = name_attr\n    self._checkable = checkable\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.TemplateListItem-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.TemplateListItem.item","title":"<code>item = orig_item</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.TemplateListItem.state","title":"<code>state = checked</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.TemplateListItem.name","title":"<code>name</code>  <code>property</code>","text":"<p>Name property.</p>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.TemplateListItem.checkable","title":"<code>checkable</code>  <code>property</code> <code>writable</code>","text":"<p>List Item CheckBox Visibility.</p>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.TemplateListItem-functions","title":"Functions","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.TemplateListItem.add_PropertyChanged","title":"<code>add_PropertyChanged(value)</code>","text":"<p>Called when a property is added to the object.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def add_PropertyChanged(self, value):\n    \"\"\"Called when a property is added to the object.\"\"\"\n    self.PropertyChanged += value\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.TemplateListItem.remove_PropertyChanged","title":"<code>remove_PropertyChanged(value)</code>","text":"<p>Called when a property is removed from the object.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def remove_PropertyChanged(self, value):\n    \"\"\"Called when a property is removed from the object.\"\"\"\n    self.PropertyChanged -= value\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.TemplateListItem.OnPropertyChanged","title":"<code>OnPropertyChanged(prop_name)</code>","text":"<p>Called when a property is changed.</p> <p>Parameters:</p> Name Type Description Default <code>prop_name</code> <code>str</code> <p>property name</p> required Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def OnPropertyChanged(self, prop_name):\n    \"\"\"Called when a property is changed.\n\n    Args:\n        prop_name (str): property name\n    \"\"\"\n    if self._propertyChangedCaller:\n        args = ComponentModel.PropertyChangedEventArgs(prop_name)\n        self._propertyChangedCaller(self, args)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.TemplateListItem.unwrap","title":"<code>unwrap()</code>","text":"<p>Unwrap and return wrapped object.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def unwrap(self):\n    \"\"\"Unwrap and return wrapped object.\"\"\"\n    return self.item\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.TemplateListItem.checked","title":"<code>checked(value)</code>","text":"Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>@checked.setter\ndef checked(self, value):\n    self.state = value\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SelectFromList","title":"<code>SelectFromList(context, title, width, height, **kwargs)</code>","text":"<p>               Bases: <code>TemplateUserInputWindow</code></p> <p>Standard form to select from a list of items.</p> <p>Any object can be passed in a list to the <code>context</code> argument. This class wraps the objects passed to context, in <code>TemplateListItem</code>. This class provides the necessary mechanism to make this form work both for selecting items from a list, and from a list of checkboxes. See the list of arguments below for additional options and features.</p> <p>Parameters:</p> Name Type Description Default <code>context</code> <code>list[str] or dict[list[str]]</code> <p>list of items to be selected from OR dict of list of items to be selected from. use dict when input items need to be grouped e.g. List of sheets grouped by sheet set.</p> required <code>title</code> <code>str</code> <p>window title. see super class for defaults.</p> required <code>width</code> <code>int</code> <p>window width. see super class for defaults.</p> required <code>height</code> <code>int</code> <p>window height. see super class for defaults.</p> required <p>Other Parameters:</p> Name Type Description <code>button_name</code> <code>str</code> <p>name of select button. defaults to 'Select'</p> <code>name_attr</code> <code>str</code> <p>object attribute that should be read as item name.</p> <code>multiselect</code> <code>bool</code> <p>allow multi-selection (uses check boxes). defaults to False</p> <code>info_panel</code> <code>bool</code> <p>show information panel and fill with .description property of item</p> <code>return_all</code> <code>bool</code> <p>return all items. This is handly when some input items have states and the script needs to check the state changes on all items. This options works in multiselect mode only. defaults to False</p> <code>filterfunc</code> <code>function</code> <p>filter function to be applied to context items.</p> <code>resetfunc</code> <code>function</code> <p>reset function to be called when user clicks on Reset button</p> <code>group_selector_title</code> <code>str</code> <p>title for list group selector. defaults to 'List Group'</p> <code>default_group</code> <code>str</code> <p>name of defautl group to be selected</p> <code>sort_groups</code> <code>str</code> <p>Determines the sorting type applied to the list groups. This attribute can take one of the following values:     'sorted': This will sort the groups in standard alphabetical order     'natural': This will sort the groups in a manner that is more intuitive for human perception, especially when there are numbers involved.     'unsorted': The groups will maintain the original order in which they were provided, without any reordering.     Defaults to 'sorted'.</p> <p>Examples:</p> <p><pre><code>from pyrevit import forms\nitems = ['item1', 'item2', 'item3']\nforms.SelectFromList.show(items, button_name='Select Item')\n['item1']\n</code></pre> <pre><code>from pyrevit import forms\nops = [viewsheet1, viewsheet2, viewsheet3]\nres = forms.SelectFromList.show(ops,\n                                multiselect=False,\n                                name_attr='Name',\n                                button_name='Select Sheet')\n</code></pre></p> <pre><code>from pyrevit import forms\nops = {'Sheet Set A': [viewsheet1, viewsheet2, viewsheet3],\n       'Sheet Set B': [viewsheet4, viewsheet5, viewsheet6]}\nres = forms.SelectFromList.show(ops,\n                                multiselect=True,\n                                name_attr='Name',\n                                group_selector_title='Sheet Sets',\n                                button_name='Select Sheets',\n                                sort_groups='sorted')\n</code></pre> <p>This module also provides a wrapper base class :obj:<code>TemplateListItem</code> for when the checkbox option is wrapping another element, e.g. a Revit ViewSheet. Derive from this base class and define the name property to customize how the checkbox is named on the dialog.</p> <pre><code>from pyrevit import forms\nclass MyOption(forms.TemplateListItem):\n   @property\n   def name(self):\n       return '{} - {}{}'.format(self.item.SheetNumber,\n                                 self.item.SheetNumber)\nops = [MyOption('op1'), MyOption('op2', True), MyOption('op3')]\nres = forms.SelectFromList.show(ops,\n                                multiselect=True,\n                                button_name='Select Item')\n[bool(x) for x in res]  # or [x.state for x in res]\n[True, False, True]\n</code></pre> <p>Initialize user input window.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def __init__(self, context, title, width, height, **kwargs):\n    \"\"\"Initialize user input window.\"\"\"\n    WPFWindow.__init__(self,\n                       op.join(XAML_FILES_DIR, self.xaml_source),\n                       handle_esc=True)\n    self.Title = title or 'pyRevit'\n    self.Width = width\n    self.Height = height\n\n    self._context = context\n    self.response = None\n\n    # parent window?\n    owner = kwargs.get('owner', None)\n    if owner:\n        # set wpf windows directly\n        self.Owner = owner\n        self.WindowStartupLocation = \\\n            framework.Windows.WindowStartupLocation.CenterOwner\n\n    self._setup(**kwargs)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SelectFromList-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.SelectFromList.pyrevit_version","title":"<code>pyrevit_version</code>  <code>property</code>","text":"<p>Active pyRevit formatted version e.g. '4.9-beta'.</p>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SelectFromList.Title","title":"<code>Title = title or 'pyRevit'</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.SelectFromList.Width","title":"<code>Width = width</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.SelectFromList.Height","title":"<code>Height = height</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.SelectFromList.response","title":"<code>response = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.SelectFromList.Owner","title":"<code>Owner = owner</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.SelectFromList.WindowStartupLocation","title":"<code>WindowStartupLocation = framework.Windows.WindowStartupLocation.CenterOwner</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.SelectFromList.in_check","title":"<code>in_check = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.SelectFromList.in_uncheck","title":"<code>in_uncheck = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.SelectFromList.xaml_source","title":"<code>xaml_source = 'SelectFromList.xaml'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.SelectFromList.use_regex","title":"<code>use_regex</code>  <code>property</code>","text":"<p>Is using regex?</p>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SelectFromList-functions","title":"Functions","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.SelectFromList.load_xaml","title":"<code>load_xaml(xaml_source, literal_string=False, handle_esc=True, set_owner=True)</code>","text":"<p>Load the window XAML file.</p> <p>Parameters:</p> Name Type Description Default <code>xaml_source</code> <code>str</code> <p>The XAML content or file path to load.</p> required <code>literal_string</code> <code>bool</code> <p>True if <code>xaml_source</code> is content, False if it is a path. Defaults to False.</p> <code>False</code> <code>handle_esc</code> <code>bool</code> <p>Whether the ESC key should be handled. Defaults to True.</p> <code>True</code> <code>set_owner</code> <code>bool</code> <p>Whether to se the window owner. Defaults to True.</p> <code>True</code> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def load_xaml(self, xaml_source, literal_string=False, handle_esc=True, set_owner=True):\n    \"\"\"Load the window XAML file.\n\n    Args:\n        xaml_source (str): The XAML content or file path to load.\n        literal_string (bool, optional): True if `xaml_source` is content,\n            False if it is a path. Defaults to False.\n        handle_esc (bool, optional): Whether the ESC key should be handled.\n            Defaults to True.\n        set_owner (bool, optional): Whether to se the window owner.\n            Defaults to True.\n    \"\"\"\n    # create new id for this window\n    self.window_id = coreutils.new_uuid()\n\n    if not literal_string:\n        wpf.LoadComponent(self, self._determine_xaml(xaml_source))\n    else:\n        wpf.LoadComponent(self, framework.StringReader(xaml_source))\n\n    # set properties\n    self.thread_id = framework.get_current_thread_id()\n    if set_owner:\n        self.setup_owner()\n    self.setup_icon()\n    WPFWindow.setup_resources(self)\n    if handle_esc:\n        self.setup_default_handlers()\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SelectFromList.merge_resource_dict","title":"<code>merge_resource_dict(xaml_source)</code>","text":"<p>Merge a ResourceDictionary xaml file with this window.</p> <p>Parameters:</p> Name Type Description Default <code>xaml_source</code> <code>str</code> <p>xaml file with the resource dictionary</p> required Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def merge_resource_dict(self, xaml_source):\n    \"\"\"Merge a ResourceDictionary xaml file with this window.\n\n    Args:\n        xaml_source (str): xaml file with the resource dictionary\n    \"\"\"\n    lang_dictionary = ResourceDictionary()\n    lang_dictionary.Source = Uri(xaml_source, UriKind.Absolute)\n    self.Resources.MergedDictionaries.Add(lang_dictionary)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SelectFromList.get_locale_string","title":"<code>get_locale_string(string_name)</code>","text":"<p>Get localized string.</p> <p>Parameters:</p> Name Type Description Default <code>string_name</code> <code>str</code> <p>string name</p> required <p>Returns:</p> Type Description <code>str</code> <p>localized string</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def get_locale_string(self, string_name):\n    \"\"\"Get localized string.\n\n    Args:\n        string_name (str): string name\n\n    Returns:\n        (str): localized string\n    \"\"\"\n    return self.FindResource(string_name)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SelectFromList.setup_owner","title":"<code>setup_owner()</code>","text":"<p>Set the window owner.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def setup_owner(self):\n    \"\"\"Set the window owner.\"\"\"\n    wih = Interop.WindowInteropHelper(self)\n    wih.Owner = AdWindows.ComponentManager.ApplicationWindow\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SelectFromList.setup_resources","title":"<code>setup_resources(wpf_ctrl)</code>  <code>staticmethod</code>","text":"<p>Sets the WPF resources.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>@staticmethod\ndef setup_resources(wpf_ctrl):\n    \"\"\"Sets the WPF resources.\"\"\"\n    #2c3e50\n    wpf_ctrl.Resources['pyRevitDarkColor'] = \\\n        Media.Color.FromArgb(0xFF, 0x2c, 0x3e, 0x50)\n\n    #23303d\n    wpf_ctrl.Resources['pyRevitDarkerDarkColor'] = \\\n        Media.Color.FromArgb(0xFF, 0x23, 0x30, 0x3d)\n\n    #ffffff\n    wpf_ctrl.Resources['pyRevitButtonColor'] = \\\n        Media.Color.FromArgb(0xFF, 0xff, 0xff, 0xff)\n\n    #f39c12\n    wpf_ctrl.Resources['pyRevitAccentColor'] = \\\n        Media.Color.FromArgb(0xFF, 0xf3, 0x9c, 0x12)\n\n    wpf_ctrl.Resources['pyRevitDarkBrush'] = \\\n        Media.SolidColorBrush(wpf_ctrl.Resources['pyRevitDarkColor'])\n    wpf_ctrl.Resources['pyRevitAccentBrush'] = \\\n        Media.SolidColorBrush(wpf_ctrl.Resources['pyRevitAccentColor'])\n\n    wpf_ctrl.Resources['pyRevitDarkerDarkBrush'] = \\\n        Media.SolidColorBrush(wpf_ctrl.Resources['pyRevitDarkerDarkColor'])\n\n    wpf_ctrl.Resources['pyRevitButtonForgroundBrush'] = \\\n        Media.SolidColorBrush(wpf_ctrl.Resources['pyRevitButtonColor'])\n\n    wpf_ctrl.Resources['pyRevitRecognizesAccessKey'] = \\\n        DEFAULT_RECOGNIZE_ACCESS_KEY\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SelectFromList.setup_default_handlers","title":"<code>setup_default_handlers()</code>","text":"<p>Set the default handlers.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def setup_default_handlers(self):\n    \"\"\"Set the default handlers.\"\"\"\n    self.PreviewKeyDown += self.handle_input_key    #pylint: disable=E1101\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SelectFromList.handle_input_key","title":"<code>handle_input_key(sender, args)</code>","text":"<p>Handle keyboard input and close the window on Escape.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def handle_input_key(self, sender, args):    #pylint: disable=W0613\n    \"\"\"Handle keyboard input and close the window on Escape.\"\"\"\n    if args.Key == Input.Key.Escape:\n        self.Close()\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SelectFromList.set_icon","title":"<code>set_icon(icon_path)</code>","text":"<p>Set window icon to given icon path.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def set_icon(self, icon_path):\n    \"\"\"Set window icon to given icon path.\"\"\"\n    self.Icon = utils.bitmap_from_file(icon_path)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SelectFromList.setup_icon","title":"<code>setup_icon()</code>","text":"<p>Setup default window icon.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def setup_icon(self):\n    \"\"\"Setup default window icon.\"\"\"\n    self.set_icon(op.join(BIN_DIR, 'pyrevit_settings.png'))\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SelectFromList.hide","title":"<code>hide()</code>","text":"<p>Hide window.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def hide(self):\n    \"\"\"Hide window.\"\"\"\n    self.Hide()\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SelectFromList.show","title":"<code>show(context, title='User Input', width=DEFAULT_INPUTWINDOW_WIDTH, height=DEFAULT_INPUTWINDOW_HEIGHT, **kwargs)</code>  <code>classmethod</code>","text":"<p>Show user input window.</p> <p>Parameters:</p> Name Type Description Default <code>context</code> <code>any</code> <p>window context element(s)</p> required <code>title</code> <code>str</code> <p>window title</p> <code>'User Input'</code> <code>width</code> <code>int</code> <p>window width</p> <code>DEFAULT_INPUTWINDOW_WIDTH</code> <code>height</code> <code>int</code> <p>window height</p> <code>DEFAULT_INPUTWINDOW_HEIGHT</code> <code>**kwargs</code> <code>any</code> <p>other arguments to be passed to window</p> <code>{}</code> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>@classmethod\ndef show(cls, context,  #pylint: disable=W0221\n         title='User Input',\n         width=DEFAULT_INPUTWINDOW_WIDTH,\n         height=DEFAULT_INPUTWINDOW_HEIGHT, **kwargs):\n    \"\"\"Show user input window.\n\n    Args:\n        context (any): window context element(s)\n        title (str): window title\n        width (int): window width\n        height (int): window height\n        **kwargs (any): other arguments to be passed to window\n    \"\"\"\n    dlg = cls(context, title, width, height, **kwargs)\n    dlg.ShowDialog()\n    return dlg.response\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SelectFromList.show_dialog","title":"<code>show_dialog()</code>","text":"<p>Show modal window.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def show_dialog(self):\n    \"\"\"Show modal window.\"\"\"\n    return self.ShowDialog()\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SelectFromList.set_image_source_file","title":"<code>set_image_source_file(wpf_element, image_file)</code>  <code>staticmethod</code>","text":"<p>Set source file for image element.</p> <p>Parameters:</p> Name Type Description Default <code>wpf_element</code> <code>Image</code> <p>xaml image element</p> required <code>image_file</code> <code>str</code> <p>image file path</p> required Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>@staticmethod\ndef set_image_source_file(wpf_element, image_file):\n    \"\"\"Set source file for image element.\n\n    Args:\n        wpf_element (System.Windows.Controls.Image): xaml image element\n        image_file (str): image file path\n    \"\"\"\n    if not op.exists(image_file):\n        wpf_element.Source = \\\n            utils.bitmap_from_file(\n                os.path.join(EXEC_PARAMS.command_path,\n                             image_file)\n                )\n    else:\n        wpf_element.Source = utils.bitmap_from_file(image_file)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SelectFromList.set_image_source","title":"<code>set_image_source(wpf_element, image_file)</code>","text":"<p>Set source file for image element.</p> <p>Parameters:</p> Name Type Description Default <code>wpf_element</code> <code>Image</code> <p>xaml image element</p> required <code>image_file</code> <code>str</code> <p>image file path</p> required Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def set_image_source(self, wpf_element, image_file):\n    \"\"\"Set source file for image element.\n\n    Args:\n        wpf_element (System.Windows.Controls.Image): xaml image element\n        image_file (str): image file path\n    \"\"\"\n    WPFWindow.set_image_source_file(wpf_element, image_file)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SelectFromList.dispatch","title":"<code>dispatch(func, *args, **kwargs)</code>","text":"<p>Runs the function in a new thread.</p> <p>Parameters:</p> Name Type Description Default <code>func</code> <code>Callable</code> <p>function to run</p> required <code>*args</code> <code>Any</code> <p>positional arguments to pass to func</p> <code>()</code> <code>**kwargs</code> <code>Any</code> <p>keyword arguments to pass to func</p> <code>{}</code> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def dispatch(self, func, *args, **kwargs):\n    \"\"\"Runs the function in a new thread.\n\n    Args:\n        func (Callable): function to run\n        *args (Any): positional arguments to pass to func\n        **kwargs (Any): keyword arguments to pass to func\n    \"\"\"\n    if framework.get_current_thread_id() == self.thread_id:\n        t = threading.Thread(\n            target=func,\n            args=args,\n            kwargs=kwargs\n            )\n        t.start()\n    else:\n        # ask ui thread to call the func with args and kwargs\n        self.Dispatcher.Invoke(\n            System.Action(\n                lambda: func(*args, **kwargs)\n                ),\n            Threading.DispatcherPriority.Background\n            )\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SelectFromList.conceal","title":"<code>conceal()</code>","text":"<p>Conceal window.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def conceal(self):\n    \"\"\"Conceal window.\"\"\"\n    return WindowToggler(self)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SelectFromList.hide_element","title":"<code>hide_element(*wpf_elements)</code>  <code>staticmethod</code>","text":"<p>Collapse elements.</p> <p>Parameters:</p> Name Type Description Default <code>*wpf_elements</code> <code>list[UIElement]</code> <p>WPF framework elements to be collaped</p> <code>()</code> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>@staticmethod\ndef hide_element(*wpf_elements):\n    \"\"\"Collapse elements.\n\n    Args:\n        *wpf_elements (list[UIElement]): WPF framework elements to be collaped\n    \"\"\"\n    for wpfel in wpf_elements:\n        wpfel.Visibility = WPF_COLLAPSED\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SelectFromList.show_element","title":"<code>show_element(*wpf_elements)</code>  <code>staticmethod</code>","text":"<p>Show collapsed elements.</p> <p>Parameters:</p> Name Type Description Default <code>*wpf_elements</code> <code>list[UIElement]</code> <p>WPF framework elements to be set to visible.</p> <code>()</code> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>@staticmethod\ndef show_element(*wpf_elements):\n    \"\"\"Show collapsed elements.\n\n    Args:\n        *wpf_elements (list[UIElement]): WPF framework elements to be set to visible.\n    \"\"\"\n    for wpfel in wpf_elements:\n        wpfel.Visibility = WPF_VISIBLE\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SelectFromList.toggle_element","title":"<code>toggle_element(*wpf_elements)</code>  <code>staticmethod</code>","text":"<p>Toggle visibility of elements.</p> <p>Parameters:</p> Name Type Description Default <code>*wpf_elements</code> <code>list[UIElement]</code> <p>WPF framework elements to be toggled.</p> <code>()</code> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>@staticmethod\ndef toggle_element(*wpf_elements):\n    \"\"\"Toggle visibility of elements.\n\n    Args:\n        *wpf_elements (list[UIElement]): WPF framework elements to be toggled.\n    \"\"\"\n    for wpfel in wpf_elements:\n        if wpfel.Visibility == WPF_VISIBLE:\n            WPFWindow.hide_element(wpfel)\n        elif wpfel.Visibility == WPF_COLLAPSED:\n            WPFWindow.show_element(wpfel)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SelectFromList.disable_element","title":"<code>disable_element(*wpf_elements)</code>  <code>staticmethod</code>","text":"<p>Enable elements.</p> <p>Parameters:</p> Name Type Description Default <code>*wpf_elements</code> <code>list[UIElement]</code> <p>WPF framework elements to be enabled</p> <code>()</code> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>@staticmethod\ndef disable_element(*wpf_elements):\n    \"\"\"Enable elements.\n\n    Args:\n        *wpf_elements (list[UIElement]): WPF framework elements to be enabled\n    \"\"\"\n    for wpfel in wpf_elements:\n        wpfel.IsEnabled = False\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SelectFromList.enable_element","title":"<code>enable_element(*wpf_elements)</code>  <code>staticmethod</code>","text":"<p>Enable elements.</p> <p>Parameters:</p> Name Type Description Default <code>*wpf_elements</code> <code>list[UIElement]</code> <p>WPF framework elements to be enabled</p> <code>()</code> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>@staticmethod\ndef enable_element(*wpf_elements):\n    \"\"\"Enable elements.\n\n    Args:\n        *wpf_elements (list[UIElement]): WPF framework elements to be enabled\n    \"\"\"\n    for wpfel in wpf_elements:\n        wpfel.IsEnabled = True\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SelectFromList.handle_url_click","title":"<code>handle_url_click(sender, args)</code>","text":"<p>Callback for handling click on package website url.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def handle_url_click(self, sender, args): #pylint: disable=unused-argument\n    \"\"\"Callback for handling click on package website url.\"\"\"\n    return webbrowser.open_new_tab(sender.NavigateUri.AbsoluteUri)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SelectFromList.toggle_all","title":"<code>toggle_all(sender, args)</code>","text":"<p>Handle toggle all button to toggle state of all check boxes.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def toggle_all(self, sender, args):    #pylint: disable=W0613\n    \"\"\"Handle toggle all button to toggle state of all check boxes.\"\"\"\n    self._set_states(flip=True)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SelectFromList.check_all","title":"<code>check_all(sender, args)</code>","text":"<p>Handle check all button to mark all check boxes as checked.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def check_all(self, sender, args):    #pylint: disable=W0613\n    \"\"\"Handle check all button to mark all check boxes as checked.\"\"\"\n    self._set_states(state=True)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SelectFromList.uncheck_all","title":"<code>uncheck_all(sender, args)</code>","text":"<p>Handle uncheck all button to mark all check boxes as un-checked.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def uncheck_all(self, sender, args):    #pylint: disable=W0613\n    \"\"\"Handle uncheck all button to mark all check boxes as un-checked.\"\"\"\n    self._set_states(state=False)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SelectFromList.check_selected","title":"<code>check_selected(sender, args)</code>","text":"<p>Mark selected checkboxes as checked.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def check_selected(self, sender, args):    #pylint: disable=W0613\n    \"\"\"Mark selected checkboxes as checked.\"\"\"\n    if not self.in_check:\n        try:\n            self.in_check = True\n            self._set_states(state=True, selected=True)\n        finally:\n            self.in_check = False\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SelectFromList.uncheck_selected","title":"<code>uncheck_selected(sender, args)</code>","text":"<p>Mark selected checkboxes as unchecked.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def uncheck_selected(self, sender, args):    #pylint: disable=W0613\n    \"\"\"Mark selected checkboxes as unchecked.\"\"\"\n    if not self.in_uncheck:\n        try:\n            self.in_uncheck = True\n            self._set_states(state=False, selected=True)\n        finally:\n            self.in_uncheck = False\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SelectFromList.button_reset","title":"<code>button_reset(sender, args)</code>","text":"<p>Handle reset button click.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def button_reset(self, sender, args):#pylint: disable=W0613\n    \"\"\"Handle reset button click.\"\"\"\n    if self.reset_func:\n        all_items = self.list_lb.ItemsSource\n        self.reset_func(all_items)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SelectFromList.button_select","title":"<code>button_select(sender, args)</code>","text":"<p>Handle select button click.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def button_select(self, sender, args):    #pylint: disable=W0613\n    \"\"\"Handle select button click.\"\"\"\n    self.response = self._get_options()\n    self.Close()\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SelectFromList.search_txt_changed","title":"<code>search_txt_changed(sender, args)</code>","text":"<p>Handle text change in search box.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def search_txt_changed(self, sender, args):    #pylint: disable=W0613\n    \"\"\"Handle text change in search box.\"\"\"\n    if self.info_panel:\n        self._toggle_info_panel(state=False)\n\n    if self.search_tb.Text == '':\n        self.hide_element(self.clrsearch_b)\n    else:\n        self.show_element(self.clrsearch_b)\n\n    self._list_options(option_filter=self.search_tb.Text)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SelectFromList.selection_changed","title":"<code>selection_changed(sender, args)</code>","text":"<p>Handle selection change.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def selection_changed(self, sender, args):\n    \"\"\"Handle selection change.\"\"\"\n    if self.info_panel:\n        self._toggle_info_panel(state=False)\n\n    self._list_options(option_filter=self.search_tb.Text)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SelectFromList.selected_item_changed","title":"<code>selected_item_changed(sender, args)</code>","text":"<p>Handle selected item change.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def selected_item_changed(self, sender, args):\n    \"\"\"Handle selected item change.\"\"\"\n    if self.info_panel and self.list_lb.SelectedItem is not None:\n        self._toggle_info_panel(state=True)\n        self.infoData.Text = \\\n            getattr(self.list_lb.SelectedItem, 'description', '')\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SelectFromList.toggle_regex","title":"<code>toggle_regex(sender, args)</code>","text":"<p>Activate regex in search.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def toggle_regex(self, sender, args):\n    \"\"\"Activate regex in search.\"\"\"\n    self.regexToggle_b.Content = \\\n        self.Resources['regexIcon'] if self.use_regex \\\n            else self.Resources['filterIcon']\n    self.search_txt_changed(sender, args)\n    self.search_tb.Focus()\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SelectFromList.clear_search","title":"<code>clear_search(sender, args)</code>","text":"<p>Clear search box.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def clear_search(self, sender, args):    #pylint: disable=W0613\n    \"\"\"Clear search box.\"\"\"\n    self.search_tb.Text = ' '\n    self.search_tb.Clear()\n    self.search_tb.Focus()\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.CommandSwitchWindow","title":"<code>CommandSwitchWindow(context, title, width, height, **kwargs)</code>","text":"<p>               Bases: <code>TemplateUserInputWindow</code></p> <p>Standard form to select from a list of command options.</p> <p>Other Parameters:</p> Name Type Description <code>context</code> <code>list[str]</code> <p>list of command options to choose from</p> <code>switches</code> <code>list[str]</code> <p>list of on/off switches</p> <code>message</code> <code>str</code> <p>window title message</p> <code>config</code> <code>dict</code> <p>dictionary of config dicts for options or switches</p> <code>recognize_access_key</code> <code>bool</code> <p>recognize '_' as mark of access key</p> <p>Returns:</p> Type Description <code>str | tuple[str, dict]</code> <p>name of selected option. if <code>switches</code> option is used, returns a tuple of selection option name and dict of switches</p> <p>Examples:</p> <p>This is an example with series of command options:</p> <pre><code>from pyrevit import forms\nops = ['option1', 'option2', 'option3', 'option4']\nforms.CommandSwitchWindow.show(ops, message='Select Option')\n'option2'\n</code></pre> <p>A more advanced example of combining command options, on/off switches, and option or switch configuration options:</p> <pre><code>from pyrevit import forms\nops = ['option1', 'option2', 'option3', 'option4']\nswitches = ['switch1', 'switch2']\ncfgs = {'option1': { 'background': '0xFF55FF'}}\nrops, rswitches = forms.CommandSwitchWindow.show(\n    ops,\n    switches=switches\n    message='Select Option',\n    config=cfgs,\n    recognize_access_key=False\n    )\nrops\n'option2'\nrswitches\n{'switch1': False, 'switch2': True}\n</code></pre> <p>Initialize user input window.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def __init__(self, context, title, width, height, **kwargs):\n    \"\"\"Initialize user input window.\"\"\"\n    WPFWindow.__init__(self,\n                       op.join(XAML_FILES_DIR, self.xaml_source),\n                       handle_esc=True)\n    self.Title = title or 'pyRevit'\n    self.Width = width\n    self.Height = height\n\n    self._context = context\n    self.response = None\n\n    # parent window?\n    owner = kwargs.get('owner', None)\n    if owner:\n        # set wpf windows directly\n        self.Owner = owner\n        self.WindowStartupLocation = \\\n            framework.Windows.WindowStartupLocation.CenterOwner\n\n    self._setup(**kwargs)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.CommandSwitchWindow-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.CommandSwitchWindow.pyrevit_version","title":"<code>pyrevit_version</code>  <code>property</code>","text":"<p>Active pyRevit formatted version e.g. '4.9-beta'.</p>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.CommandSwitchWindow.Title","title":"<code>Title = title or 'pyRevit'</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.CommandSwitchWindow.Width","title":"<code>Width = width</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.CommandSwitchWindow.Height","title":"<code>Height = height</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.CommandSwitchWindow.response","title":"<code>response = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.CommandSwitchWindow.Owner","title":"<code>Owner = owner</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.CommandSwitchWindow.WindowStartupLocation","title":"<code>WindowStartupLocation = framework.Windows.WindowStartupLocation.CenterOwner</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.CommandSwitchWindow.xaml_source","title":"<code>xaml_source = 'CommandSwitchWindow.xaml'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.CommandSwitchWindow-functions","title":"Functions","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.CommandSwitchWindow.load_xaml","title":"<code>load_xaml(xaml_source, literal_string=False, handle_esc=True, set_owner=True)</code>","text":"<p>Load the window XAML file.</p> <p>Parameters:</p> Name Type Description Default <code>xaml_source</code> <code>str</code> <p>The XAML content or file path to load.</p> required <code>literal_string</code> <code>bool</code> <p>True if <code>xaml_source</code> is content, False if it is a path. Defaults to False.</p> <code>False</code> <code>handle_esc</code> <code>bool</code> <p>Whether the ESC key should be handled. Defaults to True.</p> <code>True</code> <code>set_owner</code> <code>bool</code> <p>Whether to se the window owner. Defaults to True.</p> <code>True</code> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def load_xaml(self, xaml_source, literal_string=False, handle_esc=True, set_owner=True):\n    \"\"\"Load the window XAML file.\n\n    Args:\n        xaml_source (str): The XAML content or file path to load.\n        literal_string (bool, optional): True if `xaml_source` is content,\n            False if it is a path. Defaults to False.\n        handle_esc (bool, optional): Whether the ESC key should be handled.\n            Defaults to True.\n        set_owner (bool, optional): Whether to se the window owner.\n            Defaults to True.\n    \"\"\"\n    # create new id for this window\n    self.window_id = coreutils.new_uuid()\n\n    if not literal_string:\n        wpf.LoadComponent(self, self._determine_xaml(xaml_source))\n    else:\n        wpf.LoadComponent(self, framework.StringReader(xaml_source))\n\n    # set properties\n    self.thread_id = framework.get_current_thread_id()\n    if set_owner:\n        self.setup_owner()\n    self.setup_icon()\n    WPFWindow.setup_resources(self)\n    if handle_esc:\n        self.setup_default_handlers()\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.CommandSwitchWindow.merge_resource_dict","title":"<code>merge_resource_dict(xaml_source)</code>","text":"<p>Merge a ResourceDictionary xaml file with this window.</p> <p>Parameters:</p> Name Type Description Default <code>xaml_source</code> <code>str</code> <p>xaml file with the resource dictionary</p> required Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def merge_resource_dict(self, xaml_source):\n    \"\"\"Merge a ResourceDictionary xaml file with this window.\n\n    Args:\n        xaml_source (str): xaml file with the resource dictionary\n    \"\"\"\n    lang_dictionary = ResourceDictionary()\n    lang_dictionary.Source = Uri(xaml_source, UriKind.Absolute)\n    self.Resources.MergedDictionaries.Add(lang_dictionary)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.CommandSwitchWindow.get_locale_string","title":"<code>get_locale_string(string_name)</code>","text":"<p>Get localized string.</p> <p>Parameters:</p> Name Type Description Default <code>string_name</code> <code>str</code> <p>string name</p> required <p>Returns:</p> Type Description <code>str</code> <p>localized string</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def get_locale_string(self, string_name):\n    \"\"\"Get localized string.\n\n    Args:\n        string_name (str): string name\n\n    Returns:\n        (str): localized string\n    \"\"\"\n    return self.FindResource(string_name)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.CommandSwitchWindow.setup_owner","title":"<code>setup_owner()</code>","text":"<p>Set the window owner.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def setup_owner(self):\n    \"\"\"Set the window owner.\"\"\"\n    wih = Interop.WindowInteropHelper(self)\n    wih.Owner = AdWindows.ComponentManager.ApplicationWindow\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.CommandSwitchWindow.setup_resources","title":"<code>setup_resources(wpf_ctrl)</code>  <code>staticmethod</code>","text":"<p>Sets the WPF resources.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>@staticmethod\ndef setup_resources(wpf_ctrl):\n    \"\"\"Sets the WPF resources.\"\"\"\n    #2c3e50\n    wpf_ctrl.Resources['pyRevitDarkColor'] = \\\n        Media.Color.FromArgb(0xFF, 0x2c, 0x3e, 0x50)\n\n    #23303d\n    wpf_ctrl.Resources['pyRevitDarkerDarkColor'] = \\\n        Media.Color.FromArgb(0xFF, 0x23, 0x30, 0x3d)\n\n    #ffffff\n    wpf_ctrl.Resources['pyRevitButtonColor'] = \\\n        Media.Color.FromArgb(0xFF, 0xff, 0xff, 0xff)\n\n    #f39c12\n    wpf_ctrl.Resources['pyRevitAccentColor'] = \\\n        Media.Color.FromArgb(0xFF, 0xf3, 0x9c, 0x12)\n\n    wpf_ctrl.Resources['pyRevitDarkBrush'] = \\\n        Media.SolidColorBrush(wpf_ctrl.Resources['pyRevitDarkColor'])\n    wpf_ctrl.Resources['pyRevitAccentBrush'] = \\\n        Media.SolidColorBrush(wpf_ctrl.Resources['pyRevitAccentColor'])\n\n    wpf_ctrl.Resources['pyRevitDarkerDarkBrush'] = \\\n        Media.SolidColorBrush(wpf_ctrl.Resources['pyRevitDarkerDarkColor'])\n\n    wpf_ctrl.Resources['pyRevitButtonForgroundBrush'] = \\\n        Media.SolidColorBrush(wpf_ctrl.Resources['pyRevitButtonColor'])\n\n    wpf_ctrl.Resources['pyRevitRecognizesAccessKey'] = \\\n        DEFAULT_RECOGNIZE_ACCESS_KEY\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.CommandSwitchWindow.setup_default_handlers","title":"<code>setup_default_handlers()</code>","text":"<p>Set the default handlers.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def setup_default_handlers(self):\n    \"\"\"Set the default handlers.\"\"\"\n    self.PreviewKeyDown += self.handle_input_key    #pylint: disable=E1101\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.CommandSwitchWindow.set_icon","title":"<code>set_icon(icon_path)</code>","text":"<p>Set window icon to given icon path.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def set_icon(self, icon_path):\n    \"\"\"Set window icon to given icon path.\"\"\"\n    self.Icon = utils.bitmap_from_file(icon_path)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.CommandSwitchWindow.setup_icon","title":"<code>setup_icon()</code>","text":"<p>Setup default window icon.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def setup_icon(self):\n    \"\"\"Setup default window icon.\"\"\"\n    self.set_icon(op.join(BIN_DIR, 'pyrevit_settings.png'))\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.CommandSwitchWindow.hide","title":"<code>hide()</code>","text":"<p>Hide window.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def hide(self):\n    \"\"\"Hide window.\"\"\"\n    self.Hide()\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.CommandSwitchWindow.show","title":"<code>show(context, title='User Input', width=DEFAULT_INPUTWINDOW_WIDTH, height=DEFAULT_INPUTWINDOW_HEIGHT, **kwargs)</code>  <code>classmethod</code>","text":"<p>Show user input window.</p> <p>Parameters:</p> Name Type Description Default <code>context</code> <code>any</code> <p>window context element(s)</p> required <code>title</code> <code>str</code> <p>window title</p> <code>'User Input'</code> <code>width</code> <code>int</code> <p>window width</p> <code>DEFAULT_INPUTWINDOW_WIDTH</code> <code>height</code> <code>int</code> <p>window height</p> <code>DEFAULT_INPUTWINDOW_HEIGHT</code> <code>**kwargs</code> <code>any</code> <p>other arguments to be passed to window</p> <code>{}</code> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>@classmethod\ndef show(cls, context,  #pylint: disable=W0221\n         title='User Input',\n         width=DEFAULT_INPUTWINDOW_WIDTH,\n         height=DEFAULT_INPUTWINDOW_HEIGHT, **kwargs):\n    \"\"\"Show user input window.\n\n    Args:\n        context (any): window context element(s)\n        title (str): window title\n        width (int): window width\n        height (int): window height\n        **kwargs (any): other arguments to be passed to window\n    \"\"\"\n    dlg = cls(context, title, width, height, **kwargs)\n    dlg.ShowDialog()\n    return dlg.response\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.CommandSwitchWindow.show_dialog","title":"<code>show_dialog()</code>","text":"<p>Show modal window.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def show_dialog(self):\n    \"\"\"Show modal window.\"\"\"\n    return self.ShowDialog()\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.CommandSwitchWindow.set_image_source_file","title":"<code>set_image_source_file(wpf_element, image_file)</code>  <code>staticmethod</code>","text":"<p>Set source file for image element.</p> <p>Parameters:</p> Name Type Description Default <code>wpf_element</code> <code>Image</code> <p>xaml image element</p> required <code>image_file</code> <code>str</code> <p>image file path</p> required Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>@staticmethod\ndef set_image_source_file(wpf_element, image_file):\n    \"\"\"Set source file for image element.\n\n    Args:\n        wpf_element (System.Windows.Controls.Image): xaml image element\n        image_file (str): image file path\n    \"\"\"\n    if not op.exists(image_file):\n        wpf_element.Source = \\\n            utils.bitmap_from_file(\n                os.path.join(EXEC_PARAMS.command_path,\n                             image_file)\n                )\n    else:\n        wpf_element.Source = utils.bitmap_from_file(image_file)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.CommandSwitchWindow.set_image_source","title":"<code>set_image_source(wpf_element, image_file)</code>","text":"<p>Set source file for image element.</p> <p>Parameters:</p> Name Type Description Default <code>wpf_element</code> <code>Image</code> <p>xaml image element</p> required <code>image_file</code> <code>str</code> <p>image file path</p> required Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def set_image_source(self, wpf_element, image_file):\n    \"\"\"Set source file for image element.\n\n    Args:\n        wpf_element (System.Windows.Controls.Image): xaml image element\n        image_file (str): image file path\n    \"\"\"\n    WPFWindow.set_image_source_file(wpf_element, image_file)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.CommandSwitchWindow.dispatch","title":"<code>dispatch(func, *args, **kwargs)</code>","text":"<p>Runs the function in a new thread.</p> <p>Parameters:</p> Name Type Description Default <code>func</code> <code>Callable</code> <p>function to run</p> required <code>*args</code> <code>Any</code> <p>positional arguments to pass to func</p> <code>()</code> <code>**kwargs</code> <code>Any</code> <p>keyword arguments to pass to func</p> <code>{}</code> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def dispatch(self, func, *args, **kwargs):\n    \"\"\"Runs the function in a new thread.\n\n    Args:\n        func (Callable): function to run\n        *args (Any): positional arguments to pass to func\n        **kwargs (Any): keyword arguments to pass to func\n    \"\"\"\n    if framework.get_current_thread_id() == self.thread_id:\n        t = threading.Thread(\n            target=func,\n            args=args,\n            kwargs=kwargs\n            )\n        t.start()\n    else:\n        # ask ui thread to call the func with args and kwargs\n        self.Dispatcher.Invoke(\n            System.Action(\n                lambda: func(*args, **kwargs)\n                ),\n            Threading.DispatcherPriority.Background\n            )\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.CommandSwitchWindow.conceal","title":"<code>conceal()</code>","text":"<p>Conceal window.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def conceal(self):\n    \"\"\"Conceal window.\"\"\"\n    return WindowToggler(self)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.CommandSwitchWindow.hide_element","title":"<code>hide_element(*wpf_elements)</code>  <code>staticmethod</code>","text":"<p>Collapse elements.</p> <p>Parameters:</p> Name Type Description Default <code>*wpf_elements</code> <code>list[UIElement]</code> <p>WPF framework elements to be collaped</p> <code>()</code> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>@staticmethod\ndef hide_element(*wpf_elements):\n    \"\"\"Collapse elements.\n\n    Args:\n        *wpf_elements (list[UIElement]): WPF framework elements to be collaped\n    \"\"\"\n    for wpfel in wpf_elements:\n        wpfel.Visibility = WPF_COLLAPSED\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.CommandSwitchWindow.show_element","title":"<code>show_element(*wpf_elements)</code>  <code>staticmethod</code>","text":"<p>Show collapsed elements.</p> <p>Parameters:</p> Name Type Description Default <code>*wpf_elements</code> <code>list[UIElement]</code> <p>WPF framework elements to be set to visible.</p> <code>()</code> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>@staticmethod\ndef show_element(*wpf_elements):\n    \"\"\"Show collapsed elements.\n\n    Args:\n        *wpf_elements (list[UIElement]): WPF framework elements to be set to visible.\n    \"\"\"\n    for wpfel in wpf_elements:\n        wpfel.Visibility = WPF_VISIBLE\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.CommandSwitchWindow.toggle_element","title":"<code>toggle_element(*wpf_elements)</code>  <code>staticmethod</code>","text":"<p>Toggle visibility of elements.</p> <p>Parameters:</p> Name Type Description Default <code>*wpf_elements</code> <code>list[UIElement]</code> <p>WPF framework elements to be toggled.</p> <code>()</code> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>@staticmethod\ndef toggle_element(*wpf_elements):\n    \"\"\"Toggle visibility of elements.\n\n    Args:\n        *wpf_elements (list[UIElement]): WPF framework elements to be toggled.\n    \"\"\"\n    for wpfel in wpf_elements:\n        if wpfel.Visibility == WPF_VISIBLE:\n            WPFWindow.hide_element(wpfel)\n        elif wpfel.Visibility == WPF_COLLAPSED:\n            WPFWindow.show_element(wpfel)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.CommandSwitchWindow.disable_element","title":"<code>disable_element(*wpf_elements)</code>  <code>staticmethod</code>","text":"<p>Enable elements.</p> <p>Parameters:</p> Name Type Description Default <code>*wpf_elements</code> <code>list[UIElement]</code> <p>WPF framework elements to be enabled</p> <code>()</code> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>@staticmethod\ndef disable_element(*wpf_elements):\n    \"\"\"Enable elements.\n\n    Args:\n        *wpf_elements (list[UIElement]): WPF framework elements to be enabled\n    \"\"\"\n    for wpfel in wpf_elements:\n        wpfel.IsEnabled = False\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.CommandSwitchWindow.enable_element","title":"<code>enable_element(*wpf_elements)</code>  <code>staticmethod</code>","text":"<p>Enable elements.</p> <p>Parameters:</p> Name Type Description Default <code>*wpf_elements</code> <code>list[UIElement]</code> <p>WPF framework elements to be enabled</p> <code>()</code> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>@staticmethod\ndef enable_element(*wpf_elements):\n    \"\"\"Enable elements.\n\n    Args:\n        *wpf_elements (list[UIElement]): WPF framework elements to be enabled\n    \"\"\"\n    for wpfel in wpf_elements:\n        wpfel.IsEnabled = True\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.CommandSwitchWindow.handle_url_click","title":"<code>handle_url_click(sender, args)</code>","text":"<p>Callback for handling click on package website url.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def handle_url_click(self, sender, args): #pylint: disable=unused-argument\n    \"\"\"Callback for handling click on package website url.\"\"\"\n    return webbrowser.open_new_tab(sender.NavigateUri.AbsoluteUri)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.CommandSwitchWindow.handle_click","title":"<code>handle_click(sender, args)</code>","text":"<p>Handle mouse click.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def handle_click(self, sender, args):    #pylint: disable=W0613\n    \"\"\"Handle mouse click.\"\"\"\n    self.Close()\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.CommandSwitchWindow.handle_input_key","title":"<code>handle_input_key(sender, args)</code>","text":"<p>Handle keyboard inputs.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def handle_input_key(self, sender, args):\n    \"\"\"Handle keyboard inputs.\"\"\"\n    if args.Key == Input.Key.Escape:\n        if self.search_tb.Text:\n            self.search_tb.Text = ''\n        else:\n            self.Close()\n    elif args.Key == Input.Key.Enter:\n        active_button = self._get_active_button()\n        if active_button:\n            if isinstance(active_button,\n                          framework.Controls.Primitives.ToggleButton):\n                return\n            self.process_option(active_button, None)\n            args.Handled = True\n    elif args.Key != Input.Key.Tab \\\n            and args.Key != Input.Key.Space\\\n            and args.Key != Input.Key.LeftShift\\\n            and args.Key != Input.Key.RightShift:\n        self.search_tb.Focus()\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.CommandSwitchWindow.search_txt_changed","title":"<code>search_txt_changed(sender, args)</code>","text":"<p>Handle text change in search box.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def search_txt_changed(self, sender, args):    #pylint: disable=W0613\n    \"\"\"Handle text change in search box.\"\"\"\n    self._filter_options(option_filter=self.search_tb.Text)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.CommandSwitchWindow.process_option","title":"<code>process_option(sender, args)</code>","text":"<p>Handle click on command option button.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def process_option(self, sender, args):    #pylint: disable=W0613\n    \"\"\"Handle click on command option button.\"\"\"\n    self.Close()\n    if sender:\n        self._setup_response(response=sender.Content)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.GetValueWindow","title":"<code>GetValueWindow(context, title, width, height, **kwargs)</code>","text":"<p>               Bases: <code>TemplateUserInputWindow</code></p> <p>Standard form to get simple values from user.</p> <p>Examples:</p> <pre><code>from pyrevit import forms\nitems = ['item1', 'item2', 'item3']\nforms.SelectFromList.show(items, button_name='Select Item')\n['item1']\n</code></pre> <p>Initialize user input window.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def __init__(self, context, title, width, height, **kwargs):\n    \"\"\"Initialize user input window.\"\"\"\n    WPFWindow.__init__(self,\n                       op.join(XAML_FILES_DIR, self.xaml_source),\n                       handle_esc=True)\n    self.Title = title or 'pyRevit'\n    self.Width = width\n    self.Height = height\n\n    self._context = context\n    self.response = None\n\n    # parent window?\n    owner = kwargs.get('owner', None)\n    if owner:\n        # set wpf windows directly\n        self.Owner = owner\n        self.WindowStartupLocation = \\\n            framework.Windows.WindowStartupLocation.CenterOwner\n\n    self._setup(**kwargs)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.GetValueWindow-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.GetValueWindow.pyrevit_version","title":"<code>pyrevit_version</code>  <code>property</code>","text":"<p>Active pyRevit formatted version e.g. '4.9-beta'.</p>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.GetValueWindow.Title","title":"<code>Title = title or 'pyRevit'</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.GetValueWindow.Width","title":"<code>Width = width</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.GetValueWindow.Height","title":"<code>Height = height</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.GetValueWindow.response","title":"<code>response = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.GetValueWindow.Owner","title":"<code>Owner = owner</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.GetValueWindow.WindowStartupLocation","title":"<code>WindowStartupLocation = framework.Windows.WindowStartupLocation.CenterOwner</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.GetValueWindow.xaml_source","title":"<code>xaml_source = 'GetValueWindow.xaml'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.GetValueWindow-functions","title":"Functions","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.GetValueWindow.load_xaml","title":"<code>load_xaml(xaml_source, literal_string=False, handle_esc=True, set_owner=True)</code>","text":"<p>Load the window XAML file.</p> <p>Parameters:</p> Name Type Description Default <code>xaml_source</code> <code>str</code> <p>The XAML content or file path to load.</p> required <code>literal_string</code> <code>bool</code> <p>True if <code>xaml_source</code> is content, False if it is a path. Defaults to False.</p> <code>False</code> <code>handle_esc</code> <code>bool</code> <p>Whether the ESC key should be handled. Defaults to True.</p> <code>True</code> <code>set_owner</code> <code>bool</code> <p>Whether to se the window owner. Defaults to True.</p> <code>True</code> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def load_xaml(self, xaml_source, literal_string=False, handle_esc=True, set_owner=True):\n    \"\"\"Load the window XAML file.\n\n    Args:\n        xaml_source (str): The XAML content or file path to load.\n        literal_string (bool, optional): True if `xaml_source` is content,\n            False if it is a path. Defaults to False.\n        handle_esc (bool, optional): Whether the ESC key should be handled.\n            Defaults to True.\n        set_owner (bool, optional): Whether to se the window owner.\n            Defaults to True.\n    \"\"\"\n    # create new id for this window\n    self.window_id = coreutils.new_uuid()\n\n    if not literal_string:\n        wpf.LoadComponent(self, self._determine_xaml(xaml_source))\n    else:\n        wpf.LoadComponent(self, framework.StringReader(xaml_source))\n\n    # set properties\n    self.thread_id = framework.get_current_thread_id()\n    if set_owner:\n        self.setup_owner()\n    self.setup_icon()\n    WPFWindow.setup_resources(self)\n    if handle_esc:\n        self.setup_default_handlers()\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.GetValueWindow.merge_resource_dict","title":"<code>merge_resource_dict(xaml_source)</code>","text":"<p>Merge a ResourceDictionary xaml file with this window.</p> <p>Parameters:</p> Name Type Description Default <code>xaml_source</code> <code>str</code> <p>xaml file with the resource dictionary</p> required Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def merge_resource_dict(self, xaml_source):\n    \"\"\"Merge a ResourceDictionary xaml file with this window.\n\n    Args:\n        xaml_source (str): xaml file with the resource dictionary\n    \"\"\"\n    lang_dictionary = ResourceDictionary()\n    lang_dictionary.Source = Uri(xaml_source, UriKind.Absolute)\n    self.Resources.MergedDictionaries.Add(lang_dictionary)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.GetValueWindow.get_locale_string","title":"<code>get_locale_string(string_name)</code>","text":"<p>Get localized string.</p> <p>Parameters:</p> Name Type Description Default <code>string_name</code> <code>str</code> <p>string name</p> required <p>Returns:</p> Type Description <code>str</code> <p>localized string</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def get_locale_string(self, string_name):\n    \"\"\"Get localized string.\n\n    Args:\n        string_name (str): string name\n\n    Returns:\n        (str): localized string\n    \"\"\"\n    return self.FindResource(string_name)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.GetValueWindow.setup_owner","title":"<code>setup_owner()</code>","text":"<p>Set the window owner.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def setup_owner(self):\n    \"\"\"Set the window owner.\"\"\"\n    wih = Interop.WindowInteropHelper(self)\n    wih.Owner = AdWindows.ComponentManager.ApplicationWindow\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.GetValueWindow.setup_resources","title":"<code>setup_resources(wpf_ctrl)</code>  <code>staticmethod</code>","text":"<p>Sets the WPF resources.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>@staticmethod\ndef setup_resources(wpf_ctrl):\n    \"\"\"Sets the WPF resources.\"\"\"\n    #2c3e50\n    wpf_ctrl.Resources['pyRevitDarkColor'] = \\\n        Media.Color.FromArgb(0xFF, 0x2c, 0x3e, 0x50)\n\n    #23303d\n    wpf_ctrl.Resources['pyRevitDarkerDarkColor'] = \\\n        Media.Color.FromArgb(0xFF, 0x23, 0x30, 0x3d)\n\n    #ffffff\n    wpf_ctrl.Resources['pyRevitButtonColor'] = \\\n        Media.Color.FromArgb(0xFF, 0xff, 0xff, 0xff)\n\n    #f39c12\n    wpf_ctrl.Resources['pyRevitAccentColor'] = \\\n        Media.Color.FromArgb(0xFF, 0xf3, 0x9c, 0x12)\n\n    wpf_ctrl.Resources['pyRevitDarkBrush'] = \\\n        Media.SolidColorBrush(wpf_ctrl.Resources['pyRevitDarkColor'])\n    wpf_ctrl.Resources['pyRevitAccentBrush'] = \\\n        Media.SolidColorBrush(wpf_ctrl.Resources['pyRevitAccentColor'])\n\n    wpf_ctrl.Resources['pyRevitDarkerDarkBrush'] = \\\n        Media.SolidColorBrush(wpf_ctrl.Resources['pyRevitDarkerDarkColor'])\n\n    wpf_ctrl.Resources['pyRevitButtonForgroundBrush'] = \\\n        Media.SolidColorBrush(wpf_ctrl.Resources['pyRevitButtonColor'])\n\n    wpf_ctrl.Resources['pyRevitRecognizesAccessKey'] = \\\n        DEFAULT_RECOGNIZE_ACCESS_KEY\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.GetValueWindow.setup_default_handlers","title":"<code>setup_default_handlers()</code>","text":"<p>Set the default handlers.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def setup_default_handlers(self):\n    \"\"\"Set the default handlers.\"\"\"\n    self.PreviewKeyDown += self.handle_input_key    #pylint: disable=E1101\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.GetValueWindow.handle_input_key","title":"<code>handle_input_key(sender, args)</code>","text":"<p>Handle keyboard input and close the window on Escape.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def handle_input_key(self, sender, args):    #pylint: disable=W0613\n    \"\"\"Handle keyboard input and close the window on Escape.\"\"\"\n    if args.Key == Input.Key.Escape:\n        self.Close()\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.GetValueWindow.set_icon","title":"<code>set_icon(icon_path)</code>","text":"<p>Set window icon to given icon path.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def set_icon(self, icon_path):\n    \"\"\"Set window icon to given icon path.\"\"\"\n    self.Icon = utils.bitmap_from_file(icon_path)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.GetValueWindow.setup_icon","title":"<code>setup_icon()</code>","text":"<p>Setup default window icon.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def setup_icon(self):\n    \"\"\"Setup default window icon.\"\"\"\n    self.set_icon(op.join(BIN_DIR, 'pyrevit_settings.png'))\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.GetValueWindow.hide","title":"<code>hide()</code>","text":"<p>Hide window.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def hide(self):\n    \"\"\"Hide window.\"\"\"\n    self.Hide()\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.GetValueWindow.show","title":"<code>show(context, title='User Input', width=DEFAULT_INPUTWINDOW_WIDTH, height=DEFAULT_INPUTWINDOW_HEIGHT, **kwargs)</code>  <code>classmethod</code>","text":"<p>Show user input window.</p> <p>Parameters:</p> Name Type Description Default <code>context</code> <code>any</code> <p>window context element(s)</p> required <code>title</code> <code>str</code> <p>window title</p> <code>'User Input'</code> <code>width</code> <code>int</code> <p>window width</p> <code>DEFAULT_INPUTWINDOW_WIDTH</code> <code>height</code> <code>int</code> <p>window height</p> <code>DEFAULT_INPUTWINDOW_HEIGHT</code> <code>**kwargs</code> <code>any</code> <p>other arguments to be passed to window</p> <code>{}</code> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>@classmethod\ndef show(cls, context,  #pylint: disable=W0221\n         title='User Input',\n         width=DEFAULT_INPUTWINDOW_WIDTH,\n         height=DEFAULT_INPUTWINDOW_HEIGHT, **kwargs):\n    \"\"\"Show user input window.\n\n    Args:\n        context (any): window context element(s)\n        title (str): window title\n        width (int): window width\n        height (int): window height\n        **kwargs (any): other arguments to be passed to window\n    \"\"\"\n    dlg = cls(context, title, width, height, **kwargs)\n    dlg.ShowDialog()\n    return dlg.response\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.GetValueWindow.show_dialog","title":"<code>show_dialog()</code>","text":"<p>Show modal window.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def show_dialog(self):\n    \"\"\"Show modal window.\"\"\"\n    return self.ShowDialog()\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.GetValueWindow.set_image_source_file","title":"<code>set_image_source_file(wpf_element, image_file)</code>  <code>staticmethod</code>","text":"<p>Set source file for image element.</p> <p>Parameters:</p> Name Type Description Default <code>wpf_element</code> <code>Image</code> <p>xaml image element</p> required <code>image_file</code> <code>str</code> <p>image file path</p> required Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>@staticmethod\ndef set_image_source_file(wpf_element, image_file):\n    \"\"\"Set source file for image element.\n\n    Args:\n        wpf_element (System.Windows.Controls.Image): xaml image element\n        image_file (str): image file path\n    \"\"\"\n    if not op.exists(image_file):\n        wpf_element.Source = \\\n            utils.bitmap_from_file(\n                os.path.join(EXEC_PARAMS.command_path,\n                             image_file)\n                )\n    else:\n        wpf_element.Source = utils.bitmap_from_file(image_file)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.GetValueWindow.set_image_source","title":"<code>set_image_source(wpf_element, image_file)</code>","text":"<p>Set source file for image element.</p> <p>Parameters:</p> Name Type Description Default <code>wpf_element</code> <code>Image</code> <p>xaml image element</p> required <code>image_file</code> <code>str</code> <p>image file path</p> required Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def set_image_source(self, wpf_element, image_file):\n    \"\"\"Set source file for image element.\n\n    Args:\n        wpf_element (System.Windows.Controls.Image): xaml image element\n        image_file (str): image file path\n    \"\"\"\n    WPFWindow.set_image_source_file(wpf_element, image_file)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.GetValueWindow.dispatch","title":"<code>dispatch(func, *args, **kwargs)</code>","text":"<p>Runs the function in a new thread.</p> <p>Parameters:</p> Name Type Description Default <code>func</code> <code>Callable</code> <p>function to run</p> required <code>*args</code> <code>Any</code> <p>positional arguments to pass to func</p> <code>()</code> <code>**kwargs</code> <code>Any</code> <p>keyword arguments to pass to func</p> <code>{}</code> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def dispatch(self, func, *args, **kwargs):\n    \"\"\"Runs the function in a new thread.\n\n    Args:\n        func (Callable): function to run\n        *args (Any): positional arguments to pass to func\n        **kwargs (Any): keyword arguments to pass to func\n    \"\"\"\n    if framework.get_current_thread_id() == self.thread_id:\n        t = threading.Thread(\n            target=func,\n            args=args,\n            kwargs=kwargs\n            )\n        t.start()\n    else:\n        # ask ui thread to call the func with args and kwargs\n        self.Dispatcher.Invoke(\n            System.Action(\n                lambda: func(*args, **kwargs)\n                ),\n            Threading.DispatcherPriority.Background\n            )\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.GetValueWindow.conceal","title":"<code>conceal()</code>","text":"<p>Conceal window.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def conceal(self):\n    \"\"\"Conceal window.\"\"\"\n    return WindowToggler(self)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.GetValueWindow.hide_element","title":"<code>hide_element(*wpf_elements)</code>  <code>staticmethod</code>","text":"<p>Collapse elements.</p> <p>Parameters:</p> Name Type Description Default <code>*wpf_elements</code> <code>list[UIElement]</code> <p>WPF framework elements to be collaped</p> <code>()</code> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>@staticmethod\ndef hide_element(*wpf_elements):\n    \"\"\"Collapse elements.\n\n    Args:\n        *wpf_elements (list[UIElement]): WPF framework elements to be collaped\n    \"\"\"\n    for wpfel in wpf_elements:\n        wpfel.Visibility = WPF_COLLAPSED\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.GetValueWindow.show_element","title":"<code>show_element(*wpf_elements)</code>  <code>staticmethod</code>","text":"<p>Show collapsed elements.</p> <p>Parameters:</p> Name Type Description Default <code>*wpf_elements</code> <code>list[UIElement]</code> <p>WPF framework elements to be set to visible.</p> <code>()</code> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>@staticmethod\ndef show_element(*wpf_elements):\n    \"\"\"Show collapsed elements.\n\n    Args:\n        *wpf_elements (list[UIElement]): WPF framework elements to be set to visible.\n    \"\"\"\n    for wpfel in wpf_elements:\n        wpfel.Visibility = WPF_VISIBLE\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.GetValueWindow.toggle_element","title":"<code>toggle_element(*wpf_elements)</code>  <code>staticmethod</code>","text":"<p>Toggle visibility of elements.</p> <p>Parameters:</p> Name Type Description Default <code>*wpf_elements</code> <code>list[UIElement]</code> <p>WPF framework elements to be toggled.</p> <code>()</code> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>@staticmethod\ndef toggle_element(*wpf_elements):\n    \"\"\"Toggle visibility of elements.\n\n    Args:\n        *wpf_elements (list[UIElement]): WPF framework elements to be toggled.\n    \"\"\"\n    for wpfel in wpf_elements:\n        if wpfel.Visibility == WPF_VISIBLE:\n            WPFWindow.hide_element(wpfel)\n        elif wpfel.Visibility == WPF_COLLAPSED:\n            WPFWindow.show_element(wpfel)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.GetValueWindow.disable_element","title":"<code>disable_element(*wpf_elements)</code>  <code>staticmethod</code>","text":"<p>Enable elements.</p> <p>Parameters:</p> Name Type Description Default <code>*wpf_elements</code> <code>list[UIElement]</code> <p>WPF framework elements to be enabled</p> <code>()</code> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>@staticmethod\ndef disable_element(*wpf_elements):\n    \"\"\"Enable elements.\n\n    Args:\n        *wpf_elements (list[UIElement]): WPF framework elements to be enabled\n    \"\"\"\n    for wpfel in wpf_elements:\n        wpfel.IsEnabled = False\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.GetValueWindow.enable_element","title":"<code>enable_element(*wpf_elements)</code>  <code>staticmethod</code>","text":"<p>Enable elements.</p> <p>Parameters:</p> Name Type Description Default <code>*wpf_elements</code> <code>list[UIElement]</code> <p>WPF framework elements to be enabled</p> <code>()</code> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>@staticmethod\ndef enable_element(*wpf_elements):\n    \"\"\"Enable elements.\n\n    Args:\n        *wpf_elements (list[UIElement]): WPF framework elements to be enabled\n    \"\"\"\n    for wpfel in wpf_elements:\n        wpfel.IsEnabled = True\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.GetValueWindow.handle_url_click","title":"<code>handle_url_click(sender, args)</code>","text":"<p>Callback for handling click on package website url.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def handle_url_click(self, sender, args): #pylint: disable=unused-argument\n    \"\"\"Callback for handling click on package website url.\"\"\"\n    return webbrowser.open_new_tab(sender.NavigateUri.AbsoluteUri)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.GetValueWindow.string_value_changed","title":"<code>string_value_changed(sender, args)</code>","text":"<p>Handle string vlaue update event.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def string_value_changed(self, sender, args): #pylint: disable=unused-argument\n    \"\"\"Handle string vlaue update event.\"\"\"\n    filtered_rvalues = \\\n        sorted([x for x in self.reserved_values\n                if self.stringValue_tb.Text == str(x)])\n    similar_rvalues = \\\n        sorted([x for x in self.reserved_values\n                if self.stringValue_tb.Text in str(x)],\n               reverse=True)\n    filtered_rvalues.extend(similar_rvalues)\n    if filtered_rvalues:\n        self.reservedValuesList.ItemsSource = filtered_rvalues\n        self.show_element(self.reservedValuesListPanel)\n        self.okayButton.IsEnabled = \\\n            self.stringValue_tb.Text not in filtered_rvalues\n    else:\n        self.reservedValuesList.ItemsSource = []\n        self.hide_element(self.reservedValuesListPanel)\n        self.okayButton.IsEnabled = True\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.GetValueWindow.select","title":"<code>select(sender, args)</code>","text":"<p>Process input data and set the response.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def select(self, sender, args):    #pylint: disable=W0613\n    \"\"\"Process input data and set the response.\"\"\"\n    self.Close()\n    if self.value_type == 'string':\n        self.response = self.stringValue_tb.Text\n    elif self.value_type == 'dropdown':\n        self.response = self.dropdown_cb.SelectedItem\n    elif self.value_type == 'date':\n        if self.datePicker.SelectedDate:\n            datestr = self.datePicker.SelectedDate.ToString(\"MM/dd/yyyy\")\n            self.response = datetime.datetime.strptime(datestr, r'%m/%d/%Y')\n        else:\n            self.response = None\n    elif self.value_type == 'slider':\n        self.response = self.numberPicker.Value\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.TemplatePromptBar","title":"<code>TemplatePromptBar(height=32, **kwargs)</code>","text":"<p>               Bases: <code>WPFWindow</code></p> <p>Template context-manager class for creating prompt bars.</p> <p>Prompt bars are show at the top of the active Revit window and are designed for better prompt visibility.</p> <p>Parameters:</p> Name Type Description Default <code>height</code> <code>int</code> <p>window height</p> <code>32</code> <code>**kwargs</code> <code>Any</code> <p>other arguments to be passed to :func:<code>_setup</code></p> <code>{}</code> <p>Initialize user prompt window.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def __init__(self, height=32, **kwargs):\n    \"\"\"Initialize user prompt window.\"\"\"\n    WPFWindow.__init__(self,\n                       op.join(XAML_FILES_DIR, self.xaml_source))\n\n    self.user_height = height\n    self.update_window()\n    self._setup(**kwargs)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.TemplatePromptBar-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.TemplatePromptBar.pyrevit_version","title":"<code>pyrevit_version</code>  <code>property</code>","text":"<p>Active pyRevit formatted version e.g. '4.9-beta'.</p>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.TemplatePromptBar.xaml_source","title":"<code>xaml_source = 'TemplatePromptBar.xaml'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.TemplatePromptBar.user_height","title":"<code>user_height = height</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.TemplatePromptBar-functions","title":"Functions","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.TemplatePromptBar.load_xaml","title":"<code>load_xaml(xaml_source, literal_string=False, handle_esc=True, set_owner=True)</code>","text":"<p>Load the window XAML file.</p> <p>Parameters:</p> Name Type Description Default <code>xaml_source</code> <code>str</code> <p>The XAML content or file path to load.</p> required <code>literal_string</code> <code>bool</code> <p>True if <code>xaml_source</code> is content, False if it is a path. Defaults to False.</p> <code>False</code> <code>handle_esc</code> <code>bool</code> <p>Whether the ESC key should be handled. Defaults to True.</p> <code>True</code> <code>set_owner</code> <code>bool</code> <p>Whether to se the window owner. Defaults to True.</p> <code>True</code> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def load_xaml(self, xaml_source, literal_string=False, handle_esc=True, set_owner=True):\n    \"\"\"Load the window XAML file.\n\n    Args:\n        xaml_source (str): The XAML content or file path to load.\n        literal_string (bool, optional): True if `xaml_source` is content,\n            False if it is a path. Defaults to False.\n        handle_esc (bool, optional): Whether the ESC key should be handled.\n            Defaults to True.\n        set_owner (bool, optional): Whether to se the window owner.\n            Defaults to True.\n    \"\"\"\n    # create new id for this window\n    self.window_id = coreutils.new_uuid()\n\n    if not literal_string:\n        wpf.LoadComponent(self, self._determine_xaml(xaml_source))\n    else:\n        wpf.LoadComponent(self, framework.StringReader(xaml_source))\n\n    # set properties\n    self.thread_id = framework.get_current_thread_id()\n    if set_owner:\n        self.setup_owner()\n    self.setup_icon()\n    WPFWindow.setup_resources(self)\n    if handle_esc:\n        self.setup_default_handlers()\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.TemplatePromptBar.merge_resource_dict","title":"<code>merge_resource_dict(xaml_source)</code>","text":"<p>Merge a ResourceDictionary xaml file with this window.</p> <p>Parameters:</p> Name Type Description Default <code>xaml_source</code> <code>str</code> <p>xaml file with the resource dictionary</p> required Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def merge_resource_dict(self, xaml_source):\n    \"\"\"Merge a ResourceDictionary xaml file with this window.\n\n    Args:\n        xaml_source (str): xaml file with the resource dictionary\n    \"\"\"\n    lang_dictionary = ResourceDictionary()\n    lang_dictionary.Source = Uri(xaml_source, UriKind.Absolute)\n    self.Resources.MergedDictionaries.Add(lang_dictionary)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.TemplatePromptBar.get_locale_string","title":"<code>get_locale_string(string_name)</code>","text":"<p>Get localized string.</p> <p>Parameters:</p> Name Type Description Default <code>string_name</code> <code>str</code> <p>string name</p> required <p>Returns:</p> Type Description <code>str</code> <p>localized string</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def get_locale_string(self, string_name):\n    \"\"\"Get localized string.\n\n    Args:\n        string_name (str): string name\n\n    Returns:\n        (str): localized string\n    \"\"\"\n    return self.FindResource(string_name)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.TemplatePromptBar.setup_owner","title":"<code>setup_owner()</code>","text":"<p>Set the window owner.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def setup_owner(self):\n    \"\"\"Set the window owner.\"\"\"\n    wih = Interop.WindowInteropHelper(self)\n    wih.Owner = AdWindows.ComponentManager.ApplicationWindow\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.TemplatePromptBar.setup_resources","title":"<code>setup_resources(wpf_ctrl)</code>  <code>staticmethod</code>","text":"<p>Sets the WPF resources.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>@staticmethod\ndef setup_resources(wpf_ctrl):\n    \"\"\"Sets the WPF resources.\"\"\"\n    #2c3e50\n    wpf_ctrl.Resources['pyRevitDarkColor'] = \\\n        Media.Color.FromArgb(0xFF, 0x2c, 0x3e, 0x50)\n\n    #23303d\n    wpf_ctrl.Resources['pyRevitDarkerDarkColor'] = \\\n        Media.Color.FromArgb(0xFF, 0x23, 0x30, 0x3d)\n\n    #ffffff\n    wpf_ctrl.Resources['pyRevitButtonColor'] = \\\n        Media.Color.FromArgb(0xFF, 0xff, 0xff, 0xff)\n\n    #f39c12\n    wpf_ctrl.Resources['pyRevitAccentColor'] = \\\n        Media.Color.FromArgb(0xFF, 0xf3, 0x9c, 0x12)\n\n    wpf_ctrl.Resources['pyRevitDarkBrush'] = \\\n        Media.SolidColorBrush(wpf_ctrl.Resources['pyRevitDarkColor'])\n    wpf_ctrl.Resources['pyRevitAccentBrush'] = \\\n        Media.SolidColorBrush(wpf_ctrl.Resources['pyRevitAccentColor'])\n\n    wpf_ctrl.Resources['pyRevitDarkerDarkBrush'] = \\\n        Media.SolidColorBrush(wpf_ctrl.Resources['pyRevitDarkerDarkColor'])\n\n    wpf_ctrl.Resources['pyRevitButtonForgroundBrush'] = \\\n        Media.SolidColorBrush(wpf_ctrl.Resources['pyRevitButtonColor'])\n\n    wpf_ctrl.Resources['pyRevitRecognizesAccessKey'] = \\\n        DEFAULT_RECOGNIZE_ACCESS_KEY\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.TemplatePromptBar.setup_default_handlers","title":"<code>setup_default_handlers()</code>","text":"<p>Set the default handlers.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def setup_default_handlers(self):\n    \"\"\"Set the default handlers.\"\"\"\n    self.PreviewKeyDown += self.handle_input_key    #pylint: disable=E1101\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.TemplatePromptBar.handle_input_key","title":"<code>handle_input_key(sender, args)</code>","text":"<p>Handle keyboard input and close the window on Escape.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def handle_input_key(self, sender, args):    #pylint: disable=W0613\n    \"\"\"Handle keyboard input and close the window on Escape.\"\"\"\n    if args.Key == Input.Key.Escape:\n        self.Close()\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.TemplatePromptBar.set_icon","title":"<code>set_icon(icon_path)</code>","text":"<p>Set window icon to given icon path.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def set_icon(self, icon_path):\n    \"\"\"Set window icon to given icon path.\"\"\"\n    self.Icon = utils.bitmap_from_file(icon_path)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.TemplatePromptBar.setup_icon","title":"<code>setup_icon()</code>","text":"<p>Setup default window icon.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def setup_icon(self):\n    \"\"\"Setup default window icon.\"\"\"\n    self.set_icon(op.join(BIN_DIR, 'pyrevit_settings.png'))\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.TemplatePromptBar.hide","title":"<code>hide()</code>","text":"<p>Hide window.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def hide(self):\n    \"\"\"Hide window.\"\"\"\n    self.Hide()\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.TemplatePromptBar.show","title":"<code>show(modal=False)</code>","text":"<p>Show window.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def show(self, modal=False):\n    \"\"\"Show window.\"\"\"\n    if modal:\n        return self.ShowDialog()\n    # else open non-modal\n    self.Show()\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.TemplatePromptBar.show_dialog","title":"<code>show_dialog()</code>","text":"<p>Show modal window.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def show_dialog(self):\n    \"\"\"Show modal window.\"\"\"\n    return self.ShowDialog()\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.TemplatePromptBar.set_image_source_file","title":"<code>set_image_source_file(wpf_element, image_file)</code>  <code>staticmethod</code>","text":"<p>Set source file for image element.</p> <p>Parameters:</p> Name Type Description Default <code>wpf_element</code> <code>Image</code> <p>xaml image element</p> required <code>image_file</code> <code>str</code> <p>image file path</p> required Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>@staticmethod\ndef set_image_source_file(wpf_element, image_file):\n    \"\"\"Set source file for image element.\n\n    Args:\n        wpf_element (System.Windows.Controls.Image): xaml image element\n        image_file (str): image file path\n    \"\"\"\n    if not op.exists(image_file):\n        wpf_element.Source = \\\n            utils.bitmap_from_file(\n                os.path.join(EXEC_PARAMS.command_path,\n                             image_file)\n                )\n    else:\n        wpf_element.Source = utils.bitmap_from_file(image_file)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.TemplatePromptBar.set_image_source","title":"<code>set_image_source(wpf_element, image_file)</code>","text":"<p>Set source file for image element.</p> <p>Parameters:</p> Name Type Description Default <code>wpf_element</code> <code>Image</code> <p>xaml image element</p> required <code>image_file</code> <code>str</code> <p>image file path</p> required Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def set_image_source(self, wpf_element, image_file):\n    \"\"\"Set source file for image element.\n\n    Args:\n        wpf_element (System.Windows.Controls.Image): xaml image element\n        image_file (str): image file path\n    \"\"\"\n    WPFWindow.set_image_source_file(wpf_element, image_file)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.TemplatePromptBar.dispatch","title":"<code>dispatch(func, *args, **kwargs)</code>","text":"<p>Runs the function in a new thread.</p> <p>Parameters:</p> Name Type Description Default <code>func</code> <code>Callable</code> <p>function to run</p> required <code>*args</code> <code>Any</code> <p>positional arguments to pass to func</p> <code>()</code> <code>**kwargs</code> <code>Any</code> <p>keyword arguments to pass to func</p> <code>{}</code> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def dispatch(self, func, *args, **kwargs):\n    \"\"\"Runs the function in a new thread.\n\n    Args:\n        func (Callable): function to run\n        *args (Any): positional arguments to pass to func\n        **kwargs (Any): keyword arguments to pass to func\n    \"\"\"\n    if framework.get_current_thread_id() == self.thread_id:\n        t = threading.Thread(\n            target=func,\n            args=args,\n            kwargs=kwargs\n            )\n        t.start()\n    else:\n        # ask ui thread to call the func with args and kwargs\n        self.Dispatcher.Invoke(\n            System.Action(\n                lambda: func(*args, **kwargs)\n                ),\n            Threading.DispatcherPriority.Background\n            )\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.TemplatePromptBar.conceal","title":"<code>conceal()</code>","text":"<p>Conceal window.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def conceal(self):\n    \"\"\"Conceal window.\"\"\"\n    return WindowToggler(self)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.TemplatePromptBar.hide_element","title":"<code>hide_element(*wpf_elements)</code>  <code>staticmethod</code>","text":"<p>Collapse elements.</p> <p>Parameters:</p> Name Type Description Default <code>*wpf_elements</code> <code>list[UIElement]</code> <p>WPF framework elements to be collaped</p> <code>()</code> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>@staticmethod\ndef hide_element(*wpf_elements):\n    \"\"\"Collapse elements.\n\n    Args:\n        *wpf_elements (list[UIElement]): WPF framework elements to be collaped\n    \"\"\"\n    for wpfel in wpf_elements:\n        wpfel.Visibility = WPF_COLLAPSED\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.TemplatePromptBar.show_element","title":"<code>show_element(*wpf_elements)</code>  <code>staticmethod</code>","text":"<p>Show collapsed elements.</p> <p>Parameters:</p> Name Type Description Default <code>*wpf_elements</code> <code>list[UIElement]</code> <p>WPF framework elements to be set to visible.</p> <code>()</code> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>@staticmethod\ndef show_element(*wpf_elements):\n    \"\"\"Show collapsed elements.\n\n    Args:\n        *wpf_elements (list[UIElement]): WPF framework elements to be set to visible.\n    \"\"\"\n    for wpfel in wpf_elements:\n        wpfel.Visibility = WPF_VISIBLE\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.TemplatePromptBar.toggle_element","title":"<code>toggle_element(*wpf_elements)</code>  <code>staticmethod</code>","text":"<p>Toggle visibility of elements.</p> <p>Parameters:</p> Name Type Description Default <code>*wpf_elements</code> <code>list[UIElement]</code> <p>WPF framework elements to be toggled.</p> <code>()</code> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>@staticmethod\ndef toggle_element(*wpf_elements):\n    \"\"\"Toggle visibility of elements.\n\n    Args:\n        *wpf_elements (list[UIElement]): WPF framework elements to be toggled.\n    \"\"\"\n    for wpfel in wpf_elements:\n        if wpfel.Visibility == WPF_VISIBLE:\n            WPFWindow.hide_element(wpfel)\n        elif wpfel.Visibility == WPF_COLLAPSED:\n            WPFWindow.show_element(wpfel)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.TemplatePromptBar.disable_element","title":"<code>disable_element(*wpf_elements)</code>  <code>staticmethod</code>","text":"<p>Enable elements.</p> <p>Parameters:</p> Name Type Description Default <code>*wpf_elements</code> <code>list[UIElement]</code> <p>WPF framework elements to be enabled</p> <code>()</code> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>@staticmethod\ndef disable_element(*wpf_elements):\n    \"\"\"Enable elements.\n\n    Args:\n        *wpf_elements (list[UIElement]): WPF framework elements to be enabled\n    \"\"\"\n    for wpfel in wpf_elements:\n        wpfel.IsEnabled = False\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.TemplatePromptBar.enable_element","title":"<code>enable_element(*wpf_elements)</code>  <code>staticmethod</code>","text":"<p>Enable elements.</p> <p>Parameters:</p> Name Type Description Default <code>*wpf_elements</code> <code>list[UIElement]</code> <p>WPF framework elements to be enabled</p> <code>()</code> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>@staticmethod\ndef enable_element(*wpf_elements):\n    \"\"\"Enable elements.\n\n    Args:\n        *wpf_elements (list[UIElement]): WPF framework elements to be enabled\n    \"\"\"\n    for wpfel in wpf_elements:\n        wpfel.IsEnabled = True\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.TemplatePromptBar.handle_url_click","title":"<code>handle_url_click(sender, args)</code>","text":"<p>Callback for handling click on package website url.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def handle_url_click(self, sender, args): #pylint: disable=unused-argument\n    \"\"\"Callback for handling click on package website url.\"\"\"\n    return webbrowser.open_new_tab(sender.NavigateUri.AbsoluteUri)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.TemplatePromptBar.update_window","title":"<code>update_window()</code>","text":"<p>Update the prompt bar to match Revit window.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def update_window(self):\n    \"\"\"Update the prompt bar to match Revit window.\"\"\"\n    screen_area = HOST_APP.proc_screen_workarea\n    scale_factor = 1.0 / HOST_APP.proc_screen_scalefactor\n    top = left = width = height = 0\n\n    window_rect = revit.ui.get_window_rectangle()\n\n    # set width and height\n    width = window_rect.Right - window_rect.Left\n    height = self.user_height\n\n    top = window_rect.Top\n    # in maximized window, the top might be off the active screen\n    # due to windows thicker window frames\n    # lets cut the height and re-adjust the top\n    top_diff = abs(screen_area.Top - top)\n    if 10 &gt; top_diff &gt; 0 and top_diff &lt; height:\n        height -= top_diff\n        top = screen_area.Top\n\n    left = window_rect.Left\n    # in maximized window, Left also might be off the active screen\n    # due to windows thicker window frames\n    # let's fix the width to accomodate the extra pixels as well\n    left_diff = abs(screen_area.Left - left)\n    if 10 &gt; left_diff &gt; 0 and left_diff &lt; width:\n        # deduct two times the left negative offset since this extra\n        # offset happens on both left and right side\n        width -= left_diff * 2\n        left = screen_area.Left\n\n    self.Top = top * scale_factor\n    self.Left = left * scale_factor\n    self.Width = width * scale_factor\n    self.Height = height\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.WarningBar","title":"<code>WarningBar(height=32, **kwargs)</code>","text":"<p>               Bases: <code>TemplatePromptBar</code></p> <p>Show warning bar at the top of Revit window.</p> <p>Other Parameters:</p> Name Type Description <code>title</code> <code>string</code> <p>warning bar text</p> <p>Examples:</p> <pre><code>with WarningBar(title='my warning'):\n   # do stuff\n</code></pre> <p>Initialize user prompt window.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def __init__(self, height=32, **kwargs):\n    \"\"\"Initialize user prompt window.\"\"\"\n    WPFWindow.__init__(self,\n                       op.join(XAML_FILES_DIR, self.xaml_source))\n\n    self.user_height = height\n    self.update_window()\n    self._setup(**kwargs)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.WarningBar-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.WarningBar.pyrevit_version","title":"<code>pyrevit_version</code>  <code>property</code>","text":"<p>Active pyRevit formatted version e.g. '4.9-beta'.</p>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.WarningBar.user_height","title":"<code>user_height = height</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.WarningBar.xaml_source","title":"<code>xaml_source = 'WarningBar.xaml'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.WarningBar-functions","title":"Functions","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.WarningBar.load_xaml","title":"<code>load_xaml(xaml_source, literal_string=False, handle_esc=True, set_owner=True)</code>","text":"<p>Load the window XAML file.</p> <p>Parameters:</p> Name Type Description Default <code>xaml_source</code> <code>str</code> <p>The XAML content or file path to load.</p> required <code>literal_string</code> <code>bool</code> <p>True if <code>xaml_source</code> is content, False if it is a path. Defaults to False.</p> <code>False</code> <code>handle_esc</code> <code>bool</code> <p>Whether the ESC key should be handled. Defaults to True.</p> <code>True</code> <code>set_owner</code> <code>bool</code> <p>Whether to se the window owner. Defaults to True.</p> <code>True</code> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def load_xaml(self, xaml_source, literal_string=False, handle_esc=True, set_owner=True):\n    \"\"\"Load the window XAML file.\n\n    Args:\n        xaml_source (str): The XAML content or file path to load.\n        literal_string (bool, optional): True if `xaml_source` is content,\n            False if it is a path. Defaults to False.\n        handle_esc (bool, optional): Whether the ESC key should be handled.\n            Defaults to True.\n        set_owner (bool, optional): Whether to se the window owner.\n            Defaults to True.\n    \"\"\"\n    # create new id for this window\n    self.window_id = coreutils.new_uuid()\n\n    if not literal_string:\n        wpf.LoadComponent(self, self._determine_xaml(xaml_source))\n    else:\n        wpf.LoadComponent(self, framework.StringReader(xaml_source))\n\n    # set properties\n    self.thread_id = framework.get_current_thread_id()\n    if set_owner:\n        self.setup_owner()\n    self.setup_icon()\n    WPFWindow.setup_resources(self)\n    if handle_esc:\n        self.setup_default_handlers()\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.WarningBar.merge_resource_dict","title":"<code>merge_resource_dict(xaml_source)</code>","text":"<p>Merge a ResourceDictionary xaml file with this window.</p> <p>Parameters:</p> Name Type Description Default <code>xaml_source</code> <code>str</code> <p>xaml file with the resource dictionary</p> required Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def merge_resource_dict(self, xaml_source):\n    \"\"\"Merge a ResourceDictionary xaml file with this window.\n\n    Args:\n        xaml_source (str): xaml file with the resource dictionary\n    \"\"\"\n    lang_dictionary = ResourceDictionary()\n    lang_dictionary.Source = Uri(xaml_source, UriKind.Absolute)\n    self.Resources.MergedDictionaries.Add(lang_dictionary)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.WarningBar.get_locale_string","title":"<code>get_locale_string(string_name)</code>","text":"<p>Get localized string.</p> <p>Parameters:</p> Name Type Description Default <code>string_name</code> <code>str</code> <p>string name</p> required <p>Returns:</p> Type Description <code>str</code> <p>localized string</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def get_locale_string(self, string_name):\n    \"\"\"Get localized string.\n\n    Args:\n        string_name (str): string name\n\n    Returns:\n        (str): localized string\n    \"\"\"\n    return self.FindResource(string_name)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.WarningBar.setup_owner","title":"<code>setup_owner()</code>","text":"<p>Set the window owner.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def setup_owner(self):\n    \"\"\"Set the window owner.\"\"\"\n    wih = Interop.WindowInteropHelper(self)\n    wih.Owner = AdWindows.ComponentManager.ApplicationWindow\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.WarningBar.setup_resources","title":"<code>setup_resources(wpf_ctrl)</code>  <code>staticmethod</code>","text":"<p>Sets the WPF resources.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>@staticmethod\ndef setup_resources(wpf_ctrl):\n    \"\"\"Sets the WPF resources.\"\"\"\n    #2c3e50\n    wpf_ctrl.Resources['pyRevitDarkColor'] = \\\n        Media.Color.FromArgb(0xFF, 0x2c, 0x3e, 0x50)\n\n    #23303d\n    wpf_ctrl.Resources['pyRevitDarkerDarkColor'] = \\\n        Media.Color.FromArgb(0xFF, 0x23, 0x30, 0x3d)\n\n    #ffffff\n    wpf_ctrl.Resources['pyRevitButtonColor'] = \\\n        Media.Color.FromArgb(0xFF, 0xff, 0xff, 0xff)\n\n    #f39c12\n    wpf_ctrl.Resources['pyRevitAccentColor'] = \\\n        Media.Color.FromArgb(0xFF, 0xf3, 0x9c, 0x12)\n\n    wpf_ctrl.Resources['pyRevitDarkBrush'] = \\\n        Media.SolidColorBrush(wpf_ctrl.Resources['pyRevitDarkColor'])\n    wpf_ctrl.Resources['pyRevitAccentBrush'] = \\\n        Media.SolidColorBrush(wpf_ctrl.Resources['pyRevitAccentColor'])\n\n    wpf_ctrl.Resources['pyRevitDarkerDarkBrush'] = \\\n        Media.SolidColorBrush(wpf_ctrl.Resources['pyRevitDarkerDarkColor'])\n\n    wpf_ctrl.Resources['pyRevitButtonForgroundBrush'] = \\\n        Media.SolidColorBrush(wpf_ctrl.Resources['pyRevitButtonColor'])\n\n    wpf_ctrl.Resources['pyRevitRecognizesAccessKey'] = \\\n        DEFAULT_RECOGNIZE_ACCESS_KEY\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.WarningBar.setup_default_handlers","title":"<code>setup_default_handlers()</code>","text":"<p>Set the default handlers.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def setup_default_handlers(self):\n    \"\"\"Set the default handlers.\"\"\"\n    self.PreviewKeyDown += self.handle_input_key    #pylint: disable=E1101\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.WarningBar.handle_input_key","title":"<code>handle_input_key(sender, args)</code>","text":"<p>Handle keyboard input and close the window on Escape.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def handle_input_key(self, sender, args):    #pylint: disable=W0613\n    \"\"\"Handle keyboard input and close the window on Escape.\"\"\"\n    if args.Key == Input.Key.Escape:\n        self.Close()\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.WarningBar.set_icon","title":"<code>set_icon(icon_path)</code>","text":"<p>Set window icon to given icon path.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def set_icon(self, icon_path):\n    \"\"\"Set window icon to given icon path.\"\"\"\n    self.Icon = utils.bitmap_from_file(icon_path)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.WarningBar.setup_icon","title":"<code>setup_icon()</code>","text":"<p>Setup default window icon.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def setup_icon(self):\n    \"\"\"Setup default window icon.\"\"\"\n    self.set_icon(op.join(BIN_DIR, 'pyrevit_settings.png'))\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.WarningBar.hide","title":"<code>hide()</code>","text":"<p>Hide window.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def hide(self):\n    \"\"\"Hide window.\"\"\"\n    self.Hide()\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.WarningBar.show","title":"<code>show(modal=False)</code>","text":"<p>Show window.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def show(self, modal=False):\n    \"\"\"Show window.\"\"\"\n    if modal:\n        return self.ShowDialog()\n    # else open non-modal\n    self.Show()\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.WarningBar.show_dialog","title":"<code>show_dialog()</code>","text":"<p>Show modal window.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def show_dialog(self):\n    \"\"\"Show modal window.\"\"\"\n    return self.ShowDialog()\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.WarningBar.set_image_source_file","title":"<code>set_image_source_file(wpf_element, image_file)</code>  <code>staticmethod</code>","text":"<p>Set source file for image element.</p> <p>Parameters:</p> Name Type Description Default <code>wpf_element</code> <code>Image</code> <p>xaml image element</p> required <code>image_file</code> <code>str</code> <p>image file path</p> required Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>@staticmethod\ndef set_image_source_file(wpf_element, image_file):\n    \"\"\"Set source file for image element.\n\n    Args:\n        wpf_element (System.Windows.Controls.Image): xaml image element\n        image_file (str): image file path\n    \"\"\"\n    if not op.exists(image_file):\n        wpf_element.Source = \\\n            utils.bitmap_from_file(\n                os.path.join(EXEC_PARAMS.command_path,\n                             image_file)\n                )\n    else:\n        wpf_element.Source = utils.bitmap_from_file(image_file)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.WarningBar.set_image_source","title":"<code>set_image_source(wpf_element, image_file)</code>","text":"<p>Set source file for image element.</p> <p>Parameters:</p> Name Type Description Default <code>wpf_element</code> <code>Image</code> <p>xaml image element</p> required <code>image_file</code> <code>str</code> <p>image file path</p> required Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def set_image_source(self, wpf_element, image_file):\n    \"\"\"Set source file for image element.\n\n    Args:\n        wpf_element (System.Windows.Controls.Image): xaml image element\n        image_file (str): image file path\n    \"\"\"\n    WPFWindow.set_image_source_file(wpf_element, image_file)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.WarningBar.dispatch","title":"<code>dispatch(func, *args, **kwargs)</code>","text":"<p>Runs the function in a new thread.</p> <p>Parameters:</p> Name Type Description Default <code>func</code> <code>Callable</code> <p>function to run</p> required <code>*args</code> <code>Any</code> <p>positional arguments to pass to func</p> <code>()</code> <code>**kwargs</code> <code>Any</code> <p>keyword arguments to pass to func</p> <code>{}</code> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def dispatch(self, func, *args, **kwargs):\n    \"\"\"Runs the function in a new thread.\n\n    Args:\n        func (Callable): function to run\n        *args (Any): positional arguments to pass to func\n        **kwargs (Any): keyword arguments to pass to func\n    \"\"\"\n    if framework.get_current_thread_id() == self.thread_id:\n        t = threading.Thread(\n            target=func,\n            args=args,\n            kwargs=kwargs\n            )\n        t.start()\n    else:\n        # ask ui thread to call the func with args and kwargs\n        self.Dispatcher.Invoke(\n            System.Action(\n                lambda: func(*args, **kwargs)\n                ),\n            Threading.DispatcherPriority.Background\n            )\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.WarningBar.conceal","title":"<code>conceal()</code>","text":"<p>Conceal window.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def conceal(self):\n    \"\"\"Conceal window.\"\"\"\n    return WindowToggler(self)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.WarningBar.hide_element","title":"<code>hide_element(*wpf_elements)</code>  <code>staticmethod</code>","text":"<p>Collapse elements.</p> <p>Parameters:</p> Name Type Description Default <code>*wpf_elements</code> <code>list[UIElement]</code> <p>WPF framework elements to be collaped</p> <code>()</code> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>@staticmethod\ndef hide_element(*wpf_elements):\n    \"\"\"Collapse elements.\n\n    Args:\n        *wpf_elements (list[UIElement]): WPF framework elements to be collaped\n    \"\"\"\n    for wpfel in wpf_elements:\n        wpfel.Visibility = WPF_COLLAPSED\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.WarningBar.show_element","title":"<code>show_element(*wpf_elements)</code>  <code>staticmethod</code>","text":"<p>Show collapsed elements.</p> <p>Parameters:</p> Name Type Description Default <code>*wpf_elements</code> <code>list[UIElement]</code> <p>WPF framework elements to be set to visible.</p> <code>()</code> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>@staticmethod\ndef show_element(*wpf_elements):\n    \"\"\"Show collapsed elements.\n\n    Args:\n        *wpf_elements (list[UIElement]): WPF framework elements to be set to visible.\n    \"\"\"\n    for wpfel in wpf_elements:\n        wpfel.Visibility = WPF_VISIBLE\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.WarningBar.toggle_element","title":"<code>toggle_element(*wpf_elements)</code>  <code>staticmethod</code>","text":"<p>Toggle visibility of elements.</p> <p>Parameters:</p> Name Type Description Default <code>*wpf_elements</code> <code>list[UIElement]</code> <p>WPF framework elements to be toggled.</p> <code>()</code> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>@staticmethod\ndef toggle_element(*wpf_elements):\n    \"\"\"Toggle visibility of elements.\n\n    Args:\n        *wpf_elements (list[UIElement]): WPF framework elements to be toggled.\n    \"\"\"\n    for wpfel in wpf_elements:\n        if wpfel.Visibility == WPF_VISIBLE:\n            WPFWindow.hide_element(wpfel)\n        elif wpfel.Visibility == WPF_COLLAPSED:\n            WPFWindow.show_element(wpfel)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.WarningBar.disable_element","title":"<code>disable_element(*wpf_elements)</code>  <code>staticmethod</code>","text":"<p>Enable elements.</p> <p>Parameters:</p> Name Type Description Default <code>*wpf_elements</code> <code>list[UIElement]</code> <p>WPF framework elements to be enabled</p> <code>()</code> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>@staticmethod\ndef disable_element(*wpf_elements):\n    \"\"\"Enable elements.\n\n    Args:\n        *wpf_elements (list[UIElement]): WPF framework elements to be enabled\n    \"\"\"\n    for wpfel in wpf_elements:\n        wpfel.IsEnabled = False\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.WarningBar.enable_element","title":"<code>enable_element(*wpf_elements)</code>  <code>staticmethod</code>","text":"<p>Enable elements.</p> <p>Parameters:</p> Name Type Description Default <code>*wpf_elements</code> <code>list[UIElement]</code> <p>WPF framework elements to be enabled</p> <code>()</code> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>@staticmethod\ndef enable_element(*wpf_elements):\n    \"\"\"Enable elements.\n\n    Args:\n        *wpf_elements (list[UIElement]): WPF framework elements to be enabled\n    \"\"\"\n    for wpfel in wpf_elements:\n        wpfel.IsEnabled = True\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.WarningBar.handle_url_click","title":"<code>handle_url_click(sender, args)</code>","text":"<p>Callback for handling click on package website url.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def handle_url_click(self, sender, args): #pylint: disable=unused-argument\n    \"\"\"Callback for handling click on package website url.\"\"\"\n    return webbrowser.open_new_tab(sender.NavigateUri.AbsoluteUri)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.WarningBar.update_window","title":"<code>update_window()</code>","text":"<p>Update the prompt bar to match Revit window.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def update_window(self):\n    \"\"\"Update the prompt bar to match Revit window.\"\"\"\n    screen_area = HOST_APP.proc_screen_workarea\n    scale_factor = 1.0 / HOST_APP.proc_screen_scalefactor\n    top = left = width = height = 0\n\n    window_rect = revit.ui.get_window_rectangle()\n\n    # set width and height\n    width = window_rect.Right - window_rect.Left\n    height = self.user_height\n\n    top = window_rect.Top\n    # in maximized window, the top might be off the active screen\n    # due to windows thicker window frames\n    # lets cut the height and re-adjust the top\n    top_diff = abs(screen_area.Top - top)\n    if 10 &gt; top_diff &gt; 0 and top_diff &lt; height:\n        height -= top_diff\n        top = screen_area.Top\n\n    left = window_rect.Left\n    # in maximized window, Left also might be off the active screen\n    # due to windows thicker window frames\n    # let's fix the width to accomodate the extra pixels as well\n    left_diff = abs(screen_area.Left - left)\n    if 10 &gt; left_diff &gt; 0 and left_diff &lt; width:\n        # deduct two times the left negative offset since this extra\n        # offset happens on both left and right side\n        width -= left_diff * 2\n        left = screen_area.Left\n\n    self.Top = top * scale_factor\n    self.Left = left * scale_factor\n    self.Width = width * scale_factor\n    self.Height = height\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.ProgressBar","title":"<code>ProgressBar(height=32, **kwargs)</code>","text":"<p>               Bases: <code>TemplatePromptBar</code></p> <p>Show progress bar at the top of Revit window.</p> <p>Other Parameters:</p> Name Type Description <code>title</code> <code>string</code> <p>progress bar text, defaults to 0/100 progress format </p> <code>indeterminate</code> <code>bool</code> <p>create indeterminate progress bar</p> <code>cancellable</code> <code>bool</code> <p>add cancel button to progress bar</p> <code>step</code> <code>int</code> <p>update progress intervals</p> <p>Examples:</p> <pre><code>from pyrevit import forms\ncount = 1\nwith forms.ProgressBar(title='my command progress message') as pb:\n   # do stuff\n   pb.update_progress(count, 100)\n   count += 1\n</code></pre> <p>Progress bar title could also be customized to show the current and total progress values. In example below, the progress bar message will be in format \"0 of 100\"</p> <pre><code>with forms.ProgressBar(title='{value} of {max_value}') as pb:\n</code></pre> <p>By default progress bar updates the progress every time the .update_progress method is called. For operations with a large number of max steps, the gui update process time will have a significate effect on the overall execution time of the command. In these cases, set the value of step argument to something larger than 1. In example below, the progress bar updates once per every 10 units of progress.</p> <pre><code>with forms.ProgressBar(title='message', steps=10):\n</code></pre> <p>Progress bar could also be set to indeterminate for operations of unknown length. In this case, the progress bar will show an infinitely running ribbon:</p> <pre><code>with forms.ProgressBar(title='message', indeterminate=True):\n</code></pre> <p>if cancellable is set on the object, a cancel button will show on the progress bar and .cancelled attribute will be set on the ProgressBar instance if users clicks on cancel button:</p> <pre><code>with forms.ProgressBar(title='message',\n                       cancellable=True) as pb:\n   # do stuff\n   if pb.cancelled:\n       # wrap up and cancel operation\n</code></pre> <p>Initialize user prompt window.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def __init__(self, height=32, **kwargs):\n    \"\"\"Initialize user prompt window.\"\"\"\n    WPFWindow.__init__(self,\n                       op.join(XAML_FILES_DIR, self.xaml_source))\n\n    self.user_height = height\n    self.update_window()\n    self._setup(**kwargs)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.ProgressBar-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.ProgressBar.pyrevit_version","title":"<code>pyrevit_version</code>  <code>property</code>","text":"<p>Active pyRevit formatted version e.g. '4.9-beta'.</p>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.ProgressBar.user_height","title":"<code>user_height = height</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.ProgressBar.xaml_source","title":"<code>xaml_source = 'ProgressBar.xaml'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.ProgressBar.title","title":"<code>title</code>  <code>property</code> <code>writable</code>","text":"<p>Progress bar title.</p>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.ProgressBar.indeterminate","title":"<code>indeterminate</code>  <code>property</code> <code>writable</code>","text":"<p>Progress bar indeterminate state.</p>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.ProgressBar-functions","title":"Functions","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.ProgressBar.load_xaml","title":"<code>load_xaml(xaml_source, literal_string=False, handle_esc=True, set_owner=True)</code>","text":"<p>Load the window XAML file.</p> <p>Parameters:</p> Name Type Description Default <code>xaml_source</code> <code>str</code> <p>The XAML content or file path to load.</p> required <code>literal_string</code> <code>bool</code> <p>True if <code>xaml_source</code> is content, False if it is a path. Defaults to False.</p> <code>False</code> <code>handle_esc</code> <code>bool</code> <p>Whether the ESC key should be handled. Defaults to True.</p> <code>True</code> <code>set_owner</code> <code>bool</code> <p>Whether to se the window owner. Defaults to True.</p> <code>True</code> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def load_xaml(self, xaml_source, literal_string=False, handle_esc=True, set_owner=True):\n    \"\"\"Load the window XAML file.\n\n    Args:\n        xaml_source (str): The XAML content or file path to load.\n        literal_string (bool, optional): True if `xaml_source` is content,\n            False if it is a path. Defaults to False.\n        handle_esc (bool, optional): Whether the ESC key should be handled.\n            Defaults to True.\n        set_owner (bool, optional): Whether to se the window owner.\n            Defaults to True.\n    \"\"\"\n    # create new id for this window\n    self.window_id = coreutils.new_uuid()\n\n    if not literal_string:\n        wpf.LoadComponent(self, self._determine_xaml(xaml_source))\n    else:\n        wpf.LoadComponent(self, framework.StringReader(xaml_source))\n\n    # set properties\n    self.thread_id = framework.get_current_thread_id()\n    if set_owner:\n        self.setup_owner()\n    self.setup_icon()\n    WPFWindow.setup_resources(self)\n    if handle_esc:\n        self.setup_default_handlers()\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.ProgressBar.merge_resource_dict","title":"<code>merge_resource_dict(xaml_source)</code>","text":"<p>Merge a ResourceDictionary xaml file with this window.</p> <p>Parameters:</p> Name Type Description Default <code>xaml_source</code> <code>str</code> <p>xaml file with the resource dictionary</p> required Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def merge_resource_dict(self, xaml_source):\n    \"\"\"Merge a ResourceDictionary xaml file with this window.\n\n    Args:\n        xaml_source (str): xaml file with the resource dictionary\n    \"\"\"\n    lang_dictionary = ResourceDictionary()\n    lang_dictionary.Source = Uri(xaml_source, UriKind.Absolute)\n    self.Resources.MergedDictionaries.Add(lang_dictionary)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.ProgressBar.get_locale_string","title":"<code>get_locale_string(string_name)</code>","text":"<p>Get localized string.</p> <p>Parameters:</p> Name Type Description Default <code>string_name</code> <code>str</code> <p>string name</p> required <p>Returns:</p> Type Description <code>str</code> <p>localized string</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def get_locale_string(self, string_name):\n    \"\"\"Get localized string.\n\n    Args:\n        string_name (str): string name\n\n    Returns:\n        (str): localized string\n    \"\"\"\n    return self.FindResource(string_name)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.ProgressBar.setup_owner","title":"<code>setup_owner()</code>","text":"<p>Set the window owner.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def setup_owner(self):\n    \"\"\"Set the window owner.\"\"\"\n    wih = Interop.WindowInteropHelper(self)\n    wih.Owner = AdWindows.ComponentManager.ApplicationWindow\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.ProgressBar.setup_resources","title":"<code>setup_resources(wpf_ctrl)</code>  <code>staticmethod</code>","text":"<p>Sets the WPF resources.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>@staticmethod\ndef setup_resources(wpf_ctrl):\n    \"\"\"Sets the WPF resources.\"\"\"\n    #2c3e50\n    wpf_ctrl.Resources['pyRevitDarkColor'] = \\\n        Media.Color.FromArgb(0xFF, 0x2c, 0x3e, 0x50)\n\n    #23303d\n    wpf_ctrl.Resources['pyRevitDarkerDarkColor'] = \\\n        Media.Color.FromArgb(0xFF, 0x23, 0x30, 0x3d)\n\n    #ffffff\n    wpf_ctrl.Resources['pyRevitButtonColor'] = \\\n        Media.Color.FromArgb(0xFF, 0xff, 0xff, 0xff)\n\n    #f39c12\n    wpf_ctrl.Resources['pyRevitAccentColor'] = \\\n        Media.Color.FromArgb(0xFF, 0xf3, 0x9c, 0x12)\n\n    wpf_ctrl.Resources['pyRevitDarkBrush'] = \\\n        Media.SolidColorBrush(wpf_ctrl.Resources['pyRevitDarkColor'])\n    wpf_ctrl.Resources['pyRevitAccentBrush'] = \\\n        Media.SolidColorBrush(wpf_ctrl.Resources['pyRevitAccentColor'])\n\n    wpf_ctrl.Resources['pyRevitDarkerDarkBrush'] = \\\n        Media.SolidColorBrush(wpf_ctrl.Resources['pyRevitDarkerDarkColor'])\n\n    wpf_ctrl.Resources['pyRevitButtonForgroundBrush'] = \\\n        Media.SolidColorBrush(wpf_ctrl.Resources['pyRevitButtonColor'])\n\n    wpf_ctrl.Resources['pyRevitRecognizesAccessKey'] = \\\n        DEFAULT_RECOGNIZE_ACCESS_KEY\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.ProgressBar.setup_default_handlers","title":"<code>setup_default_handlers()</code>","text":"<p>Set the default handlers.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def setup_default_handlers(self):\n    \"\"\"Set the default handlers.\"\"\"\n    self.PreviewKeyDown += self.handle_input_key    #pylint: disable=E1101\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.ProgressBar.handle_input_key","title":"<code>handle_input_key(sender, args)</code>","text":"<p>Handle keyboard input and close the window on Escape.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def handle_input_key(self, sender, args):    #pylint: disable=W0613\n    \"\"\"Handle keyboard input and close the window on Escape.\"\"\"\n    if args.Key == Input.Key.Escape:\n        self.Close()\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.ProgressBar.set_icon","title":"<code>set_icon(icon_path)</code>","text":"<p>Set window icon to given icon path.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def set_icon(self, icon_path):\n    \"\"\"Set window icon to given icon path.\"\"\"\n    self.Icon = utils.bitmap_from_file(icon_path)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.ProgressBar.setup_icon","title":"<code>setup_icon()</code>","text":"<p>Setup default window icon.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def setup_icon(self):\n    \"\"\"Setup default window icon.\"\"\"\n    self.set_icon(op.join(BIN_DIR, 'pyrevit_settings.png'))\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.ProgressBar.hide","title":"<code>hide()</code>","text":"<p>Hide window.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def hide(self):\n    \"\"\"Hide window.\"\"\"\n    self.Hide()\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.ProgressBar.show","title":"<code>show(modal=False)</code>","text":"<p>Show window.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def show(self, modal=False):\n    \"\"\"Show window.\"\"\"\n    if modal:\n        return self.ShowDialog()\n    # else open non-modal\n    self.Show()\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.ProgressBar.show_dialog","title":"<code>show_dialog()</code>","text":"<p>Show modal window.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def show_dialog(self):\n    \"\"\"Show modal window.\"\"\"\n    return self.ShowDialog()\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.ProgressBar.set_image_source_file","title":"<code>set_image_source_file(wpf_element, image_file)</code>  <code>staticmethod</code>","text":"<p>Set source file for image element.</p> <p>Parameters:</p> Name Type Description Default <code>wpf_element</code> <code>Image</code> <p>xaml image element</p> required <code>image_file</code> <code>str</code> <p>image file path</p> required Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>@staticmethod\ndef set_image_source_file(wpf_element, image_file):\n    \"\"\"Set source file for image element.\n\n    Args:\n        wpf_element (System.Windows.Controls.Image): xaml image element\n        image_file (str): image file path\n    \"\"\"\n    if not op.exists(image_file):\n        wpf_element.Source = \\\n            utils.bitmap_from_file(\n                os.path.join(EXEC_PARAMS.command_path,\n                             image_file)\n                )\n    else:\n        wpf_element.Source = utils.bitmap_from_file(image_file)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.ProgressBar.set_image_source","title":"<code>set_image_source(wpf_element, image_file)</code>","text":"<p>Set source file for image element.</p> <p>Parameters:</p> Name Type Description Default <code>wpf_element</code> <code>Image</code> <p>xaml image element</p> required <code>image_file</code> <code>str</code> <p>image file path</p> required Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def set_image_source(self, wpf_element, image_file):\n    \"\"\"Set source file for image element.\n\n    Args:\n        wpf_element (System.Windows.Controls.Image): xaml image element\n        image_file (str): image file path\n    \"\"\"\n    WPFWindow.set_image_source_file(wpf_element, image_file)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.ProgressBar.dispatch","title":"<code>dispatch(func, *args, **kwargs)</code>","text":"<p>Runs the function in a new thread.</p> <p>Parameters:</p> Name Type Description Default <code>func</code> <code>Callable</code> <p>function to run</p> required <code>*args</code> <code>Any</code> <p>positional arguments to pass to func</p> <code>()</code> <code>**kwargs</code> <code>Any</code> <p>keyword arguments to pass to func</p> <code>{}</code> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def dispatch(self, func, *args, **kwargs):\n    \"\"\"Runs the function in a new thread.\n\n    Args:\n        func (Callable): function to run\n        *args (Any): positional arguments to pass to func\n        **kwargs (Any): keyword arguments to pass to func\n    \"\"\"\n    if framework.get_current_thread_id() == self.thread_id:\n        t = threading.Thread(\n            target=func,\n            args=args,\n            kwargs=kwargs\n            )\n        t.start()\n    else:\n        # ask ui thread to call the func with args and kwargs\n        self.Dispatcher.Invoke(\n            System.Action(\n                lambda: func(*args, **kwargs)\n                ),\n            Threading.DispatcherPriority.Background\n            )\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.ProgressBar.conceal","title":"<code>conceal()</code>","text":"<p>Conceal window.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def conceal(self):\n    \"\"\"Conceal window.\"\"\"\n    return WindowToggler(self)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.ProgressBar.hide_element","title":"<code>hide_element(*wpf_elements)</code>  <code>staticmethod</code>","text":"<p>Collapse elements.</p> <p>Parameters:</p> Name Type Description Default <code>*wpf_elements</code> <code>list[UIElement]</code> <p>WPF framework elements to be collaped</p> <code>()</code> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>@staticmethod\ndef hide_element(*wpf_elements):\n    \"\"\"Collapse elements.\n\n    Args:\n        *wpf_elements (list[UIElement]): WPF framework elements to be collaped\n    \"\"\"\n    for wpfel in wpf_elements:\n        wpfel.Visibility = WPF_COLLAPSED\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.ProgressBar.show_element","title":"<code>show_element(*wpf_elements)</code>  <code>staticmethod</code>","text":"<p>Show collapsed elements.</p> <p>Parameters:</p> Name Type Description Default <code>*wpf_elements</code> <code>list[UIElement]</code> <p>WPF framework elements to be set to visible.</p> <code>()</code> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>@staticmethod\ndef show_element(*wpf_elements):\n    \"\"\"Show collapsed elements.\n\n    Args:\n        *wpf_elements (list[UIElement]): WPF framework elements to be set to visible.\n    \"\"\"\n    for wpfel in wpf_elements:\n        wpfel.Visibility = WPF_VISIBLE\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.ProgressBar.toggle_element","title":"<code>toggle_element(*wpf_elements)</code>  <code>staticmethod</code>","text":"<p>Toggle visibility of elements.</p> <p>Parameters:</p> Name Type Description Default <code>*wpf_elements</code> <code>list[UIElement]</code> <p>WPF framework elements to be toggled.</p> <code>()</code> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>@staticmethod\ndef toggle_element(*wpf_elements):\n    \"\"\"Toggle visibility of elements.\n\n    Args:\n        *wpf_elements (list[UIElement]): WPF framework elements to be toggled.\n    \"\"\"\n    for wpfel in wpf_elements:\n        if wpfel.Visibility == WPF_VISIBLE:\n            WPFWindow.hide_element(wpfel)\n        elif wpfel.Visibility == WPF_COLLAPSED:\n            WPFWindow.show_element(wpfel)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.ProgressBar.disable_element","title":"<code>disable_element(*wpf_elements)</code>  <code>staticmethod</code>","text":"<p>Enable elements.</p> <p>Parameters:</p> Name Type Description Default <code>*wpf_elements</code> <code>list[UIElement]</code> <p>WPF framework elements to be enabled</p> <code>()</code> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>@staticmethod\ndef disable_element(*wpf_elements):\n    \"\"\"Enable elements.\n\n    Args:\n        *wpf_elements (list[UIElement]): WPF framework elements to be enabled\n    \"\"\"\n    for wpfel in wpf_elements:\n        wpfel.IsEnabled = False\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.ProgressBar.enable_element","title":"<code>enable_element(*wpf_elements)</code>  <code>staticmethod</code>","text":"<p>Enable elements.</p> <p>Parameters:</p> Name Type Description Default <code>*wpf_elements</code> <code>list[UIElement]</code> <p>WPF framework elements to be enabled</p> <code>()</code> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>@staticmethod\ndef enable_element(*wpf_elements):\n    \"\"\"Enable elements.\n\n    Args:\n        *wpf_elements (list[UIElement]): WPF framework elements to be enabled\n    \"\"\"\n    for wpfel in wpf_elements:\n        wpfel.IsEnabled = True\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.ProgressBar.handle_url_click","title":"<code>handle_url_click(sender, args)</code>","text":"<p>Callback for handling click on package website url.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def handle_url_click(self, sender, args): #pylint: disable=unused-argument\n    \"\"\"Callback for handling click on package website url.\"\"\"\n    return webbrowser.open_new_tab(sender.NavigateUri.AbsoluteUri)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.ProgressBar.update_window","title":"<code>update_window()</code>","text":"<p>Update the prompt bar to match Revit window.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def update_window(self):\n    \"\"\"Update the prompt bar to match Revit window.\"\"\"\n    screen_area = HOST_APP.proc_screen_workarea\n    scale_factor = 1.0 / HOST_APP.proc_screen_scalefactor\n    top = left = width = height = 0\n\n    window_rect = revit.ui.get_window_rectangle()\n\n    # set width and height\n    width = window_rect.Right - window_rect.Left\n    height = self.user_height\n\n    top = window_rect.Top\n    # in maximized window, the top might be off the active screen\n    # due to windows thicker window frames\n    # lets cut the height and re-adjust the top\n    top_diff = abs(screen_area.Top - top)\n    if 10 &gt; top_diff &gt; 0 and top_diff &lt; height:\n        height -= top_diff\n        top = screen_area.Top\n\n    left = window_rect.Left\n    # in maximized window, Left also might be off the active screen\n    # due to windows thicker window frames\n    # let's fix the width to accomodate the extra pixels as well\n    left_diff = abs(screen_area.Left - left)\n    if 10 &gt; left_diff &gt; 0 and left_diff &lt; width:\n        # deduct two times the left negative offset since this extra\n        # offset happens on both left and right side\n        width -= left_diff * 2\n        left = screen_area.Left\n\n    self.Top = top * scale_factor\n    self.Left = left * scale_factor\n    self.Width = width * scale_factor\n    self.Height = height\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.ProgressBar.clicked_cancel","title":"<code>clicked_cancel(sender, args)</code>","text":"<p>Handler for cancel button clicked event.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def clicked_cancel(self, sender, args):    #pylint: disable=W0613\n    \"\"\"Handler for cancel button clicked event.\"\"\"\n    self.cancel_b.Content = 'Cancelling...'\n    self.cancelled = True    #pylint: disable=W0201\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.ProgressBar.reset","title":"<code>reset()</code>","text":"<p>Reset progress value to 0.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def reset(self):\n    \"\"\"Reset progress value to 0.\"\"\"\n    self.update_progress(0, 1)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.ProgressBar.update_progress","title":"<code>update_progress(new_value, max_value=1)</code>","text":"<p>Update progress bar state with given min, max values.</p> <p>Parameters:</p> Name Type Description Default <code>new_value</code> <code>float</code> <p>current progress value</p> required <code>max_value</code> <code>float</code> <p>total progress value</p> <code>1</code> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def update_progress(self, new_value, max_value=1):\n    \"\"\"Update progress bar state with given min, max values.\n\n    Args:\n        new_value (float): current progress value\n        max_value (float): total progress value\n    \"\"\"\n    self.max_value = max_value    #pylint: disable=W0201\n    self.new_value = new_value    #pylint: disable=W0201\n    if self.new_value == 0:\n        self._dispatch_updater()\n    elif self.step &gt; 0:\n        if self.new_value % self.step == 0:\n            self._dispatch_updater()\n    else:\n        self._dispatch_updater()\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SearchPrompt","title":"<code>SearchPrompt(search_db, width, height, **kwargs)</code>","text":"<p>               Bases: <code>WPFWindow</code></p> <p>Standard prompt for pyRevit search.</p> <p>Parameters:</p> Name Type Description Default <code>search_db</code> <code>list</code> <p>list of possible search targets</p> required <code>width</code> <code>int</code> <p>width of search prompt window</p> required <code>height</code> <code>int</code> <p>height of search prompt window</p> required <p>Other Parameters:</p> Name Type Description <code>search_tip</code> <code>str</code> <p>text to show in grayscale when search box is empty</p> <code>switches</code> <code>str</code> <p>list of switches</p> <p>Returns:</p> Type Description <code>tuple[str, dict] | str</code> <p>matched string if switches are not provided, matched strings, and dict of switches otherwise.</p> <p>Examples:</p> <pre><code>from pyrevit import forms\n# assume search input of '/switch1 target1'\nmatched_str, args, switches = forms.SearchPrompt.show(\n    search_db=['target1', 'target2', 'target3', 'target4'],\n    switches=['/switch1', '/switch2'],\n    search_tip='pyRevit Search'\n    )\nmatched_str\n'target1'\nargs\n['--help', '--branch', 'branchname']\nswitches\n{'/switch1': True, '/switch2': False}\n</code></pre> <p>Initialize search prompt window.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def __init__(self, search_db, width, height, **kwargs):\n    \"\"\"Initialize search prompt window.\"\"\"\n    WPFWindow.__init__(self,\n                       op.join(XAML_FILES_DIR, 'SearchPrompt.xaml'))\n    self.Width = width\n    self.MinWidth = self.Width\n    self.Height = height\n\n    self.search_tip = kwargs.get('search_tip', '')\n\n    if isinstance(search_db, list):\n        self._search_db = None\n        self._search_db_keys = search_db\n    elif isinstance(search_db, dict):\n        self._search_db = search_db\n        self._search_db_keys = sorted(self._search_db.keys())\n    else:\n        raise PyRevitException(\"Unknown search database type\")\n\n    self._search_res = None\n    self._switches = kwargs.get('switches', [])\n    self._setup_response()\n\n    self.search_tb.Focus()\n    self.hide_element(self.tab_icon)\n    self.hide_element(self.return_icon)\n    self.search_tb.Text = ''\n    self.set_search_results()\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SearchPrompt-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.SearchPrompt.pyrevit_version","title":"<code>pyrevit_version</code>  <code>property</code>","text":"<p>Active pyRevit formatted version e.g. '4.9-beta'.</p>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SearchPrompt.Width","title":"<code>Width = width</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.SearchPrompt.MinWidth","title":"<code>MinWidth = self.Width</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.SearchPrompt.Height","title":"<code>Height = height</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.SearchPrompt.search_tip","title":"<code>search_tip = kwargs.get('search_tip', '')</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.SearchPrompt.search_input","title":"<code>search_input</code>  <code>property</code> <code>writable</code>","text":"<p>Current search input.</p>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SearchPrompt.search_input_parts","title":"<code>search_input_parts</code>  <code>property</code>","text":"<p>Current cleaned up search term.</p>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SearchPrompt.search_term","title":"<code>search_term</code>  <code>property</code>","text":"<p>Current cleaned up search term.</p>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SearchPrompt.search_term_switches","title":"<code>search_term_switches</code>  <code>property</code>","text":"<p>Find matching switches in search term.</p>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SearchPrompt.search_term_args","title":"<code>search_term_args</code>  <code>property</code>","text":"<p>Find arguments in search term.</p>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SearchPrompt.search_term_main","title":"<code>search_term_main</code>  <code>property</code>","text":"<p>Current cleaned up search term without the listed switches.</p>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SearchPrompt.search_matches","title":"<code>search_matches</code>  <code>property</code>","text":"<p>List of matches for the given search term.</p>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SearchPrompt-functions","title":"Functions","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.SearchPrompt.load_xaml","title":"<code>load_xaml(xaml_source, literal_string=False, handle_esc=True, set_owner=True)</code>","text":"<p>Load the window XAML file.</p> <p>Parameters:</p> Name Type Description Default <code>xaml_source</code> <code>str</code> <p>The XAML content or file path to load.</p> required <code>literal_string</code> <code>bool</code> <p>True if <code>xaml_source</code> is content, False if it is a path. Defaults to False.</p> <code>False</code> <code>handle_esc</code> <code>bool</code> <p>Whether the ESC key should be handled. Defaults to True.</p> <code>True</code> <code>set_owner</code> <code>bool</code> <p>Whether to se the window owner. Defaults to True.</p> <code>True</code> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def load_xaml(self, xaml_source, literal_string=False, handle_esc=True, set_owner=True):\n    \"\"\"Load the window XAML file.\n\n    Args:\n        xaml_source (str): The XAML content or file path to load.\n        literal_string (bool, optional): True if `xaml_source` is content,\n            False if it is a path. Defaults to False.\n        handle_esc (bool, optional): Whether the ESC key should be handled.\n            Defaults to True.\n        set_owner (bool, optional): Whether to se the window owner.\n            Defaults to True.\n    \"\"\"\n    # create new id for this window\n    self.window_id = coreutils.new_uuid()\n\n    if not literal_string:\n        wpf.LoadComponent(self, self._determine_xaml(xaml_source))\n    else:\n        wpf.LoadComponent(self, framework.StringReader(xaml_source))\n\n    # set properties\n    self.thread_id = framework.get_current_thread_id()\n    if set_owner:\n        self.setup_owner()\n    self.setup_icon()\n    WPFWindow.setup_resources(self)\n    if handle_esc:\n        self.setup_default_handlers()\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SearchPrompt.merge_resource_dict","title":"<code>merge_resource_dict(xaml_source)</code>","text":"<p>Merge a ResourceDictionary xaml file with this window.</p> <p>Parameters:</p> Name Type Description Default <code>xaml_source</code> <code>str</code> <p>xaml file with the resource dictionary</p> required Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def merge_resource_dict(self, xaml_source):\n    \"\"\"Merge a ResourceDictionary xaml file with this window.\n\n    Args:\n        xaml_source (str): xaml file with the resource dictionary\n    \"\"\"\n    lang_dictionary = ResourceDictionary()\n    lang_dictionary.Source = Uri(xaml_source, UriKind.Absolute)\n    self.Resources.MergedDictionaries.Add(lang_dictionary)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SearchPrompt.get_locale_string","title":"<code>get_locale_string(string_name)</code>","text":"<p>Get localized string.</p> <p>Parameters:</p> Name Type Description Default <code>string_name</code> <code>str</code> <p>string name</p> required <p>Returns:</p> Type Description <code>str</code> <p>localized string</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def get_locale_string(self, string_name):\n    \"\"\"Get localized string.\n\n    Args:\n        string_name (str): string name\n\n    Returns:\n        (str): localized string\n    \"\"\"\n    return self.FindResource(string_name)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SearchPrompt.setup_owner","title":"<code>setup_owner()</code>","text":"<p>Set the window owner.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def setup_owner(self):\n    \"\"\"Set the window owner.\"\"\"\n    wih = Interop.WindowInteropHelper(self)\n    wih.Owner = AdWindows.ComponentManager.ApplicationWindow\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SearchPrompt.setup_resources","title":"<code>setup_resources(wpf_ctrl)</code>  <code>staticmethod</code>","text":"<p>Sets the WPF resources.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>@staticmethod\ndef setup_resources(wpf_ctrl):\n    \"\"\"Sets the WPF resources.\"\"\"\n    #2c3e50\n    wpf_ctrl.Resources['pyRevitDarkColor'] = \\\n        Media.Color.FromArgb(0xFF, 0x2c, 0x3e, 0x50)\n\n    #23303d\n    wpf_ctrl.Resources['pyRevitDarkerDarkColor'] = \\\n        Media.Color.FromArgb(0xFF, 0x23, 0x30, 0x3d)\n\n    #ffffff\n    wpf_ctrl.Resources['pyRevitButtonColor'] = \\\n        Media.Color.FromArgb(0xFF, 0xff, 0xff, 0xff)\n\n    #f39c12\n    wpf_ctrl.Resources['pyRevitAccentColor'] = \\\n        Media.Color.FromArgb(0xFF, 0xf3, 0x9c, 0x12)\n\n    wpf_ctrl.Resources['pyRevitDarkBrush'] = \\\n        Media.SolidColorBrush(wpf_ctrl.Resources['pyRevitDarkColor'])\n    wpf_ctrl.Resources['pyRevitAccentBrush'] = \\\n        Media.SolidColorBrush(wpf_ctrl.Resources['pyRevitAccentColor'])\n\n    wpf_ctrl.Resources['pyRevitDarkerDarkBrush'] = \\\n        Media.SolidColorBrush(wpf_ctrl.Resources['pyRevitDarkerDarkColor'])\n\n    wpf_ctrl.Resources['pyRevitButtonForgroundBrush'] = \\\n        Media.SolidColorBrush(wpf_ctrl.Resources['pyRevitButtonColor'])\n\n    wpf_ctrl.Resources['pyRevitRecognizesAccessKey'] = \\\n        DEFAULT_RECOGNIZE_ACCESS_KEY\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SearchPrompt.setup_default_handlers","title":"<code>setup_default_handlers()</code>","text":"<p>Set the default handlers.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def setup_default_handlers(self):\n    \"\"\"Set the default handlers.\"\"\"\n    self.PreviewKeyDown += self.handle_input_key    #pylint: disable=E1101\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SearchPrompt.handle_input_key","title":"<code>handle_input_key(sender, args)</code>","text":"<p>Handle keyboard input and close the window on Escape.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def handle_input_key(self, sender, args):    #pylint: disable=W0613\n    \"\"\"Handle keyboard input and close the window on Escape.\"\"\"\n    if args.Key == Input.Key.Escape:\n        self.Close()\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SearchPrompt.set_icon","title":"<code>set_icon(icon_path)</code>","text":"<p>Set window icon to given icon path.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def set_icon(self, icon_path):\n    \"\"\"Set window icon to given icon path.\"\"\"\n    self.Icon = utils.bitmap_from_file(icon_path)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SearchPrompt.setup_icon","title":"<code>setup_icon()</code>","text":"<p>Setup default window icon.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def setup_icon(self):\n    \"\"\"Setup default window icon.\"\"\"\n    self.set_icon(op.join(BIN_DIR, 'pyrevit_settings.png'))\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SearchPrompt.hide","title":"<code>hide()</code>","text":"<p>Hide window.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def hide(self):\n    \"\"\"Hide window.\"\"\"\n    self.Hide()\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SearchPrompt.show_dialog","title":"<code>show_dialog()</code>","text":"<p>Show modal window.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def show_dialog(self):\n    \"\"\"Show modal window.\"\"\"\n    return self.ShowDialog()\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SearchPrompt.set_image_source_file","title":"<code>set_image_source_file(wpf_element, image_file)</code>  <code>staticmethod</code>","text":"<p>Set source file for image element.</p> <p>Parameters:</p> Name Type Description Default <code>wpf_element</code> <code>Image</code> <p>xaml image element</p> required <code>image_file</code> <code>str</code> <p>image file path</p> required Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>@staticmethod\ndef set_image_source_file(wpf_element, image_file):\n    \"\"\"Set source file for image element.\n\n    Args:\n        wpf_element (System.Windows.Controls.Image): xaml image element\n        image_file (str): image file path\n    \"\"\"\n    if not op.exists(image_file):\n        wpf_element.Source = \\\n            utils.bitmap_from_file(\n                os.path.join(EXEC_PARAMS.command_path,\n                             image_file)\n                )\n    else:\n        wpf_element.Source = utils.bitmap_from_file(image_file)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SearchPrompt.set_image_source","title":"<code>set_image_source(wpf_element, image_file)</code>","text":"<p>Set source file for image element.</p> <p>Parameters:</p> Name Type Description Default <code>wpf_element</code> <code>Image</code> <p>xaml image element</p> required <code>image_file</code> <code>str</code> <p>image file path</p> required Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def set_image_source(self, wpf_element, image_file):\n    \"\"\"Set source file for image element.\n\n    Args:\n        wpf_element (System.Windows.Controls.Image): xaml image element\n        image_file (str): image file path\n    \"\"\"\n    WPFWindow.set_image_source_file(wpf_element, image_file)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SearchPrompt.dispatch","title":"<code>dispatch(func, *args, **kwargs)</code>","text":"<p>Runs the function in a new thread.</p> <p>Parameters:</p> Name Type Description Default <code>func</code> <code>Callable</code> <p>function to run</p> required <code>*args</code> <code>Any</code> <p>positional arguments to pass to func</p> <code>()</code> <code>**kwargs</code> <code>Any</code> <p>keyword arguments to pass to func</p> <code>{}</code> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def dispatch(self, func, *args, **kwargs):\n    \"\"\"Runs the function in a new thread.\n\n    Args:\n        func (Callable): function to run\n        *args (Any): positional arguments to pass to func\n        **kwargs (Any): keyword arguments to pass to func\n    \"\"\"\n    if framework.get_current_thread_id() == self.thread_id:\n        t = threading.Thread(\n            target=func,\n            args=args,\n            kwargs=kwargs\n            )\n        t.start()\n    else:\n        # ask ui thread to call the func with args and kwargs\n        self.Dispatcher.Invoke(\n            System.Action(\n                lambda: func(*args, **kwargs)\n                ),\n            Threading.DispatcherPriority.Background\n            )\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SearchPrompt.conceal","title":"<code>conceal()</code>","text":"<p>Conceal window.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def conceal(self):\n    \"\"\"Conceal window.\"\"\"\n    return WindowToggler(self)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SearchPrompt.hide_element","title":"<code>hide_element(*wpf_elements)</code>  <code>staticmethod</code>","text":"<p>Collapse elements.</p> <p>Parameters:</p> Name Type Description Default <code>*wpf_elements</code> <code>list[UIElement]</code> <p>WPF framework elements to be collaped</p> <code>()</code> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>@staticmethod\ndef hide_element(*wpf_elements):\n    \"\"\"Collapse elements.\n\n    Args:\n        *wpf_elements (list[UIElement]): WPF framework elements to be collaped\n    \"\"\"\n    for wpfel in wpf_elements:\n        wpfel.Visibility = WPF_COLLAPSED\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SearchPrompt.show_element","title":"<code>show_element(*wpf_elements)</code>  <code>staticmethod</code>","text":"<p>Show collapsed elements.</p> <p>Parameters:</p> Name Type Description Default <code>*wpf_elements</code> <code>list[UIElement]</code> <p>WPF framework elements to be set to visible.</p> <code>()</code> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>@staticmethod\ndef show_element(*wpf_elements):\n    \"\"\"Show collapsed elements.\n\n    Args:\n        *wpf_elements (list[UIElement]): WPF framework elements to be set to visible.\n    \"\"\"\n    for wpfel in wpf_elements:\n        wpfel.Visibility = WPF_VISIBLE\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SearchPrompt.toggle_element","title":"<code>toggle_element(*wpf_elements)</code>  <code>staticmethod</code>","text":"<p>Toggle visibility of elements.</p> <p>Parameters:</p> Name Type Description Default <code>*wpf_elements</code> <code>list[UIElement]</code> <p>WPF framework elements to be toggled.</p> <code>()</code> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>@staticmethod\ndef toggle_element(*wpf_elements):\n    \"\"\"Toggle visibility of elements.\n\n    Args:\n        *wpf_elements (list[UIElement]): WPF framework elements to be toggled.\n    \"\"\"\n    for wpfel in wpf_elements:\n        if wpfel.Visibility == WPF_VISIBLE:\n            WPFWindow.hide_element(wpfel)\n        elif wpfel.Visibility == WPF_COLLAPSED:\n            WPFWindow.show_element(wpfel)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SearchPrompt.disable_element","title":"<code>disable_element(*wpf_elements)</code>  <code>staticmethod</code>","text":"<p>Enable elements.</p> <p>Parameters:</p> Name Type Description Default <code>*wpf_elements</code> <code>list[UIElement]</code> <p>WPF framework elements to be enabled</p> <code>()</code> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>@staticmethod\ndef disable_element(*wpf_elements):\n    \"\"\"Enable elements.\n\n    Args:\n        *wpf_elements (list[UIElement]): WPF framework elements to be enabled\n    \"\"\"\n    for wpfel in wpf_elements:\n        wpfel.IsEnabled = False\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SearchPrompt.enable_element","title":"<code>enable_element(*wpf_elements)</code>  <code>staticmethod</code>","text":"<p>Enable elements.</p> <p>Parameters:</p> Name Type Description Default <code>*wpf_elements</code> <code>list[UIElement]</code> <p>WPF framework elements to be enabled</p> <code>()</code> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>@staticmethod\ndef enable_element(*wpf_elements):\n    \"\"\"Enable elements.\n\n    Args:\n        *wpf_elements (list[UIElement]): WPF framework elements to be enabled\n    \"\"\"\n    for wpfel in wpf_elements:\n        wpfel.IsEnabled = True\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SearchPrompt.handle_url_click","title":"<code>handle_url_click(sender, args)</code>","text":"<p>Callback for handling click on package website url.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def handle_url_click(self, sender, args): #pylint: disable=unused-argument\n    \"\"\"Callback for handling click on package website url.\"\"\"\n    return webbrowser.open_new_tab(sender.NavigateUri.AbsoluteUri)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SearchPrompt.update_results_display","title":"<code>update_results_display(fill_match=False)</code>","text":"<p>Update search prompt results based on current input text.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def update_results_display(self, fill_match=False):\n    \"\"\"Update search prompt results based on current input text.\"\"\"\n    self.directmatch_tb.Text = ''\n    self.wordsmatch_tb.Text = ''\n\n    results = self.search_matches\n    res_cout = len(results)\n\n    mlogger.debug('unique results count: %s', res_cout)\n    mlogger.debug('unique results: %s', results)\n\n    if res_cout &gt; 1:\n        self.show_element(self.tab_icon)\n        self.hide_element(self.return_icon)\n    elif res_cout == 1:\n        self.hide_element(self.tab_icon)\n        self.show_element(self.return_icon)\n    else:\n        self.hide_element(self.tab_icon)\n        self.hide_element(self.return_icon)\n\n    if self._result_index &gt;= res_cout:\n        self._result_index = 0   #pylint: disable=W0201\n\n    if self._result_index &lt; 0:\n        self._result_index = res_cout - 1   #pylint: disable=W0201\n\n    if not self.search_input:\n        self.directmatch_tb.Text = self.search_tip\n        return\n\n    if results:\n        input_term = self.search_term\n        cur_res = results[self._result_index]\n        mlogger.debug('current result: %s', cur_res)\n        if fill_match:\n            self.search_input = cur_res\n        else:\n            if cur_res.lower().startswith(input_term):\n                self.directmatch_tb.Text = \\\n                    self.search_input + cur_res[len(input_term):]\n                mlogger.debug('directmatch_tb.Text: %s',\n                              self.directmatch_tb.Text)\n            else:\n                self.wordsmatch_tb.Text = '- {}'.format(cur_res)\n                mlogger.debug('wordsmatch_tb.Text: %s',\n                              self.wordsmatch_tb.Text)\n        tooltip = self._search_db.get(cur_res, None)\n        if tooltip:\n            self.tooltip_tb.Text = tooltip\n            self.show_element(self.tooltip_tb)\n        else:\n            self.hide_element(self.tooltip_tb)\n        self._search_res = cur_res\n        return True\n    return False\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SearchPrompt.set_search_results","title":"<code>set_search_results(*args)</code>","text":"<p>Set search results for returning.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def set_search_results(self, *args):\n    \"\"\"Set search results for returning.\"\"\"\n    self._result_index = 0\n    self._search_results = []\n\n    mlogger.debug('search input: %s', self.search_input)\n    mlogger.debug('search term: %s', self.search_term)\n    mlogger.debug('search term (main): %s', self.search_term_main)\n    mlogger.debug('search term (parts): %s', self.search_input_parts)\n    mlogger.debug('search term (args): %s', self.search_term_args)\n    mlogger.debug('search term (switches): %s', self.search_term_switches)\n\n    for resultset in args:\n        mlogger.debug('result set: %s}', resultset)\n        self._search_results.extend(sorted(resultset))\n\n    mlogger.debug('results: %s', self._search_results)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SearchPrompt.find_direct_match","title":"<code>find_direct_match(input_text)</code>","text":"<p>Find direct text matches in search term.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def find_direct_match(self, input_text):\n    \"\"\"Find direct text matches in search term.\"\"\"\n    results = []\n    if input_text:\n        for cmd_name in self._search_db_keys:\n            if cmd_name.lower().startswith(input_text):\n                results.append(cmd_name)\n\n    return results\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SearchPrompt.find_word_match","title":"<code>find_word_match(input_text)</code>","text":"<p>Find direct word matches in search term.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def find_word_match(self, input_text):\n    \"\"\"Find direct word matches in search term.\"\"\"\n    results = []\n    if input_text:\n        cur_words = input_text.split(' ')\n        for cmd_name in self._search_db_keys:\n            if all([x in cmd_name.lower() for x in cur_words]):\n                results.append(cmd_name)\n\n    return results\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SearchPrompt.search_txt_changed","title":"<code>search_txt_changed(sender, args)</code>","text":"<p>Handle text changed event.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def search_txt_changed(self, sender, args):    #pylint: disable=W0613\n    \"\"\"Handle text changed event.\"\"\"\n    input_term = self.search_term_main\n    dmresults = self.find_direct_match(input_term)\n    wordresults = self.find_word_match(input_term)\n    self.set_search_results(dmresults, wordresults)\n    self.update_results_display()\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SearchPrompt.handle_kb_key","title":"<code>handle_kb_key(sender, args)</code>","text":"<p>Handle keyboard input event.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def handle_kb_key(self, sender, args):    #pylint: disable=W0613\n    \"\"\"Handle keyboard input event.\"\"\"\n    shiftdown = Input.Keyboard.IsKeyDown(Input.Key.LeftShift) \\\n        or Input.Keyboard.IsKeyDown(Input.Key.RightShift)\n    # Escape: set response to none and close\n    if args.Key == Input.Key.Escape:\n        self._setup_response()\n        self.Close()\n    # Enter: close, returns matched response automatically\n    elif args.Key == Input.Key.Enter:\n        if self.search_tb.Text != '':\n            self._setup_response(response=self._search_res)\n            args.Handled = True\n            self.Close()\n    # Shift+Tab, Tab: Cycle through matches\n    elif args.Key == Input.Key.Tab and shiftdown:\n        self._result_index -= 1\n        self.update_results_display()\n    elif args.Key == Input.Key.Tab:\n        self._result_index += 1\n        self.update_results_display()\n    # Up, Down: Cycle through matches\n    elif args.Key == Input.Key.Up:\n        self._result_index -= 1\n        self.update_results_display()\n    elif args.Key == Input.Key.Down:\n        self._result_index += 1\n        self.update_results_display()\n    # Right, End: Autocomplete with displayed match\n    elif args.Key in [Input.Key.Right,\n                      Input.Key.End]:\n        self.update_results_display(fill_match=True)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SearchPrompt.show","title":"<code>show(search_db, width=DEFAULT_SEARCHWND_WIDTH, height=DEFAULT_SEARCHWND_HEIGHT, **kwargs)</code>  <code>classmethod</code>","text":"<p>Show search prompt.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>@classmethod\ndef show(cls, search_db,    #pylint: disable=W0221\n         width=DEFAULT_SEARCHWND_WIDTH,\n         height=DEFAULT_SEARCHWND_HEIGHT, **kwargs):\n    \"\"\"Show search prompt.\"\"\"\n    dlg = cls(search_db, width, height, **kwargs)\n    dlg.ShowDialog()\n    return dlg.response\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.RevisionOption","title":"<code>RevisionOption(revision_element)</code>","text":"<p>               Bases: <code>TemplateListItem</code></p> <p>Revision wrapper for :func:<code>select_revisions</code>.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def __init__(self, revision_element):\n    super(RevisionOption, self).__init__(revision_element)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.RevisionOption-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.RevisionOption.item","title":"<code>item = orig_item</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.RevisionOption.state","title":"<code>state = checked</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.RevisionOption.checkable","title":"<code>checkable</code>  <code>property</code> <code>writable</code>","text":"<p>List Item CheckBox Visibility.</p>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.RevisionOption.name","title":"<code>name</code>  <code>property</code>","text":"<p>Revision name (description).</p>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.RevisionOption-functions","title":"Functions","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.RevisionOption.add_PropertyChanged","title":"<code>add_PropertyChanged(value)</code>","text":"<p>Called when a property is added to the object.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def add_PropertyChanged(self, value):\n    \"\"\"Called when a property is added to the object.\"\"\"\n    self.PropertyChanged += value\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.RevisionOption.remove_PropertyChanged","title":"<code>remove_PropertyChanged(value)</code>","text":"<p>Called when a property is removed from the object.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def remove_PropertyChanged(self, value):\n    \"\"\"Called when a property is removed from the object.\"\"\"\n    self.PropertyChanged -= value\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.RevisionOption.OnPropertyChanged","title":"<code>OnPropertyChanged(prop_name)</code>","text":"<p>Called when a property is changed.</p> <p>Parameters:</p> Name Type Description Default <code>prop_name</code> <code>str</code> <p>property name</p> required Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def OnPropertyChanged(self, prop_name):\n    \"\"\"Called when a property is changed.\n\n    Args:\n        prop_name (str): property name\n    \"\"\"\n    if self._propertyChangedCaller:\n        args = ComponentModel.PropertyChangedEventArgs(prop_name)\n        self._propertyChangedCaller(self, args)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.RevisionOption.unwrap","title":"<code>unwrap()</code>","text":"<p>Unwrap and return wrapped object.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def unwrap(self):\n    \"\"\"Unwrap and return wrapped object.\"\"\"\n    return self.item\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.RevisionOption.checked","title":"<code>checked(value)</code>","text":"Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>@checked.setter\ndef checked(self, value):\n    self.state = value\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SheetOption","title":"<code>SheetOption(sheet_element)</code>","text":"<p>               Bases: <code>TemplateListItem</code></p> <p>Sheet wrapper for :func:<code>select_sheets</code>.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def __init__(self, sheet_element):\n    super(SheetOption, self).__init__(sheet_element)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SheetOption-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.SheetOption.item","title":"<code>item = orig_item</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.SheetOption.state","title":"<code>state = checked</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.SheetOption.checkable","title":"<code>checkable</code>  <code>property</code> <code>writable</code>","text":"<p>List Item CheckBox Visibility.</p>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SheetOption.name","title":"<code>name</code>  <code>property</code>","text":"<p>Sheet name.</p>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SheetOption.number","title":"<code>number</code>  <code>property</code>","text":"<p>Sheet number.</p>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SheetOption-functions","title":"Functions","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.SheetOption.add_PropertyChanged","title":"<code>add_PropertyChanged(value)</code>","text":"<p>Called when a property is added to the object.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def add_PropertyChanged(self, value):\n    \"\"\"Called when a property is added to the object.\"\"\"\n    self.PropertyChanged += value\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SheetOption.remove_PropertyChanged","title":"<code>remove_PropertyChanged(value)</code>","text":"<p>Called when a property is removed from the object.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def remove_PropertyChanged(self, value):\n    \"\"\"Called when a property is removed from the object.\"\"\"\n    self.PropertyChanged -= value\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SheetOption.OnPropertyChanged","title":"<code>OnPropertyChanged(prop_name)</code>","text":"<p>Called when a property is changed.</p> <p>Parameters:</p> Name Type Description Default <code>prop_name</code> <code>str</code> <p>property name</p> required Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def OnPropertyChanged(self, prop_name):\n    \"\"\"Called when a property is changed.\n\n    Args:\n        prop_name (str): property name\n    \"\"\"\n    if self._propertyChangedCaller:\n        args = ComponentModel.PropertyChangedEventArgs(prop_name)\n        self._propertyChangedCaller(self, args)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SheetOption.unwrap","title":"<code>unwrap()</code>","text":"<p>Unwrap and return wrapped object.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def unwrap(self):\n    \"\"\"Unwrap and return wrapped object.\"\"\"\n    return self.item\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.SheetOption.checked","title":"<code>checked(value)</code>","text":"Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>@checked.setter\ndef checked(self, value):\n    self.state = value\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.ViewOption","title":"<code>ViewOption(view_element)</code>","text":"<p>               Bases: <code>TemplateListItem</code></p> <p>View wrapper for :func:<code>select_views</code>.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def __init__(self, view_element):\n    super(ViewOption, self).__init__(view_element)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.ViewOption-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.ViewOption.item","title":"<code>item = orig_item</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.ViewOption.state","title":"<code>state = checked</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.ViewOption.checkable","title":"<code>checkable</code>  <code>property</code> <code>writable</code>","text":"<p>List Item CheckBox Visibility.</p>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.ViewOption.name","title":"<code>name</code>  <code>property</code>","text":"<p>View name.</p>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.ViewOption-functions","title":"Functions","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.ViewOption.add_PropertyChanged","title":"<code>add_PropertyChanged(value)</code>","text":"<p>Called when a property is added to the object.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def add_PropertyChanged(self, value):\n    \"\"\"Called when a property is added to the object.\"\"\"\n    self.PropertyChanged += value\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.ViewOption.remove_PropertyChanged","title":"<code>remove_PropertyChanged(value)</code>","text":"<p>Called when a property is removed from the object.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def remove_PropertyChanged(self, value):\n    \"\"\"Called when a property is removed from the object.\"\"\"\n    self.PropertyChanged -= value\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.ViewOption.OnPropertyChanged","title":"<code>OnPropertyChanged(prop_name)</code>","text":"<p>Called when a property is changed.</p> <p>Parameters:</p> Name Type Description Default <code>prop_name</code> <code>str</code> <p>property name</p> required Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def OnPropertyChanged(self, prop_name):\n    \"\"\"Called when a property is changed.\n\n    Args:\n        prop_name (str): property name\n    \"\"\"\n    if self._propertyChangedCaller:\n        args = ComponentModel.PropertyChangedEventArgs(prop_name)\n        self._propertyChangedCaller(self, args)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.ViewOption.unwrap","title":"<code>unwrap()</code>","text":"<p>Unwrap and return wrapped object.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def unwrap(self):\n    \"\"\"Unwrap and return wrapped object.\"\"\"\n    return self.item\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.ViewOption.checked","title":"<code>checked(value)</code>","text":"Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>@checked.setter\ndef checked(self, value):\n    self.state = value\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.LevelOption","title":"<code>LevelOption(level_element)</code>","text":"<p>               Bases: <code>TemplateListItem</code></p> <p>Level wrapper for :func:<code>select_levels</code>.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def __init__(self, level_element):\n    super(LevelOption, self).__init__(level_element)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.LevelOption-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.LevelOption.item","title":"<code>item = orig_item</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.LevelOption.state","title":"<code>state = checked</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.LevelOption.checkable","title":"<code>checkable</code>  <code>property</code> <code>writable</code>","text":"<p>List Item CheckBox Visibility.</p>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.LevelOption.name","title":"<code>name</code>  <code>property</code>","text":"<p>Level name.</p>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.LevelOption-functions","title":"Functions","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.LevelOption.add_PropertyChanged","title":"<code>add_PropertyChanged(value)</code>","text":"<p>Called when a property is added to the object.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def add_PropertyChanged(self, value):\n    \"\"\"Called when a property is added to the object.\"\"\"\n    self.PropertyChanged += value\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.LevelOption.remove_PropertyChanged","title":"<code>remove_PropertyChanged(value)</code>","text":"<p>Called when a property is removed from the object.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def remove_PropertyChanged(self, value):\n    \"\"\"Called when a property is removed from the object.\"\"\"\n    self.PropertyChanged -= value\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.LevelOption.OnPropertyChanged","title":"<code>OnPropertyChanged(prop_name)</code>","text":"<p>Called when a property is changed.</p> <p>Parameters:</p> Name Type Description Default <code>prop_name</code> <code>str</code> <p>property name</p> required Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def OnPropertyChanged(self, prop_name):\n    \"\"\"Called when a property is changed.\n\n    Args:\n        prop_name (str): property name\n    \"\"\"\n    if self._propertyChangedCaller:\n        args = ComponentModel.PropertyChangedEventArgs(prop_name)\n        self._propertyChangedCaller(self, args)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.LevelOption.unwrap","title":"<code>unwrap()</code>","text":"<p>Unwrap and return wrapped object.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def unwrap(self):\n    \"\"\"Unwrap and return wrapped object.\"\"\"\n    return self.item\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.LevelOption.checked","title":"<code>checked(value)</code>","text":"Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>@checked.setter\ndef checked(self, value):\n    self.state = value\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.FamilyParamOption","title":"<code>FamilyParamOption(fparam, builtin=False, labeled=False)</code>","text":"<p>               Bases: <code>TemplateListItem</code></p> <p>Level wrapper for :func:<code>select_family_parameters</code>.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def __init__(self, fparam, builtin=False, labeled=False):\n    super(FamilyParamOption, self).__init__(fparam)\n    self.isbuiltin = builtin\n    self.islabeled = labeled\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.FamilyParamOption-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.FamilyParamOption.item","title":"<code>item = orig_item</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.FamilyParamOption.state","title":"<code>state = checked</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.FamilyParamOption.checkable","title":"<code>checkable</code>  <code>property</code> <code>writable</code>","text":"<p>List Item CheckBox Visibility.</p>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.FamilyParamOption.isbuiltin","title":"<code>isbuiltin = builtin</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.FamilyParamOption.islabeled","title":"<code>islabeled = labeled</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.FamilyParamOption.name","title":"<code>name</code>  <code>property</code>","text":"<p>Family Parameter name.</p>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.FamilyParamOption.istype","title":"<code>istype</code>  <code>property</code>","text":"<p>Is type parameter.</p>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.FamilyParamOption-functions","title":"Functions","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.FamilyParamOption.add_PropertyChanged","title":"<code>add_PropertyChanged(value)</code>","text":"<p>Called when a property is added to the object.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def add_PropertyChanged(self, value):\n    \"\"\"Called when a property is added to the object.\"\"\"\n    self.PropertyChanged += value\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.FamilyParamOption.remove_PropertyChanged","title":"<code>remove_PropertyChanged(value)</code>","text":"<p>Called when a property is removed from the object.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def remove_PropertyChanged(self, value):\n    \"\"\"Called when a property is removed from the object.\"\"\"\n    self.PropertyChanged -= value\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.FamilyParamOption.OnPropertyChanged","title":"<code>OnPropertyChanged(prop_name)</code>","text":"<p>Called when a property is changed.</p> <p>Parameters:</p> Name Type Description Default <code>prop_name</code> <code>str</code> <p>property name</p> required Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def OnPropertyChanged(self, prop_name):\n    \"\"\"Called when a property is changed.\n\n    Args:\n        prop_name (str): property name\n    \"\"\"\n    if self._propertyChangedCaller:\n        args = ComponentModel.PropertyChangedEventArgs(prop_name)\n        self._propertyChangedCaller(self, args)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.FamilyParamOption.unwrap","title":"<code>unwrap()</code>","text":"<p>Unwrap and return wrapped object.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def unwrap(self):\n    \"\"\"Unwrap and return wrapped object.\"\"\"\n    return self.item\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.FamilyParamOption.checked","title":"<code>checked(value)</code>","text":"Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>@checked.setter\ndef checked(self, value):\n    self.state = value\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms-functions","title":"Functions","text":""},{"location":"reference/pyrevit/forms/#pyrevit.forms.is_registered_dockable_panel","title":"<code>is_registered_dockable_panel(panel_type)</code>","text":"<p>Check if dockable panel is already registered.</p> <p>Parameters:</p> Name Type Description Default <code>panel_type</code> <code>WPFPanel</code> <p>dockable panel type</p> required Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def is_registered_dockable_panel(panel_type):\n    \"\"\"Check if dockable panel is already registered.\n\n    Args:\n        panel_type (forms.WPFPanel): dockable panel type\n    \"\"\"\n    panel_uuid = coreutils.Guid.Parse(panel_type.panel_id)\n    dockable_panel_id = UI.DockablePaneId(panel_uuid)\n    return UI.DockablePane.PaneExists(dockable_panel_id)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.register_dockable_panel","title":"<code>register_dockable_panel(panel_type, default_visible=True)</code>","text":"<p>Register dockable panel.</p> <p>Parameters:</p> Name Type Description Default <code>panel_type</code> <code>WPFPanel</code> <p>dockable panel type</p> required <code>default_visible</code> <code>bool</code> <p>whether panel should be visible by default</p> <code>True</code> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def register_dockable_panel(panel_type, default_visible=True):\n    \"\"\"Register dockable panel.\n\n    Args:\n        panel_type (forms.WPFPanel): dockable panel type\n        default_visible (bool, optional):\n            whether panel should be visible by default\n    \"\"\"\n    if not issubclass(panel_type, WPFPanel):\n        raise PyRevitException(\n            \"Dockable pane must be a subclass of forms.WPFPanel\"\n            )\n\n    panel_uuid = coreutils.Guid.Parse(panel_type.panel_id)\n    dockable_panel_id = UI.DockablePaneId(panel_uuid)\n    panel_provider = _WPFPanelProvider(panel_type, default_visible)\n    HOST_APP.uiapp.RegisterDockablePane(\n        dockable_panel_id,\n        panel_type.panel_title,\n        panel_provider\n    )\n\n    return panel_provider.panel\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.open_dockable_panel","title":"<code>open_dockable_panel(panel_type_or_id)</code>","text":"<p>Open previously registered dockable panel.</p> <p>Parameters:</p> Name Type Description Default <code>panel_type_or_id</code> <code>(WPFPanel, str)</code> <p>panel type or id</p> required Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def open_dockable_panel(panel_type_or_id):\n    \"\"\"Open previously registered dockable panel.\n\n    Args:\n        panel_type_or_id (forms.WPFPanel, str): panel type or id\n    \"\"\"\n    toggle_dockable_panel(panel_type_or_id, True)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.close_dockable_panel","title":"<code>close_dockable_panel(panel_type_or_id)</code>","text":"<p>Close previously registered dockable panel.</p> <p>Parameters:</p> Name Type Description Default <code>panel_type_or_id</code> <code>(WPFPanel, str)</code> <p>panel type or id</p> required Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def close_dockable_panel(panel_type_or_id):\n    \"\"\"Close previously registered dockable panel.\n\n    Args:\n        panel_type_or_id (forms.WPFPanel, str): panel type or id\n    \"\"\"\n    toggle_dockable_panel(panel_type_or_id, False)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.toggle_dockable_panel","title":"<code>toggle_dockable_panel(panel_type_or_id, state)</code>","text":"<p>Toggle previously registered dockable panel.</p> <p>Parameters:</p> Name Type Description Default <code>panel_type_or_id</code> <code>WPFPanel | str</code> <p>panel type or id</p> required <code>state</code> <code>bool</code> <p>True to show the panel, False to hide it.</p> required Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def toggle_dockable_panel(panel_type_or_id, state):\n    \"\"\"Toggle previously registered dockable panel.\n\n    Args:\n        panel_type_or_id (forms.WPFPanel | str): panel type or id\n        state (bool): True to show the panel, False to hide it.\n    \"\"\"\n    dpanel_id = None\n    if isinstance(panel_type_or_id, str):\n        panel_id = coreutils.Guid.Parse(panel_type_or_id)\n        dpanel_id = UI.DockablePaneId(panel_id)\n    elif issubclass(panel_type_or_id, WPFPanel):\n        panel_id = coreutils.Guid.Parse(panel_type_or_id.panel_id)\n        dpanel_id = UI.DockablePaneId(panel_id)\n    else:\n        raise PyRevitException(\"Given type is not a forms.WPFPanel\")\n\n    if dpanel_id:\n        if UI.DockablePane.PaneIsRegistered(dpanel_id):\n            dockable_panel = HOST_APP.uiapp.GetDockablePane(dpanel_id)\n            if state:\n                dockable_panel.Show()\n            else:\n                dockable_panel.Hide()\n        else:\n            raise PyRevitException(\n                \"Panel with id \\\"%s\\\" is not registered\" % panel_type_or_id\n                )\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.select_revisions","title":"<code>select_revisions(title='Select Revision', button_name='Select', width=DEFAULT_INPUTWINDOW_WIDTH, multiple=True, filterfunc=None, doc=None)</code>","text":"<p>Standard form for selecting revisions.</p> <p>Parameters:</p> Name Type Description Default <code>title</code> <code>str</code> <p>list window title</p> <code>'Select Revision'</code> <code>button_name</code> <code>str</code> <p>list window button caption</p> <code>'Select'</code> <code>width</code> <code>int</code> <p>width of list window</p> <code>DEFAULT_INPUTWINDOW_WIDTH</code> <code>multiple</code> <code>bool</code> <p>allow multi-selection (uses check boxes). defaults to True</p> <code>True</code> <code>filterfunc</code> <code>function</code> <p>filter function to be applied to context items.</p> <code>None</code> <code>doc</code> <code>Document</code> <p>source document for revisions; defaults to active document</p> <code>None</code> <p>Returns:</p> Type Description <code>list[Revision]</code> <p>list of selected revisions</p> <p>Examples:</p> <pre><code>from pyrevit import forms\nforms.select_revisions()\n[&lt;Autodesk.Revit.DB.Revision object&gt;,\n &lt;Autodesk.Revit.DB.Revision object&gt;]\n</code></pre> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def select_revisions(title='Select Revision',\n                     button_name='Select',\n                     width=DEFAULT_INPUTWINDOW_WIDTH,\n                     multiple=True,\n                     filterfunc=None,\n                     doc=None):\n    \"\"\"Standard form for selecting revisions.\n\n    Args:\n        title (str, optional): list window title\n        button_name (str, optional): list window button caption\n        width (int, optional): width of list window\n        multiple (bool, optional):\n            allow multi-selection (uses check boxes). defaults to True\n        filterfunc (function):\n            filter function to be applied to context items.\n        doc (DB.Document, optional):\n            source document for revisions; defaults to active document\n\n    Returns:\n        (list[DB.Revision]): list of selected revisions\n\n    Examples:\n        ```python\n        from pyrevit import forms\n        forms.select_revisions()\n        [&lt;Autodesk.Revit.DB.Revision object&gt;,\n         &lt;Autodesk.Revit.DB.Revision object&gt;]\n        ```\n    \"\"\"\n    doc = doc or DOCS.doc\n    revisions = sorted(revit.query.get_revisions(doc=doc),\n                       key=lambda x: x.SequenceNumber)\n\n    if filterfunc:\n        revisions = filter(filterfunc, revisions)\n\n    # ask user for revisions\n    selected_revs = SelectFromList.show(\n        [RevisionOption(x) for x in revisions],\n        title=title,\n        button_name=button_name,\n        width=width,\n        multiselect=multiple,\n        checked_only=True\n        )\n\n    return selected_revs\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.select_sheets","title":"<code>select_sheets(title='Select Sheets', button_name='Select', width=DEFAULT_INPUTWINDOW_WIDTH, multiple=True, filterfunc=None, doc=None, include_placeholder=True, use_selection=False)</code>","text":"<p>Standard form for selecting sheets.</p> <p>Sheets are grouped into sheet sets and sheet set can be selected from a drop down box at the top of window.</p> <p>Parameters:</p> Name Type Description Default <code>title</code> <code>str</code> <p>list window title</p> <code>'Select Sheets'</code> <code>button_name</code> <code>str</code> <p>list window button caption</p> <code>'Select'</code> <code>width</code> <code>int</code> <p>width of list window</p> <code>DEFAULT_INPUTWINDOW_WIDTH</code> <code>multiple</code> <code>bool</code> <p>allow multi-selection (uses check boxes). defaults to True</p> <code>True</code> <code>filterfunc</code> <code>function</code> <p>filter function to be applied to context items.</p> <code>None</code> <code>doc</code> <code>Document</code> <p>source document for sheets; defaults to active document</p> <code>None</code> <code>include_placeholder</code> <code>bool</code> <p>include a placeholder. Defaults to True</p> <code>True</code> <code>use_selection</code> <code>bool</code> <p>ask if user wants to use currently selected sheets.</p> <code>False</code> <p>Returns:</p> Type Description <code>list[ViewSheet]</code> <p>list of selected sheets</p> <p>Examples:</p> <pre><code>from pyrevit import forms\nforms.select_sheets()\n[&lt;Autodesk.Revit.DB.ViewSheet object&gt;,\n &lt;Autodesk.Revit.DB.ViewSheet object&gt;]\n</code></pre> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def select_sheets(title='Select Sheets',\n                  button_name='Select',\n                  width=DEFAULT_INPUTWINDOW_WIDTH,\n                  multiple=True,\n                  filterfunc=None,\n                  doc=None,\n                  include_placeholder=True,\n                  use_selection=False):\n    \"\"\"Standard form for selecting sheets.\n\n    Sheets are grouped into sheet sets and sheet set can be selected from\n    a drop down box at the top of window.\n\n    Args:\n        title (str, optional): list window title\n        button_name (str, optional): list window button caption\n        width (int, optional): width of list window\n        multiple (bool, optional):\n            allow multi-selection (uses check boxes). defaults to True\n        filterfunc (function):\n            filter function to be applied to context items.\n        doc (DB.Document, optional):\n            source document for sheets; defaults to active document\n        include_placeholder (bool, optional): include a placeholder.\n            Defaults to True\n        use_selection (bool, optional):\n            ask if user wants to use currently selected sheets.\n\n    Returns:\n        (list[DB.ViewSheet]): list of selected sheets\n\n    Examples:\n        ```python\n        from pyrevit import forms\n        forms.select_sheets()\n        [&lt;Autodesk.Revit.DB.ViewSheet object&gt;,\n         &lt;Autodesk.Revit.DB.ViewSheet object&gt;]\n        ```\n    \"\"\"\n    doc = doc or DOCS.doc\n\n    # check for previously selected sheets\n    if use_selection:\n        current_selected_sheets = revit.get_selection() \\\n                                       .include(DB.ViewSheet) \\\n                                       .elements\n        if filterfunc:\n            current_selected_sheets = \\\n                filter(filterfunc, current_selected_sheets)\n\n        if not include_placeholder:\n            current_selected_sheets = \\\n                [x for x in current_selected_sheets if not x.IsPlaceholder]\n\n        if current_selected_sheets \\\n                and ask_to_use_selected(\"sheets\",\n                                        count=len(current_selected_sheets),\n                                        multiple=multiple):\n            return current_selected_sheets \\\n                if multiple else current_selected_sheets[0]\n\n    # otherwise get all sheets and prompt for selection\n    all_ops = {}\n    all_sheets = DB.FilteredElementCollector(doc) \\\n                   .OfClass(DB.ViewSheet) \\\n                   .WhereElementIsNotElementType() \\\n                   .ToElements()\n\n    if filterfunc:\n        all_sheets = filter(filterfunc, all_sheets)\n\n    if not include_placeholder:\n        all_sheets = [x for x in all_sheets if not x.IsPlaceholder]\n\n    all_sheets_ops = sorted([SheetOption(x) for x in all_sheets],\n                            key=lambda x: x.number)\n    all_ops['All Sheets'] = all_sheets_ops\n\n    sheetsets = revit.query.get_sheet_sets(doc)\n    for sheetset in sheetsets:\n        sheetset_sheets = \\\n            [x for x in sheetset.Views if isinstance(x, DB.ViewSheet)]\n        if filterfunc:\n            sheetset_sheets = filter(filterfunc, sheetset_sheets)\n        sheetset_ops = sorted([SheetOption(x) for x in sheetset_sheets],\n                              key=lambda x: x.number)\n        all_ops[sheetset.Name] = sheetset_ops\n\n    # ask user for multiple sheets\n    selected_sheets = SelectFromList.show(\n        all_ops,\n        title=title,\n        group_selector_title='Sheet Sets:',\n        button_name=button_name,\n        width=width,\n        multiselect=multiple,\n        checked_only=True,\n        default_group='All Sheets'\n        )\n\n    return selected_sheets\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.select_views","title":"<code>select_views(title='Select Views', button_name='Select', width=DEFAULT_INPUTWINDOW_WIDTH, multiple=True, filterfunc=None, doc=None, use_selection=False)</code>","text":"<p>Standard form for selecting views.</p> <p>Parameters:</p> Name Type Description Default <code>title</code> <code>str</code> <p>list window title</p> <code>'Select Views'</code> <code>button_name</code> <code>str</code> <p>list window button caption</p> <code>'Select'</code> <code>width</code> <code>int</code> <p>width of list window</p> <code>DEFAULT_INPUTWINDOW_WIDTH</code> <code>multiple</code> <code>bool</code> <p>allow multi-selection (uses check boxes). defaults to True</p> <code>True</code> <code>filterfunc</code> <code>function</code> <p>filter function to be applied to context items.</p> <code>None</code> <code>doc</code> <code>Document</code> <p>source document for views; defaults to active document</p> <code>None</code> <code>use_selection</code> <code>bool</code> <p>ask if user wants to use currently selected views.</p> <code>False</code> <p>Returns:</p> Type Description <code>list[View]</code> <p>list of selected views</p> <p>Examples:</p> <pre><code>from pyrevit import forms\nforms.select_views()\n[&lt;Autodesk.Revit.DB.View object&gt;,\n &lt;Autodesk.Revit.DB.View object&gt;]\n</code></pre> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def select_views(title='Select Views',\n                 button_name='Select',\n                 width=DEFAULT_INPUTWINDOW_WIDTH,\n                 multiple=True,\n                 filterfunc=None,\n                 doc=None,\n                 use_selection=False):\n    \"\"\"Standard form for selecting views.\n\n    Args:\n        title (str, optional): list window title\n        button_name (str, optional): list window button caption\n        width (int, optional): width of list window\n        multiple (bool, optional):\n            allow multi-selection (uses check boxes). defaults to True\n        filterfunc (function):\n            filter function to be applied to context items.\n        doc (DB.Document, optional):\n            source document for views; defaults to active document\n        use_selection (bool, optional):\n            ask if user wants to use currently selected views.\n\n    Returns:\n        (list[DB.View]): list of selected views\n\n    Examples:\n        ```python\n        from pyrevit import forms\n        forms.select_views()\n        [&lt;Autodesk.Revit.DB.View object&gt;,\n         &lt;Autodesk.Revit.DB.View object&gt;]\n        ```\n    \"\"\"\n    doc = doc or DOCS.doc\n\n    # check for previously selected sheets\n    if use_selection:\n        current_selected_views = revit.get_selection() \\\n                                      .include(DB.View) \\\n                                      .elements\n        if filterfunc:\n            current_selected_views = \\\n                filter(filterfunc, current_selected_views)\n\n        if current_selected_views \\\n                and ask_to_use_selected(\"views\",\n                                        count=len(current_selected_views),\n                                        multiple=multiple):\n            return current_selected_views \\\n                if multiple else current_selected_views[0]\n\n    # otherwise get all sheets and prompt for selection\n    all_graphviews = revit.query.get_all_views(doc=doc)\n\n    if filterfunc:\n        all_graphviews = filter(filterfunc, all_graphviews)\n\n    selected_views = SelectFromList.show(\n        sorted([ViewOption(x) for x in all_graphviews],\n               key=lambda x: x.name),\n        title=title,\n        button_name=button_name,\n        width=width,\n        multiselect=multiple,\n        checked_only=True\n        )\n\n    return selected_views\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.select_levels","title":"<code>select_levels(title='Select Levels', button_name='Select', width=DEFAULT_INPUTWINDOW_WIDTH, multiple=True, filterfunc=None, doc=None, use_selection=False)</code>","text":"<p>Standard form for selecting levels.</p> <p>Parameters:</p> Name Type Description Default <code>title</code> <code>str</code> <p>list window title</p> <code>'Select Levels'</code> <code>button_name</code> <code>str</code> <p>list window button caption</p> <code>'Select'</code> <code>width</code> <code>int</code> <p>width of list window</p> <code>DEFAULT_INPUTWINDOW_WIDTH</code> <code>multiple</code> <code>bool</code> <p>allow multi-selection (uses check boxes). defaults to True</p> <code>True</code> <code>filterfunc</code> <code>function</code> <p>filter function to be applied to context items.</p> <code>None</code> <code>doc</code> <code>Document</code> <p>source document for levels; defaults to active document</p> <code>None</code> <code>use_selection</code> <code>bool</code> <p>ask if user wants to use currently selected levels.</p> <code>False</code> <p>Returns:</p> Type Description <code>list[Level]</code> <p>list of selected levels</p> <p>Examples:</p> <pre><code>from pyrevit import forms\nforms.select_levels()\n[&lt;Autodesk.Revit.DB.Level object&gt;,\n &lt;Autodesk.Revit.DB.Level object&gt;]\n</code></pre> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def select_levels(title='Select Levels',\n                  button_name='Select',\n                  width=DEFAULT_INPUTWINDOW_WIDTH,\n                  multiple=True,\n                  filterfunc=None,\n                  doc=None,\n                  use_selection=False):\n    \"\"\"Standard form for selecting levels.\n\n    Args:\n        title (str, optional): list window title\n        button_name (str, optional): list window button caption\n        width (int, optional): width of list window\n        multiple (bool, optional):\n            allow multi-selection (uses check boxes). defaults to True\n        filterfunc (function):\n            filter function to be applied to context items.\n        doc (DB.Document, optional):\n            source document for levels; defaults to active document\n        use_selection (bool, optional):\n            ask if user wants to use currently selected levels.\n\n    Returns:\n        (list[DB.Level]): list of selected levels\n\n    Examples:\n        ```python\n        from pyrevit import forms\n        forms.select_levels()\n        [&lt;Autodesk.Revit.DB.Level object&gt;,\n         &lt;Autodesk.Revit.DB.Level object&gt;]\n        ```\n    \"\"\"\n    doc = doc or DOCS.doc\n\n    # check for previously selected sheets\n    if use_selection:\n        current_selected_levels = revit.get_selection() \\\n                                       .include(DB.Level) \\\n                                       .elements\n\n        if filterfunc:\n            current_selected_levels = \\\n                filter(filterfunc, current_selected_levels)\n\n        if current_selected_levels \\\n                and ask_to_use_selected(\"levels\",\n                                        count=len(current_selected_levels),\n                                        multiple=multiple):\n            return current_selected_levels \\\n                if multiple else current_selected_levels[0]\n\n    all_levels = \\\n        revit.query.get_elements_by_categories(\n            [DB.BuiltInCategory.OST_Levels],\n            doc=doc\n            )\n\n    if filterfunc:\n        all_levels = filter(filterfunc, all_levels)\n\n    selected_levels = SelectFromList.show(\n        sorted([LevelOption(x) for x in all_levels],\n               key=lambda x: x.Elevation),\n        title=title,\n        button_name=button_name,\n        width=width,\n        multiselect=multiple,\n        checked_only=True,\n        )\n    return selected_levels\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.select_viewtemplates","title":"<code>select_viewtemplates(title='Select View Templates', button_name='Select', width=DEFAULT_INPUTWINDOW_WIDTH, multiple=True, filterfunc=None, doc=None)</code>","text":"<p>Standard form for selecting view templates.</p> <p>Parameters:</p> Name Type Description Default <code>title</code> <code>str</code> <p>list window title</p> <code>'Select View Templates'</code> <code>button_name</code> <code>str</code> <p>list window button caption</p> <code>'Select'</code> <code>width</code> <code>int</code> <p>width of list window</p> <code>DEFAULT_INPUTWINDOW_WIDTH</code> <code>multiple</code> <code>bool</code> <p>allow multi-selection (uses check boxes). defaults to True</p> <code>True</code> <code>filterfunc</code> <code>function</code> <p>filter function to be applied to context items.</p> <code>None</code> <code>doc</code> <code>Document</code> <p>source document for views; defaults to active document</p> <code>None</code> <p>Returns:</p> Type Description <code>list[View]</code> <p>list of selected view templates</p> <p>Examples:</p> <pre><code>from pyrevit import forms\nforms.select_viewtemplates()\n[&lt;Autodesk.Revit.DB.View object&gt;,\n &lt;Autodesk.Revit.DB.View object&gt;]\n</code></pre> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def select_viewtemplates(title='Select View Templates',\n                         button_name='Select',\n                         width=DEFAULT_INPUTWINDOW_WIDTH,\n                         multiple=True,\n                         filterfunc=None,\n                         doc=None):\n    \"\"\"Standard form for selecting view templates.\n\n    Args:\n        title (str, optional): list window title\n        button_name (str, optional): list window button caption\n        width (int, optional): width of list window\n        multiple (bool, optional):\n            allow multi-selection (uses check boxes). defaults to True\n        filterfunc (function):\n            filter function to be applied to context items.\n        doc (DB.Document, optional):\n            source document for views; defaults to active document\n\n    Returns:\n        (list[DB.View]): list of selected view templates\n\n    Examples:\n        ```python\n        from pyrevit import forms\n        forms.select_viewtemplates()\n        [&lt;Autodesk.Revit.DB.View object&gt;,\n         &lt;Autodesk.Revit.DB.View object&gt;]\n        ```\n    \"\"\"\n    doc = doc or DOCS.doc\n    all_viewtemplates = revit.query.get_all_view_templates(doc=doc)\n\n    if filterfunc:\n        all_viewtemplates = filter(filterfunc, all_viewtemplates)\n\n    selected_viewtemplates = SelectFromList.show(\n        sorted([ViewOption(x) for x in all_viewtemplates],\n               key=lambda x: x.name),\n        title=title,\n        button_name=button_name,\n        width=width,\n        multiselect=multiple,\n        checked_only=True\n        )\n\n    return selected_viewtemplates\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.select_schedules","title":"<code>select_schedules(title='Select Schedules', button_name='Select', width=DEFAULT_INPUTWINDOW_WIDTH, multiple=True, filterfunc=None, doc=None)</code>","text":"<p>Standard form for selecting schedules.</p> <p>Parameters:</p> Name Type Description Default <code>title</code> <code>str</code> <p>list window title</p> <code>'Select Schedules'</code> <code>button_name</code> <code>str</code> <p>list window button caption</p> <code>'Select'</code> <code>width</code> <code>int</code> <p>width of list window</p> <code>DEFAULT_INPUTWINDOW_WIDTH</code> <code>multiple</code> <code>bool</code> <p>allow multi-selection (uses check boxes). defaults to True</p> <code>True</code> <code>filterfunc</code> <code>function</code> <p>filter function to be applied to context items.</p> <code>None</code> <code>doc</code> <code>Document</code> <p>source document for views; defaults to active document</p> <code>None</code> <p>Returns:</p> Type Description <code>list[ViewSchedule]</code> <p>list of selected schedules</p> <p>Examples:</p> <pre><code>from pyrevit import forms\nforms.select_schedules()\n[&lt;Autodesk.Revit.DB.ViewSchedule object&gt;,\n &lt;Autodesk.Revit.DB.ViewSchedule object&gt;]\n</code></pre> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def select_schedules(title='Select Schedules',\n                     button_name='Select',\n                     width=DEFAULT_INPUTWINDOW_WIDTH,\n                     multiple=True,\n                     filterfunc=None,\n                     doc=None):\n    \"\"\"Standard form for selecting schedules.\n\n    Args:\n        title (str, optional): list window title\n        button_name (str, optional): list window button caption\n        width (int, optional): width of list window\n        multiple (bool, optional):\n            allow multi-selection (uses check boxes). defaults to True\n        filterfunc (function):\n            filter function to be applied to context items.\n        doc (DB.Document, optional):\n            source document for views; defaults to active document\n\n    Returns:\n        (list[DB.ViewSchedule]): list of selected schedules\n\n    Examples:\n        ```python\n        from pyrevit import forms\n        forms.select_schedules()\n        [&lt;Autodesk.Revit.DB.ViewSchedule object&gt;,\n         &lt;Autodesk.Revit.DB.ViewSchedule object&gt;]\n        ```\n    \"\"\"\n    doc = doc or DOCS.doc\n    all_schedules = revit.query.get_all_schedules(doc=doc)\n\n    if filterfunc:\n        all_schedules = filter(filterfunc, all_schedules)\n\n    selected_schedules = \\\n        SelectFromList.show(\n            sorted([ViewOption(x) for x in all_schedules],\n                   key=lambda x: x.name),\n            title=title,\n            button_name=button_name,\n            width=width,\n            multiselect=multiple,\n            checked_only=True\n        )\n\n    return selected_schedules\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.select_open_docs","title":"<code>select_open_docs(title='Select Open Documents', button_name='OK', width=DEFAULT_INPUTWINDOW_WIDTH, multiple=True, check_more_than_one=True, filterfunc=None)</code>","text":"<p>Standard form for selecting open documents.</p> <p>Parameters:</p> Name Type Description Default <code>title</code> <code>str</code> <p>list window title</p> <code>'Select Open Documents'</code> <code>button_name</code> <code>str</code> <p>list window button caption</p> <code>'OK'</code> <code>width</code> <code>int</code> <p>width of list window</p> <code>DEFAULT_INPUTWINDOW_WIDTH</code> <code>multiple</code> <code>bool</code> <p>allow multi-selection (uses check boxes). defaults to True</p> <code>True</code> <code>check_more_than_one</code> <code>bool</code> <code>True</code> <code>filterfunc</code> <code>function</code> <p>filter function to be applied to context items.</p> <code>None</code> <p>Returns:</p> Type Description <code>list[Document]</code> <p>list of selected documents</p> <p>Examples:</p> <pre><code>from pyrevit import forms\nforms.select_open_docs()\n[&lt;Autodesk.Revit.DB.Document object&gt;,\n &lt;Autodesk.Revit.DB.Document object&gt;]\n</code></pre> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def select_open_docs(title='Select Open Documents',\n                     button_name='OK',\n                     width=DEFAULT_INPUTWINDOW_WIDTH,    #pylint: disable=W0613\n                     multiple=True,\n                     check_more_than_one=True,\n                     filterfunc=None):\n    \"\"\"Standard form for selecting open documents.\n\n    Args:\n        title (str, optional): list window title\n        button_name (str, optional): list window button caption\n        width (int, optional): width of list window\n        multiple (bool, optional):\n            allow multi-selection (uses check boxes). defaults to True\n        check_more_than_one (bool, optional): \n        filterfunc (function):\n            filter function to be applied to context items.\n\n    Returns:\n        (list[DB.Document]): list of selected documents\n\n    Examples:\n        ```python\n        from pyrevit import forms\n        forms.select_open_docs()\n        [&lt;Autodesk.Revit.DB.Document object&gt;,\n         &lt;Autodesk.Revit.DB.Document object&gt;]\n        ```\n    \"\"\"\n    # find open documents other than the active doc\n    open_docs = [d for d in revit.docs if not d.IsLinked]    #pylint: disable=E1101\n    if check_more_than_one:\n        open_docs.remove(revit.doc)    #pylint: disable=E1101\n\n    if not open_docs:\n        alert('Only one active document is found. '\n              'At least two documents must be open. '\n              'Operation cancelled.')\n        return\n\n    return SelectFromList.show(\n        open_docs,\n        name_attr='Title',\n        multiselect=multiple,\n        title=title,\n        button_name=button_name,\n        filterfunc=filterfunc\n        )\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.select_titleblocks","title":"<code>select_titleblocks(title='Select Titleblock', button_name='Select', no_tb_option='No Title Block', width=DEFAULT_INPUTWINDOW_WIDTH, multiple=False, filterfunc=None, doc=None)</code>","text":"<p>Standard form for selecting a titleblock.</p> <p>Parameters:</p> Name Type Description Default <code>title</code> <code>str</code> <p>list window title</p> <code>'Select Titleblock'</code> <code>button_name</code> <code>str</code> <p>list window button caption</p> <code>'Select'</code> <code>no_tb_option</code> <code>str</code> <p>name of option for no title block</p> <code>'No Title Block'</code> <code>width</code> <code>int</code> <p>width of list window</p> <code>DEFAULT_INPUTWINDOW_WIDTH</code> <code>multiple</code> <code>bool</code> <p>allow multi-selection (uses check boxes). defaults to False</p> <code>False</code> <code>filterfunc</code> <code>function</code> <p>filter function to be applied to context items.</p> <code>None</code> <code>doc</code> <code>Document</code> <p>source document for titleblocks; defaults to active document</p> <code>None</code> <p>Returns:</p> Type Description <code>ElementId</code> <p>selected titleblock id.</p> <p>Examples:</p> <pre><code>from pyrevit import forms\nforms.select_titleblocks()\n&lt;Autodesk.Revit.DB.ElementId object&gt;\n</code></pre> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def select_titleblocks(title='Select Titleblock',\n                       button_name='Select',\n                       no_tb_option='No Title Block',\n                       width=DEFAULT_INPUTWINDOW_WIDTH,\n                       multiple=False,\n                       filterfunc=None,\n                       doc=None):\n    \"\"\"Standard form for selecting a titleblock.\n\n    Args:\n        title (str, optional): list window title\n        button_name (str, optional): list window button caption\n        no_tb_option (str, optional): name of option for no title block\n        width (int, optional): width of list window\n        multiple (bool, optional):\n            allow multi-selection (uses check boxes). defaults to False\n        filterfunc (function):\n            filter function to be applied to context items.\n        doc (DB.Document, optional):\n            source document for titleblocks; defaults to active document\n\n    Returns:\n        (DB.ElementId): selected titleblock id.\n\n    Examples:\n        ```python\n        from pyrevit import forms\n        forms.select_titleblocks()\n        &lt;Autodesk.Revit.DB.ElementId object&gt;\n        ```\n    \"\"\"\n    doc = doc or DOCS.doc\n    titleblocks = DB.FilteredElementCollector(doc)\\\n                    .OfCategory(DB.BuiltInCategory.OST_TitleBlocks)\\\n                    .WhereElementIsElementType()\\\n                    .ToElements()\n\n    tblock_dict = {'{}: {}'.format(tb.FamilyName,\n                                   revit.query.get_name(tb)): tb.Id\n                   for tb in titleblocks}\n    tblock_dict[no_tb_option] = DB.ElementId.InvalidElementId\n    selected_titleblocks = SelectFromList.show(sorted(tblock_dict.keys()),\n                                               title=title,\n                                               button_name=button_name,\n                                               width=width,\n                                               multiselect=multiple,\n                                               filterfunc=filterfunc)\n    if selected_titleblocks:\n        if multiple:\n            return [tblock_dict[x] for x in selected_titleblocks]\n        else:\n            return tblock_dict[selected_titleblocks]\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.select_swatch","title":"<code>select_swatch(title='Select Color Swatch', button_name='Select')</code>","text":"<p>Standard form for selecting a color swatch.</p> <p>Parameters:</p> Name Type Description Default <code>title</code> <code>str</code> <p>swatch list window title</p> <code>'Select Color Swatch'</code> <code>button_name</code> <code>str</code> <p>swatch list window button caption</p> <code>'Select'</code> <p>Returns:</p> Type Description <code>RGB</code> <p>rgb color</p> <p>Examples:</p> <pre><code>from pyrevit import forms\nforms.select_swatch(title=\"Select Text Color\")\n&lt;RGB #CD8800&gt;\n</code></pre> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def select_swatch(title='Select Color Swatch', button_name='Select'):\n    \"\"\"Standard form for selecting a color swatch.\n\n    Args:\n        title (str, optional): swatch list window title\n        button_name (str, optional): swatch list window button caption\n\n    Returns:\n        (pyrevit.coreutils.colors.RGB): rgb color\n\n    Examples:\n        ```python\n        from pyrevit import forms\n        forms.select_swatch(title=\"Select Text Color\")\n        &lt;RGB #CD8800&gt;\n        ```\n    \"\"\"\n    itemplate = utils.load_ctrl_template(\n        os.path.join(XAML_FILES_DIR, \"SwatchContainerStyle.xaml\")\n        )\n    swatch = SelectFromList.show(\n        colors.COLORS.values(),\n        title=title,\n        button_name=button_name,\n        width=300,\n        multiselect=False,\n        item_template=itemplate\n        )\n\n    return swatch\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.select_image","title":"<code>select_image(images, title='Select Image', button_name='Select')</code>","text":"<p>Standard form for selecting an image.</p> <p>Parameters:</p> Name Type Description Default <code>images</code> <code>list[str] | list[BitmapImage]</code> <p>list of image file paths or bitmaps</p> required <code>title</code> <code>str</code> <p>swatch list window title</p> <code>'Select Image'</code> <code>button_name</code> <code>str</code> <p>swatch list window button caption</p> <code>'Select'</code> <p>Returns:</p> Type Description <code>str</code> <p>path of the selected image</p> <p>Examples:</p> <pre><code>from pyrevit import forms\nforms.select_image(['C:/path/to/image1.png',\n                    'C:/path/to/image2.png'],\n                    title=\"Select Variation\")\n'C:/path/to/image1.png'\n</code></pre> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def select_image(images, title='Select Image', button_name='Select'):\n    \"\"\"Standard form for selecting an image.\n\n    Args:\n        images (list[str] | list[framework.Imaging.BitmapImage]):\n            list of image file paths or bitmaps\n        title (str, optional): swatch list window title\n        button_name (str, optional): swatch list window button caption\n\n    Returns:\n        (str): path of the selected image\n\n    Examples:\n        ```python\n        from pyrevit import forms\n        forms.select_image(['C:/path/to/image1.png',\n                            'C:/path/to/image2.png'],\n                            title=\"Select Variation\")\n        'C:/path/to/image1.png'\n        ```\n    \"\"\"\n    ptemplate = utils.load_itemspanel_template(\n        os.path.join(XAML_FILES_DIR, \"ImageListPanelStyle.xaml\")\n        )\n\n    itemplate = utils.load_ctrl_template(\n        os.path.join(XAML_FILES_DIR, \"ImageListContainerStyle.xaml\")\n        )\n\n    bitmap_images = {}\n    for imageobj in images:\n        if isinstance(imageobj, str):\n            img = utils.bitmap_from_file(imageobj)\n            if img:\n                bitmap_images[img] = imageobj\n        elif isinstance(imageobj, framework.Imaging.BitmapImage):\n            bitmap_images[imageobj] = imageobj\n\n    selected_image = SelectFromList.show(\n        sorted(bitmap_images.keys(), key=lambda x: x.UriSource.AbsolutePath),\n        title=title,\n        button_name=button_name,\n        width=500,\n        multiselect=False,\n        item_template=itemplate,\n        items_panel_template=ptemplate\n        )\n\n    return bitmap_images.get(selected_image, None)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.select_parameters","title":"<code>select_parameters(src_element, title='Select Parameters', button_name='Select', multiple=True, filterfunc=None, include_instance=True, include_type=True, exclude_readonly=True)</code>","text":"<p>Standard form for selecting parameters from given element.</p> <p>Parameters:</p> Name Type Description Default <code>src_element</code> <code>Element</code> <p>source element</p> required <code>title</code> <code>str</code> <p>list window title</p> <code>'Select Parameters'</code> <code>button_name</code> <code>str</code> <p>list window button caption</p> <code>'Select'</code> <code>multiple</code> <code>bool</code> <p>allow multi-selection (uses check boxes). defaults to True</p> <code>True</code> <code>filterfunc</code> <code>function</code> <p>filter function to be applied to context items.</p> <code>None</code> <code>include_instance</code> <code>bool</code> <p>list instance parameters</p> <code>True</code> <code>include_type</code> <code>bool</code> <p>list type parameters</p> <code>True</code> <code>exclude_readonly</code> <code>bool</code> <p>only shows parameters that are editable</p> <code>True</code> <p>Returns:</p> Type Description <code>list[ParamDef]</code> <p>list of paramdef objects</p> <p>Examples:</p> <pre><code>forms.select_parameter(\n    src_element,\n    title='Select Parameters',\n    multiple=True,\n    include_instance=True,\n    include_type=True\n)\n[&lt;ParamDef &gt;, &lt;ParamDef &gt;]\n</code></pre> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def select_parameters(src_element,\n                      title='Select Parameters',\n                      button_name='Select',\n                      multiple=True,\n                      filterfunc=None,\n                      include_instance=True,\n                      include_type=True,\n                      exclude_readonly=True):\n    \"\"\"Standard form for selecting parameters from given element.\n\n    Args:\n        src_element (DB.Element): source element\n        title (str, optional): list window title\n        button_name (str, optional): list window button caption\n        multiple (bool, optional):\n            allow multi-selection (uses check boxes). defaults to True\n        filterfunc (function):\n            filter function to be applied to context items.\n        include_instance (bool, optional): list instance parameters\n        include_type (bool, optional): list type parameters\n        exclude_readonly (bool, optional): only shows parameters that are editable\n\n    Returns:\n        (list[ParamDef]): list of paramdef objects\n\n    Examples:\n        ```python\n        forms.select_parameter(\n            src_element,\n            title='Select Parameters',\n            multiple=True,\n            include_instance=True,\n            include_type=True\n        )\n        [&lt;ParamDef &gt;, &lt;ParamDef &gt;]\n        ```\n    \"\"\"\n    param_defs = []\n    non_storage_type = coreutils.get_enum_none(DB.StorageType)\n    if include_instance:\n        # collect instance parameters\n        param_defs.extend(\n            [ParamDef(name=x.Definition.Name,\n                      istype=False,\n                      definition=x.Definition,\n                      isreadonly=x.IsReadOnly)\n             for x in src_element.Parameters\n             if x.StorageType != non_storage_type]\n        )\n\n    if include_type:\n        # collect type parameters\n        src_type = revit.query.get_type(src_element) if src_element else None\n        if src_type is not None:\n            param_defs.extend(\n                [ParamDef(name=x.Definition.Name,\n                          istype=True,\n                          definition=x.Definition,\n                          isreadonly=x.IsReadOnly)\n                 for x in src_type.Parameters\n                 if x.StorageType != non_storage_type]\n            )\n\n    if exclude_readonly:\n        param_defs = filter(lambda x: not x.isreadonly, param_defs)\n\n    if filterfunc:\n        param_defs = filter(filterfunc, param_defs)\n\n    param_defs.sort(key=lambda x: x.name)\n\n    itemplate = utils.load_ctrl_template(\n        os.path.join(XAML_FILES_DIR, \"ParameterItemStyle.xaml\")\n        )\n    selected_params = SelectFromList.show(\n        param_defs,\n        title=title,\n        button_name=button_name,\n        width=450,\n        multiselect=multiple,\n        item_template=itemplate\n        )\n\n    return selected_params\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.select_family_parameters","title":"<code>select_family_parameters(family_doc, title='Select Parameters', button_name='Select', multiple=True, filterfunc=None, include_instance=True, include_type=True, include_builtin=True, include_labeled=True)</code>","text":"<p>Standard form for selecting parameters from given family document.</p> <p>Parameters:</p> Name Type Description Default <code>family_doc</code> <code>Document</code> <p>source family document</p> required <code>title</code> <code>str</code> <p>list window title</p> <code>'Select Parameters'</code> <code>button_name</code> <code>str</code> <p>list window button caption</p> <code>'Select'</code> <code>multiple</code> <code>bool</code> <p>allow multi-selection (uses check boxes). defaults to True</p> <code>True</code> <code>filterfunc</code> <code>function</code> <p>filter function to be applied to context items.</p> <code>None</code> <code>include_instance</code> <code>bool</code> <p>list instance parameters</p> <code>True</code> <code>include_type</code> <code>bool</code> <p>list type parameters</p> <code>True</code> <code>include_builtin</code> <code>bool</code> <p>list builtin parameters</p> <code>True</code> <code>include_labeled</code> <code>bool</code> <p>list parameters used as labels</p> <code>True</code> <p>Returns:</p> Type Description <code>list[FamilyParameter]</code> <p>list of family parameter objects</p> <p>Examples:</p> <pre><code>forms.select_family_parameters(\n    family_doc,\n    title='Select Parameters',\n    multiple=True,\n    include_instance=True,\n    include_type=True\n)\n[&lt;DB.FamilyParameter &gt;, &lt;DB.FamilyParameter &gt;]\n</code></pre> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def select_family_parameters(family_doc,\n                             title='Select Parameters',\n                             button_name='Select',\n                             multiple=True,\n                             filterfunc=None,\n                             include_instance=True,\n                             include_type=True,\n                             include_builtin=True,\n                             include_labeled=True):\n    \"\"\"Standard form for selecting parameters from given family document.\n\n    Args:\n        family_doc (DB.Document): source family document\n        title (str, optional): list window title\n        button_name (str, optional): list window button caption\n        multiple (bool, optional):\n            allow multi-selection (uses check boxes). defaults to True\n        filterfunc (function):\n            filter function to be applied to context items.\n        include_instance (bool, optional): list instance parameters\n        include_type (bool, optional): list type parameters\n        include_builtin (bool, optional): list builtin parameters\n        include_labeled (bool, optional): list parameters used as labels\n\n    Returns:\n        (list[DB.FamilyParameter]): list of family parameter objects\n\n    Examples:\n        ```python\n        forms.select_family_parameters(\n            family_doc,\n            title='Select Parameters',\n            multiple=True,\n            include_instance=True,\n            include_type=True\n        )\n        [&lt;DB.FamilyParameter &gt;, &lt;DB.FamilyParameter &gt;]\n        ```\n    \"\"\"\n    family_doc = family_doc or DOCS.doc\n    family_params = revit.query.get_family_parameters(family_doc)\n    # get all params used in labeles\n    label_param_ids = \\\n        [x.Id for x in revit.query.get_family_label_parameters(family_doc)]\n\n    if filterfunc:\n        family_params = filter(filterfunc, family_params)\n\n    param_defs = []\n    get_elementid_value = get_elementid_value_func()\n    for family_param in family_params:\n        if not include_instance and family_param.IsInstance:\n            continue\n        if not include_type and not family_param.IsInstance:\n            continue\n        if not include_builtin and get_elementid_value(family_param.Id) &lt; 0:\n            continue\n        if not include_labeled and family_param.Id in label_param_ids:\n            continue\n\n        param_defs.append(\n            FamilyParamOption(family_param,\n                              builtin=get_elementid_value(family_param.Id) &lt; 0,\n                              labeled=family_param.Id in label_param_ids)\n            )\n\n    param_defs.sort(key=lambda x: x.name)\n\n    itemplate = utils.load_ctrl_template(\n        os.path.join(XAML_FILES_DIR, \"FamilyParameterItemStyle.xaml\")\n        )\n    selected_params = SelectFromList.show(\n        {\n            'All Parameters': param_defs,\n            'Type Parameters': [x for x in param_defs if x.istype],\n            'Built-in Parameters': [x for x in param_defs if x.isbuiltin],\n            'Used as Label': [x for x in param_defs if x.islabeled],\n        },\n        title=title,\n        button_name=button_name,\n        group_selector_title='Parameter Filters:',\n        width=450,\n        multiselect=multiple,\n        item_template=itemplate\n        )\n\n    return selected_params\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.alert","title":"<code>alert(msg, title=None, sub_msg=None, expanded=None, footer='', ok=True, cancel=False, yes=False, no=False, retry=False, warn_icon=True, options=None, exitscript=False)</code>","text":"<p>Show a task dialog with given message.</p> <p>Parameters:</p> Name Type Description Default <code>msg</code> <code>str</code> <p>message to be displayed</p> required <code>title</code> <code>str</code> <p>task dialog title</p> <code>None</code> <code>sub_msg</code> <code>str</code> <p>sub message, use html to create clickable links</p> <code>None</code> <code>expanded</code> <code>str</code> <p>expanded area message</p> <code>None</code> <code>footer</code> <code>str</code> <p>footer text</p> <code>''</code> <code>ok</code> <code>bool</code> <p>show OK button, defaults to True</p> <code>True</code> <code>cancel</code> <code>bool</code> <p>show Cancel button, defaults to False</p> <code>False</code> <code>yes</code> <code>bool</code> <p>show Yes button, defaults to False</p> <code>False</code> <code>no</code> <code>bool</code> <p>show NO button, defaults to False</p> <code>False</code> <code>retry</code> <code>bool</code> <p>show Retry button, defaults to False</p> <code>False</code> <code>warn_icon</code> <code>bool</code> <p>show warning icon</p> <code>True</code> <code>options</code> <code>list[str]</code> <p>list of command link titles in order</p> <code>None</code> <code>exitscript</code> <code>bool</code> <p>exit if cancel or no, defaults to False</p> <code>False</code> <p>Returns:</p> Type Description <code>bool</code> <p>True if okay, yes, or retry, otherwise False</p> <p>Examples:</p> <pre><code>from pyrevit import forms\nforms.alert('Are you sure?',\n            sub_msg='&lt;a href=\\\"https://discourse.pyrevitlabs.io/ \\\"&gt;Click here if you are not sure and want to go to the pyRevit Forum&lt;/a&gt;',\n            ok=False, yes=True, no=True, exitscript=True)\n</code></pre> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def alert(msg, title=None, sub_msg=None, expanded=None, footer='',\n          ok=True, cancel=False, yes=False, no=False, retry=False,\n          warn_icon=True, options=None, exitscript=False):\n    r\"\"\"Show a task dialog with given message.\n\n    Args:\n        msg (str): message to be displayed\n        title (str, optional): task dialog title\n        sub_msg (str, optional): sub message, use html to create clickable links\n        expanded (str, optional): expanded area message\n        footer (str, optional): footer text\n        ok (bool, optional): show OK button, defaults to True\n        cancel (bool, optional): show Cancel button, defaults to False\n        yes (bool, optional): show Yes button, defaults to False\n        no (bool, optional): show NO button, defaults to False\n        retry (bool, optional): show Retry button, defaults to False\n        warn_icon (bool, optional): show warning icon\n        options (list[str], optional): list of command link titles in order\n        exitscript (bool, optional): exit if cancel or no, defaults to False\n\n    Returns:\n        (bool): True if okay, yes, or retry, otherwise False\n\n    Examples:\n        ```python\n        from pyrevit import forms\n        forms.alert('Are you sure?',\n                    sub_msg='&lt;a href=\\\"https://discourse.pyrevitlabs.io/ \\\"&gt;Click here if you are not sure and want to go to the pyRevit Forum&lt;/a&gt;',\n                    ok=False, yes=True, no=True, exitscript=True)\n        ```\n    \"\"\"\n    # BUILD DIALOG\n    cmd_name = EXEC_PARAMS.command_name\n    if not title:\n        title = cmd_name if cmd_name else 'pyRevit'\n    tdlg = UI.TaskDialog(title)\n\n    # process input types\n    just_ok = ok and not any([cancel, yes, no, retry])\n\n    options = options or []\n    # add command links if any\n    if options:\n        clinks = coreutils.get_enum_values(UI.TaskDialogCommandLinkId)\n        max_clinks = len(clinks)\n        for idx, cmd in enumerate(options):\n            if idx &lt; max_clinks:\n                tdlg.AddCommandLink(clinks[idx], cmd)\n    # otherwise add buttons\n    else:\n        buttons = coreutils.get_enum_none(UI.TaskDialogCommonButtons)\n        if yes:\n            buttons |= UI.TaskDialogCommonButtons.Yes\n        elif ok:\n            buttons |= UI.TaskDialogCommonButtons.Ok\n\n        if cancel:\n            buttons |= UI.TaskDialogCommonButtons.Cancel\n        if no:\n            buttons |= UI.TaskDialogCommonButtons.No\n        if retry:\n            buttons |= UI.TaskDialogCommonButtons.Retry\n        tdlg.CommonButtons = buttons\n\n    # set texts\n    tdlg.MainInstruction = msg\n    tdlg.MainContent = sub_msg\n    tdlg.ExpandedContent = expanded\n    if footer:\n        footer = footer.strip() + '\\n'\n    tdlg.FooterText = footer + 'pyRevit {}'.format(\n        versionmgr.get_pyrevit_version().get_formatted()\n        )\n    tdlg.TitleAutoPrefix = False\n\n    # set icon\n    tdlg.MainIcon = \\\n        UI.TaskDialogIcon.TaskDialogIconWarning \\\n        if warn_icon else UI.TaskDialogIcon.TaskDialogIconNone\n\n    # tdlg.VerificationText = 'verif'\n\n    # SHOW DIALOG\n    res = tdlg.Show()\n\n    # PROCESS REPONSES\n    # positive response\n    mlogger.debug('alert result: %s', res)\n    if res == UI.TaskDialogResult.Ok \\\n            or res == UI.TaskDialogResult.Yes \\\n            or res == UI.TaskDialogResult.Retry:\n        if just_ok and exitscript:\n            sys.exit()\n        return True\n    # negative response\n    elif res == coreutils.get_enum_none(UI.TaskDialogResult) \\\n            or res == UI.TaskDialogResult.Cancel \\\n            or res == UI.TaskDialogResult.No:\n        if exitscript:\n            sys.exit()\n        else:\n            return False\n\n    # command link response\n    elif 'CommandLink' in str(res):\n        tdresults = sorted(\n            [x for x in coreutils.get_enum_values(UI.TaskDialogResult)\n             if 'CommandLink' in str(x)]\n            )\n        residx = tdresults.index(res)\n        return options[residx]\n    elif exitscript:\n        sys.exit()\n    else:\n        return False\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.alert_ifnot","title":"<code>alert_ifnot(condition, msg, *args, **kwargs)</code>","text":"<p>Show a task dialog with given message if condition is NOT met.</p> <p>Parameters:</p> Name Type Description Default <code>condition</code> <code>bool</code> <p>condition to test</p> required <code>msg</code> <code>str</code> <p>message to be displayed</p> required <code>*args</code> <code>Any</code> <p>additional arguments</p> <code>()</code> <code>**kwargs</code> <code>Any</code> <p>additional keyword arguments</p> <code>{}</code> <p>Other Parameters:</p> Name Type Description <code>title</code> <code>str</code> <p>task dialog title</p> <code>ok</code> <code>bool</code> <p>show OK button, defaults to True</p> <code>cancel</code> <code>bool</code> <p>show Cancel button, defaults to False</p> <code>yes</code> <code>bool</code> <p>show Yes button, defaults to False</p> <code>no</code> <code>bool</code> <p>show NO button, defaults to False</p> <code>retry</code> <code>bool</code> <p>show Retry button, defaults to False</p> <code>exitscript</code> <code>bool</code> <p>exit if cancel or no, defaults to False</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if okay, yes, or retry, otherwise False</p> <p>Examples:</p> <pre><code>from pyrevit import forms\nforms.alert_ifnot(value &gt; 12,\n                  'Are you sure?',\n                   ok=False, yes=True, no=True, exitscript=True)\n</code></pre> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def alert_ifnot(condition, msg, *args, **kwargs):\n    \"\"\"Show a task dialog with given message if condition is NOT met.\n\n    Args:\n        condition (bool): condition to test\n        msg (str): message to be displayed\n        *args (Any): additional arguments\n        **kwargs (Any): additional keyword arguments\n\n    Keyword Args:\n        title (str, optional): task dialog title\n        ok (bool, optional): show OK button, defaults to True\n        cancel (bool, optional): show Cancel button, defaults to False\n        yes (bool, optional): show Yes button, defaults to False\n        no (bool, optional): show NO button, defaults to False\n        retry (bool, optional): show Retry button, defaults to False\n        exitscript (bool, optional): exit if cancel or no, defaults to False\n\n    Returns:\n        (bool): True if okay, yes, or retry, otherwise False\n\n    Examples:\n        ```python\n        from pyrevit import forms\n        forms.alert_ifnot(value &gt; 12,\n                          'Are you sure?',\n                           ok=False, yes=True, no=True, exitscript=True)\n        ```\n    \"\"\"\n    if not condition:\n        return alert(msg, *args, **kwargs)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.pick_folder","title":"<code>pick_folder(title=None, owner=None)</code>","text":"<p>Show standard windows pick folder dialog.</p> <p>Parameters:</p> Name Type Description Default <code>title</code> <code>str</code> <p>title for the window</p> <code>None</code> <code>owner</code> <code>object</code> <p>owner of the dialog</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>folder path</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def pick_folder(title=None, owner=None):\n    \"\"\"Show standard windows pick folder dialog.\n\n    Args:\n        title (str, optional): title for the window\n        owner (object, optional): owner of the dialog\n\n    Returns:\n        (str): folder path\n    \"\"\"\n    if CPDialogs:\n        fb_dlg = CPDialogs.CommonOpenFileDialog()\n        fb_dlg.IsFolderPicker = True\n        if title:\n            fb_dlg.Title = title\n\n        res = CPDialogs.CommonFileDialogResult.Cancel\n        if owner:\n            res = fb_dlg.ShowDialog(owner)\n        else:\n            res = fb_dlg.ShowDialog()\n\n        if res == CPDialogs.CommonFileDialogResult.Ok:\n            return fb_dlg.FileName\n    else:\n        fb_dlg = Forms.FolderBrowserDialog()\n        if title:\n            fb_dlg.Description = title\n        if fb_dlg.ShowDialog() == Forms.DialogResult.OK:\n            return fb_dlg.SelectedPath\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.result_item_result_clicked","title":"<code>result_item_result_clicked(sender, e, debug=False)</code>","text":"<p>Callback for a result item click event.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def result_item_result_clicked(sender, e, debug=False):\n    \"\"\"Callback for a result item click event.\"\"\"\n    if debug:\n        print(\"Result clicked\")  # using print_md here will break the script\n    pass\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.show_balloon","title":"<code>show_balloon(header, text, tooltip='', group='', is_favourite=False, is_new=False, timestamp=None, click_result=result_item_result_clicked)</code>","text":"<p>Show ballon in the info center section.</p> <p>Parameters:</p> Name Type Description Default <code>header</code> <code>str</code> <p>Category section (Bold)</p> required <code>text</code> <code>str</code> <p>Title section (Regular)</p> required <code>tooltip</code> <code>str</code> <p>Tooltip</p> <code>''</code> <code>group</code> <code>str</code> <p>Group</p> <code>''</code> <code>is_favourite</code> <code>bool</code> <p>Add a blue star before header</p> <code>False</code> <code>is_new</code> <code>bool</code> <p>Flag to new</p> <code>False</code> <code>timestamp</code> <code>str</code> <p>Set timestamp</p> <code>None</code> <code>click_result</code> <code>def</code> <p>Executed after a click event</p> <code>result_item_result_clicked</code> <p>Examples:</p> <pre><code>from pyrevit import forms\ndate = '2019-01-01 00:00:00'\ndate = datetime.datetime.strptime(date, '%Y-%m-%d %H:%M:%S')\nforms.show_balloon(\"my header\", \"Lorem ipsum\", tooltip='tooltip',   group='group', is_favourite=True, is_new=True, timestamp = date, click_result = forms.result_item_result_clicked)\n</code></pre> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def show_balloon(header, text, tooltip='', group='', is_favourite=False, is_new=False, timestamp=None, click_result=result_item_result_clicked):\n    r\"\"\"Show ballon in the info center section.\n\n    Args:\n        header (str): Category section (Bold)\n        text (str): Title section (Regular)\n        tooltip (str): Tooltip\n        group (str): Group\n        is_favourite (bool): Add a blue star before header\n        is_new (bool): Flag to new\n        timestamp (str): Set timestamp\n        click_result (def): Executed after a click event\n\n    Examples:\n        ```python\n        from pyrevit import forms\n        date = '2019-01-01 00:00:00'\n        date = datetime.datetime.strptime(date, '%Y-%m-%d %H:%M:%S')\n        forms.show_balloon(\"my header\", \"Lorem ipsum\", tooltip='tooltip',   group='group', is_favourite=True, is_new=True, timestamp = date, click_result = forms.result_item_result_clicked)\n        ```\n    \"\"\"\n    result_item = Autodesk.Internal.InfoCenter.ResultItem()\n    result_item.Category = header\n    result_item.Title = text\n    result_item.TooltipText = tooltip\n    result_item.Group = group\n    result_item.IsFavorite = is_favourite\n    result_item.IsNew = is_new\n    if timestamp:\n        result_item.Timestamp = timestamp\n    result_item.ResultClicked += click_result\n    balloon = Autodesk.Windows.ComponentManager.InfoCenterPaletteManager.ShowBalloon(\n        result_item)\n    return balloon\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.pick_file","title":"<code>pick_file(file_ext='*', files_filter='', init_dir='', restore_dir=True, multi_file=False, unc_paths=False, title=None)</code>","text":"<p>Pick file dialog to select a destination file.</p> <p>Parameters:</p> Name Type Description Default <code>file_ext</code> <code>str</code> <p>file extension</p> <code>'*'</code> <code>files_filter</code> <code>str</code> <p>file filter</p> <code>''</code> <code>init_dir</code> <code>str</code> <p>initial directory</p> <code>''</code> <code>restore_dir</code> <code>bool</code> <p>restore last directory</p> <code>True</code> <code>multi_file</code> <code>bool</code> <p>allow select multiple files</p> <code>False</code> <code>unc_paths</code> <code>bool</code> <p>return unc paths</p> <code>False</code> <code>title</code> <code>str</code> <p>text to show in the title bar</p> <code>None</code> <p>Returns:</p> Type Description <code>str | list[str]</code> <p>file path or list of file paths if multi_file=True</p> <p>Examples:</p> <pre><code>from pyrevit import forms\nforms.pick_file(file_ext='csv')\nr'C:\\output\\somefile.csv'\n</code></pre> <pre><code>forms.pick_file(file_ext='csv', multi_file=True)\n[r'C:\\output\\somefile1.csv', r'C:\\output\\somefile2.csv']\n</code></pre> <pre><code>forms.pick_file(files_filter='All Files (*.*)|*.*|'\n                                 'Excel Workbook (*.xlsx)|*.xlsx|'\n                                 'Excel 97-2003 Workbook|*.xls',\n                    multi_file=True)\n[r'C:\\output\\somefile1.xlsx', r'C:\\output\\somefile2.xls']\n</code></pre> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def pick_file(file_ext='*', files_filter='', init_dir='',\n              restore_dir=True, multi_file=False, unc_paths=False, title=None):\n    r\"\"\"Pick file dialog to select a destination file.\n\n    Args:\n        file_ext (str): file extension\n        files_filter (str): file filter\n        init_dir (str): initial directory\n        restore_dir (bool): restore last directory\n        multi_file (bool): allow select multiple files\n        unc_paths (bool): return unc paths\n        title (str): text to show in the title bar\n\n    Returns:\n        (str | list[str]): file path or list of file paths if multi_file=True\n\n    Examples:\n        ```python\n        from pyrevit import forms\n        forms.pick_file(file_ext='csv')\n        r'C:\\output\\somefile.csv'\n        ```\n\n        ```python\n        forms.pick_file(file_ext='csv', multi_file=True)\n        [r'C:\\output\\somefile1.csv', r'C:\\output\\somefile2.csv']\n        ```\n\n        ```python\n        forms.pick_file(files_filter='All Files (*.*)|*.*|'\n                                         'Excel Workbook (*.xlsx)|*.xlsx|'\n                                         'Excel 97-2003 Workbook|*.xls',\n                            multi_file=True)\n        [r'C:\\output\\somefile1.xlsx', r'C:\\output\\somefile2.xls']\n        ```\n    \"\"\"\n    of_dlg = Forms.OpenFileDialog()\n    if files_filter:\n        of_dlg.Filter = files_filter\n    else:\n        of_dlg.Filter = '|*.{}'.format(file_ext)\n    of_dlg.RestoreDirectory = restore_dir\n    of_dlg.Multiselect = multi_file\n    if init_dir:\n        of_dlg.InitialDirectory = init_dir\n    if title:\n        of_dlg.Title = title\n    if of_dlg.ShowDialog() == Forms.DialogResult.OK:\n        if multi_file:\n            if unc_paths:\n                return [coreutils.dletter_to_unc(x)\n                        for x in of_dlg.FileNames]\n            return of_dlg.FileNames\n        else:\n            if unc_paths:\n                return coreutils.dletter_to_unc(of_dlg.FileName)\n            return of_dlg.FileName\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.save_file","title":"<code>save_file(file_ext='', files_filter='', init_dir='', default_name='', restore_dir=True, unc_paths=False, title=None)</code>","text":"<p>Save file dialog to select a destination file for data.</p> <p>Parameters:</p> Name Type Description Default <code>file_ext</code> <code>str</code> <p>file extension</p> <code>''</code> <code>files_filter</code> <code>str</code> <p>file filter</p> <code>''</code> <code>init_dir</code> <code>str</code> <p>initial directory</p> <code>''</code> <code>default_name</code> <code>str</code> <p>default file name</p> <code>''</code> <code>restore_dir</code> <code>bool</code> <p>restore last directory</p> <code>True</code> <code>unc_paths</code> <code>bool</code> <p>return unc paths</p> <code>False</code> <code>title</code> <code>str</code> <p>text to show in the title bar</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>file path</p> <p>Examples:</p> <pre><code>from pyrevit import forms\nforms.save_file(file_ext='csv')\nr'C:\\output\\somefile.csv'\n</code></pre> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def save_file(file_ext='', files_filter='', init_dir='', default_name='',\n              restore_dir=True, unc_paths=False, title=None):\n    r\"\"\"Save file dialog to select a destination file for data.\n\n    Args:\n        file_ext (str): file extension\n        files_filter (str): file filter\n        init_dir (str): initial directory\n        default_name (str): default file name\n        restore_dir (bool): restore last directory\n        unc_paths (bool): return unc paths\n        title (str): text to show in the title bar\n\n    Returns:\n        (str): file path\n\n    Examples:\n        ```python\n        from pyrevit import forms\n        forms.save_file(file_ext='csv')\n        r'C:\\output\\somefile.csv'\n        ```\n    \"\"\"\n    sf_dlg = Forms.SaveFileDialog()\n    if files_filter:\n        sf_dlg.Filter = files_filter\n    else:\n        sf_dlg.Filter = '|*.{}'.format(file_ext)\n    sf_dlg.RestoreDirectory = restore_dir\n    if init_dir:\n        sf_dlg.InitialDirectory = init_dir\n    if title:\n        sf_dlg.Title = title\n\n    # setting default filename\n    sf_dlg.FileName = default_name\n\n    if sf_dlg.ShowDialog() == Forms.DialogResult.OK:\n        if unc_paths:\n            return coreutils.dletter_to_unc(sf_dlg.FileName)\n        return sf_dlg.FileName\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.pick_excel_file","title":"<code>pick_excel_file(save=False, title=None)</code>","text":"<p>File pick/save dialog for an excel file.</p> <p>Parameters:</p> Name Type Description Default <code>save</code> <code>bool</code> <p>show file save dialog, instead of file pick dialog</p> <code>False</code> <code>title</code> <code>str</code> <p>text to show in the title bar</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>file path</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def pick_excel_file(save=False, title=None):\n    \"\"\"File pick/save dialog for an excel file.\n\n    Args:\n        save (bool): show file save dialog, instead of file pick dialog\n        title (str): text to show in the title bar\n\n    Returns:\n        (str): file path\n    \"\"\"\n    if save:\n        return save_file(file_ext='xlsx')\n    return pick_file(files_filter='Excel Workbook (*.xlsx)|*.xlsx|'\n                                  'Excel 97-2003 Workbook|*.xls',\n                     title=title)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.save_excel_file","title":"<code>save_excel_file(title=None)</code>","text":"<p>File save dialog for an excel file.</p> <p>Parameters:</p> Name Type Description Default <code>title</code> <code>str</code> <p>text to show in the title bar</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>file path</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def save_excel_file(title=None):\n    \"\"\"File save dialog for an excel file.\n\n    Args:\n        title (str): text to show in the title bar\n\n    Returns:\n        (str): file path\n    \"\"\"\n    return pick_excel_file(save=True, title=title)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.check_workshared","title":"<code>check_workshared(doc=None, message='Model is not workshared.')</code>","text":"<p>Verify if model is workshared and notify user if not.</p> <p>Parameters:</p> Name Type Description Default <code>doc</code> <code>Document</code> <p>target document, current of not provided</p> <code>None</code> <code>message</code> <code>str</code> <p>prompt message if returning False</p> <code>'Model is not workshared.'</code> <p>Returns:</p> Type Description <code>bool</code> <p>True if doc is workshared</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def check_workshared(doc=None, message='Model is not workshared.'):\n    \"\"\"Verify if model is workshared and notify user if not.\n\n    Args:\n        doc (DB.Document): target document, current of not provided\n        message (str): prompt message if returning False\n\n    Returns:\n        (bool): True if doc is workshared\n    \"\"\"\n    doc = doc or DOCS.doc\n    if not doc.IsWorkshared:\n        alert(message, warn_icon=True)\n        return False\n    return True\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.check_selection","title":"<code>check_selection(exitscript=False, message='At least one element must be selected.')</code>","text":"<p>Verify if selection is not empty notify user if it is.</p> <p>Parameters:</p> Name Type Description Default <code>exitscript</code> <code>bool</code> <p>exit script if returning False</p> <code>False</code> <code>message</code> <code>str</code> <p>prompt message if returning False</p> <code>'At least one element must be selected.'</code> <p>Returns:</p> Type Description <code>bool</code> <p>True if selection has at least one item</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def check_selection(exitscript=False,\n                    message='At least one element must be selected.'):\n    \"\"\"Verify if selection is not empty notify user if it is.\n\n    Args:\n        exitscript (bool): exit script if returning False\n        message (str): prompt message if returning False\n\n    Returns:\n        (bool): True if selection has at least one item\n    \"\"\"\n    if revit.get_selection().is_empty:\n        alert(message, exitscript=exitscript)\n        return False\n    return True\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.check_familydoc","title":"<code>check_familydoc(doc=None, family_cat=None, exitscript=False)</code>","text":"<p>Verify document is a Family and notify user if not.</p> <p>Parameters:</p> Name Type Description Default <code>doc</code> <code>Document</code> <p>target document, current of not provided</p> <code>None</code> <code>family_cat</code> <code>str</code> <p>family category name</p> <code>None</code> <code>exitscript</code> <code>bool</code> <p>exit script if returning False</p> <code>False</code> <p>Returns:</p> Type Description <code>bool</code> <p>True if doc is a Family and of provided category</p> <p>Examples:</p> <pre><code>from pyrevit import forms\nforms.check_familydoc(doc=revit.doc, family_cat='Data Devices')\nTrue\n</code></pre> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def check_familydoc(doc=None, family_cat=None, exitscript=False):\n    \"\"\"Verify document is a Family and notify user if not.\n\n    Args:\n        doc (DB.Document): target document, current of not provided\n        family_cat (str): family category name\n        exitscript (bool): exit script if returning False\n\n    Returns:\n        (bool): True if doc is a Family and of provided category\n\n    Examples:\n        ```python\n        from pyrevit import forms\n        forms.check_familydoc(doc=revit.doc, family_cat='Data Devices')\n        True\n        ```\n    \"\"\"\n    doc = doc or DOCS.doc\n    family_cat = revit.query.get_category(family_cat)\n    if doc.IsFamilyDocument and family_cat:\n        if doc.OwnerFamily.FamilyCategory.Id == family_cat.Id:\n            return True\n    elif doc.IsFamilyDocument and not family_cat:\n        return True\n\n    family_type_msg = ' of type {}'\\\n                      .format(family_cat.Name) if family_cat else''\n    alert('Active document must be a Family document{}.'\n          .format(family_type_msg), exitscript=exitscript)\n    return False\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.check_modeldoc","title":"<code>check_modeldoc(doc=None, exitscript=False)</code>","text":"<p>Verify document is a not a Model and notify user if not.</p> <p>Parameters:</p> Name Type Description Default <code>doc</code> <code>Document</code> <p>target document, current of not provided</p> <code>None</code> <code>exitscript</code> <code>bool</code> <p>exit script if returning False</p> <code>False</code> <p>Returns:</p> Type Description <code>bool</code> <p>True if doc is a Model</p> <p>Examples:</p> <pre><code>from pyrevit import forms\nforms.check_modeldoc(doc=revit.doc)\nTrue\n</code></pre> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def check_modeldoc(doc=None, exitscript=False):\n    \"\"\"Verify document is a not a Model and notify user if not.\n\n    Args:\n        doc (DB.Document): target document, current of not provided\n        exitscript (bool): exit script if returning False\n\n    Returns:\n        (bool): True if doc is a Model\n\n    Examples:\n        ```python\n        from pyrevit import forms\n        forms.check_modeldoc(doc=revit.doc)\n        True\n        ```\n    \"\"\"\n    doc = doc or DOCS.doc\n    if not doc.IsFamilyDocument:\n        return True\n\n    alert('Active document must be a Revit model (not a Family).',\n          exitscript=exitscript)\n    return False\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.check_modelview","title":"<code>check_modelview(view, exitscript=False)</code>","text":"<p>Verify target view is a model view.</p> <p>Parameters:</p> Name Type Description Default <code>view</code> <code>View</code> <p>target view</p> required <code>exitscript</code> <code>bool</code> <p>exit script if returning False</p> <code>False</code> <p>Returns:</p> Type Description <code>bool</code> <p>True if view is model view</p> <p>Examples:</p> <pre><code>from pyrevit import forms\nforms.check_modelview(view=revit.active_view)\nTrue\n</code></pre> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def check_modelview(view, exitscript=False):\n    \"\"\"Verify target view is a model view.\n\n    Args:\n        view (DB.View): target view\n        exitscript (bool): exit script if returning False\n\n    Returns:\n        (bool): True if view is model view\n\n    Examples:\n        ```python\n        from pyrevit import forms\n        forms.check_modelview(view=revit.active_view)\n        True\n        ```\n    \"\"\"\n    if not isinstance(view, (DB.View3D, DB.ViewPlan, DB.ViewSection)):\n        alert(\"Active view must be a model view.\", exitscript=exitscript)\n        return False\n    return True\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.check_viewtype","title":"<code>check_viewtype(view, view_type, exitscript=False)</code>","text":"<p>Verify target view is of given type.</p> <p>Parameters:</p> Name Type Description Default <code>view</code> <code>View</code> <p>target view</p> required <code>view_type</code> <code>ViewType</code> <p>type of view</p> required <code>exitscript</code> <code>bool</code> <p>exit script if returning False</p> <code>False</code> <p>Returns:</p> Type Description <code>bool</code> <p>True if view is of given type</p> <p>Examples:</p> <pre><code>from pyrevit import forms\nforms.check_viewtype(revit.active_view, DB.ViewType.DrawingSheet)\nTrue\n</code></pre> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def check_viewtype(view, view_type, exitscript=False):\n    \"\"\"Verify target view is of given type.\n\n    Args:\n        view (DB.View): target view\n        view_type (DB.ViewType): type of view\n        exitscript (bool): exit script if returning False\n\n    Returns:\n        (bool): True if view is of given type\n\n    Examples:\n        ```python\n        from pyrevit import forms\n        forms.check_viewtype(revit.active_view, DB.ViewType.DrawingSheet)\n        True\n        ```\n    \"\"\"\n    if view.ViewType != view_type:\n        alert(\n            \"Active view must be a {}.\".format(\n                ' '.join(coreutils.split_words(str(view_type)))),\n            exitscript=exitscript\n            )\n        return False\n    return True\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.check_graphicalview","title":"<code>check_graphicalview(view, exitscript=False)</code>","text":"<p>Verify target view is a graphical view.</p> <p>Parameters:</p> Name Type Description Default <code>view</code> <code>View</code> <p>target view</p> required <code>exitscript</code> <code>bool</code> <p>exit script if returning False</p> <code>False</code> <p>Returns:</p> Type Description <code>bool</code> <p>True if view is a graphical view</p> <p>Examples:</p> <pre><code>from pyrevit import forms\nforms.check_graphicalview(revit.active_view)\nTrue\n</code></pre> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def check_graphicalview(view, exitscript=False):\n    \"\"\"Verify target view is a graphical view.\n\n    Args:\n        view (DB.View): target view\n        exitscript (bool): exit script if returning False\n\n    Returns:\n        (bool): True if view is a graphical view\n\n    Examples:\n        ```python\n        from pyrevit import forms\n        forms.check_graphicalview(revit.active_view)\n        True\n        ```\n    \"\"\"\n    if not view.Category:\n        alert(\n            \"Active view must be a grahical view.\",\n            exitscript=exitscript\n            )\n        return False\n    return True\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.toast","title":"<code>toast(message, title='pyRevit', appid='pyRevit', icon=None, click=None, actions=None)</code>","text":"<p>Show a Windows 10 notification.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>notification message</p> required <code>title</code> <code>str</code> <p>notification title</p> <code>'pyRevit'</code> <code>appid</code> <code>str</code> <p>app name (will show under message)</p> <code>'pyRevit'</code> <code>icon</code> <code>str</code> <p>file path to icon .ico file (defaults to pyRevit icon)</p> <code>None</code> <code>click</code> <code>str</code> <p>click action commands string</p> <code>None</code> <code>actions</code> <code>dict</code> <p>dictionary of button names and action strings</p> <code>None</code> <p>Examples:</p> <pre><code>script.toast(\"Hello World!\",\n             title=\"My Script\",\n             appid=\"MyAPP\",\n             click=\"https://pyrevitlabs.github.io/pyRevit/\",\n             actions={\n                 \"Open Google\":\"https://google.com\",\n                 \"Open Toast64\":\"https://github.com/go-toast/toast\"\n                 })\n</code></pre> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def toast(message, title='pyRevit', appid='pyRevit',\n          icon=None, click=None, actions=None):\n    \"\"\"Show a Windows 10 notification.\n\n    Args:\n        message (str): notification message\n        title (str): notification title\n        appid (str): app name (will show under message)\n        icon (str): file path to icon .ico file (defaults to pyRevit icon)\n        click (str): click action commands string\n        actions (dict): dictionary of button names and action strings\n\n    Examples:\n        ```python\n        script.toast(\"Hello World!\",\n                     title=\"My Script\",\n                     appid=\"MyAPP\",\n                     click=\"https://pyrevitlabs.github.io/pyRevit/\",\n                     actions={\n                         \"Open Google\":\"https://google.com\",\n                         \"Open Toast64\":\"https://github.com/go-toast/toast\"\n                         })\n        ```\n    \"\"\"\n    toaster.send_toast(\n        message,\n        title=title,\n        appid=appid,\n        icon=icon,\n        click=click,\n        actions=actions)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.ask_for_string","title":"<code>ask_for_string(default=None, prompt=None, title=None, **kwargs)</code>","text":"<p>Ask user to select a string value.</p> <p>This is a shortcut function that configures :obj:<code>GetValueWindow</code> for string data types. kwargs can be used to pass on other arguments.</p> <p>Parameters:</p> Name Type Description Default <code>default</code> <code>str</code> <p>default unique string. must not be in reserved_values</p> <code>None</code> <code>prompt</code> <code>str</code> <p>prompt message</p> <code>None</code> <code>title</code> <code>str</code> <p>title message</p> <code>None</code> <code>kwargs</code> <code>type</code> <p>other arguments to be passed to :obj:<code>GetValueWindow</code></p> <code>{}</code> <p>Returns:</p> Type Description <code>str</code> <p>selected string value</p> <p>Examples:</p> <pre><code>forms.ask_for_string(\n    default='some-tag',\n    prompt='Enter new tag name:',\n    title='Tag Manager')\n'new-tag'\n</code></pre> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def ask_for_string(default=None, prompt=None, title=None, **kwargs):\n    \"\"\"Ask user to select a string value.\n\n    This is a shortcut function that configures :obj:`GetValueWindow` for\n    string data types. kwargs can be used to pass on other arguments.\n\n    Args:\n        default (str): default unique string. must not be in reserved_values\n        prompt (str): prompt message\n        title (str): title message\n        kwargs (type): other arguments to be passed to :obj:`GetValueWindow`\n\n    Returns:\n        (str): selected string value\n\n    Examples:\n        ```python\n        forms.ask_for_string(\n            default='some-tag',\n            prompt='Enter new tag name:',\n            title='Tag Manager')\n        'new-tag'\n        ```\n    \"\"\"\n    return GetValueWindow.show(\n        None,\n        value_type='string',\n        default=default,\n        prompt=prompt,\n        title=title,\n        **kwargs\n        )\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.ask_for_unique_string","title":"<code>ask_for_unique_string(reserved_values, default=None, prompt=None, title=None, **kwargs)</code>","text":"<p>Ask user to select a unique string value.</p> <p>This is a shortcut function that configures :obj:<code>GetValueWindow</code> for unique string data types. kwargs can be used to pass on other arguments.</p> <p>Parameters:</p> Name Type Description Default <code>reserved_values</code> <code>list[str]</code> <p>list of reserved (forbidden) values</p> required <code>default</code> <code>str</code> <p>default unique string. must not be in reserved_values</p> <code>None</code> <code>prompt</code> <code>str</code> <p>prompt message</p> <code>None</code> <code>title</code> <code>str</code> <p>title message</p> <code>None</code> <code>kwargs</code> <code>type</code> <p>other arguments to be passed to :obj:<code>GetValueWindow</code></p> <code>{}</code> <p>Returns:</p> Type Description <code>str</code> <p>selected unique string</p> <p>Examples:</p> <pre><code>forms.ask_for_unique_string(\n    prompt='Enter a Unique Name',\n    title=self.Title,\n    reserved_values=['Ehsan', 'Gui', 'Guido'],\n    owner=self)\n'unique string'\n</code></pre> <p>In example above, owner argument is provided to be passed to underlying :obj:<code>GetValueWindow</code>.</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def ask_for_unique_string(reserved_values,\n                          default=None, prompt=None, title=None, **kwargs):\n    \"\"\"Ask user to select a unique string value.\n\n    This is a shortcut function that configures :obj:`GetValueWindow` for\n    unique string data types. kwargs can be used to pass on other arguments.\n\n    Args:\n        reserved_values (list[str]): list of reserved (forbidden) values\n        default (str): default unique string. must not be in reserved_values\n        prompt (str): prompt message\n        title (str): title message\n        kwargs (type): other arguments to be passed to :obj:`GetValueWindow`\n\n    Returns:\n        (str): selected unique string\n\n    Examples:\n        ```python\n        forms.ask_for_unique_string(\n            prompt='Enter a Unique Name',\n            title=self.Title,\n            reserved_values=['Ehsan', 'Gui', 'Guido'],\n            owner=self)\n        'unique string'\n        ```\n\n        In example above, owner argument is provided to be passed to underlying\n        :obj:`GetValueWindow`.\n\n    \"\"\"\n    return GetValueWindow.show(\n        None,\n        value_type='string',\n        default=default,\n        prompt=prompt,\n        title=title,\n        reserved_values=reserved_values,\n        **kwargs\n        )\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.ask_for_one_item","title":"<code>ask_for_one_item(items, default=None, prompt=None, title=None, **kwargs)</code>","text":"<p>Ask user to select an item from a list of items.</p> <p>This is a shortcut function that configures :obj:<code>GetValueWindow</code> for 'single-select' data types. kwargs can be used to pass on other arguments.</p> <p>Parameters:</p> Name Type Description Default <code>items</code> <code>list[str]</code> <p>list of items to choose from</p> required <code>default</code> <code>str</code> <p>default selected item</p> <code>None</code> <code>prompt</code> <code>str</code> <p>prompt message</p> <code>None</code> <code>title</code> <code>str</code> <p>title message</p> <code>None</code> <code>kwargs</code> <code>type</code> <p>other arguments to be passed to :obj:<code>GetValueWindow</code></p> <code>{}</code> <p>Returns:</p> Type Description <code>str</code> <p>selected item</p> <p>Examples:</p> <pre><code>forms.ask_for_one_item(\n    ['test item 1', 'test item 2', 'test item 3'],\n    default='test item 2',\n    prompt='test prompt',\n    title='test title'\n)\n'test item 1'\n</code></pre> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def ask_for_one_item(items, default=None, prompt=None, title=None, **kwargs):\n    \"\"\"Ask user to select an item from a list of items.\n\n    This is a shortcut function that configures :obj:`GetValueWindow` for\n    'single-select' data types. kwargs can be used to pass on other arguments.\n\n    Args:\n        items (list[str]): list of items to choose from\n        default (str): default selected item\n        prompt (str): prompt message\n        title (str): title message\n        kwargs (type): other arguments to be passed to :obj:`GetValueWindow`\n\n    Returns:\n        (str): selected item\n\n    Examples:\n        ```python\n        forms.ask_for_one_item(\n            ['test item 1', 'test item 2', 'test item 3'],\n            default='test item 2',\n            prompt='test prompt',\n            title='test title'\n        )\n        'test item 1'\n        ```\n    \"\"\"\n    return GetValueWindow.show(\n        items,\n        value_type='dropdown',\n        default=default,\n        prompt=prompt,\n        title=title,\n        **kwargs\n        )\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.ask_for_date","title":"<code>ask_for_date(default=None, prompt=None, title=None, **kwargs)</code>","text":"<p>Ask user to select a date value.</p> <p>This is a shortcut function that configures :obj:<code>GetValueWindow</code> for date data types. kwargs can be used to pass on other arguments.</p> <p>Parameters:</p> Name Type Description Default <code>default</code> <code>datetime</code> <p>default selected date value</p> <code>None</code> <code>prompt</code> <code>str</code> <p>prompt message</p> <code>None</code> <code>title</code> <code>str</code> <p>title message</p> <code>None</code> <code>kwargs</code> <code>type</code> <p>other arguments to be passed to :obj:<code>GetValueWindow</code></p> <code>{}</code> <p>Returns:</p> Type Description <code>datetime</code> <p>selected date</p> <p>Examples:</p> <pre><code>forms.ask_for_date(default=\"\", title=\"Enter deadline:\")\ndatetime.datetime(2019, 5, 17, 0, 0)\n</code></pre> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def ask_for_date(default=None, prompt=None, title=None, **kwargs):\n    \"\"\"Ask user to select a date value.\n\n    This is a shortcut function that configures :obj:`GetValueWindow` for\n    date data types. kwargs can be used to pass on other arguments.\n\n    Args:\n        default (datetime.datetime): default selected date value\n        prompt (str): prompt message\n        title (str): title message\n        kwargs (type): other arguments to be passed to :obj:`GetValueWindow`\n\n    Returns:\n        (datetime.datetime): selected date\n\n    Examples:\n        ```python\n        forms.ask_for_date(default=\"\", title=\"Enter deadline:\")\n        datetime.datetime(2019, 5, 17, 0, 0)\n        ```\n    \"\"\"\n    # FIXME: window does not set default value\n    return GetValueWindow.show(\n        None,\n        value_type='date',\n        default=default,\n        prompt=prompt,\n        title=title,\n        **kwargs\n        )\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.ask_for_number_slider","title":"<code>ask_for_number_slider(default=None, min=0, max=100, interval=1, prompt=None, title=None, **kwargs)</code>","text":"<p>Ask user to select a number value.</p> <p>This is a shortcut function that configures :obj:<code>GetValueWindow</code> for numbers. kwargs can be used to pass on other arguments.</p> <p>Parameters:</p> Name Type Description Default <code>default</code> <code>str</code> <p>default unique string. must not be in reserved_values</p> <code>None</code> <code>min</code> <code>int</code> <p>minimum value on slider</p> <code>0</code> <code>max</code> <code>int</code> <p>maximum value on slider</p> <code>100</code> <code>interval</code> <code>int</code> <p>number interval between values</p> <code>1</code> <code>prompt</code> <code>str</code> <p>prompt message</p> <code>None</code> <code>title</code> <code>str</code> <p>title message</p> <code>None</code> <code>kwargs</code> <code>type</code> <p>other arguments to be passed to :obj:<code>GetValueWindow</code></p> <code>{}</code> <p>Returns:</p> Type Description <code>str</code> <p>selected string value</p> <p>Examples:</p> <pre><code>forms.ask_for_number_slider(\n    default=50,\n    min = 0,\n    max = 100,\n    interval = 5,\n    prompt='Select a number:',\n    title='test title')\n'50'\n</code></pre> <p>In this example, the slider will allow values such as '40, 45, 50, 55, 60' etc</p> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def ask_for_number_slider(default=None, min=0, max=100, interval=1, prompt=None, title=None, **kwargs):\n    \"\"\"Ask user to select a number value.\n\n    This is a shortcut function that configures :obj:`GetValueWindow` for\n    numbers. kwargs can be used to pass on other arguments.\n\n    Args:\n        default (str): default unique string. must not be in reserved_values\n        min (int): minimum value on slider\n        max (int): maximum value on slider\n        interval (int): number interval between values\n        prompt (str): prompt message\n        title (str): title message\n        kwargs (type): other arguments to be passed to :obj:`GetValueWindow`\n\n    Returns:\n        (str): selected string value\n\n    Examples:\n        ```python\n        forms.ask_for_number_slider(\n            default=50,\n            min = 0,\n            max = 100,\n            interval = 5,\n            prompt='Select a number:',\n            title='test title')\n        '50'\n        ```\n\n    In this example, the slider will allow values such as '40, 45, 50, 55, 60' etc\n    \"\"\"\n    return GetValueWindow.show(\n        None,\n        value_type='slider',\n        default=default,\n        prompt=prompt,\n        title=title,\n        max=max,\n        min=min,\n        interval=interval,\n        **kwargs\n        )\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.ask_to_use_selected","title":"<code>ask_to_use_selected(type_name, count=None, multiple=True)</code>","text":"<p>Ask user if wants to use currently selected elements.</p> <p>Parameters:</p> Name Type Description Default <code>type_name</code> <code>str</code> <p>Element type of expected selected elements</p> required <code>count</code> <code>int</code> <p>Number of selected items</p> <code>None</code> <code>multiple</code> <code>bool</code> <p>Whether multiple selected items are allowed</p> <code>True</code> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def ask_to_use_selected(type_name, count=None, multiple=True):\n    \"\"\"Ask user if wants to use currently selected elements.\n\n    Args:\n        type_name (str): Element type of expected selected elements\n        count (int): Number of selected items\n        multiple (bool): Whether multiple selected items are allowed\n    \"\"\"\n    report = type_name.lower()\n    # multiple = True\n    message = \\\n        \"You currently have %s selected. Do you want to proceed with \"\\\n        \"currently selected item(s)?\"\n    # check is selecting multiple is allowd\n    if not multiple:\n        # multiple = False\n        message = \\\n            \"You currently have %s selected and only one is required. \"\\\n            \"Do you want to use the first selected item?\"\n\n    # check if count is provided\n    if count is not None:\n        report = '{} {}'.format(count, report)\n    return alert(message % report, yes=True, no=True)\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.ask_for_color","title":"<code>ask_for_color(default=None)</code>","text":"<p>Show system color picker and ask for color.</p> <p>Parameters:</p> Name Type Description Default <code>default</code> <code>str</code> <p>default color in HEX ARGB e.g. #ff808080</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>selected color in HEX ARGB e.g. #ff808080, or None if cancelled</p> <p>Examples:</p> <pre><code>forms.ask_for_color()\n'#ff808080'\n</code></pre> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def ask_for_color(default=None):\n    \"\"\"Show system color picker and ask for color.\n\n    Args:\n        default (str): default color in HEX ARGB e.g. #ff808080\n\n    Returns:\n        (str): selected color in HEX ARGB e.g. #ff808080, or None if cancelled\n\n    Examples:\n        ```python\n        forms.ask_for_color()\n        '#ff808080'\n        ```\n    \"\"\"\n    # colorDlg.Color\n    color_picker = Forms.ColorDialog()\n    if default:\n        default = default.replace('#', '')\n        color_picker.Color = System.Drawing.Color.FromArgb(\n            int(default[:2], 16),\n            int(default[2:4], 16),\n            int(default[4:6], 16),\n            int(default[6:8], 16)\n        )\n    color_picker.FullOpen = True\n    if color_picker.ShowDialog() == Forms.DialogResult.OK:\n        c = color_picker.Color\n        c_hex = ''.join('{:02X}'.format(int(x)) for x in [c.A, c.R, c.G, c.B])\n        return '#' + c_hex\n</code></pre>"},{"location":"reference/pyrevit/forms/#pyrevit.forms.inform_wip","title":"<code>inform_wip()</code>","text":"<p>Show work-in-progress prompt to user and exit script.</p> <p>Examples:</p> <pre><code>forms.inform_wip()\n</code></pre> Source code in <code>pyrevitlib/pyrevit/forms/__init__.py</code> <pre><code>def inform_wip():\n    \"\"\"Show work-in-progress prompt to user and exit script.\n\n    Examples:\n        ```python\n        forms.inform_wip()\n        ```\n    \"\"\"\n    alert(\"Work in progress.\", exitscript=True)\n</code></pre>"},{"location":"reference/pyrevit/forms/toaster/","title":"toaster","text":"<p>Base module for pushing toast messages on Win 10.</p> <p>This module is a wrapper for a cli utility that provides toast message functionality. See <code>https://github.com/go-toast/toast</code></p>"},{"location":"reference/pyrevit/forms/toaster/#pyrevit.forms.toaster-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/forms/toaster/#pyrevit.forms.toaster.mlogger","title":"<code>mlogger = get_logger(__name__)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/forms/toaster/#pyrevit.forms.toaster-functions","title":"Functions","text":""},{"location":"reference/pyrevit/forms/toaster/#pyrevit.forms.toaster.get_toaster","title":"<code>get_toaster()</code>","text":"<p>Return full file path of the toast binary utility.</p> Source code in <code>pyrevitlib/pyrevit/forms/toaster.py</code> <pre><code>def get_toaster():\n    \"\"\"Return full file path of the toast binary utility.\"\"\"\n    return op.join(op.dirname(__file__), 'pyrevit-toast.exe')\n</code></pre>"},{"location":"reference/pyrevit/forms/toaster/#pyrevit.forms.toaster.send_toast","title":"<code>send_toast(message, title=None, appid=None, icon=None, click=None, actions=None)</code>","text":"<p>Send toast notificaton.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>notification message</p> required <code>title</code> <code>str</code> <p>notification title</p> <code>None</code> <code>appid</code> <code>str</code> <p>application unique id (see <code>--app-id</code> cli option)</p> <code>None</code> <code>icon</code> <code>str</code> <p>notification icon (see <code>--icon</code> cli option)</p> <code>None</code> <code>click</code> <code>str</code> <p>click action (see <code>--activation-arg</code> cli option)</p> <code>None</code> <code>actions</code> <code>dict[str</code> <p>str]): list of actions (see <code>--action</code> and <code>--action-arg</code> cli options)</p> <code>None</code> Source code in <code>pyrevitlib/pyrevit/forms/toaster.py</code> <pre><code>def send_toast(message,\n               title=None, appid=None, icon=None, click=None, actions=None):\n    \"\"\"Send toast notificaton.\n\n    Args:\n        message (str): notification message\n        title (str): notification title\n        appid (str): application unique id (see `--app-id` cli option)\n        icon (str): notification icon (see `--icon` cli option)\n        click (str): click action (see `--activation-arg` cli option)\n        actions (dict[str:str]):\n            list of actions (see `--action` and `--action-arg` cli options)\n    \"\"\"\n    # set defaults\n    if not title:\n        title = 'pyRevit'\n    if not appid:\n        appid = title\n    if not icon:\n        icon = op.join(ROOT_BIN_DIR, 'pyRevit.ico')\n    if not actions:\n        actions = {}\n\n    # build the toast\n    toast_args = r'\"{}\"'.format(get_toaster())\n    toast_args += r' --app-id \"{}\"'.format(appid)\n    toast_args += r' --title \"{}\"'.format(title)\n    toast_args += r' --message \"{}\"'.format(message)\n    toast_args += r' --icon \"{}\"'.format(icon)\n    toast_args += r' --audio \"default\"'\n    # toast_args += r' --duration \"long\"'\n    if click:\n        toast_args += r' --activation-arg \"{}\"'.format(click)\n    for action, args in actions.items():\n        toast_args += r' --action \"{}\" --action-arg \"{}\"'.format(action, args)\n\n    # send the toast now\n    mlogger.debug('toasting: %s', toast_args)\n    subprocess.Popen(toast_args, shell=True)\n</code></pre>"},{"location":"reference/pyrevit/forms/utils/","title":"utils","text":"<p>Utility functions to support forms module.</p>"},{"location":"reference/pyrevit/forms/utils/#pyrevit.forms.utils-functions","title":"Functions","text":""},{"location":"reference/pyrevit/forms/utils/#pyrevit.forms.utils.bitmap_from_file","title":"<code>bitmap_from_file(bitmap_file)</code>","text":"<p>Create BitmapImage from a bitmap file.</p> <p>Parameters:</p> Name Type Description Default <code>bitmap_file</code> <code>str</code> <p>path to bitmap file</p> required <p>Returns:</p> Type Description <code>BitmapImage</code> <p>bitmap image object</p> Source code in <code>pyrevitlib/pyrevit/forms/utils.py</code> <pre><code>def bitmap_from_file(bitmap_file):\n    \"\"\"Create BitmapImage from a bitmap file.\n\n    Args:\n        bitmap_file (str): path to bitmap file\n\n    Returns:\n        (BitmapImage): bitmap image object\n    \"\"\"\n    bitmap = Imaging.BitmapImage()\n    bitmap.BeginInit()\n    bitmap.UriSource = framework.Uri(bitmap_file)\n    bitmap.CacheOption = Imaging.BitmapCacheOption.OnLoad\n    bitmap.CreateOptions = Imaging.BitmapCreateOptions.IgnoreImageCache\n    bitmap.EndInit()\n    bitmap.Freeze()\n    return bitmap\n</code></pre>"},{"location":"reference/pyrevit/forms/utils/#pyrevit.forms.utils.load_component","title":"<code>load_component(xaml_file, comp_type)</code>","text":"<p>Load WPF component from xaml file.</p> <p>Parameters:</p> Name Type Description Default <code>xaml_file</code> <code>str</code> <p>xaml file path</p> required <code>comp_type</code> <code>Controls</code> <p>WPF control type</p> required <p>Returns:</p> Type Description <code>Controls</code> <p>loaded WPF control</p> Source code in <code>pyrevitlib/pyrevit/forms/utils.py</code> <pre><code>def load_component(xaml_file, comp_type):\n    \"\"\"Load WPF component from xaml file.\n\n    Args:\n        xaml_file (str): xaml file path\n        comp_type (System.Windows.Controls): WPF control type\n\n    Returns:\n        (System.Windows.Controls): loaded WPF control\n    \"\"\"\n    return wpf.LoadComponent(comp_type, xaml_file)\n</code></pre>"},{"location":"reference/pyrevit/forms/utils/#pyrevit.forms.utils.load_ctrl_template","title":"<code>load_ctrl_template(xaml_file)</code>","text":"<p>Load System.Windows.Controls.ControlTemplate from xaml file.</p> <p>Parameters:</p> Name Type Description Default <code>xaml_file</code> <code>str</code> <p>xaml file path</p> required <p>Returns:</p> Type Description <code>ControlTemplate</code> <p>loaded control template</p> Source code in <code>pyrevitlib/pyrevit/forms/utils.py</code> <pre><code>def load_ctrl_template(xaml_file):\n    \"\"\"Load System.Windows.Controls.ControlTemplate from xaml file.\n\n    Args:\n        xaml_file (str): xaml file path\n\n    Returns:\n        (System.Windows.Controls.ControlTemplate): loaded control template\n    \"\"\"\n    return load_component(xaml_file, Controls.ControlTemplate())\n</code></pre>"},{"location":"reference/pyrevit/forms/utils/#pyrevit.forms.utils.load_itemspanel_template","title":"<code>load_itemspanel_template(xaml_file)</code>","text":"<p>Load System.Windows.Controls.ItemsPanelTemplate from xaml file.</p> <p>Parameters:</p> Name Type Description Default <code>xaml_file</code> <code>str</code> <p>xaml file path</p> required <p>Returns:</p> Type Description <code>ControlTemplate</code> <p>loaded items-panel template</p> Source code in <code>pyrevitlib/pyrevit/forms/utils.py</code> <pre><code>def load_itemspanel_template(xaml_file):\n    \"\"\"Load System.Windows.Controls.ItemsPanelTemplate from xaml file.\n\n    Args:\n        xaml_file (str): xaml file path\n\n    Returns:\n        (System.Windows.Controls.ControlTemplate): loaded items-panel template\n    \"\"\"\n    return load_component(xaml_file, Controls.ItemsPanelTemplate())\n</code></pre>"},{"location":"reference/pyrevit/interop/","title":"interop","text":"<p>Interoperability with other applications.</p>"},{"location":"reference/pyrevit/interop/adc/","title":"adc","text":"<p>Wrapping Autodesk Desktop Connector API.</p>"},{"location":"reference/pyrevit/interop/adc/#pyrevit.interop.adc-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/interop/adc/#pyrevit.interop.adc.mlogger","title":"<code>mlogger = logger.get_logger(__name__)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/interop/adc/#pyrevit.interop.adc.ADC_NAME","title":"<code>ADC_NAME = 'Autodesk Desktop Connector'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/interop/adc/#pyrevit.interop.adc.ADC_SHORTNAME","title":"<code>ADC_SHORTNAME = 'ADC'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/interop/adc/#pyrevit.interop.adc.ADC_DRIVE_SCHEMA","title":"<code>ADC_DRIVE_SCHEMA = '{drive_name}://'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/interop/adc/#pyrevit.interop.adc.ADC_DEFAULT_INSTALL_PATH","title":"<code>ADC_DEFAULT_INSTALL_PATH = 'C:\\\\Program Files\\\\Autodesk\\\\Desktop Connector'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/interop/adc/#pyrevit.interop.adc.ADC_API_DLL","title":"<code>ADC_API_DLL = 'Autodesk.DesktopConnector.API.dll'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/interop/adc/#pyrevit.interop.adc.ADC_API_DLL_PATH","title":"<code>ADC_API_DLL_PATH = op.join(ADC_DEFAULT_INSTALL_PATH, ADC_API_DLL)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/interop/adc/#pyrevit.interop.adc-classes","title":"Classes","text":""},{"location":"reference/pyrevit/interop/adc/#pyrevit.interop.adc-functions","title":"Functions","text":""},{"location":"reference/pyrevit/interop/adc/#pyrevit.interop.adc.is_available","title":"<code>is_available()</code>","text":"<p>Check if ADC service is available.</p> Source code in <code>pyrevitlib/pyrevit/interop/adc.py</code> <pre><code>def is_available():\n    \"\"\"Check if ADC service is available.\"\"\"\n    try:\n        _get_adc().Discover()\n        return True\n    except Exception:\n        return False\n</code></pre>"},{"location":"reference/pyrevit/interop/adc/#pyrevit.interop.adc.get_drive_paths","title":"<code>get_drive_paths()</code>","text":"<p>Get dict of local paths for ADC drives.</p> Source code in <code>pyrevitlib/pyrevit/interop/adc.py</code> <pre><code>def get_drive_paths():\n    \"\"\"Get dict of local paths for ADC drives.\"\"\"\n    adc = _get_adc()\n    return {x.Name: x.WorkspaceLocation for x in _get_drives_info(adc)}\n</code></pre>"},{"location":"reference/pyrevit/interop/adc/#pyrevit.interop.adc.get_local_path","title":"<code>get_local_path(path)</code>","text":"<p>Convert ADC BIM360 drive path to local path.</p> Source code in <code>pyrevitlib/pyrevit/interop/adc.py</code> <pre><code>def get_local_path(path):\n    \"\"\"Convert ADC BIM360 drive path to local path.\"\"\"\n    adc = _get_adc()\n    drv_info = _get_drive_from_path(adc, path)\n    if drv_info:\n        return _drive_path_to_local_path(drv_info, path)\n</code></pre>"},{"location":"reference/pyrevit/interop/adc/#pyrevit.interop.adc.lock_file","title":"<code>lock_file(path)</code>","text":"<p>Lock given file.</p> Source code in <code>pyrevitlib/pyrevit/interop/adc.py</code> <pre><code>def lock_file(path):\n    \"\"\"Lock given file.\"\"\"\n    adc = _get_adc()\n    item = _get_item(adc, path)\n    adc.LockFile(item.Id)\n</code></pre>"},{"location":"reference/pyrevit/interop/adc/#pyrevit.interop.adc.is_locked","title":"<code>is_locked(path)</code>","text":"<p>Check if file is locked.</p> Source code in <code>pyrevitlib/pyrevit/interop/adc.py</code> <pre><code>def is_locked(path):\n    \"\"\"Check if file is locked.\"\"\"\n    adc = _get_adc()\n    item = _get_item(adc, path)\n    lock_status = _get_item_lockstatus(adc, item)\n    return lock_status.State == API.LockState.LockedByOther, \\\n        lock_status.LockOwner\n</code></pre>"},{"location":"reference/pyrevit/interop/adc/#pyrevit.interop.adc.unlock_file","title":"<code>unlock_file(path)</code>","text":"<p>Unlock given file.</p> Source code in <code>pyrevitlib/pyrevit/interop/adc.py</code> <pre><code>def unlock_file(path):\n    \"\"\"Unlock given file.\"\"\"\n    adc = _get_adc()\n    item = _get_item(adc, path)\n    adc.UnlockFile(item.Id)\n</code></pre>"},{"location":"reference/pyrevit/interop/adc/#pyrevit.interop.adc.is_synced","title":"<code>is_synced(path)</code>","text":"<p>Check if file is synchronized.</p> Source code in <code>pyrevitlib/pyrevit/interop/adc.py</code> <pre><code>def is_synced(path):\n    \"\"\"Check if file is synchronized.\"\"\"\n    adc = _get_adc()\n    item = _get_item(adc, path)\n    drive = _get_item_drive(adc, item)\n    # ADC uses translated property names so\n    # check status property by its type \"LocalState\"\n    # see https://github.com/pyrevitlabs/pyRevit/issues/1152\n    # ADC version 15 changed property_id_value\n    # see https://github.com/pyrevitlabs/pyRevit/issues/1371\n    prop_val = _get_item_property_id_value(adc, drive, item, 'DesktopConnector.Core.LocalState')\n    if prop_val is None:\n        # version older than ADC 15\n        prop_val = _get_item_property_id_value(adc, drive, item, 'LocalState')\n    # possible values, 'Cached', 'Stale', 'Modified'\n    # .Value is not translated\n    return prop_val.Value == 'Cached'or prop_val.Value == 'Synced'\n</code></pre>"},{"location":"reference/pyrevit/interop/adc/#pyrevit.interop.adc.sync_file","title":"<code>sync_file(path, force=False)</code>","text":"<p>Force ADC to sync given file to latest version.</p> Source code in <code>pyrevitlib/pyrevit/interop/adc.py</code> <pre><code>def sync_file(path, force=False):\n    \"\"\"Force ADC to sync given file to latest version.\"\"\"\n    if not force and is_synced(path):\n        return\n    adc = _get_adc()\n    item = _get_item(adc, path)\n    # make sure path is local\n    local_path = _ensure_local_path(adc, path)\n    for proc_id in _get_all_processids():\n        adc.FileClosedWithinRunningProcess(proc_id, local_path)\n    adc.SyncFiles([item.Id])\n</code></pre>"},{"location":"reference/pyrevit/interop/bbx/","title":"bbx","text":"<p>Read and Write Bounding Box Files.</p>"},{"location":"reference/pyrevit/interop/bbx/#pyrevit.interop.bbx-functions","title":"Functions","text":""},{"location":"reference/pyrevit/interop/bbx/#pyrevit.interop.bbx.load","title":"<code>load(inputfile)</code>","text":"<p>Read list of bounding boxes from file.</p> <p>Parameters:</p> Name Type Description Default <code>inputfile</code> <code>str</code> <p>path to input file</p> required <p>Returns:</p> Type Description <code>list[tuple[tuple[float, float, float], tuple[float, float, float]]]</code> <p>bounding boxes</p> Source code in <code>pyrevitlib/pyrevit/interop/bbx.py</code> <pre><code>def load(inputfile):\n    \"\"\"Read list of bounding boxes from file.\n\n    Args:\n        inputfile (str): path to input file\n\n    Returns:\n        (list[tuple[tuple[float, float, float], tuple[float, float, float]]]):\n            bounding boxes\n    \"\"\"\n    bboxes = []\n    with open(inputfile, 'r') as bbxfile:\n        # bbox_count = int(bbxfile.readline())   #noqa\n        for line in bbxfile:\n            data = line.split(' ')\n            bboxes.append(\n                ((float(data[0]), float(data[1]), float(data[2])),\n                 (float(data[3]), float(data[4]), float(data[5])))\n                )\n    return bboxes\n</code></pre>"},{"location":"reference/pyrevit/interop/bbx/#pyrevit.interop.bbx.dump","title":"<code>dump(outputfile, bbox_list)</code>","text":"<p>Write list of bounding boxes to file.</p> <p>Parameters:</p> Name Type Description Default <code>outputfile</code> <code>str</code> <p>path to output file</p> required <code>bbox_list</code> <code>list[tuple[tuple[float, float, float], tuple[float, float, float]]]</code> <p>bounding boxes</p> required Source code in <code>pyrevitlib/pyrevit/interop/bbx.py</code> <pre><code>def dump(outputfile, bbox_list):\n    \"\"\"Write list of bounding boxes to file.\n\n    Args:\n        outputfile (str): path to output file\n        bbox_list (list[tuple[tuple[float, float, float], tuple[float, float, float]]]): \n            bounding boxes\n    \"\"\"\n    bbox_count = len(bbox_list)\n    with open(outputfile, 'w') as bbxfile:\n        bbxfile.write(str(bbox_count) + '\\n')\n        for bbox in bbox_list:\n            minx, miny, minz = bbox[0]\n            maxx, maxy, maxz = bbox[1]\n            bbxfile.write(\n                '{:.02f} {:.02f} {:.02f} {:.02f} {:.02f} {:.02f}\\n'\n                .format(minx, miny, minz, maxx, maxy, maxz)\n                )\n</code></pre>"},{"location":"reference/pyrevit/interop/dxf/","title":"dxf","text":"<p>IxMIlia.Dxf assembly import.</p>"},{"location":"reference/pyrevit/interop/dxf/#pyrevit.interop.dxf-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/interop/ifc/","title":"ifc","text":"<p>IFC.Net assembly import.</p>"},{"location":"reference/pyrevit/interop/ifc/#pyrevit.interop.ifc-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/interop/pts/","title":"pts","text":"<p>Read and Write PTS PointCloud Files.</p>"},{"location":"reference/pyrevit/interop/pts/#pyrevit.interop.pts-functions","title":"Functions","text":""},{"location":"reference/pyrevit/interop/pts/#pyrevit.interop.pts.load","title":"<code>load(inputfile)</code>","text":"<p>Read list of point tuple from PTS file.</p> Source code in <code>pyrevitlib/pyrevit/interop/pts.py</code> <pre><code>def load(inputfile):\n    \"\"\"Read list of point tuple from PTS file.\"\"\"\n    points = []\n    with open(inputfile, 'r') as ptsfile:\n        # point_count = int(ptsfile.readline())   #noqa\n        for line in ptsfile:\n            data = line.split(' ')\n            points.append(((float(data[0]), float(data[1]), float(data[2])),\n                           int(data[3]),\n                           (int(data[4]), int(data[5]), int(data[6])))\n                          )\n    return points\n</code></pre>"},{"location":"reference/pyrevit/interop/pts/#pyrevit.interop.pts.dump","title":"<code>dump(outputfile, points)</code>","text":"<p>Write list of point tuple to PTS file.</p> Source code in <code>pyrevitlib/pyrevit/interop/pts.py</code> <pre><code>def dump(outputfile, points):\n    \"\"\"Write list of point tuple to PTS file.\"\"\"\n    point_count = len(points)\n    with open(outputfile, 'w') as ptsfile:\n        ptsfile.write(str(point_count) + '\\n')\n        for coord, intensity, color in points:\n            x, y, z = coord\n            r, g, b = color\n            ptsfile.write('{:.10f} {:.10f} {:.10f} '\n                          '{} '\n                          '{:03} {:03} {:03}\\n'.format(x, y, z,\n                                                       intensity,\n                                                       r, g, b))\n</code></pre>"},{"location":"reference/pyrevit/interop/rhino/","title":"rhino","text":"<p>Rhinoceros interop.</p>"},{"location":"reference/pyrevit/interop/rhino/#pyrevit.interop.rhino-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/interop/stl/","title":"stl","text":"<p>Read and Write STL Binary and ASCII Files.</p>"},{"location":"reference/pyrevit/interop/xl/","title":"xl","text":"<p>Read and Write Excel Files.</p>"},{"location":"reference/pyrevit/interop/xl/#pyrevit.interop.xl-functions","title":"Functions","text":""},{"location":"reference/pyrevit/interop/xl/#pyrevit.interop.xl.load","title":"<code>load(xlfile, sheets=[], columns=[], datatype=None, headers=True)</code>","text":"<p>Read data from Excel file.</p> <p>Parameters:</p> Name Type Description Default <code>xlfile</code> <code>str</code> <p>full path of the excel file to read</p> required <code>sheets</code> <code>list</code> <p>worksheets to read. Defaults to all the sheets.</p> <code>[]</code> <code>columns</code> <code>list</code> <p>Names to give to the columns. It builds a dictionary for each row with the column name and value. If none given (default), it returns a simple list of values.</p> <code>[]</code> <code>datatype</code> <code>type</code> <p>Type of the data. Defaults to None.</p> <code>None</code> <code>headers</code> <code>bool</code> <p>Whether to use the first row as headers. Defaults to True.</p> <code>True</code> <p>Returns:</p> Type Description <code>dict[str, dict[str, Any]]</code> <p>Excel data grouped by worksheet. Each worksheet is a dictionary with <code>headers</code> and <code>rows</code>.</p> Source code in <code>pyrevitlib/pyrevit/interop/xl.py</code> <pre><code>def load(xlfile, sheets=[], columns=[], datatype=None, headers=True):\n    \"\"\"Read data from Excel file.\n\n    Args:\n        xlfile (str): full path of the excel file to read\n        sheets (list, optional): worksheets to read. Defaults to all the sheets.\n        columns (list, optional): Names to give to the columns.\n            It builds a dictionary for each row with the column name and value.\n            If none given (default), it returns a simple list of values.\n        datatype (type, optional): Type of the data. Defaults to None.\n        headers (bool, optional): Whether to use the first row as headers.\n            Defaults to True.\n\n    Returns:\n        (dict[str, dict[str, Any]]): Excel data grouped by worksheet.\n            Each worksheet is a dictionary with `headers` and `rows`.\n    \"\"\"\n    xldata = {}\n    xlwb = xlrd.open_workbook(xlfile)\n    for xlsheet in xlwb.sheets():\n        if sheets:\n            if xlsheet.name in sheets:\n                xldata[xlsheet.name] = _read_xlsheet(xlsheet,\n                                                     columns=columns,\n                                                     datatype=datatype,\n                                                     headers=headers)\n        else:\n            xldata[xlsheet.name] = _read_xlsheet(xlsheet,\n                                                 columns=columns,\n                                                 datatype=datatype,\n                                                 headers=headers)\n    return xldata\n</code></pre>"},{"location":"reference/pyrevit/interop/xl/#pyrevit.interop.xl.dump","title":"<code>dump(xlfile, datadict)</code>","text":"<p>Write data to Excel file.</p> <p>Creates a worksheet for each item of the input dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>xlfile</code> <code>str</code> <p>full path of the target excel file</p> required <code>datadict</code> <code>dict[str, list]</code> <p>dictionary of worksheets names and data</p> required Source code in <code>pyrevitlib/pyrevit/interop/xl.py</code> <pre><code>def dump(xlfile, datadict):\n    \"\"\"Write data to Excel file.\n\n    Creates a worksheet for each item of the input dictionary.\n\n    Args:\n        xlfile (str): full path of the target excel file\n        datadict (dict[str, list]): dictionary of worksheets names and data\n    \"\"\"\n    xlwb = xlsxwriter.Workbook(xlfile)\n    # bold = xlwb.add_format({'bold': True})\n    for xlsheetname, xlsheetdata in datadict.items():\n        xlsheet = xlwb.add_worksheet(xlsheetname)\n        for idx, data in enumerate(xlsheetdata):\n            xlsheet.write_row(idx, 0, data)\n    xlwb.close()\n</code></pre>"},{"location":"reference/pyrevit/loader/","title":"loader","text":"<p>Loader base module.</p>"},{"location":"reference/pyrevit/loader/#pyrevit.loader-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/loader/#pyrevit.loader.LOADER_ADDON_NAMESPACE","title":"<code>LOADER_ADDON_NAMESPACE = 'PyRevitLoader'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/loader/#pyrevit.loader.HASH_CUTOFF_LENGTH","title":"<code>HASH_CUTOFF_LENGTH = 16</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/loader/asmmaker/","title":"asmmaker","text":"<p>Assembly maker module.</p>"},{"location":"reference/pyrevit/loader/asmmaker/#pyrevit.loader.asmmaker-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/loader/asmmaker/#pyrevit.loader.asmmaker.ExtensionAssemblyInfo","title":"<code>ExtensionAssemblyInfo = namedtuple('ExtensionAssemblyInfo', ['name', 'location', 'reloading'])</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/loader/asmmaker/#pyrevit.loader.asmmaker.mlogger","title":"<code>mlogger = logger.get_logger(__name__)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/loader/asmmaker/#pyrevit.loader.asmmaker-functions","title":"Functions","text":""},{"location":"reference/pyrevit/loader/asmmaker/#pyrevit.loader.asmmaker.create_assembly","title":"<code>create_assembly(extension)</code>","text":"<p>Create an extension assembly.</p> <p>Parameters:</p> Name Type Description Default <code>extension</code> <code>Extension</code> <p>pyRevit extension.</p> required <p>Returns:</p> Type Description <code>ExtensionAssemblyInfo</code> <p>assembly info</p> Source code in <code>pyrevitlib/pyrevit/loader/asmmaker.py</code> <pre><code>def create_assembly(extension):\n    \"\"\"Create an extension assembly.\n\n    Args:\n        extension (pyrevit.extensions.components.Extension): pyRevit extension.\n\n    Returns:\n        (ExtensionAssemblyInfo): assembly info\n    \"\"\"\n    mlogger.debug('Creating assembly for extension: %s', extension.name)\n    # create assembly file and return assembly path to be used in UI creation\n    # try:\n    ext_asm_info = _produce_asm_file(extension)\n    mlogger.debug('Assembly created: %s', ext_asm_info)\n    return ext_asm_info\n</code></pre>"},{"location":"reference/pyrevit/loader/asmmaker/#pyrevit.loader.asmmaker.cleanup_assembly_files","title":"<code>cleanup_assembly_files()</code>","text":"Source code in <code>pyrevitlib/pyrevit/loader/asmmaker.py</code> <pre><code>def cleanup_assembly_files():\n    if coreutils.get_revit_instance_count() == 1:\n        for asm_file_path in appdata.list_data_files(file_ext='dll'):\n            if not assmutils.find_loaded_asm(asm_file_path, by_location=True):\n                appdata.garbage_data_file(asm_file_path)\n                asm_log_file = asm_file_path.replace('.dll', '.log')\n                if op.exists(asm_log_file):\n                    appdata.garbage_data_file(asm_log_file)\n</code></pre>"},{"location":"reference/pyrevit/loader/hooks/","title":"hooks","text":"<p>Hooks management.</p>"},{"location":"reference/pyrevit/loader/hooks/#pyrevit.loader.hooks-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/loader/hooks/#pyrevit.loader.hooks.SUPPORTED_LANGUAGES","title":"<code>SUPPORTED_LANGUAGES = [exts.PYTHON_SCRIPT_FILE_FORMAT, exts.CSHARP_SCRIPT_FILE_FORMAT, exts.VB_SCRIPT_FILE_FORMAT]</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/loader/hooks/#pyrevit.loader.hooks.mlogger","title":"<code>mlogger = get_logger(__name__)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/loader/hooks/#pyrevit.loader.hooks.ExtensionEventHook","title":"<code>ExtensionEventHook = namedtuple('ExtensionEventHook', ['id', 'name', 'target', 'script', 'syspaths', 'extension_name'])</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/loader/hooks/#pyrevit.loader.hooks-functions","title":"Functions","text":""},{"location":"reference/pyrevit/loader/hooks/#pyrevit.loader.hooks.get_hooks_handler","title":"<code>get_hooks_handler()</code>","text":"<p>Get the hook handler environment variable.</p> <p>Returns:</p> Type Description <code>EventHooks</code> <p>hook handler</p> Source code in <code>pyrevitlib/pyrevit/loader/hooks.py</code> <pre><code>def get_hooks_handler():\n    \"\"\"Get the hook handler environment variable.\n\n    Returns:\n        (EventHooks): hook handler\n    \"\"\"\n    return envvars.get_pyrevit_env_var(envvars.HOOKSHANDLER_ENVVAR)\n</code></pre>"},{"location":"reference/pyrevit/loader/hooks/#pyrevit.loader.hooks.set_hooks_handler","title":"<code>set_hooks_handler(handler)</code>","text":"<p>Set the hook handler environment variable.</p> <p>Parameters:</p> Name Type Description Default <code>handler</code> <code>EventHooks</code> <p>hook handler</p> required Source code in <code>pyrevitlib/pyrevit/loader/hooks.py</code> <pre><code>def set_hooks_handler(handler):\n    \"\"\"Set the hook handler environment variable.\n\n    Args:\n        handler (EventHooks): hook handler\n    \"\"\"\n    envvars.set_pyrevit_env_var(envvars.HOOKSHANDLER_ENVVAR, handler)\n</code></pre>"},{"location":"reference/pyrevit/loader/hooks/#pyrevit.loader.hooks.is_valid_hook_script","title":"<code>is_valid_hook_script(hook_script)</code>","text":"<p>Check if the given hook script is valid.</p> <p>Parameters:</p> Name Type Description Default <code>hook_script</code> <code>str</code> <p>hook script path</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the script is valid, False otherwise</p> Source code in <code>pyrevitlib/pyrevit/loader/hooks.py</code> <pre><code>def is_valid_hook_script(hook_script):\n    \"\"\"Check if the given hook script is valid.\n\n    Args:\n        hook_script (str): hook script path\n\n    Returns:\n        (bool): True if the script is valid, False otherwise\n    \"\"\"\n    return op.splitext(op.basename(hook_script))[1] in SUPPORTED_LANGUAGES\n</code></pre>"},{"location":"reference/pyrevit/loader/hooks/#pyrevit.loader.hooks.get_extension_hooks","title":"<code>get_extension_hooks(extension)</code>","text":"<p>Get the hooks of the given extension.</p> <p>Parameters:</p> Name Type Description Default <code>extension</code> <code>Extension</code> <p>pyRevit extension</p> required <p>Returns:</p> Type Description <code>list[ExtensionEventHook]</code> <p>list of hooks</p> Source code in <code>pyrevitlib/pyrevit/loader/hooks.py</code> <pre><code>def get_extension_hooks(extension):\n    \"\"\"Get the hooks of the given extension.\n\n    Args:\n        extension (pyrevit.extensions.components.Extension): pyRevit extension\n\n    Returns:\n        (list[ExtensionEventHook]): list of hooks\n    \"\"\"\n    event_hooks = []\n    for hook_script in extension.get_hooks():\n        if is_valid_hook_script(hook_script):\n            name, target = _get_hook_parts(extension, hook_script)\n            if name:\n                event_hooks.append(\n                    ExtensionEventHook(\n                        id=_create_hook_id(extension, hook_script),\n                        name=name,\n                        target=target,\n                        script=hook_script,\n                        syspaths=extension.module_paths,\n                        extension_name=extension.name,\n                    )\n                )\n    return event_hooks\n</code></pre>"},{"location":"reference/pyrevit/loader/hooks/#pyrevit.loader.hooks.get_event_hooks","title":"<code>get_event_hooks()</code>","text":"<p>Get all the event hooks.</p> Source code in <code>pyrevitlib/pyrevit/loader/hooks.py</code> <pre><code>def get_event_hooks():\n    \"\"\"Get all the event hooks.\"\"\"\n    hooks_handler = get_hooks_handler()\n    return hooks_handler.GetAllEventHooks()\n</code></pre>"},{"location":"reference/pyrevit/loader/hooks/#pyrevit.loader.hooks.register_hooks","title":"<code>register_hooks(extension)</code>","text":"<p>Register the hooks for the given extension.</p> <p>Parameters:</p> Name Type Description Default <code>extension</code> <code>Extension</code> <p>pyRevit extension</p> required Source code in <code>pyrevitlib/pyrevit/loader/hooks.py</code> <pre><code>def register_hooks(extension):\n    \"\"\"Register the hooks for the given extension.\n\n    Args:\n        extension (pyrevit.extensions.components.Extension): pyRevit extension\n    \"\"\"\n    hooks_handler = get_hooks_handler()\n    for ext_hook in get_extension_hooks(extension):\n        try:\n            hooks_handler.RegisterHook(\n                uniqueId=ext_hook.id,\n                eventName=ext_hook.name,\n                eventTarget=ext_hook.target,\n                scriptPath=ext_hook.script,\n                searchPaths=framework.Array[str](ext_hook.syspaths),\n                extensionName=ext_hook.extension_name,\n            )\n        except Exception as hookEx:\n            mlogger.error(\"Failed registering hook script %s | %s\",\n                          ext_hook.script, hookEx)\n</code></pre>"},{"location":"reference/pyrevit/loader/hooks/#pyrevit.loader.hooks.unregister_hooks","title":"<code>unregister_hooks(extension)</code>","text":"<p>Unregister all hooks for the given extension.</p> <p>Parameters:</p> Name Type Description Default <code>extension</code> <code>Extension</code> <p>pyRevit extension</p> required Source code in <code>pyrevitlib/pyrevit/loader/hooks.py</code> <pre><code>def unregister_hooks(extension):\n    \"\"\"Unregister all hooks for the given extension.\n\n    Args:\n        extension (pyrevit.extensions.components.Extension): pyRevit extension\n    \"\"\"\n    hooks_handler = get_hooks_handler()\n    for ext_hook in get_extension_hooks(extension):\n        hooks_handler.UnRegisterHook(uniqueId=ext_hook.id)\n</code></pre>"},{"location":"reference/pyrevit/loader/hooks/#pyrevit.loader.hooks.unregister_all_hooks","title":"<code>unregister_all_hooks()</code>","text":"<p>Unregister all hooks.</p> Source code in <code>pyrevitlib/pyrevit/loader/hooks.py</code> <pre><code>def unregister_all_hooks():\n    \"\"\"Unregister all hooks.\"\"\"\n    hooks_handler = get_hooks_handler()\n    hooks_handler.UnRegisterAllHooks(uiApp=HOST_APP.uiapp)\n</code></pre>"},{"location":"reference/pyrevit/loader/hooks/#pyrevit.loader.hooks.activate","title":"<code>activate()</code>","text":"<p>Activate all event hooks.</p> Source code in <code>pyrevitlib/pyrevit/loader/hooks.py</code> <pre><code>def activate():\n    \"\"\"Activate all event hooks.\"\"\"\n    hooks_handler = get_hooks_handler()\n    hooks_handler.ActivateEventHooks(uiApp=HOST_APP.uiapp)\n</code></pre>"},{"location":"reference/pyrevit/loader/hooks/#pyrevit.loader.hooks.deactivate","title":"<code>deactivate()</code>","text":"<p>Deactivate all event hooks.</p> Source code in <code>pyrevitlib/pyrevit/loader/hooks.py</code> <pre><code>def deactivate():\n    \"\"\"Deactivate all event hooks.\"\"\"\n    hooks_handler = get_hooks_handler()\n    hooks_handler.DeactivateEventHooks(uiApp=HOST_APP.uiapp)\n</code></pre>"},{"location":"reference/pyrevit/loader/hooks/#pyrevit.loader.hooks.setup_hooks","title":"<code>setup_hooks(session_id=None)</code>","text":"<p>Setup the hooks for the given session.</p> <p>If no session is specified, use the current one.</p> <p>Parameters:</p> Name Type Description Default <code>session_id</code> <code>str</code> <p>Session. Defaults to None.</p> <code>None</code> Source code in <code>pyrevitlib/pyrevit/loader/hooks.py</code> <pre><code>def setup_hooks(session_id=None):\n    \"\"\"Setup the hooks for the given session.\n\n    If no session is specified, use the current one.\n\n    Args:\n        session_id (str, optional): Session. Defaults to None.\n    \"\"\"\n    # make sure session id is availabe\n    if not session_id:\n        session_id = sessioninfo.get_session_uuid()\n\n    hooks_handler = get_hooks_handler()\n    if hooks_handler:\n        # deactivate old\n        hooks_handler.DeactivateEventHooks(uiApp=HOST_APP.uiapp)\n    # setup new\n    hooks_handler = EventHooks(session_id)\n    set_hooks_handler(hooks_handler)\n    unregister_all_hooks()\n</code></pre>"},{"location":"reference/pyrevit/loader/sessioninfo/","title":"sessioninfo","text":"<p>Manage information about pyRevit sessions.</p>"},{"location":"reference/pyrevit/loader/sessioninfo/#pyrevit.loader.sessioninfo-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/loader/sessioninfo/#pyrevit.loader.sessioninfo.mlogger","title":"<code>mlogger = get_logger(__name__)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/loader/sessioninfo/#pyrevit.loader.sessioninfo.RuntimeInfo","title":"<code>RuntimeInfo = namedtuple('RuntimeInfo', ['pyrevit_version', 'engine_version', 'host_version'])</code>  <code>module-attribute</code>","text":"<p>Session runtime information tuple.</p> <p>Parameters:</p> Name Type Description Default <code>pyrevit_version</code> <code>str</code> <p>formatted pyRevit version</p> required <code>engine_version</code> <code>int</code> <p>active IronPython engine version</p> required <code>host_version</code> <code>str</code> <p>Current Revit version</p> required"},{"location":"reference/pyrevit/loader/sessioninfo/#pyrevit.loader.sessioninfo-functions","title":"Functions","text":""},{"location":"reference/pyrevit/loader/sessioninfo/#pyrevit.loader.sessioninfo.setup_runtime_vars","title":"<code>setup_runtime_vars()</code>","text":"<p>Setup runtime environment variables with session information.</p> Source code in <code>pyrevitlib/pyrevit/loader/sessioninfo.py</code> <pre><code>def setup_runtime_vars():\n    \"\"\"Setup runtime environment variables with session information.\"\"\"\n    # set pyrevit version\n    pyrvt_ver = versionmgr.get_pyrevit_version().get_formatted()\n    envvars.set_pyrevit_env_var(envvars.VERSION_ENVVAR, pyrvt_ver)\n\n    # set app version env var\n    if HOST_APP.is_newer_than(2017):\n        envvars.set_pyrevit_env_var(envvars.APPVERSION_ENVVAR,\n                                    HOST_APP.subversion)\n    else:\n        envvars.set_pyrevit_env_var(envvars.APPVERSION_ENVVAR,\n                                    HOST_APP.version)\n\n    # set ironpython engine version env var\n    attachment = user_config.get_current_attachment()\n    if attachment and attachment.Clone:\n        envvars.set_pyrevit_env_var(envvars.CLONENAME_ENVVAR,\n                                    attachment.Clone.Name)\n        envvars.set_pyrevit_env_var(envvars.IPYVERSION_ENVVAR,\n                                    str(attachment.Engine.Version))\n    else:\n        mlogger.debug('Can not determine attachment.')\n        envvars.set_pyrevit_env_var(envvars.CLONENAME_ENVVAR, \"Unknown\")\n        envvars.set_pyrevit_env_var(envvars.IPYVERSION_ENVVAR, \"0\")\n\n    # set cpython engine version env var\n    cpyengine = user_config.get_active_cpython_engine()\n    if cpyengine:\n        envvars.set_pyrevit_env_var(envvars.CPYVERSION_ENVVAR,\n                                    str(cpyengine.Version))\n    else:\n        envvars.set_pyrevit_env_var(envvars.CPYVERSION_ENVVAR, \"0\")\n\n    # set a list of important assemblies\n    # this is required for dotnet script execution\n    set_loaded_pyrevit_referenced_modules(\n        runtime.get_references()\n        )\n</code></pre>"},{"location":"reference/pyrevit/loader/sessioninfo/#pyrevit.loader.sessioninfo.get_runtime_info","title":"<code>get_runtime_info()</code>","text":"<p>Return runtime information tuple.</p> <p>Returns:</p> Type Description <code>RuntimeInfo</code> <p>runtime info tuple</p> <p>Examples:</p> <pre><code>sessioninfo.get_runtime_info()\n</code></pre> Source code in <code>pyrevitlib/pyrevit/loader/sessioninfo.py</code> <pre><code>def get_runtime_info():\n    \"\"\"Return runtime information tuple.\n\n    Returns:\n        (RuntimeInfo): runtime info tuple\n\n    Examples:\n        ```python\n        sessioninfo.get_runtime_info()\n        ```\n    \"\"\"\n    # FIXME: add example output\n    return RuntimeInfo(\n        pyrevit_version=envvars.get_pyrevit_env_var(envvars.VERSION_ENVVAR),\n        engine_version=envvars.get_pyrevit_env_var(envvars.IPYVERSION_ENVVAR),\n        host_version=envvars.get_pyrevit_env_var(envvars.APPVERSION_ENVVAR)\n        )\n</code></pre>"},{"location":"reference/pyrevit/loader/sessioninfo/#pyrevit.loader.sessioninfo.set_session_uuid","title":"<code>set_session_uuid(uuid_str)</code>","text":"<p>Set session uuid on environment variable.</p> <p>Parameters:</p> Name Type Description Default <code>uuid_str</code> <code>str</code> <p>session uuid string</p> required Source code in <code>pyrevitlib/pyrevit/loader/sessioninfo.py</code> <pre><code>def set_session_uuid(uuid_str):\n    \"\"\"Set session uuid on environment variable.\n\n    Args:\n        uuid_str (str): session uuid string\n    \"\"\"\n    envvars.set_pyrevit_env_var(envvars.SESSIONUUID_ENVVAR, uuid_str)\n</code></pre>"},{"location":"reference/pyrevit/loader/sessioninfo/#pyrevit.loader.sessioninfo.get_session_uuid","title":"<code>get_session_uuid()</code>","text":"<p>Read session uuid from environment variable.</p> <p>Returns:</p> Type Description <code>str</code> <p>session uuid string</p> Source code in <code>pyrevitlib/pyrevit/loader/sessioninfo.py</code> <pre><code>def get_session_uuid():\n    \"\"\"Read session uuid from environment variable.\n\n    Returns:\n        (str): session uuid string\n    \"\"\"\n    return envvars.get_pyrevit_env_var(envvars.SESSIONUUID_ENVVAR)\n</code></pre>"},{"location":"reference/pyrevit/loader/sessioninfo/#pyrevit.loader.sessioninfo.new_session_uuid","title":"<code>new_session_uuid()</code>","text":"<p>Create a new uuid for a pyRevit session.</p> <p>Returns:</p> Type Description <code>str</code> <p>session uuid string</p> Source code in <code>pyrevitlib/pyrevit/loader/sessioninfo.py</code> <pre><code>def new_session_uuid():\n    \"\"\"Create a new uuid for a pyRevit session.\n\n    Returns:\n        (str): session uuid string\n    \"\"\"\n    uuid_str = safe_strtype(coreutils.new_uuid())\n    set_session_uuid(uuid_str)\n    return uuid_str\n</code></pre>"},{"location":"reference/pyrevit/loader/sessioninfo/#pyrevit.loader.sessioninfo.get_loaded_pyrevit_assemblies","title":"<code>get_loaded_pyrevit_assemblies()</code>","text":"<p>Return list of loaded pyRevit assemblies from environment variable.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>list of loaded assemblies</p> Source code in <code>pyrevitlib/pyrevit/loader/sessioninfo.py</code> <pre><code>def get_loaded_pyrevit_assemblies():\n    \"\"\"Return list of loaded pyRevit assemblies from environment variable.\n\n    Returns:\n        (list[str]): list of loaded assemblies\n    \"\"\"\n    # FIXME: verify and document return type\n    loaded_assms_str = envvars.get_pyrevit_env_var(envvars.LOADEDASSMS_ENVVAR)\n    if loaded_assms_str:\n        return loaded_assms_str.split(coreutils.DEFAULT_SEPARATOR)\n    else:\n        return []\n</code></pre>"},{"location":"reference/pyrevit/loader/sessioninfo/#pyrevit.loader.sessioninfo.set_loaded_pyrevit_assemblies","title":"<code>set_loaded_pyrevit_assemblies(loaded_assm_name_list)</code>","text":"<p>Set the environment variable with list of loaded assemblies.</p> <p>Parameters:</p> Name Type Description Default <code>loaded_assm_name_list</code> <code>list[str]</code> <p>list of assembly names</p> required Source code in <code>pyrevitlib/pyrevit/loader/sessioninfo.py</code> <pre><code>def set_loaded_pyrevit_assemblies(loaded_assm_name_list):\n    \"\"\"Set the environment variable with list of loaded assemblies.\n\n    Args:\n        loaded_assm_name_list (list[str]): list of assembly names\n    \"\"\"\n    envvars.set_pyrevit_env_var(\n        envvars.LOADEDASSMS_ENVVAR,\n        coreutils.DEFAULT_SEPARATOR.join(loaded_assm_name_list)\n        )\n</code></pre>"},{"location":"reference/pyrevit/loader/sessioninfo/#pyrevit.loader.sessioninfo.get_loaded_pyrevit_referenced_modules","title":"<code>get_loaded_pyrevit_referenced_modules()</code>","text":"Source code in <code>pyrevitlib/pyrevit/loader/sessioninfo.py</code> <pre><code>def get_loaded_pyrevit_referenced_modules():\n    loaded_assms_str = envvars.get_pyrevit_env_var(envvars.REFEDASSMS_ENVVAR)\n    if loaded_assms_str:\n        return set(loaded_assms_str.split(coreutils.DEFAULT_SEPARATOR))\n    else:\n        return set()\n</code></pre>"},{"location":"reference/pyrevit/loader/sessioninfo/#pyrevit.loader.sessioninfo.set_loaded_pyrevit_referenced_modules","title":"<code>set_loaded_pyrevit_referenced_modules(loaded_assm_name_list)</code>","text":"Source code in <code>pyrevitlib/pyrevit/loader/sessioninfo.py</code> <pre><code>def set_loaded_pyrevit_referenced_modules(loaded_assm_name_list):\n    envvars.set_pyrevit_env_var(\n        envvars.REFEDASSMS_ENVVAR,\n        coreutils.DEFAULT_SEPARATOR.join(loaded_assm_name_list)\n        )\n</code></pre>"},{"location":"reference/pyrevit/loader/sessioninfo/#pyrevit.loader.sessioninfo.update_loaded_pyrevit_referenced_modules","title":"<code>update_loaded_pyrevit_referenced_modules(loaded_assm_name_list)</code>","text":"Source code in <code>pyrevitlib/pyrevit/loader/sessioninfo.py</code> <pre><code>def update_loaded_pyrevit_referenced_modules(loaded_assm_name_list):\n    loaded_modules = get_loaded_pyrevit_referenced_modules()\n    loaded_modules.update(loaded_assm_name_list)\n    set_loaded_pyrevit_referenced_modules(loaded_modules)\n</code></pre>"},{"location":"reference/pyrevit/loader/sessioninfo/#pyrevit.loader.sessioninfo.report_env","title":"<code>report_env()</code>","text":"<p>Report python version, home directory, config file, etc.</p> Source code in <code>pyrevitlib/pyrevit/loader/sessioninfo.py</code> <pre><code>def report_env():\n    \"\"\"Report python version, home directory, config file, etc.\"\"\"\n    # run diagnostics\n    system_diag()\n\n    # get python version that includes last commit hash\n    mlogger.info('pyRevit version: %s - &lt;/&gt; with :growing_heart: in %s',\n                 envvars.get_pyrevit_env_var(envvars.VERSION_ENVVAR),\n                 about.get_pyrevit_about().madein)\n\n    if user_config.rocket_mode:\n        mlogger.info('pyRevit Rocket Mode enabled. :rocket:')\n\n    mlogger.info('Host is %s pid: %s', HOST_APP.pretty_name, HOST_APP.proc_id)\n    # ipy 2.7.10 has a new line in its sys.version :rolling-eyes-emoji:\n    mlogger.info('Running on: %s', sys.version.replace('\\n', ' '))\n    mlogger.info('User is: %s', HOST_APP.username)\n    mlogger.info('Home Directory is: %s', HOME_DIR)\n    mlogger.info('Session uuid is: %s', get_session_uuid())\n    mlogger.info('Runtime assembly is: %s', runtime.RUNTIME_ASSM_NAME)\n    mlogger.info('Config file is (%s): %s',\n                 user_config.config_type, user_config.config_file)\n</code></pre>"},{"location":"reference/pyrevit/loader/sessionmgr/","title":"sessionmgr","text":"<p>The loader module manages the workflow of loading a new pyRevit session.</p> <p>Its main purpose is to orchestrate the process of finding pyRevit extensions, creating dll assemblies for them, and creating a user interface in the host application.</p> <p>Everything starts from <code>sessionmgr.load_session()</code> function...</p> <p>The only public function is <code>load_session()</code> that loads a new session. Everything else is private.</p>"},{"location":"reference/pyrevit/loader/sessionmgr/#pyrevit.loader.sessionmgr-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/loader/sessionmgr/#pyrevit.loader.sessionmgr.mlogger","title":"<code>mlogger = logger.get_logger(__name__)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/loader/sessionmgr/#pyrevit.loader.sessionmgr.AssembledExtension","title":"<code>AssembledExtension = namedtuple('AssembledExtension', ['ext', 'assm'])</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/loader/sessionmgr/#pyrevit.loader.sessionmgr.pyrevit_extcmdtype_cache","title":"<code>pyrevit_extcmdtype_cache = []</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/loader/sessionmgr/#pyrevit.loader.sessionmgr-classes","title":"Classes","text":""},{"location":"reference/pyrevit/loader/sessionmgr/#pyrevit.loader.sessionmgr.PyRevitExternalCommandType","title":"<code>PyRevitExternalCommandType(extcmd_type, extcmd_availtype)</code>","text":"<p>               Bases: <code>object</code></p> <p>PyRevit external command type.</p> Source code in <code>pyrevitlib/pyrevit/loader/sessionmgr.py</code> <pre><code>def __init__(self, extcmd_type, extcmd_availtype):\n    self._extcmd_type = extcmd_type\n    self._extcmd = extcmd_type()\n    if extcmd_availtype:\n        self._extcmd_availtype = extcmd_availtype\n        self._extcmd_avail = extcmd_availtype()\n    else:\n        self._extcmd_availtype = None\n        self._extcmd_avail = None\n</code></pre>"},{"location":"reference/pyrevit/loader/sessionmgr/#pyrevit.loader.sessionmgr.PyRevitExternalCommandType-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/loader/sessionmgr/#pyrevit.loader.sessionmgr.PyRevitExternalCommandType.extcmd_type","title":"<code>extcmd_type</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/loader/sessionmgr/#pyrevit.loader.sessionmgr.PyRevitExternalCommandType.typename","title":"<code>typename</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/loader/sessionmgr/#pyrevit.loader.sessionmgr.PyRevitExternalCommandType.extcmd_availtype","title":"<code>extcmd_availtype</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/loader/sessionmgr/#pyrevit.loader.sessionmgr.PyRevitExternalCommandType.avail_typename","title":"<code>avail_typename</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/loader/sessionmgr/#pyrevit.loader.sessionmgr.PyRevitExternalCommandType.script","title":"<code>script</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/loader/sessionmgr/#pyrevit.loader.sessionmgr.PyRevitExternalCommandType.config_script","title":"<code>config_script</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/loader/sessionmgr/#pyrevit.loader.sessionmgr.PyRevitExternalCommandType.search_paths","title":"<code>search_paths</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/loader/sessionmgr/#pyrevit.loader.sessionmgr.PyRevitExternalCommandType.arguments","title":"<code>arguments</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/loader/sessionmgr/#pyrevit.loader.sessionmgr.PyRevitExternalCommandType.engine_cfgs","title":"<code>engine_cfgs</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/loader/sessionmgr/#pyrevit.loader.sessionmgr.PyRevitExternalCommandType.helpsource","title":"<code>helpsource</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/loader/sessionmgr/#pyrevit.loader.sessionmgr.PyRevitExternalCommandType.tooltip","title":"<code>tooltip</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/loader/sessionmgr/#pyrevit.loader.sessionmgr.PyRevitExternalCommandType.name","title":"<code>name</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/loader/sessionmgr/#pyrevit.loader.sessionmgr.PyRevitExternalCommandType.bundle","title":"<code>bundle</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/loader/sessionmgr/#pyrevit.loader.sessionmgr.PyRevitExternalCommandType.extension","title":"<code>extension</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/loader/sessionmgr/#pyrevit.loader.sessionmgr.PyRevitExternalCommandType.unique_id","title":"<code>unique_id</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/loader/sessionmgr/#pyrevit.loader.sessionmgr.PyRevitExternalCommandType-functions","title":"Functions","text":""},{"location":"reference/pyrevit/loader/sessionmgr/#pyrevit.loader.sessionmgr.PyRevitExternalCommandType.is_available","title":"<code>is_available(category_set, zerodoc=False)</code>","text":"Source code in <code>pyrevitlib/pyrevit/loader/sessionmgr.py</code> <pre><code>def is_available(self, category_set, zerodoc=False):\n    if self._extcmd_availtype:\n        return self._extcmd_avail.IsCommandAvailable(HOST_APP.uiapp,\n                                                     category_set)\n    elif not zerodoc:\n        return True\n\n    return False\n</code></pre>"},{"location":"reference/pyrevit/loader/sessionmgr/#pyrevit.loader.sessionmgr-functions","title":"Functions","text":""},{"location":"reference/pyrevit/loader/sessionmgr/#pyrevit.loader.sessionmgr.load_session","title":"<code>load_session()</code>","text":"<p>Handles loading/reloading of the pyRevit addin and extensions.</p> <p>To create a proper ui, pyRevit extensions needs to be properly parsed and a dll assembly needs to be created. This function handles these tasks through interactions with .extensions, .loader.asmmaker, and .loader.uimaker.</p> <p>Examples:</p> <pre><code>from pyrevit.loader.sessionmgr import load_session\nload_session()     # start loading a new pyRevit session\n</code></pre> <p>Returns:</p> Type Description <code>str</code> <p>sesion uuid</p> Source code in <code>pyrevitlib/pyrevit/loader/sessionmgr.py</code> <pre><code>def load_session():\n    \"\"\"Handles loading/reloading of the pyRevit addin and extensions.\n\n    To create a proper ui, pyRevit extensions needs to be properly parsed and\n    a dll assembly needs to be created. This function handles these tasks\n    through interactions with .extensions, .loader.asmmaker, and .loader.uimaker.\n\n    Examples:\n        ```python\n        from pyrevit.loader.sessionmgr import load_session\n        load_session()     # start loading a new pyRevit session\n        ```\n\n    Returns:\n        (str): sesion uuid\n    \"\"\"\n    # setup runtime environment variables\n    sessioninfo.setup_runtime_vars()\n\n    # the loader dll addon, does not create an output window\n    # if an output window is not provided, create one\n    if EXEC_PARAMS.first_load:\n        output_window = _setup_output()\n    else:\n        from pyrevit import script\n        output_window = script.get_output()\n\n    # initialize timer to measure load time\n    timer = Timer()\n\n    # perform pre-load tasks\n    _perform_onsessionloadstart_ops()\n\n    # create a new session\n    _new_session()\n\n    # perform post-load tasks\n    _perform_onsessionloadcomplete_ops()\n\n    # log load time and thumbs-up :)\n    endtime = timer.get_time()\n    success_emoji = ':OK_hand:' if endtime &lt; 3.00 else ':thumbs_up:'\n    mlogger.info('Load time: %s seconds %s', endtime, success_emoji)\n\n    # if everything went well, self destruct\n    try:\n        timeout = user_config.startuplog_timeout\n        if timeout &gt; 0 and not logger.loggers_have_errors():\n            if EXEC_PARAMS.first_load:\n                # output_window is of type ScriptConsole\n                output_window.SelfDestructTimer(timeout)\n            else:\n                # output_window is of type PyRevitOutputWindow\n                output_window.self_destruct(timeout)\n    except Exception as imp_err:\n        mlogger.error('Error setting up self_destruct on output window | %s',\n                      imp_err)\n\n    _cleanup_output()\n    return sessioninfo.get_session_uuid()\n</code></pre>"},{"location":"reference/pyrevit/loader/sessionmgr/#pyrevit.loader.sessionmgr.reload_pyrevit","title":"<code>reload_pyrevit()</code>","text":"Source code in <code>pyrevitlib/pyrevit/loader/sessionmgr.py</code> <pre><code>def reload_pyrevit():\n    _perform_onsessionreload_ops()\n    mlogger.info('Reloading....')\n    session_Id = load_session()\n    _perform_onsessionreloadcomplete_ops()\n    return session_Id\n</code></pre>"},{"location":"reference/pyrevit/loader/sessionmgr/#pyrevit.loader.sessionmgr.find_all_commands","title":"<code>find_all_commands(category_set=None, cache=True)</code>","text":"Source code in <code>pyrevitlib/pyrevit/loader/sessionmgr.py</code> <pre><code>def find_all_commands(category_set=None, cache=True):\n    global pyrevit_extcmdtype_cache    #pylint: disable=W0603\n    if cache and pyrevit_extcmdtype_cache:    #pylint: disable=E0601\n        pyrevit_extcmds = pyrevit_extcmdtype_cache\n    else:\n        pyrevit_extcmds = []\n        for loaded_assm_name in sessioninfo.get_loaded_pyrevit_assemblies():\n            loaded_assm = assmutils.find_loaded_asm(loaded_assm_name)\n            if loaded_assm:\n                all_exported_types = loaded_assm[0].GetTypes()\n\n                for pyrvt_type in all_exported_types:\n                    tname = pyrvt_type.FullName\n                    availtname = pyrvt_type.Name \\\n                                 + runtime.CMD_AVAIL_NAME_POSTFIX\n                    pyrvt_availtype = None\n\n                    if not tname.endswith(runtime.CMD_AVAIL_NAME_POSTFIX)\\\n                            and runtime.RUNTIME_NAMESPACE not in tname:\n                        for exported_type in all_exported_types:\n                            if exported_type.Name == availtname:\n                                pyrvt_availtype = exported_type\n\n                        pyrevit_extcmds.append(\n                            PyRevitExternalCommandType(pyrvt_type,\n                                                       pyrvt_availtype)\n                            )\n        if cache:\n            pyrevit_extcmdtype_cache = pyrevit_extcmds\n\n    # now check commands in current context if requested\n    if category_set:\n        return [x for x in pyrevit_extcmds\n                if x.is_available(category_set=category_set,\n                                  zerodoc=HOST_APP.uidoc is None)]\n    else:\n        return pyrevit_extcmds\n</code></pre>"},{"location":"reference/pyrevit/loader/sessionmgr/#pyrevit.loader.sessionmgr.find_all_available_commands","title":"<code>find_all_available_commands(use_current_context=True, cache=True)</code>","text":"Source code in <code>pyrevitlib/pyrevit/loader/sessionmgr.py</code> <pre><code>def find_all_available_commands(use_current_context=True, cache=True):\n    if use_current_context:\n        cset = revit.get_selection_category_set()\n    else:\n        cset = None\n\n    return find_all_commands(category_set=cset, cache=cache)\n</code></pre>"},{"location":"reference/pyrevit/loader/sessionmgr/#pyrevit.loader.sessionmgr.find_pyrevitcmd","title":"<code>find_pyrevitcmd(pyrevitcmd_unique_id)</code>","text":"<p>Find a pyRevit command.</p> <p>Searches the pyRevit-generated assemblies under current session for the command with the matching unique name (class name) and returns the command type. Notice that this returned value is a 'type' and should be instantiated before use.</p> <p>Examples:</p> <pre><code>cmd = find_pyrevitcmd('pyRevitCorepyRevitpyRevittoolsReload')\ncommand_instance = cmd()\ncommand_instance.Execute() # Provide commandData, message, elements\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>pyrevitcmd_unique_id</code> <code>str</code> <p>Unique name for the command</p> required <p>Returns:</p> Type Description <code>type</code> <p>Type for the command with matching unique name</p> Source code in <code>pyrevitlib/pyrevit/loader/sessionmgr.py</code> <pre><code>def find_pyrevitcmd(pyrevitcmd_unique_id):\n    \"\"\"Find a pyRevit command.\n\n    Searches the pyRevit-generated assemblies under current session for\n    the command with the matching unique name (class name) and returns the\n    command type. Notice that this returned value is a 'type' and should be\n    instantiated before use.\n\n    Examples:\n        ```python\n        cmd = find_pyrevitcmd('pyRevitCorepyRevitpyRevittoolsReload')\n        command_instance = cmd()\n        command_instance.Execute() # Provide commandData, message, elements\n        ```\n\n    Args:\n        pyrevitcmd_unique_id (str): Unique name for the command\n\n    Returns:\n        (type):Type for the command with matching unique name\n    \"\"\"\n    # go through assmebles loaded under current pyRevit session\n    # and try to find the command\n    mlogger.debug('Searching for pyrevit command: %s', pyrevitcmd_unique_id)\n    for loaded_assm_name in sessioninfo.get_loaded_pyrevit_assemblies():\n        mlogger.debug('Expecting assm: %s', loaded_assm_name)\n        loaded_assm = assmutils.find_loaded_asm(loaded_assm_name)\n        if loaded_assm:\n            mlogger.debug('Found assm: %s', loaded_assm_name)\n            for pyrvt_type in loaded_assm[0].GetTypes():\n                mlogger.debug('Found Type: %s', pyrvt_type)\n                if pyrvt_type.FullName == pyrevitcmd_unique_id:\n                    mlogger.debug('Found pyRevit command in %s',\n                                  loaded_assm_name)\n                    return pyrvt_type\n            mlogger.debug('Could not find pyRevit command.')\n        else:\n            mlogger.debug('Can not find assm: %s', loaded_assm_name)\n\n    return None\n</code></pre>"},{"location":"reference/pyrevit/loader/sessionmgr/#pyrevit.loader.sessionmgr.create_tmp_commanddata","title":"<code>create_tmp_commanddata()</code>","text":"Source code in <code>pyrevitlib/pyrevit/loader/sessionmgr.py</code> <pre><code>def create_tmp_commanddata():\n    tmp_cmd_data = \\\n        framework.FormatterServices.GetUninitializedObject(\n            UI.ExternalCommandData\n            )\n    tmp_cmd_data.Application = HOST_APP.uiapp\n    # tmp_cmd_data.IsReadOnly = False\n    # tmp_cmd_data.View = None\n    # tmp_cmd_data.JournalData = None\n    return tmp_cmd_data\n</code></pre>"},{"location":"reference/pyrevit/loader/sessionmgr/#pyrevit.loader.sessionmgr.execute_command_cls","title":"<code>execute_command_cls(extcmd_type, arguments=None, config_mode=False, exec_from_ui=False)</code>","text":"Source code in <code>pyrevitlib/pyrevit/loader/sessionmgr.py</code> <pre><code>def execute_command_cls(extcmd_type, arguments=None,\n                        config_mode=False, exec_from_ui=False):\n\n    command_instance = extcmd_type()\n    # pass the arguments to the instance\n    if arguments:\n        command_instance.ScriptRuntimeConfigs.Arguments = \\\n            framework.List[str](arguments)\n    # this is a manual execution from python code and not by user\n    command_instance.ExecConfigs.MimicExecFromUI = exec_from_ui\n    # force using the config script\n    command_instance.ExecConfigs.UseConfigScript = config_mode\n\n    # Execute(\n    # ExternalCommandData commandData,\n    # string message,\n    # ElementSet elements\n    # )\n    re = command_instance.Execute(create_tmp_commanddata(),\n                                  '',\n                                  DB.ElementSet())\n    command_instance = None\n    return re\n</code></pre>"},{"location":"reference/pyrevit/loader/sessionmgr/#pyrevit.loader.sessionmgr.execute_command","title":"<code>execute_command(pyrevitcmd_unique_id)</code>","text":"<p>Executes a pyRevit command.</p> <p>Parameters:</p> Name Type Description Default <code>pyrevitcmd_unique_id</code> <code>str</code> <p>Unique/Class Name of the pyRevit command</p> required Source code in <code>pyrevitlib/pyrevit/loader/sessionmgr.py</code> <pre><code>def execute_command(pyrevitcmd_unique_id):\n    \"\"\"Executes a pyRevit command.\n\n    Args:\n        pyrevitcmd_unique_id (str): Unique/Class Name of the pyRevit command\n    \"\"\"\n    cmd_class = find_pyrevitcmd(pyrevitcmd_unique_id)\n\n    if not cmd_class:\n        mlogger.error('Can not find command with unique name: %s',\n                      pyrevitcmd_unique_id)\n        return None\n    else:\n        execute_command_cls(cmd_class)\n</code></pre>"},{"location":"reference/pyrevit/loader/sessionmgr/#pyrevit.loader.sessionmgr.execute_extension_startup_script","title":"<code>execute_extension_startup_script(script_path, ext_name, sys_paths=None)</code>","text":"<p>Executes a script using pyRevit script executor.</p> <p>Parameters:</p> Name Type Description Default <code>script_path</code> <code>str</code> <p>Address of the script file</p> required <code>ext_name</code> <code>str</code> <p>Name of the extension</p> required <code>sys_paths</code> <code>list</code> <p>additional search paths</p> <code>None</code> Source code in <code>pyrevitlib/pyrevit/loader/sessionmgr.py</code> <pre><code>def execute_extension_startup_script(script_path, ext_name, sys_paths=None):\n    \"\"\"Executes a script using pyRevit script executor.\n\n    Args:\n        script_path (str): Address of the script file\n        ext_name (str): Name of the extension\n        sys_paths (list): additional search paths\n    \"\"\"\n    core_syspaths = [MAIN_LIB_DIR, MISC_LIB_DIR]\n    if sys_paths:\n        sys_paths.extend(core_syspaths)\n    else:\n        sys_paths = core_syspaths\n\n    script_data = runtime.types.ScriptData()\n    script_data.ScriptPath = script_path\n    script_data.ConfigScriptPath = None\n    script_data.CommandUniqueId = ''\n    script_data.CommandName = 'Starting {}'.format(ext_name)\n    script_data.CommandBundle = ''\n    script_data.CommandExtension = ext_name\n    script_data.HelpSource = ''\n\n    script_runtime_cfg = runtime.types.ScriptRuntimeConfigs()\n    script_runtime_cfg.CommandData = create_tmp_commanddata()\n    script_runtime_cfg.SelectedElements = None\n    script_runtime_cfg.SearchPaths = framework.List[str](sys_paths or [])\n    script_runtime_cfg.Arguments = framework.List[str]([])\n    script_runtime_cfg.EngineConfigs = \\\n        runtime.create_ipyengine_configs(\n            clean=True,\n            full_frame=True,\n            persistent=True,\n        )\n    script_runtime_cfg.RefreshEngine = False\n    script_runtime_cfg.ConfigMode = False\n    script_runtime_cfg.DebugMode = False\n    script_runtime_cfg.ExecutedFromUI = False\n\n    runtime.types.ScriptExecutor.ExecuteScript(\n        script_data,\n        script_runtime_cfg\n    )\n</code></pre>"},{"location":"reference/pyrevit/loader/systemdiag/","title":"systemdiag","text":"<p>Session diagnostics.</p>"},{"location":"reference/pyrevit/loader/systemdiag/#pyrevit.loader.systemdiag-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/loader/systemdiag/#pyrevit.loader.systemdiag.mlogger","title":"<code>mlogger = get_logger(__name__)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/loader/systemdiag/#pyrevit.loader.systemdiag-functions","title":"Functions","text":""},{"location":"reference/pyrevit/loader/systemdiag/#pyrevit.loader.systemdiag.check_min_host_version","title":"<code>check_min_host_version()</code>","text":"Source code in <code>pyrevitlib/pyrevit/loader/systemdiag.py</code> <pre><code>def check_min_host_version():\n    # get required version and build from user config\n    req_build = user_config.required_host_build\n    if req_build:\n        if HOST_APP.build != req_build:\n            mlogger.warning('You are not using the required host build: %s',\n                            req_build)\n</code></pre>"},{"location":"reference/pyrevit/loader/systemdiag/#pyrevit.loader.systemdiag.check_host_drive_freespace","title":"<code>check_host_drive_freespace()</code>","text":"Source code in <code>pyrevitlib/pyrevit/loader/systemdiag.py</code> <pre><code>def check_host_drive_freespace():\n    # get min free space from user config\n    min_freespace = user_config.min_host_drivefreespace\n    if min_freespace:\n        # find host drive and check free space\n        host_drive = Path.GetPathRoot(HOST_APP.proc_path)\n        for drive in DriveInfo.GetDrives():\n            if drive.Name == host_drive:\n                free_hd_space = float(drive.TotalFreeSpace) / (1024 ** 3)\n\n                if free_hd_space &lt; min_freespace:\n                    mlogger.warning('Remaining space on local drive '\n                                    'is less than %sGB...', min_freespace)\n</code></pre>"},{"location":"reference/pyrevit/loader/systemdiag/#pyrevit.loader.systemdiag.system_diag","title":"<code>system_diag()</code>","text":"<p>Verifies system status is appropriate for a pyRevit session.</p> Source code in <code>pyrevitlib/pyrevit/loader/systemdiag.py</code> <pre><code>def system_diag():\n    \"\"\"Verifies system status is appropriate for a pyRevit session.\"\"\"\n    # checking available drive space\n    check_host_drive_freespace()\n\n    # check if user is running the required host version and build\n    check_min_host_version()\n</code></pre>"},{"location":"reference/pyrevit/loader/uimaker/","title":"uimaker","text":"<p>UI maker.</p>"},{"location":"reference/pyrevit/loader/uimaker/#pyrevit.loader.uimaker-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/loader/uimaker/#pyrevit.loader.uimaker.mlogger","title":"<code>mlogger = get_logger(__name__)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/loader/uimaker/#pyrevit.loader.uimaker.CONFIG_SCRIPT_TITLE_POSTFIX","title":"<code>CONFIG_SCRIPT_TITLE_POSTFIX = '\u25cf'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/loader/uimaker/#pyrevit.loader.uimaker.current_ui","title":"<code>current_ui = ribbon.get_current_ui()</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/loader/uimaker/#pyrevit.loader.uimaker-classes","title":"Classes","text":""},{"location":"reference/pyrevit/loader/uimaker/#pyrevit.loader.uimaker.UIMakerParams","title":"<code>UIMakerParams(par_ui, par_cmp, cmp_item, asm_info, create_beta=False)</code>","text":"<p>UI maker parameters.</p> <p>Parameters:</p> Name Type Description Default <code>par_ui</code> <code>_PyRevitUI</code> <p>Parent UI item</p> required <code>par_cmp</code> <code>GenericUIComponent</code> <p>Parent UI component</p> required <code>cmp_item</code> <code>GenericUIComponent</code> <p>UI component item</p> required <code>asm_info</code> <code>AssemblyInfo</code> <p>Assembly info</p> required <code>create_beta</code> <code>bool</code> <p>Create beta button. Defaults to False</p> <code>False</code> Source code in <code>pyrevitlib/pyrevit/loader/uimaker.py</code> <pre><code>def __init__(self, par_ui, par_cmp, cmp_item, asm_info, create_beta=False):\n    self.parent_ui = par_ui\n    self.parent_cmp = par_cmp\n    self.component = cmp_item\n    self.asm_info = asm_info\n    self.create_beta_cmds = create_beta\n</code></pre>"},{"location":"reference/pyrevit/loader/uimaker/#pyrevit.loader.uimaker.UIMakerParams-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/loader/uimaker/#pyrevit.loader.uimaker.UIMakerParams.parent_ui","title":"<code>parent_ui = par_ui</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/loader/uimaker/#pyrevit.loader.uimaker.UIMakerParams.parent_cmp","title":"<code>parent_cmp = par_cmp</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/loader/uimaker/#pyrevit.loader.uimaker.UIMakerParams.component","title":"<code>component = cmp_item</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/loader/uimaker/#pyrevit.loader.uimaker.UIMakerParams.asm_info","title":"<code>asm_info = asm_info</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/loader/uimaker/#pyrevit.loader.uimaker.UIMakerParams.create_beta_cmds","title":"<code>create_beta_cmds = create_beta</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/loader/uimaker/#pyrevit.loader.uimaker-functions","title":"Functions","text":""},{"location":"reference/pyrevit/loader/uimaker/#pyrevit.loader.uimaker.update_pyrevit_ui","title":"<code>update_pyrevit_ui(ui_ext, ext_asm_info, create_beta=False)</code>","text":"<p>Updates/Creates pyRevit ui for the extension and assembly dll address.</p> <p>Parameters:</p> Name Type Description Default <code>ui_ext</code> <code>GenericUIContainer</code> <p>UI container.</p> required <code>ext_asm_info</code> <code>AssemblyInfo</code> <p>Assembly info.</p> required <code>create_beta</code> <code>bool</code> <p>Create beta ui. Defaults to False.</p> <code>False</code> Source code in <code>pyrevitlib/pyrevit/loader/uimaker.py</code> <pre><code>def update_pyrevit_ui(ui_ext, ext_asm_info, create_beta=False):\n    \"\"\"Updates/Creates pyRevit ui for the extension and assembly dll address.\n\n    Args:\n        ui_ext (GenericUIContainer): UI container.\n        ext_asm_info (AssemblyInfo): Assembly info.\n        create_beta (bool, optional): Create beta ui. Defaults to False.\n    \"\"\"\n    mlogger.debug('Creating/Updating ui for extension: %s', ui_ext)\n    cmp_count = _recursively_produce_ui_items(\n        UIMakerParams(current_ui, None, ui_ext, ext_asm_info, create_beta))\n    mlogger.debug('%s components were created for: %s', cmp_count, ui_ext)\n</code></pre>"},{"location":"reference/pyrevit/loader/uimaker/#pyrevit.loader.uimaker.sort_pyrevit_ui","title":"<code>sort_pyrevit_ui(ui_ext)</code>","text":"<p>Sorts pyRevit UI.</p> <p>Parameters:</p> Name Type Description Default <code>ui_ext</code> <code>GenericUIContainer</code> <p>UI container.</p> required Source code in <code>pyrevitlib/pyrevit/loader/uimaker.py</code> <pre><code>def sort_pyrevit_ui(ui_ext):\n    \"\"\"Sorts pyRevit UI.\n\n    Args:\n        ui_ext (GenericUIContainer): UI container.\n    \"\"\"\n    # only works on panels so far\n    # re-ordering of ui components deeper than panels have not been implemented\n    for tab in current_ui.get_pyrevit_tabs():\n        for litem in ui_ext.find_layout_items():\n            if litem.directive:\n                if litem.directive.directive_type == 'before':\n                    tab.reorder_before(litem.name, litem.directive.target)\n                elif litem.directive.directive_type == 'after':\n                    tab.reorder_after(litem.name, litem.directive.target)\n                elif litem.directive.directive_type == 'afterall':\n                    tab.reorder_afterall(litem.name)\n                elif litem.directive.directive_type == 'beforeall':\n                    tab.reorder_beforeall(litem.name)\n</code></pre>"},{"location":"reference/pyrevit/loader/uimaker/#pyrevit.loader.uimaker.cleanup_pyrevit_ui","title":"<code>cleanup_pyrevit_ui()</code>","text":"<p>Cleanup the pyrevit UI.</p> <p>Hide all items that were not touched after a reload meaning they have been removed in extension folder structure and thus are not updated.</p> Source code in <code>pyrevitlib/pyrevit/loader/uimaker.py</code> <pre><code>def cleanup_pyrevit_ui():\n    \"\"\"Cleanup the pyrevit UI.\n\n    Hide all items that were not touched after a reload\n    meaning they have been removed in extension folder structure\n    and thus are not updated.\n    \"\"\"\n    untouched_items = current_ui.get_unchanged_items()\n    for item in untouched_items:\n        if not item.is_native():\n            try:\n                mlogger.debug('Deactivating: %s', item)\n                item.deactivate()\n            except Exception as deact_err:\n                mlogger.debug(deact_err)\n</code></pre>"},{"location":"reference/pyrevit/loader/uimaker/#pyrevit.loader.uimaker.reflow_pyrevit_ui","title":"<code>reflow_pyrevit_ui(direction=applocales.DEFAULT_LANG_DIR)</code>","text":"<p>Set the flow direction of the tabs.</p> Source code in <code>pyrevitlib/pyrevit/loader/uimaker.py</code> <pre><code>def reflow_pyrevit_ui(direction=applocales.DEFAULT_LANG_DIR):\n    \"\"\"Set the flow direction of the tabs.\"\"\"\n    if direction == \"LTR\":\n        current_ui.set_LTR_flow()\n    elif direction == \"RTL\":\n        current_ui.set_RTL_flow()\n</code></pre>"},{"location":"reference/pyrevit/output/","title":"output","text":"<p>Provide access to output window and its functionality.</p> <p>This module provides access to the output window for the currently running pyRevit command. The proper way to access this wrapper object is through the :func:<code>get_output</code> of :mod:<code>pyrevit.script</code> module. This method, in return uses the <code>pyrevit.output</code> module to get access to the output wrapper.</p> <p>Examples:</p> <pre><code>from pyrevit import script\noutput = script.get_output()\n</code></pre> <p>Here is the source of :func:<code>pyrevit.script.get_output</code>. As you can see this functions calls the :func:<code>pyrevit.output.get_output</code> to receive the output wrapper.</p> <p>.. literalinclude:: ../../pyrevitlib/pyrevit/script.py     :pyobject: get_output</p>"},{"location":"reference/pyrevit/output/#pyrevit.output-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/output/#pyrevit.output.mlogger","title":"<code>mlogger = logger.get_logger(__name__)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/output/#pyrevit.output.DEFAULT_STYLESHEET_NAME","title":"<code>DEFAULT_STYLESHEET_NAME = 'outputstyles.css'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/output/#pyrevit.output.active_stylesheet","title":"<code>active_stylesheet = user_config.output_stylesheet or get_default_stylesheet()</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/output/#pyrevit.output-classes","title":"Classes","text":""},{"location":"reference/pyrevit/output/#pyrevit.output.PyRevitOutputWindow","title":"<code>PyRevitOutputWindow</code>","text":"<p>               Bases: <code>object</code></p> <p>Wrapper to interact with the output window.</p>"},{"location":"reference/pyrevit/output/#pyrevit.output.PyRevitOutputWindow-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/output/#pyrevit.output.PyRevitOutputWindow.window","title":"<code>window</code>  <code>property</code>","text":"<p><code>PyRevitLabs.PyRevit.Runtime.ScriptConsole</code>: Return output window object.</p>"},{"location":"reference/pyrevit/output/#pyrevit.output.PyRevitOutputWindow.renderer","title":"<code>renderer</code>  <code>property</code>","text":"<p>Return html renderer inside output window.</p> <p>Returns:</p> Type Description <code>WebBrowser</code> <p>HTML renderer</p>"},{"location":"reference/pyrevit/output/#pyrevit.output.PyRevitOutputWindow.output_id","title":"<code>output_id</code>  <code>property</code>","text":"<p>str: Return id of the output window.</p> <p>In current implementation, Id of output window is equal to the unique id of the pyRevit command it belongs to. This means that all output windows belonging to the same pyRevit command, will have identical output_id values.</p>"},{"location":"reference/pyrevit/output/#pyrevit.output.PyRevitOutputWindow.output_uniqueid","title":"<code>output_uniqueid</code>  <code>property</code>","text":"<p>str: Return unique id of the output window.</p> <p>In current implementation, unique id of output window is a GUID string generated when the output window is opened. This id is unique to the instance of output window.</p>"},{"location":"reference/pyrevit/output/#pyrevit.output.PyRevitOutputWindow.is_closed_by_user","title":"<code>is_closed_by_user</code>  <code>property</code>","text":"<p>Whether the window has been closed by the user.</p>"},{"location":"reference/pyrevit/output/#pyrevit.output.PyRevitOutputWindow.last_line","title":"<code>last_line</code>  <code>property</code>","text":"<p>Last line of the output window.</p>"},{"location":"reference/pyrevit/output/#pyrevit.output.PyRevitOutputWindow.debug_mode","title":"<code>debug_mode</code>  <code>property</code> <code>writable</code>","text":"<p>Set debug mode on output window and stream.</p> <p>This will cause the output window to print information about the buffer stream and other aspects of the output window mechanism.</p>"},{"location":"reference/pyrevit/output/#pyrevit.output.PyRevitOutputWindow-functions","title":"Functions","text":""},{"location":"reference/pyrevit/output/#pyrevit.output.PyRevitOutputWindow.self_destruct","title":"<code>self_destruct(seconds)</code>","text":"<p>Set self-destruct (close window) timer.</p> <p>Parameters:</p> Name Type Description Default <code>seconds</code> <code>int</code> <p>number of seconds after which window is closed.</p> required Source code in <code>pyrevitlib/pyrevit/output/__init__.py</code> <pre><code>def self_destruct(self, seconds):\n    \"\"\"Set self-destruct (close window) timer.\n\n    Args:\n        seconds (int): number of seconds after which window is closed.\n    \"\"\"\n    if self.window:\n        self.window.SelfDestructTimer(seconds)\n</code></pre>"},{"location":"reference/pyrevit/output/#pyrevit.output.PyRevitOutputWindow.inject_to_head","title":"<code>inject_to_head(element_tag, element_contents, attribs=None)</code>","text":"<p>Inject html element to current html head of the output window.</p> <p>Parameters:</p> Name Type Description Default <code>element_tag</code> <code>str</code> <p>html tag of the element e.g. 'div'</p> required <code>element_contents</code> <code>str</code> <p>html code of the element contents</p> required <code>attribs</code> <p>obj:<code>dict</code>): dictionary of attribute names and value</p> <code>None</code> <p>Examples:</p> <pre><code>output = pyrevit.output.get_output()\noutput.inject_to_head('script',\n                      '',   # no script since it's a link\n                      {'src': js_script_file_path})\n</code></pre> Source code in <code>pyrevitlib/pyrevit/output/__init__.py</code> <pre><code>def inject_to_head(self, element_tag, element_contents, attribs=None):\n    \"\"\"Inject html element to current html head of the output window.\n\n    Args:\n        element_tag (str): html tag of the element e.g. 'div'\n        element_contents (str): html code of the element contents\n        attribs (:obj:`dict`): dictionary of attribute names and value\n\n    Examples:\n        ```python\n        output = pyrevit.output.get_output()\n        output.inject_to_head('script',\n                              '',   # no script since it's a link\n                              {'src': js_script_file_path})\n        ```\n    \"\"\"\n    html_element = self.renderer.Document.CreateElement(element_tag)\n    if element_contents:\n        html_element.InnerHtml = element_contents\n\n    if attribs:\n        for attribute, value in attribs.items():\n            html_element.SetAttribute(attribute, value)\n\n    # inject the script into head\n    head_el = self._get_head_element()\n    head_el.AppendChild(html_element)\n    if self.window:\n        self.window.WaitReadyBrowser()\n</code></pre>"},{"location":"reference/pyrevit/output/#pyrevit.output.PyRevitOutputWindow.inject_to_body","title":"<code>inject_to_body(element_tag, element_contents, attribs=None)</code>","text":"<p>Inject html element to current html body of the output window.</p> <p>Parameters:</p> Name Type Description Default <code>element_tag</code> <code>str</code> <p>html tag of the element e.g. 'div'</p> required <code>element_contents</code> <code>str</code> <p>html code of the element contents</p> required <code>attribs</code> <p>obj:<code>dict</code>): dictionary of attribute names and value</p> <code>None</code> <p>Examples:</p> <pre><code>output = pyrevit.output.get_output()\noutput.inject_to_body('script',\n                      '',   # no script since it's a link\n                      {'src': js_script_file_path})\n</code></pre> Source code in <code>pyrevitlib/pyrevit/output/__init__.py</code> <pre><code>def inject_to_body(self, element_tag, element_contents, attribs=None):\n    \"\"\"Inject html element to current html body of the output window.\n\n    Args:\n        element_tag (str): html tag of the element e.g. 'div'\n        element_contents (str): html code of the element contents\n        attribs (:obj:`dict`): dictionary of attribute names and value\n\n    Examples:\n        ```python\n        output = pyrevit.output.get_output()\n        output.inject_to_body('script',\n                              '',   # no script since it's a link\n                              {'src': js_script_file_path})\n        ```\n    \"\"\"\n    html_element = self.renderer.Document.CreateElement(element_tag)\n    if element_contents:\n        html_element.InnerHtml = element_contents\n\n    if attribs:\n        for attribute, value in attribs.items():\n            html_element.SetAttribute(attribute, value)\n\n    # inject the script into body\n    body_el = self._get_body_element()\n    body_el.AppendChild(html_element)\n    if self.window:\n        self.window.WaitReadyBrowser()\n</code></pre>"},{"location":"reference/pyrevit/output/#pyrevit.output.PyRevitOutputWindow.inject_script","title":"<code>inject_script(script_code, attribs=None, body=False)</code>","text":"<p>Inject script tag into current head (or body) of the output window.</p> <p>Parameters:</p> Name Type Description Default <code>script_code</code> <code>str</code> <p>javascript code</p> required <code>attribs</code> <p>obj:<code>dict</code>): dictionary of attribute names and value</p> <code>None</code> <code>body</code> <code>bool</code> <p>injects script into body instead of head</p> <code>False</code> <p>Examples:</p> <pre><code>output = pyrevit.output.get_output()\noutput.inject_script('',   # no script since it's a link\n                     {'src': js_script_file_path})\n</code></pre> Source code in <code>pyrevitlib/pyrevit/output/__init__.py</code> <pre><code>def inject_script(self, script_code, attribs=None, body=False):\n    \"\"\"Inject script tag into current head (or body) of the output window.\n\n    Args:\n        script_code (str): javascript code\n        attribs (:obj:`dict`): dictionary of attribute names and value\n        body (bool, optional): injects script into body instead of head\n\n    Examples:\n        ```python\n        output = pyrevit.output.get_output()\n        output.inject_script('',   # no script since it's a link\n                             {'src': js_script_file_path})\n        ```\n    \"\"\"\n    if body:\n        self.inject_to_body('script', script_code, attribs=attribs)\n    else:\n        self.inject_to_head('script', script_code, attribs=attribs)\n</code></pre>"},{"location":"reference/pyrevit/output/#pyrevit.output.PyRevitOutputWindow.add_style","title":"<code>add_style(style_code, attribs=None)</code>","text":"<p>Inject style tag into current html head of the output window.</p> <p>Parameters:</p> Name Type Description Default <code>style_code</code> <code>str</code> <p>css styling code</p> required <code>attribs</code> <p>obj:<code>dict</code>): dictionary of attribute names and value</p> <code>None</code> <p>Examples:</p> <pre><code>output = pyrevit.output.get_output()\noutput.add_style('body { color: blue; }')\n</code></pre> Source code in <code>pyrevitlib/pyrevit/output/__init__.py</code> <pre><code>def add_style(self, style_code, attribs=None):\n    \"\"\"Inject style tag into current html head of the output window.\n\n    Args:\n        style_code (str): css styling code\n        attribs (:obj:`dict`): dictionary of attribute names and value\n\n    Examples:\n        ```python\n        output = pyrevit.output.get_output()\n        output.add_style('body { color: blue; }')\n        ```\n    \"\"\"\n    self.inject_to_head('style', style_code, attribs=attribs)\n</code></pre>"},{"location":"reference/pyrevit/output/#pyrevit.output.PyRevitOutputWindow.get_head_html","title":"<code>get_head_html()</code>","text":"<p>str: Return inner code of html head element.</p> Source code in <code>pyrevitlib/pyrevit/output/__init__.py</code> <pre><code>def get_head_html(self):\n    \"\"\"str: Return inner code of html head element.\"\"\"\n    return self._get_head_element().InnerHtml\n</code></pre>"},{"location":"reference/pyrevit/output/#pyrevit.output.PyRevitOutputWindow.set_title","title":"<code>set_title(new_title)</code>","text":"<p>Set window title to the new title.</p> Source code in <code>pyrevitlib/pyrevit/output/__init__.py</code> <pre><code>def set_title(self, new_title):\n    \"\"\"Set window title to the new title.\"\"\"\n    if self.window:\n        self.window.Title = new_title\n</code></pre>"},{"location":"reference/pyrevit/output/#pyrevit.output.PyRevitOutputWindow.set_width","title":"<code>set_width(width)</code>","text":"<p>Set window width to the new width.</p> Source code in <code>pyrevitlib/pyrevit/output/__init__.py</code> <pre><code>def set_width(self, width):\n    \"\"\"Set window width to the new width.\"\"\"\n    if self.window:\n        self.window.Width = width\n</code></pre>"},{"location":"reference/pyrevit/output/#pyrevit.output.PyRevitOutputWindow.set_height","title":"<code>set_height(height)</code>","text":"<p>Set window height to the new height.</p> Source code in <code>pyrevitlib/pyrevit/output/__init__.py</code> <pre><code>def set_height(self, height):\n    \"\"\"Set window height to the new height.\"\"\"\n    if self.window:\n        self.window.Height = height\n</code></pre>"},{"location":"reference/pyrevit/output/#pyrevit.output.PyRevitOutputWindow.set_font","title":"<code>set_font(font_family, font_size)</code>","text":"<p>Set window font family to the new font family and size.</p> <p>Parameters:</p> Name Type Description Default <code>font_family</code> <code>str</code> <p>font family name e.g. 'Courier New'</p> required <code>font_size</code> <code>int</code> <p>font size e.g. 16</p> required Source code in <code>pyrevitlib/pyrevit/output/__init__.py</code> <pre><code>def set_font(self, font_family, font_size):\n    \"\"\"Set window font family to the new font family and size.\n\n    Args:\n        font_family (str): font family name e.g. 'Courier New'\n        font_size (int): font size e.g. 16\n    \"\"\"\n    self.renderer.Font = \\\n        framework.Drawing.Font(font_family,\n                               font_size,\n                               framework.Drawing.FontStyle.Regular,\n                               framework.Drawing.GraphicsUnit.Point)\n</code></pre>"},{"location":"reference/pyrevit/output/#pyrevit.output.PyRevitOutputWindow.resize","title":"<code>resize(width, height)</code>","text":"<p>Resize window to the new width and height.</p> Source code in <code>pyrevitlib/pyrevit/output/__init__.py</code> <pre><code>def resize(self, width, height):\n    \"\"\"Resize window to the new width and height.\"\"\"\n    self.set_width(width)\n    self.set_height(height)\n</code></pre>"},{"location":"reference/pyrevit/output/#pyrevit.output.PyRevitOutputWindow.center","title":"<code>center()</code>","text":"<p>Center the output window on the screen.</p> Source code in <code>pyrevitlib/pyrevit/output/__init__.py</code> <pre><code>def center(self):\n    \"\"\"Center the output window on the screen.\"\"\"\n    screen_area = HOST_APP.proc_screen_workarea\n    left = \\\n        (abs(screen_area.Right - screen_area.Left) / 2) \\\n            - (self.get_width() / 2)\n    top = \\\n        (abs(screen_area.Top - screen_area.Bottom) / 2) \\\n            - (self.get_height() / 2)\n    self.window.Left = left\n    self.window.Top = top\n</code></pre>"},{"location":"reference/pyrevit/output/#pyrevit.output.PyRevitOutputWindow.get_title","title":"<code>get_title()</code>","text":"<p>str: Return current window title.</p> Source code in <code>pyrevitlib/pyrevit/output/__init__.py</code> <pre><code>def get_title(self):\n    \"\"\"str: Return current window title.\"\"\"\n    if self.window:\n        return self.window.Text\n</code></pre>"},{"location":"reference/pyrevit/output/#pyrevit.output.PyRevitOutputWindow.get_width","title":"<code>get_width()</code>","text":"<p>int: Return current window width.</p> Source code in <code>pyrevitlib/pyrevit/output/__init__.py</code> <pre><code>def get_width(self):\n    \"\"\"int: Return current window width.\"\"\"\n    if self.window:\n        return self.window.Width\n</code></pre>"},{"location":"reference/pyrevit/output/#pyrevit.output.PyRevitOutputWindow.get_height","title":"<code>get_height()</code>","text":"<p>int: Return current window height.</p> Source code in <code>pyrevitlib/pyrevit/output/__init__.py</code> <pre><code>def get_height(self):\n    \"\"\"int: Return current window height.\"\"\"\n    if self.window:\n        return self.window.Height\n</code></pre>"},{"location":"reference/pyrevit/output/#pyrevit.output.PyRevitOutputWindow.close","title":"<code>close()</code>","text":"<p>Close the window.</p> Source code in <code>pyrevitlib/pyrevit/output/__init__.py</code> <pre><code>def close(self):\n    \"\"\"Close the window.\"\"\"\n    if self.window:\n        self.window.Close()\n</code></pre>"},{"location":"reference/pyrevit/output/#pyrevit.output.PyRevitOutputWindow.close_others","title":"<code>close_others(all_open_outputs=False)</code>","text":"<p>Close all other windows that belong to the current command.</p> <p>Parameters:</p> Name Type Description Default <code>all_open_outputs</code> <code>bool</code> <p>Close all any other windows if True</p> <code>False</code> Source code in <code>pyrevitlib/pyrevit/output/__init__.py</code> <pre><code>def close_others(self, all_open_outputs=False):\n    \"\"\"Close all other windows that belong to the current command.\n\n    Args:\n        all_open_outputs (bool): Close all any other windows if True\n    \"\"\"\n    if all_open_outputs:\n        ScriptConsoleManager.CloseActiveOutputWindows(self.window)\n    else:\n        ScriptConsoleManager.CloseActiveOutputWindows(self.window,\n                                                     self.output_id)\n</code></pre>"},{"location":"reference/pyrevit/output/#pyrevit.output.PyRevitOutputWindow.hide","title":"<code>hide()</code>","text":"<p>Hide the window.</p> Source code in <code>pyrevitlib/pyrevit/output/__init__.py</code> <pre><code>def hide(self):\n    \"\"\"Hide the window.\"\"\"\n    if self.window:\n        self.window.Hide()\n</code></pre>"},{"location":"reference/pyrevit/output/#pyrevit.output.PyRevitOutputWindow.show","title":"<code>show()</code>","text":"<p>Show the window.</p> Source code in <code>pyrevitlib/pyrevit/output/__init__.py</code> <pre><code>def show(self):\n    \"\"\"Show the window.\"\"\"\n    if self.window:\n        self.window.Show()\n</code></pre>"},{"location":"reference/pyrevit/output/#pyrevit.output.PyRevitOutputWindow.lock_size","title":"<code>lock_size()</code>","text":"<p>Lock window size.</p> Source code in <code>pyrevitlib/pyrevit/output/__init__.py</code> <pre><code>def lock_size(self):\n    \"\"\"Lock window size.\"\"\"\n    if self.window:\n        self.window.LockSize()\n</code></pre>"},{"location":"reference/pyrevit/output/#pyrevit.output.PyRevitOutputWindow.unlock_size","title":"<code>unlock_size()</code>","text":"<p>Unock window size.</p> Source code in <code>pyrevitlib/pyrevit/output/__init__.py</code> <pre><code>def unlock_size(self):\n    \"\"\"Unock window size.\"\"\"\n    if self.window:\n        self.window.UnlockSize()\n</code></pre>"},{"location":"reference/pyrevit/output/#pyrevit.output.PyRevitOutputWindow.freeze","title":"<code>freeze()</code>","text":"<p>Freeze output content update.</p> Source code in <code>pyrevitlib/pyrevit/output/__init__.py</code> <pre><code>def freeze(self):\n    \"\"\"Freeze output content update.\"\"\"\n    if self.window:\n        self.window.Freeze()\n</code></pre>"},{"location":"reference/pyrevit/output/#pyrevit.output.PyRevitOutputWindow.unfreeze","title":"<code>unfreeze()</code>","text":"<p>Unfreeze output content update.</p> Source code in <code>pyrevitlib/pyrevit/output/__init__.py</code> <pre><code>def unfreeze(self):\n    \"\"\"Unfreeze output content update.\"\"\"\n    if self.window:\n        self.window.Unfreeze()\n</code></pre>"},{"location":"reference/pyrevit/output/#pyrevit.output.PyRevitOutputWindow.save_contents","title":"<code>save_contents(dest_file)</code>","text":"<p>Save html code of the window.</p> <p>Parameters:</p> Name Type Description Default <code>dest_file</code> <code>str</code> <p>full path of the destination html file</p> required Source code in <code>pyrevitlib/pyrevit/output/__init__.py</code> <pre><code>def save_contents(self, dest_file):\n    \"\"\"Save html code of the window.\n\n    Args:\n        dest_file (str): full path of the destination html file\n    \"\"\"\n    if self.renderer:\n        html = \\\n            self.renderer.Document.Body.OuterHtml.encode('ascii', 'ignore')\n        doc_txt = self.renderer.DocumentText\n        full_html = doc_txt.lower().replace('&lt;body&gt;&lt;/body&gt;', html)\n        with open(dest_file, 'w') as output_file:\n            output_file.write(full_html)\n</code></pre>"},{"location":"reference/pyrevit/output/#pyrevit.output.PyRevitOutputWindow.open_url","title":"<code>open_url(dest_url)</code>","text":"<p>Open url page in output window.</p> <p>Parameters:</p> Name Type Description Default <code>dest_url</code> <code>str</code> <p>web url of the target page</p> required Source code in <code>pyrevitlib/pyrevit/output/__init__.py</code> <pre><code>def open_url(self, dest_url):\n    \"\"\"Open url page in output window.\n\n    Args:\n        dest_url (str): web url of the target page\n    \"\"\"\n    if self.renderer:\n        self.renderer.Navigate(dest_url, False)\n</code></pre>"},{"location":"reference/pyrevit/output/#pyrevit.output.PyRevitOutputWindow.open_page","title":"<code>open_page(dest_file)</code>","text":"<p>Open html page in output window.</p> <p>Parameters:</p> Name Type Description Default <code>dest_file</code> <code>str</code> <p>full path of the target html file</p> required Source code in <code>pyrevitlib/pyrevit/output/__init__.py</code> <pre><code>def open_page(self, dest_file):\n    \"\"\"Open html page in output window.\n\n    Args:\n        dest_file (str): full path of the target html file\n    \"\"\"\n    self.show()\n    self.open_url('file:///' + dest_file)\n</code></pre>"},{"location":"reference/pyrevit/output/#pyrevit.output.PyRevitOutputWindow.update_progress","title":"<code>update_progress(cur_value, max_value)</code>","text":"<p>Activate and update the output window progress bar.</p> <p>Parameters:</p> Name Type Description Default <code>cur_value</code> <code>float</code> <p>current progress value e.g. 50</p> required <code>max_value</code> <code>float</code> <p>total value e.g. 100</p> required <p>Examples:</p> <pre><code>output = pyrevit.output.get_output()\nfor i in range(100):\n    output.update_progress(i, 100)\n</code></pre> Source code in <code>pyrevitlib/pyrevit/output/__init__.py</code> <pre><code>def update_progress(self, cur_value, max_value):\n    \"\"\"Activate and update the output window progress bar.\n\n    Args:\n        cur_value (float): current progress value e.g. 50\n        max_value (float): total value e.g. 100\n\n    Examples:\n        ```python\n        output = pyrevit.output.get_output()\n        for i in range(100):\n            output.update_progress(i, 100)\n        ```\n    \"\"\"\n    if self.window:\n        self.window.UpdateActivityBar(cur_value, max_value)\n</code></pre>"},{"location":"reference/pyrevit/output/#pyrevit.output.PyRevitOutputWindow.reset_progress","title":"<code>reset_progress()</code>","text":"<p>Reset output window progress bar to zero.</p> Source code in <code>pyrevitlib/pyrevit/output/__init__.py</code> <pre><code>def reset_progress(self):\n    \"\"\"Reset output window progress bar to zero.\"\"\"\n    if self.window:\n        self.window.UpdateActivityBar(0, 1)\n</code></pre>"},{"location":"reference/pyrevit/output/#pyrevit.output.PyRevitOutputWindow.hide_progress","title":"<code>hide_progress()</code>","text":"<p>Hide output window progress bar.</p> Source code in <code>pyrevitlib/pyrevit/output/__init__.py</code> <pre><code>def hide_progress(self):\n    \"\"\"Hide output window progress bar.\"\"\"\n    if self.window:\n        self.window.SetActivityBarVisibility(False)\n</code></pre>"},{"location":"reference/pyrevit/output/#pyrevit.output.PyRevitOutputWindow.unhide_progress","title":"<code>unhide_progress()</code>","text":"<p>Unhide output window progress bar.</p> Source code in <code>pyrevitlib/pyrevit/output/__init__.py</code> <pre><code>def unhide_progress(self):\n    \"\"\"Unhide output window progress bar.\"\"\"\n    if self.window:\n        self.window.SetActivityBarVisibility(True)\n</code></pre>"},{"location":"reference/pyrevit/output/#pyrevit.output.PyRevitOutputWindow.indeterminate_progress","title":"<code>indeterminate_progress(state)</code>","text":"<p>Show or hide indeterminate progress bar.</p> Source code in <code>pyrevitlib/pyrevit/output/__init__.py</code> <pre><code>def indeterminate_progress(self, state):\n    \"\"\"Show or hide indeterminate progress bar.\"\"\"\n    if self.window:\n        self.window.UpdateActivityBar(state)\n</code></pre>"},{"location":"reference/pyrevit/output/#pyrevit.output.PyRevitOutputWindow.show_logpanel","title":"<code>show_logpanel()</code>","text":"<p>Show output window logging panel.</p> Source code in <code>pyrevitlib/pyrevit/output/__init__.py</code> <pre><code>def show_logpanel(self):\n    \"\"\"Show output window logging panel.\"\"\"\n    if self.window:\n        self.window.SetActivityBarVisibility(True)\n</code></pre>"},{"location":"reference/pyrevit/output/#pyrevit.output.PyRevitOutputWindow.hide_logpanel","title":"<code>hide_logpanel()</code>","text":"<p>Hide output window logging panel.</p> Source code in <code>pyrevitlib/pyrevit/output/__init__.py</code> <pre><code>def hide_logpanel(self):\n    \"\"\"Hide output window logging panel.\"\"\"\n    if self.window:\n        self.show_logpanel()\n        self.window.SetActivityBarVisibility(False)\n</code></pre>"},{"location":"reference/pyrevit/output/#pyrevit.output.PyRevitOutputWindow.log_debug","title":"<code>log_debug(message)</code>","text":"<p>Report DEBUG message into output logging panel.</p> Source code in <code>pyrevitlib/pyrevit/output/__init__.py</code> <pre><code>def log_debug(self, message):\n    \"\"\"Report DEBUG message into output logging panel.\"\"\"\n    if self.window:\n        self.show_logpanel()\n        self.window.activityBar.ConsoleLog(message)\n</code></pre>"},{"location":"reference/pyrevit/output/#pyrevit.output.PyRevitOutputWindow.log_success","title":"<code>log_success(message)</code>","text":"<p>Report SUCCESS message into output logging panel.</p> Source code in <code>pyrevitlib/pyrevit/output/__init__.py</code> <pre><code>def log_success(self, message):\n    \"\"\"Report SUCCESS message into output logging panel.\"\"\"\n    if self.window:\n        self.show_logpanel()\n        self.window.activityBar.ConsoleLogOK(message)\n</code></pre>"},{"location":"reference/pyrevit/output/#pyrevit.output.PyRevitOutputWindow.log_info","title":"<code>log_info(message)</code>","text":"<p>Report INFO message into output logging panel.</p> Source code in <code>pyrevitlib/pyrevit/output/__init__.py</code> <pre><code>def log_info(self, message):\n    \"\"\"Report INFO message into output logging panel.\"\"\"\n    if self.window:\n        self.show_logpanel()\n        self.window.activityBar.ConsoleLogInfo(message)\n</code></pre>"},{"location":"reference/pyrevit/output/#pyrevit.output.PyRevitOutputWindow.log_warning","title":"<code>log_warning(message)</code>","text":"<p>Report WARNING message into output logging panel.</p> Source code in <code>pyrevitlib/pyrevit/output/__init__.py</code> <pre><code>def log_warning(self, message):\n    \"\"\"Report WARNING message into output logging panel.\"\"\"\n    if self.window:\n        self.show_logpanel()\n        self.window.activityBar.ConsoleLogWarning(message)\n</code></pre>"},{"location":"reference/pyrevit/output/#pyrevit.output.PyRevitOutputWindow.log_error","title":"<code>log_error(message)</code>","text":"<p>Report ERROR message into output logging panel.</p> Source code in <code>pyrevitlib/pyrevit/output/__init__.py</code> <pre><code>def log_error(self, message):\n    \"\"\"Report ERROR message into output logging panel.\"\"\"\n    if self.window:\n        self.show_logpanel()\n        self.window.activityBar.ConsoleLogError(message)\n</code></pre>"},{"location":"reference/pyrevit/output/#pyrevit.output.PyRevitOutputWindow.set_icon","title":"<code>set_icon(iconpath)</code>","text":"<p>Sets icon on the output window.</p> Source code in <code>pyrevitlib/pyrevit/output/__init__.py</code> <pre><code>def set_icon(self, iconpath):\n    \"\"\"Sets icon on the output window.\"\"\"\n    if self.window:\n        self.window.SetIcon(iconpath)\n</code></pre>"},{"location":"reference/pyrevit/output/#pyrevit.output.PyRevitOutputWindow.reset_icon","title":"<code>reset_icon()</code>","text":"<p>Sets icon on the output window.</p> Source code in <code>pyrevitlib/pyrevit/output/__init__.py</code> <pre><code>def reset_icon(self):\n    \"\"\"Sets icon on the output window.\"\"\"\n    if self.window:\n        self.window.ResetIcon()\n</code></pre>"},{"location":"reference/pyrevit/output/#pyrevit.output.PyRevitOutputWindow.print_html","title":"<code>print_html(html_str)</code>  <code>staticmethod</code>","text":"<p>Add the html code to the output window.</p> <p>Examples:</p> <pre><code>output = pyrevit.output.get_output()\noutput.print_html('&lt;strong&gt;Title&lt;/strong&gt;')\n</code></pre> Source code in <code>pyrevitlib/pyrevit/output/__init__.py</code> <pre><code>@staticmethod\ndef print_html(html_str):\n    \"\"\"Add the html code to the output window.\n\n    Examples:\n        ```python\n        output = pyrevit.output.get_output()\n        output.print_html('&lt;strong&gt;Title&lt;/strong&gt;')\n        ```\n    \"\"\"\n    print(coreutils.prepare_html_str(html_str),\n          end=\"\")\n</code></pre>"},{"location":"reference/pyrevit/output/#pyrevit.output.PyRevitOutputWindow.print_code","title":"<code>print_code(code_str)</code>  <code>staticmethod</code>","text":"<p>Print code to the output window with special formatting.</p> <p>Examples:</p> <pre><code>output = pyrevit.output.get_output()\noutput.print_code('value = 12')\n</code></pre> Source code in <code>pyrevitlib/pyrevit/output/__init__.py</code> <pre><code>@staticmethod\ndef print_code(code_str):\n    \"\"\"Print code to the output window with special formatting.\n\n    Examples:\n        ```python\n        output = pyrevit.output.get_output()\n        output.print_code('value = 12')\n        ```\n    \"\"\"\n    code_div = '&lt;div class=\"code\"&gt;{}&lt;/div&gt;'\n    print(\n        coreutils.prepare_html_str(\n            code_div.format(\n                code_str.replace('    ', '&amp;nbsp;'*4)\n                )\n            ),\n        end=\"\"\n        )\n</code></pre>"},{"location":"reference/pyrevit/output/#pyrevit.output.PyRevitOutputWindow.print_md","title":"<code>print_md(md_str)</code>  <code>staticmethod</code>","text":"<p>Process markdown code and print to output window.</p> <p>Examples:</p> <pre><code>output = pyrevit.output.get_output()\noutput.print_md('### Title')\n</code></pre> Source code in <code>pyrevitlib/pyrevit/output/__init__.py</code> <pre><code>@staticmethod\ndef print_md(md_str):\n    \"\"\"Process markdown code and print to output window.\n\n    Examples:\n        ```python\n        output = pyrevit.output.get_output()\n        output.print_md('### Title')\n        ```\n    \"\"\"\n    tables_ext = 'pyrevit.coreutils.markdown.extensions.tables'\n    markdown_html = markdown.markdown(md_str, extensions=[tables_ext])\n    markdown_html = markdown_html.replace('\\n', '').replace('\\r', '')\n    html_code = coreutils.prepare_html_str(markdown_html)\n    print(html_code, end=\"\")\n</code></pre>"},{"location":"reference/pyrevit/output/#pyrevit.output.PyRevitOutputWindow.print_table","title":"<code>print_table(table_data, columns=None, formats=None, title='', last_line_style='')</code>","text":"<p>Print provided data in a table in output window.</p> <p>Parameters:</p> Name Type Description Default <code>table_data</code> <code>list[iterable[Any]]</code> <p>2D array of data</p> required <code>title</code> <code>str</code> <p>table title</p> <code>''</code> <code>columns</code> <code>list[str]</code> <p>list of column names</p> <code>None</code> <code>formats</code> <code>list[str]</code> <p>column data formats</p> <code>None</code> <code>last_line_style</code> <code>str</code> <p>css style of last row</p> <code>''</code> <p>Examples:</p> <pre><code>data = [\n['row1', 'data', 'data', 80 ],\n['row2', 'data', 'data', 45 ],\n]\noutput.print_table(\ntable_data=data,\ntitle=\"Example Table\",\ncolumns=[\"Row Name\", \"Column 1\", \"Column 2\", \"Percentage\"],\nformats=['', '', '', '{}%'],\nlast_line_style='color:red;'\n)\n</code></pre> Source code in <code>pyrevitlib/pyrevit/output/__init__.py</code> <pre><code>def print_table(self, table_data, columns=None, formats=None,\n                title='', last_line_style=''):\n    \"\"\"Print provided data in a table in output window.\n\n    Args:\n        table_data (list[iterable[Any]]): 2D array of data\n        title (str): table title\n        columns (list[str]): list of column names\n        formats (list[str]): column data formats\n        last_line_style (str): css style of last row\n\n    Examples:\n        ```python\n        data = [\n        ['row1', 'data', 'data', 80 ],\n        ['row2', 'data', 'data', 45 ],\n        ]\n        output.print_table(\n        table_data=data,\n        title=\"Example Table\",\n        columns=[\"Row Name\", \"Column 1\", \"Column 2\", \"Percentage\"],\n        formats=['', '', '', '{}%'],\n        last_line_style='color:red;'\n        )\n        ```\n    \"\"\"\n    if not columns:\n        columns = []\n    if not formats:\n        formats = []\n\n    if last_line_style:\n        self.add_style('tr:last-child {{ {style} }}'\n                       .format(style=last_line_style))\n\n    zipper = itertools.izip_longest #pylint: disable=E1101\n    adjust_base_col = '|'\n    adjust_extra_col = ':---|'\n    base_col = '|'\n    extra_col = '{data}|'\n\n    # find max column count\n    max_col = max([len(x) for x in table_data])\n\n    header = ''\n    if columns:\n        header = base_col\n        for idx, col_name in zipper(range(max_col), columns, fillvalue=''): #pylint: disable=W0612\n            header += extra_col.format(data=col_name)\n\n        header += '\\n'\n\n    justifier = adjust_base_col\n    for idx in range(max_col):\n        justifier += adjust_extra_col\n\n    justifier += '\\n'\n\n    rows = ''\n    for entry in table_data:\n        row = base_col\n        for idx, attrib, attr_format \\\n                in zipper(range(max_col), entry, formats, fillvalue=''):\n            if attr_format:\n                value = attr_format.format(attrib)\n            else:\n                value = attrib\n            row += extra_col.format(data=value)\n        rows += row + '\\n'\n\n    table = header + justifier + rows\n    self.print_md('### {title}'.format(title=title))\n    self.print_md(table)\n</code></pre>"},{"location":"reference/pyrevit/output/#pyrevit.output.PyRevitOutputWindow.print_image","title":"<code>print_image(image_path)</code>","text":"<p>Prints given image to the output.</p> <p>Examples:</p> <pre><code>output = pyrevit.output.get_output()\noutput.print_image(r'C:\\image.gif')\n</code></pre> Source code in <code>pyrevitlib/pyrevit/output/__init__.py</code> <pre><code>def print_image(self, image_path):\n    r\"\"\"Prints given image to the output.\n\n    Examples:\n        ```python\n        output = pyrevit.output.get_output()\n        output.print_image(r'C:\\image.gif')\n        ```\n    \"\"\"\n    self.print_html(\n        \"&lt;span&gt;&lt;img src=\\\"file:///{0}\\\"&gt;&lt;/span&gt;\".format(\n            image_path\n        )\n    )\n</code></pre>"},{"location":"reference/pyrevit/output/#pyrevit.output.PyRevitOutputWindow.insert_divider","title":"<code>insert_divider(level='')</code>","text":"<p>Add horizontal rule to the output window.</p> Source code in <code>pyrevitlib/pyrevit/output/__init__.py</code> <pre><code>def insert_divider(self, level=''):\n    \"\"\"Add horizontal rule to the output window.\"\"\"\n    self.print_md('%s\\n-----' % level)\n</code></pre>"},{"location":"reference/pyrevit/output/#pyrevit.output.PyRevitOutputWindow.next_page","title":"<code>next_page()</code>","text":"<p>Add hidden next page tag to the output window.</p> <p>This is helpful to silently separate the output to multiple pages for better printing.</p> Source code in <code>pyrevitlib/pyrevit/output/__init__.py</code> <pre><code>def next_page(self):\n    \"\"\"Add hidden next page tag to the output window.\n\n    This is helpful to silently separate the output to multiple pages\n    for better printing.\n    \"\"\"\n    self.print_html('&lt;div class=\"nextpage\"&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp&lt;/div&gt;')\n</code></pre>"},{"location":"reference/pyrevit/output/#pyrevit.output.PyRevitOutputWindow.linkify","title":"<code>linkify(element_ids, title=None)</code>  <code>staticmethod</code>","text":"<p>Create clickable link for the provided element ids.</p> <p>This method, creates the link but does not print it directly.</p> <p>Parameters:</p> Name Type Description Default <code>element_ids</code> <code>ElementId | list[ElementId]</code> <p>single or multiple ids</p> required <code>title</code> <code>str</code> <p>tile of the link. defaults to list of element ids</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>clickable link</p> <p>Examples:</p> <pre><code>output = pyrevit.output.get_output()\nfor idx, elid in enumerate(element_ids):\n    print('{}: {}'.format(idx+1, output.linkify(elid)))\n</code></pre> Source code in <code>pyrevitlib/pyrevit/output/__init__.py</code> <pre><code>@staticmethod\ndef linkify(element_ids, title=None):\n    \"\"\"Create clickable link for the provided element ids.\n\n    This method, creates the link but does not print it directly.\n\n    Args:\n        element_ids (ElementId | list[ElementId]): single or multiple ids\n        title (str): tile of the link. defaults to list of element ids\n\n\n    Returns:\n        (str): clickable link\n\n    Examples:\n        ```python\n        output = pyrevit.output.get_output()\n        for idx, elid in enumerate(element_ids):\n            print('{}: {}'.format(idx+1, output.linkify(elid)))\n        ```\n    \"\"\"\n    return coreutils.prepare_html_str(\n        linkmaker.make_link(element_ids, contents=title)\n        )\n</code></pre>"},{"location":"reference/pyrevit/output/#pyrevit.output.PyRevitOutputWindow.make_chart","title":"<code>make_chart(version=None)</code>","text":"<p>:obj:<code>PyRevitOutputChart</code>: Return chart object.</p> Source code in <code>pyrevitlib/pyrevit/output/__init__.py</code> <pre><code>def make_chart(self, version=None):\n    \"\"\":obj:`PyRevitOutputChart`: Return chart object.\"\"\"\n    return charts.PyRevitOutputChart(self, version=version)\n</code></pre>"},{"location":"reference/pyrevit/output/#pyrevit.output.PyRevitOutputWindow.make_line_chart","title":"<code>make_line_chart(version=None)</code>","text":"<p>:obj:<code>PyRevitOutputChart</code>: Return line chart object.</p> Source code in <code>pyrevitlib/pyrevit/output/__init__.py</code> <pre><code>def make_line_chart(self, version=None):\n    \"\"\":obj:`PyRevitOutputChart`: Return line chart object.\"\"\"\n    return charts.PyRevitOutputChart(\n        self,\n        chart_type=charts.LINE_CHART,\n        version=version\n        )\n</code></pre>"},{"location":"reference/pyrevit/output/#pyrevit.output.PyRevitOutputWindow.make_stacked_chart","title":"<code>make_stacked_chart(version=None)</code>","text":"<p>:obj:<code>PyRevitOutputChart</code>: Return stacked chart object.</p> Source code in <code>pyrevitlib/pyrevit/output/__init__.py</code> <pre><code>def make_stacked_chart(self, version=None):\n    \"\"\":obj:`PyRevitOutputChart`: Return stacked chart object.\"\"\"\n    chart = charts.PyRevitOutputChart(\n        self,\n        chart_type=charts.LINE_CHART,\n        version=version\n        )\n    chart.options.scales = {'yAxes': [{'stacked': True, }]}\n    return chart\n</code></pre>"},{"location":"reference/pyrevit/output/#pyrevit.output.PyRevitOutputWindow.make_bar_chart","title":"<code>make_bar_chart(version=None)</code>","text":"<p>:obj:<code>PyRevitOutputChart</code>: Return bar chart object.</p> Source code in <code>pyrevitlib/pyrevit/output/__init__.py</code> <pre><code>def make_bar_chart(self, version=None):\n    \"\"\":obj:`PyRevitOutputChart`: Return bar chart object.\"\"\"\n    return charts.PyRevitOutputChart(\n        self,\n        chart_type=charts.BAR_CHART,\n        version=version\n        )\n</code></pre>"},{"location":"reference/pyrevit/output/#pyrevit.output.PyRevitOutputWindow.make_radar_chart","title":"<code>make_radar_chart(version=None)</code>","text":"<p>:obj:<code>PyRevitOutputChart</code>: Return radar chart object.</p> Source code in <code>pyrevitlib/pyrevit/output/__init__.py</code> <pre><code>def make_radar_chart(self, version=None):\n    \"\"\":obj:`PyRevitOutputChart`: Return radar chart object.\"\"\"\n    return charts.PyRevitOutputChart(\n        self,\n        chart_type=charts.RADAR_CHART,\n        version=version\n        )\n</code></pre>"},{"location":"reference/pyrevit/output/#pyrevit.output.PyRevitOutputWindow.make_polar_chart","title":"<code>make_polar_chart(version=None)</code>","text":"<p>:obj:<code>PyRevitOutputChart</code>: Return polar chart object.</p> Source code in <code>pyrevitlib/pyrevit/output/__init__.py</code> <pre><code>def make_polar_chart(self, version=None):\n    \"\"\":obj:`PyRevitOutputChart`: Return polar chart object.\"\"\"\n    return charts.PyRevitOutputChart(\n        self,\n        chart_type=charts.POLAR_CHART,\n        version=version\n        )\n</code></pre>"},{"location":"reference/pyrevit/output/#pyrevit.output.PyRevitOutputWindow.make_pie_chart","title":"<code>make_pie_chart(version=None)</code>","text":"<p>:obj:<code>PyRevitOutputChart</code>: Return pie chart object.</p> Source code in <code>pyrevitlib/pyrevit/output/__init__.py</code> <pre><code>def make_pie_chart(self, version=None):\n    \"\"\":obj:`PyRevitOutputChart`: Return pie chart object.\"\"\"\n    return charts.PyRevitOutputChart(\n        self,\n        chart_type=charts.PIE_CHART,\n        version=version\n        )\n</code></pre>"},{"location":"reference/pyrevit/output/#pyrevit.output.PyRevitOutputWindow.make_doughnut_chart","title":"<code>make_doughnut_chart(version=None)</code>","text":"<p>:obj:<code>PyRevitOutputChart</code>: Return dougnut chart object.</p> Source code in <code>pyrevitlib/pyrevit/output/__init__.py</code> <pre><code>def make_doughnut_chart(self, version=None):\n    \"\"\":obj:`PyRevitOutputChart`: Return dougnut chart object.\"\"\"\n    return charts.PyRevitOutputChart(\n        self,\n        chart_type=charts.DOUGHNUT_CHART,\n        version=version\n        )\n</code></pre>"},{"location":"reference/pyrevit/output/#pyrevit.output.PyRevitOutputWindow.make_bubble_chart","title":"<code>make_bubble_chart(version=None)</code>","text":"<p>:obj:<code>PyRevitOutputChart</code>: Return bubble chart object.</p> Source code in <code>pyrevitlib/pyrevit/output/__init__.py</code> <pre><code>def make_bubble_chart(self, version=None):\n    \"\"\":obj:`PyRevitOutputChart`: Return bubble chart object.\"\"\"\n    return charts.PyRevitOutputChart(\n        self,\n        chart_type=charts.BUBBLE_CHART,\n        version=version\n        )\n</code></pre>"},{"location":"reference/pyrevit/output/#pyrevit.output-functions","title":"Functions","text":""},{"location":"reference/pyrevit/output/#pyrevit.output.docclosing_eventhandler","title":"<code>docclosing_eventhandler(sender, args)</code>","text":"<p>Close all output window on document closing.</p> Source code in <code>pyrevitlib/pyrevit/output/__init__.py</code> <pre><code>def docclosing_eventhandler(sender, args):  #pylint: disable=W0613\n    \"\"\"Close all output window on document closing.\"\"\"\n    ScriptConsoleManager.CloseActiveOutputWindows()\n</code></pre>"},{"location":"reference/pyrevit/output/#pyrevit.output.setup_output_closer","title":"<code>setup_output_closer()</code>","text":"<p>Setup document closing event listener.</p> Source code in <code>pyrevitlib/pyrevit/output/__init__.py</code> <pre><code>def setup_output_closer():\n    \"\"\"Setup document closing event listener.\"\"\"\n    HOST_APP.app.DocumentClosing += \\\n        framework.EventHandler[DB.Events.DocumentClosingEventArgs](\n            docclosing_eventhandler\n            )\n</code></pre>"},{"location":"reference/pyrevit/output/#pyrevit.output.set_stylesheet","title":"<code>set_stylesheet(stylesheet)</code>","text":"<p>Set active css stylesheet used by output window.</p> <p>Parameters:</p> Name Type Description Default <code>stylesheet</code> <code>str</code> <p>full path to stylesheet file</p> required Source code in <code>pyrevitlib/pyrevit/output/__init__.py</code> <pre><code>def set_stylesheet(stylesheet):\n    \"\"\"Set active css stylesheet used by output window.\n\n    Args:\n        stylesheet (str): full path to stylesheet file\n    \"\"\"\n    if op.isfile(stylesheet):\n        envvars.set_pyrevit_env_var(envvars.OUTPUT_STYLESHEET_ENVVAR,\n                                    stylesheet)\n</code></pre>"},{"location":"reference/pyrevit/output/#pyrevit.output.get_stylesheet","title":"<code>get_stylesheet()</code>","text":"<p>Return active css stylesheet used by output window.</p> Source code in <code>pyrevitlib/pyrevit/output/__init__.py</code> <pre><code>def get_stylesheet():\n    \"\"\"Return active css stylesheet used by output window.\"\"\"\n    return envvars.get_pyrevit_env_var(envvars.OUTPUT_STYLESHEET_ENVVAR)\n</code></pre>"},{"location":"reference/pyrevit/output/#pyrevit.output.get_default_stylesheet","title":"<code>get_default_stylesheet()</code>","text":"<p>Return default css stylesheet used by output window.</p> Source code in <code>pyrevitlib/pyrevit/output/__init__.py</code> <pre><code>def get_default_stylesheet():\n    \"\"\"Return default css stylesheet used by output window.\"\"\"\n    return op.join(op.dirname(__file__), DEFAULT_STYLESHEET_NAME)\n</code></pre>"},{"location":"reference/pyrevit/output/#pyrevit.output.reset_stylesheet","title":"<code>reset_stylesheet()</code>","text":"<p>Reset active stylesheet to default.</p> Source code in <code>pyrevitlib/pyrevit/output/__init__.py</code> <pre><code>def reset_stylesheet():\n    \"\"\"Reset active stylesheet to default.\"\"\"\n    envvars.set_pyrevit_env_var(envvars.OUTPUT_STYLESHEET_ENVVAR,\n                                get_default_stylesheet())\n</code></pre>"},{"location":"reference/pyrevit/output/#pyrevit.output.get_output","title":"<code>get_output()</code>","text":"<p>:obj:<code>pyrevit.output.PyRevitOutputWindow</code> : Return output window.</p> Source code in <code>pyrevitlib/pyrevit/output/__init__.py</code> <pre><code>def get_output():\n    \"\"\":obj:`pyrevit.output.PyRevitOutputWindow` : Return output window.\"\"\"\n    return PyRevitOutputWindow()\n</code></pre>"},{"location":"reference/pyrevit/output/cards/","title":"cards","text":"<p>This module contains functions to generate HTML cards for use in pyRevit output.</p>"},{"location":"reference/pyrevit/output/cards/#pyrevit.output.cards-functions","title":"Functions","text":""},{"location":"reference/pyrevit/output/cards/#pyrevit.output.cards.card_start_style","title":"<code>card_start_style(limit, value, alt)</code>","text":"<p>Generates an HTML div element with a specific background color based on the ratio of value to limit.</p> <p>Parameters:</p> Name Type Description Default <code>limit</code> <code>float</code> <p>The limit value used to calculate the ratio.</p> required <code>value</code> <code>float</code> <p>The current value to be compared against the limit.</p> required <code>alt</code> <code>str</code> <p>The alt text for the div element.</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>An HTML div element as a string with inline styles and the specified background color.</p> <p>The background color is determined by the following rules:     - 'Grey' if value is 0 or if an exception occurs during ratio calculation.     - 'Green' if 0 &lt;= ratio &lt; 0.5.     - 'Orange' if 0.5 &lt;= ratio &lt;= 1.     - 'Red' if ratio &gt; 1.</p> Source code in <code>pyrevitlib/pyrevit/output/cards.py</code> <pre><code>def card_start_style(limit, value, alt):\n    \"\"\"\n    Generates an HTML div element with a specific background color based on the ratio of value to limit.\n\n    Args:\n        limit (float): The limit value used to calculate the ratio.\n        value (float): The current value to be compared against the limit.\n        alt (str): The alt text for the div element.\n\n    Returns:\n        str: An HTML div element as a string with inline styles and the specified background color.\n    The background color is determined by the following rules:\n        - 'Grey' if value is 0 or if an exception occurs during ratio calculation.\n        - 'Green' if 0 &lt;= ratio &lt; 0.5.\n        - 'Orange' if 0.5 &lt;= ratio &lt;= 1.\n        - 'Red' if ratio &gt; 1.\n    \"\"\"\n    try:\n        ratio = float(value) / float(limit)\n    except ZeroDivisionError:\n        ratio = 0\n    color = \"#d0d3d4\"\n    if value != 0:\n        if ratio &lt; 0.5:\n            color = \"#D0E6A5\"  # green\n        elif ratio &lt;= 1:\n            color = \"#FFDD94\"  # orange\n        else:\n            color = \"#FA897B\"  # red\n    try:\n        card_start = '&lt;div style=\"display: inline-block; width: 100px; height: 40px; background: {}; font-family: sans-serif; font-size: 0.85rem; padding: 5px; text-align: center; border-radius: 8px; margin: 5px; box-shadow: 0 6px 6px 0 rgba(0, 0, 0, 0.2); vertical-align: top;\" alt=\"{}\"&gt;'.format(\n            color, alt\n        )\n    except Exception as e:\n        print(e)\n    return card_start\n</code></pre>"},{"location":"reference/pyrevit/output/cards/#pyrevit.output.cards.card_builder","title":"<code>card_builder(limit, value, description)</code>","text":"<p>Builds an HTML card with the given limit, value, and description.</p> <p>Parameters:</p> Name Type Description Default <code>limit</code> <code>int</code> <p>The limit value to be displayed in the card.</p> required <code>value</code> <code>int or str</code> <p>The main value to be displayed in the card.</p> required <code>description</code> <code>str</code> <p>A description to be displayed in the card.</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>A string containing the HTML representation of the card.</p> Source code in <code>pyrevitlib/pyrevit/output/cards.py</code> <pre><code>def card_builder(limit, value, description):\n    \"\"\"\n    Builds an HTML card with the given limit, value, and description.\n\n    Args:\n        limit (int): The limit value to be displayed in the card.\n        value (int or str): The main value to be displayed in the card.\n        description (str): A description to be displayed in the card.\n\n    Returns:\n        str: A string containing the HTML representation of the card.\n    \"\"\"\n\n    alt = \"{} {} (limit = {})\".format(str(value), str(description), str(limit))\n    card_end = '&lt;b&gt;{}&lt;/b&gt;&lt;br /&gt;&lt;a style=\"font-size: 0.70rem\"&gt;{}&lt;/a&gt;&lt;/div&gt;'.format(\n        value, description\n    )\n    return card_start_style(limit, value, alt) + card_end\n</code></pre>"},{"location":"reference/pyrevit/output/cards/#pyrevit.output.cards.create_frame","title":"<code>create_frame(title, *cards)</code>","text":"<p>Creates an HTML div frame containing multiple cards with a rounded border and a title on the top left corner.</p> <p>return card_start_style(limit, value, alt) + card_end     cards (str): Multiple strings representing HTML card elements.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>A string containing the HTML representation of the div frame.</p> Source code in <code>pyrevitlib/pyrevit/output/cards.py</code> <pre><code>def create_frame(title, *cards):\n    \"\"\"\n    Creates an HTML div frame containing multiple cards with a rounded border and a title on the top left corner.\n\n    return card_start_style(limit, value, alt) + card_end\n        cards (str): Multiple strings representing HTML card elements.\n\n    Returns:\n        str: A string containing the HTML representation of the div frame.\n\n    \"\"\"\n    # Add vertical-align: top to the frame and adjust title position\n    frame_start = '&lt;div style=\"display: inline-block; vertical-align: top; border: 1px solid #ccc; border-radius: 10px; padding: 5px; margin: 10px 5px 10px 5px; position: relative;\"&gt;'\n    title_html = '&lt;div style=\"position: absolute; top: -12px; left: 10px; background: white; padding: 0 5px; font-weight: bold;\"&gt;{}&lt;/div&gt;'.format(\n        title\n    )\n    cards_html = \"\".join(cards)\n    frame_end = \"&lt;/div&gt;\"\n    return frame_start + title_html + cards_html + frame_end\n</code></pre>"},{"location":"reference/pyrevit/output/linkmaker/","title":"linkmaker","text":"<p>Handle creation of output window helper links.</p>"},{"location":"reference/pyrevit/output/linkmaker/#pyrevit.output.linkmaker-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/output/linkmaker/#pyrevit.output.linkmaker.mlogger","title":"<code>mlogger = get_logger(__name__)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/output/linkmaker/#pyrevit.output.linkmaker.PROTOCOL_NAME","title":"<code>PROTOCOL_NAME = 'revit://outputhelpers?'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/output/linkmaker/#pyrevit.output.linkmaker.LINK_SHOW_ICON","title":"<code>LINK_SHOW_ICON = 'M9.5,3A6.5,6.5 0 0,1 16,9.5C16,11.11 15.41,12.59 14.44,13.73L14.71,14H15.5L20.5,19L19,20.5L14,15.5V14.71L13.73,14.44C12.59,15.41 11.11,16 9.5,16A6.5,6.5 0 0,1 3,9.5A6.5,6.5 0 0,1 9.5,3M9.5,5C7,5 5,7 5,9.5C5,12 7,14 9.5,14C12,14 14,12 14,9.5C14,7 12,5 9.5,5Z'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/output/linkmaker/#pyrevit.output.linkmaker.DEFAULT_LINK","title":"<code>DEFAULT_LINK = '&lt;span&gt;&lt;a class=\"elementlink\" style=\"margin-right:0px;padding-right:3px\" title=\"Click to select or show element\" {attrs_select} &gt;{ids}&lt;/a&gt;&lt;a class=\"elementlink\" style=\"margin-left:0px;padding-left:3px\" {attrs_show}&gt;&lt;svg width=\"14\" height=\"14\" viewBox=\"2 2 20 20\" &gt;&lt;path fill=\"white\" d=\"{show_icon}\" /&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/span&gt;'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/output/linkmaker/#pyrevit.output.linkmaker-functions","title":"Functions","text":""},{"location":"reference/pyrevit/output/linkmaker/#pyrevit.output.linkmaker.make_link","title":"<code>make_link(element_ids, contents=None)</code>","text":"<p>Create link for given element ids.</p> <p>This link is a special format link with revit:// scheme that is handled by the output window to select the provided element ids in current project. Scripts should not call this function directly. Creating clickable element links is handled by the output wrapper object through the :func:<code>linkify</code> method.</p> <p>Examples:</p> <pre><code>output = pyrevit.output.get_output()\nfor idx, elid in enumerate(element_ids):\n    print('{}: {}'.format(idx+1, output.linkify(elid)))\n</code></pre> Source code in <code>pyrevitlib/pyrevit/output/linkmaker.py</code> <pre><code>def make_link(element_ids, contents=None):\n    \"\"\"Create link for given element ids.\n\n    This link is a special format link with revit:// scheme that is handled\n    by the output window to select the provided element ids in current project.\n    Scripts should not call this function directly. Creating clickable element\n    links is handled by the output wrapper object through the :func:`linkify`\n    method.\n\n    Examples:\n        ```python\n        output = pyrevit.output.get_output()\n        for idx, elid in enumerate(element_ids):\n            print('{}: {}'.format(idx+1, output.linkify(elid)))\n        ```\n    \"\"\"\n    get_elementid_value = get_elementid_value_func()\n    try:\n        try:\n            strids = [safe_strtype(get_elementid_value(x)) for x in element_ids]\n        except TypeError:\n            strids = [safe_strtype(get_elementid_value(element_ids))]\n    except AttributeError:\n        raise ValueError(\"One or more items are not ElementIds\")\n\n    elementquery = ('element[]={}'.format(strid) for strid in strids)\n\n    reviturl = '&amp;'.join(elementquery)\n    link_title = ', '.join(strids)\n\n    if len(reviturl) &gt;= 2000:\n        alertjs = 'alert(&amp;quot;Url was too long and discarded!&amp;quot;);'\n        linkattrs_select = 'href=\"#\" onClick=\"{}\"'.format(alertjs)\n        linkattrs_show = linkattrs_select\n    else:\n        base_link = 'href=\"{}{}{}&amp;show={{}}\"'.format(\n            PROTOCOL_NAME, '&amp;command=select&amp;', reviturl\n        )\n        linkattrs_select = base_link.format(\"false\")\n        linkattrs_show = base_link.format(\"true\")\n\n    return DEFAULT_LINK.format(\n        attrs_select=linkattrs_select,\n        attrs_show=linkattrs_show,\n        ids=contents or link_title,\n        show_icon=LINK_SHOW_ICON\n    )\n</code></pre>"},{"location":"reference/pyrevit/preflight/","title":"preflight","text":"<p>Preflight checks framework.</p> <p>This framework is designed to automate verification and quality control checks that need to be completed before model is published. The framework works very similarly to <code>unitchecks</code> module.</p> <p>All preflight checks are subclassed from a base class and are recognized automatically by the preflight module. Each test case, can perform <code>setUp()</code>, <code>startTest()</code>, <code>tearDown()</code>, and <code>doCleanups()</code>.</p>"},{"location":"reference/pyrevit/preflight/#pyrevit.preflight-classes","title":"Classes","text":""},{"location":"reference/pyrevit/preflight/#pyrevit.preflight.PreflightCheck","title":"<code>PreflightCheck(extension, check_type, script_path)</code>","text":"<p>               Bases: <code>object</code></p> <p>Preflight Check.</p> Source code in <code>pyrevitlib/pyrevit/preflight/__init__.py</code> <pre><code>def __init__(self, extension, check_type, script_path):\n    self.check_case = check_type\n    self.name = getattr(self.check_case, \"name\", None) \\\n        or _get_check_name(script_path)\n    self.script_path = script_path\n\n    self.extension = extension.name\n    self.author = getattr(self.check_case, \"author\", None)\n    if not self.author:\n        self.author = \"Unknown\"\n        extension_pkg = extpkg.get_ext_package_by_name(extension.name)\n        if extension_pkg:\n            self.author = extension_pkg.author\n\n    desc_lines = getattr(self.check_case, \"__doc__\", \"\").strip().split('\\n')\n    if desc_lines:\n        self.subtitle = desc_lines[0]\n        self.description = '\\n'.join([x.strip() for x in desc_lines[1:]])\n</code></pre>"},{"location":"reference/pyrevit/preflight/#pyrevit.preflight.PreflightCheck-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/preflight/#pyrevit.preflight.PreflightCheck.check_case","title":"<code>check_case = check_type</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/preflight/#pyrevit.preflight.PreflightCheck.name","title":"<code>name = getattr(self.check_case, 'name', None) or _get_check_name(script_path)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/preflight/#pyrevit.preflight.PreflightCheck.script_path","title":"<code>script_path = script_path</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/preflight/#pyrevit.preflight.PreflightCheck.extension","title":"<code>extension = extension.name</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/preflight/#pyrevit.preflight.PreflightCheck.author","title":"<code>author = getattr(self.check_case, 'author', None)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/preflight/#pyrevit.preflight.PreflightCheck.subtitle","title":"<code>subtitle = desc_lines[0]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/preflight/#pyrevit.preflight.PreflightCheck.description","title":"<code>description = '\\n'.join([x.strip() for x in desc_lines[1:]])</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/preflight/#pyrevit.preflight-functions","title":"Functions","text":""},{"location":"reference/pyrevit/preflight/#pyrevit.preflight.run_preflight_check","title":"<code>run_preflight_check(check, doc, output)</code>","text":"<p>Run a preflight check.</p> <p>Parameters:</p> Name Type Description Default <code>check</code> <code>PreflightCheck</code> <p>preflight test case object</p> required <code>doc</code> <code>Document</code> <p>Revit document</p> required <code>output</code> <code>PyRevitOutputWindow</code> <p>output window wrapper</p> required Source code in <code>pyrevitlib/pyrevit/preflight/__init__.py</code> <pre><code>def run_preflight_check(check, doc, output):\n    \"\"\"Run a preflight check.\n\n    Args:\n        check (PreflightCheck): preflight test case object\n        doc (Document): Revit document\n        output (pyrevit.output.PyRevitOutputWindow): output window wrapper\n    \"\"\"\n    check_case = check.check_case()\n    check_case.setUp(doc=doc, output=output)\n    check_case.startTest(doc=doc, output=output)\n    check_case.tearDown(doc=doc, output=output)\n    check_case.doCleanups(doc=doc, output=output)\n</code></pre>"},{"location":"reference/pyrevit/preflight/#pyrevit.preflight.get_all_preflight_checks","title":"<code>get_all_preflight_checks()</code>","text":"<p>Find all the preflight checks in installed extensions.</p> Source code in <code>pyrevitlib/pyrevit/preflight/__init__.py</code> <pre><code>def get_all_preflight_checks():\n    \"\"\"Find all the preflight checks in installed extensions.\"\"\"\n    preflight_checks = []\n    # get all installed ui extensions\n    for ext in extensionmgr.get_installed_ui_extensions():\n        # find the checks in the extension\n        for check_script in ext.get_checks():\n            # load the check source file so all the checks can be extracted\n            check_mod = \\\n                imp.load_source(_get_check_name(check_script), check_script)\n            # extract the checks and wrap\n            for check_type in _grab_test_types(check_mod):\n                preflight_checks.append(\n                    PreflightCheck(ext, check_type, check_script)\n                )\n    return preflight_checks\n</code></pre>"},{"location":"reference/pyrevit/preflight/case/","title":"case","text":"<p>Base Preflight test class that defines the minimum interface.</p>"},{"location":"reference/pyrevit/preflight/case/#pyrevit.preflight.case-classes","title":"Classes","text":""},{"location":"reference/pyrevit/preflight/case/#pyrevit.preflight.case.PreflightTestCase","title":"<code>PreflightTestCase</code>","text":"<p>               Bases: <code>object</code></p> <p>Base class for preflight tests.</p>"},{"location":"reference/pyrevit/preflight/case/#pyrevit.preflight.case.PreflightTestCase-functions","title":"Functions","text":""},{"location":"reference/pyrevit/preflight/case/#pyrevit.preflight.case.PreflightTestCase.setUp","title":"<code>setUp(doc, output)</code>","text":"<p>Hook method for setting up the test before exercising it.</p> Source code in <code>pyrevitlib/pyrevit/preflight/case.py</code> <pre><code>def setUp(self, doc, output):\n    \"\"\"Hook method for setting up the test before exercising it.\"\"\"\n    pass\n</code></pre>"},{"location":"reference/pyrevit/preflight/case/#pyrevit.preflight.case.PreflightTestCase.startTest","title":"<code>startTest(doc, output)</code>","text":"<p>Hook method for exercising the test.</p> Source code in <code>pyrevitlib/pyrevit/preflight/case.py</code> <pre><code>def startTest(self, doc, output):\n    \"\"\"Hook method for exercising the test.\"\"\"\n    pass\n</code></pre>"},{"location":"reference/pyrevit/preflight/case/#pyrevit.preflight.case.PreflightTestCase.tearDown","title":"<code>tearDown(doc, output)</code>","text":"<p>Hook method for deconstructing the test after testing it.</p> Source code in <code>pyrevitlib/pyrevit/preflight/case.py</code> <pre><code>def tearDown(self, doc, output):\n    \"\"\"Hook method for deconstructing the test after testing it.\"\"\"\n    pass\n</code></pre>"},{"location":"reference/pyrevit/preflight/case/#pyrevit.preflight.case.PreflightTestCase.doCleanups","title":"<code>doCleanups(doc, output)</code>","text":"<p>Execute all cleanup functions. Normally called after tearDown.</p> Source code in <code>pyrevitlib/pyrevit/preflight/case.py</code> <pre><code>def doCleanups(self, doc, output):\n    \"\"\"Execute all cleanup functions. Normally called after tearDown.\"\"\"\n    pass\n</code></pre>"},{"location":"reference/pyrevit/revit/","title":"revit","text":"<p>Revit application wrapper.</p>"},{"location":"reference/pyrevit/revit/#pyrevit.revit-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.mlogger","title":"<code>mlogger = get_logger(__name__)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit-classes","title":"Classes","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.BaseWrapper","title":"<code>BaseWrapper(obj=None)</code>","text":"<p>               Bases: <code>object</code></p> <p>Base revit databse object wrapper.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/__init__.py</code> <pre><code>def __init__(self, obj=None):\n    self._wrapped = obj\n</code></pre>"},{"location":"reference/pyrevit/revit/#pyrevit.revit.BaseWrapper-functions","title":"Functions","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.BaseWrapper.unwrap","title":"<code>unwrap()</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/__init__.py</code> <pre><code>def unwrap(self):\n    return self._wrapped\n</code></pre>"},{"location":"reference/pyrevit/revit/#pyrevit.revit.BaseWrapper.compare_attr","title":"<code>compare_attr(src, dest, attr_name, case_sensitive=False)</code>  <code>staticmethod</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/__init__.py</code> <pre><code>@staticmethod\ndef compare_attr(src, dest, attr_name, case_sensitive=False):\n    if case_sensitive:\n        return safe_strtype(getattr(src, attr_name, '')).lower() == \\\n               safe_strtype(getattr(dest, attr_name, '')).lower()\n    else:\n        return safe_strtype(getattr(src, attr_name)) == \\\n               safe_strtype(getattr(dest, attr_name))\n</code></pre>"},{"location":"reference/pyrevit/revit/#pyrevit.revit.BaseWrapper.compare_attrs","title":"<code>compare_attrs(src, dest, attr_names, case_sensitive=False)</code>  <code>staticmethod</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/__init__.py</code> <pre><code>@staticmethod\ndef compare_attrs(src, dest, attr_names, case_sensitive=False):\n    return [BaseWrapper.compare_attr(src,\n                                     dest,\n                                     x,\n                                     case_sensitive=case_sensitive)\n            for x in attr_names]\n</code></pre>"},{"location":"reference/pyrevit/revit/#pyrevit.revit.ElementWrapper","title":"<code>ElementWrapper(element)</code>","text":"<p>               Bases: <code>BaseWrapper</code></p> <p>Revit element wrapper.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/__init__.py</code> <pre><code>def __init__(self, element):\n    super(ElementWrapper, self).__init__(element)\n    if not isinstance(self._wrapped, DB.Element):\n        raise PyRevitException('Can not wrap object that are not '\n                               'derived from Element.')\n</code></pre>"},{"location":"reference/pyrevit/revit/#pyrevit.revit.ElementWrapper-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.ElementWrapper.assoc_doc","title":"<code>assoc_doc</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.ElementWrapper.name","title":"<code>name</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.ElementWrapper.symbol_name","title":"<code>symbol_name</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.ElementWrapper.family_name","title":"<code>family_name</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.ElementWrapper.id","title":"<code>id</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.ElementWrapper.unique_id","title":"<code>unique_id</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.ElementWrapper.workset_id","title":"<code>workset_id</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.ElementWrapper.mark","title":"<code>mark</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.ElementWrapper.location","title":"<code>location</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.ElementWrapper.x","title":"<code>x</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.ElementWrapper.y","title":"<code>y</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.ElementWrapper.z","title":"<code>z</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.ElementWrapper-functions","title":"Functions","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.ElementWrapper.unwrap","title":"<code>unwrap()</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/__init__.py</code> <pre><code>def unwrap(self):\n    return self._wrapped\n</code></pre>"},{"location":"reference/pyrevit/revit/#pyrevit.revit.ElementWrapper.compare_attr","title":"<code>compare_attr(src, dest, attr_name, case_sensitive=False)</code>  <code>staticmethod</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/__init__.py</code> <pre><code>@staticmethod\ndef compare_attr(src, dest, attr_name, case_sensitive=False):\n    if case_sensitive:\n        return safe_strtype(getattr(src, attr_name, '')).lower() == \\\n               safe_strtype(getattr(dest, attr_name, '')).lower()\n    else:\n        return safe_strtype(getattr(src, attr_name)) == \\\n               safe_strtype(getattr(dest, attr_name))\n</code></pre>"},{"location":"reference/pyrevit/revit/#pyrevit.revit.ElementWrapper.compare_attrs","title":"<code>compare_attrs(src, dest, attr_names, case_sensitive=False)</code>  <code>staticmethod</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/__init__.py</code> <pre><code>@staticmethod\ndef compare_attrs(src, dest, attr_names, case_sensitive=False):\n    return [BaseWrapper.compare_attr(src,\n                                     dest,\n                                     x,\n                                     case_sensitive=case_sensitive)\n            for x in attr_names]\n</code></pre>"},{"location":"reference/pyrevit/revit/#pyrevit.revit.ElementWrapper.get_param","title":"<code>get_param(param_name)</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/__init__.py</code> <pre><code>def get_param(self, param_name):\n    return self._wrapped.LookupParameter(param_name)\n</code></pre>"},{"location":"reference/pyrevit/revit/#pyrevit.revit.ElementWrapper.safe_get_param","title":"<code>safe_get_param(param_name, default=None)</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/__init__.py</code> <pre><code>def safe_get_param(self, param_name, default=None):\n    try:\n        return self._wrapped.LookupParameter(param_name)\n    except Exception:\n        return default\n</code></pre>"},{"location":"reference/pyrevit/revit/#pyrevit.revit.ExternalRef","title":"<code>ExternalRef(link, extref)</code>","text":"<p>               Bases: <code>ElementWrapper</code></p> <p>External reference wraper.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/__init__.py</code> <pre><code>def __init__(self, link, extref):\n    super(ExternalRef, self).__init__(link)\n    self._extref = extref\n</code></pre>"},{"location":"reference/pyrevit/revit/#pyrevit.revit.ExternalRef-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.ExternalRef.assoc_doc","title":"<code>assoc_doc</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.ExternalRef.symbol_name","title":"<code>symbol_name</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.ExternalRef.family_name","title":"<code>family_name</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.ExternalRef.id","title":"<code>id</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.ExternalRef.unique_id","title":"<code>unique_id</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.ExternalRef.workset_id","title":"<code>workset_id</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.ExternalRef.mark","title":"<code>mark</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.ExternalRef.location","title":"<code>location</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.ExternalRef.x","title":"<code>x</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.ExternalRef.y","title":"<code>y</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.ExternalRef.z","title":"<code>z</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.ExternalRef.name","title":"<code>name</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.ExternalRef.link","title":"<code>link</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.ExternalRef.linktype","title":"<code>linktype</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.ExternalRef.path","title":"<code>path</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.ExternalRef-functions","title":"Functions","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.ExternalRef.unwrap","title":"<code>unwrap()</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/__init__.py</code> <pre><code>def unwrap(self):\n    return self._wrapped\n</code></pre>"},{"location":"reference/pyrevit/revit/#pyrevit.revit.ExternalRef.compare_attr","title":"<code>compare_attr(src, dest, attr_name, case_sensitive=False)</code>  <code>staticmethod</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/__init__.py</code> <pre><code>@staticmethod\ndef compare_attr(src, dest, attr_name, case_sensitive=False):\n    if case_sensitive:\n        return safe_strtype(getattr(src, attr_name, '')).lower() == \\\n               safe_strtype(getattr(dest, attr_name, '')).lower()\n    else:\n        return safe_strtype(getattr(src, attr_name)) == \\\n               safe_strtype(getattr(dest, attr_name))\n</code></pre>"},{"location":"reference/pyrevit/revit/#pyrevit.revit.ExternalRef.compare_attrs","title":"<code>compare_attrs(src, dest, attr_names, case_sensitive=False)</code>  <code>staticmethod</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/__init__.py</code> <pre><code>@staticmethod\ndef compare_attrs(src, dest, attr_names, case_sensitive=False):\n    return [BaseWrapper.compare_attr(src,\n                                     dest,\n                                     x,\n                                     case_sensitive=case_sensitive)\n            for x in attr_names]\n</code></pre>"},{"location":"reference/pyrevit/revit/#pyrevit.revit.ExternalRef.get_param","title":"<code>get_param(param_name)</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/__init__.py</code> <pre><code>def get_param(self, param_name):\n    return self._wrapped.LookupParameter(param_name)\n</code></pre>"},{"location":"reference/pyrevit/revit/#pyrevit.revit.ExternalRef.safe_get_param","title":"<code>safe_get_param(param_name, default=None)</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/__init__.py</code> <pre><code>def safe_get_param(self, param_name, default=None):\n    try:\n        return self._wrapped.LookupParameter(param_name)\n    except Exception:\n        return default\n</code></pre>"},{"location":"reference/pyrevit/revit/#pyrevit.revit.ExternalRef.reload","title":"<code>reload()</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/__init__.py</code> <pre><code>def reload(self):\n    return self._wrapped.Reload()\n</code></pre>"},{"location":"reference/pyrevit/revit/#pyrevit.revit.ProjectParameter","title":"<code>ProjectParameter(param_def, param_binding=None, param_ext_def=False)</code>","text":"<p>               Bases: <code>BaseWrapper</code></p> <p>Project parameter wrapper.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/__init__.py</code> <pre><code>def __init__(self, param_def, param_binding=None, param_ext_def=False):\n    super(ProjectParameter, self).__init__()\n    self.param_def = param_def\n    self.param_binding = param_binding\n    self.param_binding_type = self._determine_binding_type()\n\n    self.shared = False\n    self.param_ext_def = None\n    self.param_guid = ''\n    if param_ext_def:\n        self.shared = True\n        self.param_ext_def = param_ext_def\n        self.param_guid = self.param_ext_def.GUID.ToString()\n\n    self.name = self.param_def.Name\n\n    # Revit &lt;2017 does not have the Id parameter\n    self.param_id = getattr(self.param_def, 'Id', None)\n\n    if HOST_APP.is_exactly(2021):\n        # Revit &gt;2021 does not have the UnitType property\n        self.unit_type = self.param_def.GetSpecTypeId()\n        self.param_type = self.param_def.ParameterType\n        self.param_group = self.param_def.ParameterGroup\n    elif HOST_APP.is_newer_than(2022, or_equal=True):\n        # GetSpecTypeId() Removed in Revit 2022\n        self.unit_type = self.param_def.GetDataType()\n        # Revit &gt;2022 does not have the ParameterType property\n        self.param_type = self.param_def.GetDataType()\n        # ParameterGroup deprecated\n        self.param_group = self.param_def.GetGroupTypeId().TypeId\n    else:\n        self.unit_type = self.param_def.UnitType\n        self.param_type = self.param_def.ParameterType\n        self.param_group = self.param_def.ParameterGroup\n</code></pre>"},{"location":"reference/pyrevit/revit/#pyrevit.revit.ProjectParameter-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.ProjectParameter.param_def","title":"<code>param_def = param_def</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.ProjectParameter.param_binding","title":"<code>param_binding = param_binding</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.ProjectParameter.param_binding_type","title":"<code>param_binding_type = self._determine_binding_type()</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.ProjectParameter.shared","title":"<code>shared = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.ProjectParameter.param_ext_def","title":"<code>param_ext_def = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.ProjectParameter.param_guid","title":"<code>param_guid = ''</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.ProjectParameter.name","title":"<code>name = self.param_def.Name</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.ProjectParameter.param_id","title":"<code>param_id = getattr(self.param_def, 'Id', None)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.ProjectParameter.unit_type","title":"<code>unit_type = self.param_def.GetSpecTypeId()</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.ProjectParameter.param_type","title":"<code>param_type = self.param_def.ParameterType</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.ProjectParameter.param_group","title":"<code>param_group = self.param_def.ParameterGroup</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.ProjectParameter-functions","title":"Functions","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.ProjectParameter.unwrap","title":"<code>unwrap()</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/__init__.py</code> <pre><code>def unwrap(self):\n    return self._wrapped\n</code></pre>"},{"location":"reference/pyrevit/revit/#pyrevit.revit.ProjectParameter.compare_attr","title":"<code>compare_attr(src, dest, attr_name, case_sensitive=False)</code>  <code>staticmethod</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/__init__.py</code> <pre><code>@staticmethod\ndef compare_attr(src, dest, attr_name, case_sensitive=False):\n    if case_sensitive:\n        return safe_strtype(getattr(src, attr_name, '')).lower() == \\\n               safe_strtype(getattr(dest, attr_name, '')).lower()\n    else:\n        return safe_strtype(getattr(src, attr_name)) == \\\n               safe_strtype(getattr(dest, attr_name))\n</code></pre>"},{"location":"reference/pyrevit/revit/#pyrevit.revit.ProjectParameter.compare_attrs","title":"<code>compare_attrs(src, dest, attr_names, case_sensitive=False)</code>  <code>staticmethod</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/__init__.py</code> <pre><code>@staticmethod\ndef compare_attrs(src, dest, attr_names, case_sensitive=False):\n    return [BaseWrapper.compare_attr(src,\n                                     dest,\n                                     x,\n                                     case_sensitive=case_sensitive)\n            for x in attr_names]\n</code></pre>"},{"location":"reference/pyrevit/revit/#pyrevit.revit.ProjectInfo","title":"<code>ProjectInfo(doc)</code>","text":"<p>               Bases: <code>BaseWrapper</code></p> <p>Project information.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/__init__.py</code> <pre><code>def __init__(self, doc):\n    super(ProjectInfo, self).__init__()\n    self._doc = doc\n</code></pre>"},{"location":"reference/pyrevit/revit/#pyrevit.revit.ProjectInfo-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.ProjectInfo.name","title":"<code>name</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.ProjectInfo.number","title":"<code>number</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.ProjectInfo.address","title":"<code>address</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.ProjectInfo.author","title":"<code>author</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.ProjectInfo.building_name","title":"<code>building_name</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.ProjectInfo.client_name","title":"<code>client_name</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.ProjectInfo.issue_date","title":"<code>issue_date</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.ProjectInfo.org_name","title":"<code>org_name</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.ProjectInfo.org_desc","title":"<code>org_desc</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.ProjectInfo.status","title":"<code>status</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.ProjectInfo.location","title":"<code>location</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.ProjectInfo.path","title":"<code>path</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.ProjectInfo.filename","title":"<code>filename</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.ProjectInfo-functions","title":"Functions","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.ProjectInfo.unwrap","title":"<code>unwrap()</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/__init__.py</code> <pre><code>def unwrap(self):\n    return self._wrapped\n</code></pre>"},{"location":"reference/pyrevit/revit/#pyrevit.revit.ProjectInfo.compare_attr","title":"<code>compare_attr(src, dest, attr_name, case_sensitive=False)</code>  <code>staticmethod</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/__init__.py</code> <pre><code>@staticmethod\ndef compare_attr(src, dest, attr_name, case_sensitive=False):\n    if case_sensitive:\n        return safe_strtype(getattr(src, attr_name, '')).lower() == \\\n               safe_strtype(getattr(dest, attr_name, '')).lower()\n    else:\n        return safe_strtype(getattr(src, attr_name)) == \\\n               safe_strtype(getattr(dest, attr_name))\n</code></pre>"},{"location":"reference/pyrevit/revit/#pyrevit.revit.ProjectInfo.compare_attrs","title":"<code>compare_attrs(src, dest, attr_names, case_sensitive=False)</code>  <code>staticmethod</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/__init__.py</code> <pre><code>@staticmethod\ndef compare_attrs(src, dest, attr_names, case_sensitive=False):\n    return [BaseWrapper.compare_attr(src,\n                                     dest,\n                                     x,\n                                     case_sensitive=case_sensitive)\n            for x in attr_names]\n</code></pre>"},{"location":"reference/pyrevit/revit/#pyrevit.revit.XYZPoint","title":"<code>XYZPoint(obj=None)</code>","text":"<p>               Bases: <code>BaseWrapper</code></p> <p>Wrapper for XYZ point.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/__init__.py</code> <pre><code>def __init__(self, obj=None):\n    self._wrapped = obj\n</code></pre>"},{"location":"reference/pyrevit/revit/#pyrevit.revit.XYZPoint-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.XYZPoint.x","title":"<code>x</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.XYZPoint.y","title":"<code>y</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.XYZPoint.z","title":"<code>z</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.XYZPoint-functions","title":"Functions","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.XYZPoint.unwrap","title":"<code>unwrap()</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/__init__.py</code> <pre><code>def unwrap(self):\n    return self._wrapped\n</code></pre>"},{"location":"reference/pyrevit/revit/#pyrevit.revit.XYZPoint.compare_attr","title":"<code>compare_attr(src, dest, attr_name, case_sensitive=False)</code>  <code>staticmethod</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/__init__.py</code> <pre><code>@staticmethod\ndef compare_attr(src, dest, attr_name, case_sensitive=False):\n    if case_sensitive:\n        return safe_strtype(getattr(src, attr_name, '')).lower() == \\\n               safe_strtype(getattr(dest, attr_name, '')).lower()\n    else:\n        return safe_strtype(getattr(src, attr_name)) == \\\n               safe_strtype(getattr(dest, attr_name))\n</code></pre>"},{"location":"reference/pyrevit/revit/#pyrevit.revit.XYZPoint.compare_attrs","title":"<code>compare_attrs(src, dest, attr_names, case_sensitive=False)</code>  <code>staticmethod</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/__init__.py</code> <pre><code>@staticmethod\ndef compare_attrs(src, dest, attr_names, case_sensitive=False):\n    return [BaseWrapper.compare_attr(src,\n                                     dest,\n                                     x,\n                                     case_sensitive=case_sensitive)\n            for x in attr_names]\n</code></pre>"},{"location":"reference/pyrevit/revit/#pyrevit.revit.Transaction","title":"<code>Transaction(name=None, doc=None, clear_after_rollback=False, show_error_dialog=False, swallow_errors=False, log_errors=True, nested=False)</code>","text":"<p>Adds a context manager around Revit Transaction object.</p> <p>Runs <code>Transaction.Start()</code> and <code>Transaction.Commit()</code> before and after the context. Automatically rolls back if exception is raised.</p> <p>```python     with Transaction('Move Wall'):         wall.DoSomething()</p> <pre><code>with Transaction('Move Wall', doc, clear_after_rollback=False, show_error_dialog=False, swallow_errors=False, log_errors=True, nested=False)) as action:\n    wall.DoSomething()\n    assert action.status == ActionStatus.Started  # True\n    assert action.status == ActionStatus.Committed    # True\n```\n</code></pre> Source code in <code>pyrevitlib/pyrevit/revit/db/transaction.py</code> <pre><code>def __init__(self, name=None,\n             doc=None,\n             clear_after_rollback=False,\n             show_error_dialog=False,\n             swallow_errors=False,\n             log_errors=True,\n             nested=False):\n    doc = doc or DOCS.doc\n    # create nested transaction if one is already open\n    if doc.IsModifiable or nested:\n        self._rvtxn = \\\n            DB.SubTransaction(doc)\n    else:\n        self._rvtxn = \\\n            DB.Transaction(doc, name if name else DEFAULT_TRANSACTION_NAME)\n        self._fhndlr_ops = self._rvtxn.GetFailureHandlingOptions()\n        self._fhndlr_ops = \\\n            self._fhndlr_ops.SetClearAfterRollback(clear_after_rollback)\n        self._fhndlr_ops = \\\n            self._fhndlr_ops.SetForcedModalHandling(show_error_dialog)\n        if swallow_errors:\n            self._fhndlr_ops = \\\n                self._fhndlr_ops.SetFailuresPreprocessor(\n                    failure.FailureSwallower()\n                    )\n        self._rvtxn.SetFailureHandlingOptions(self._fhndlr_ops)\n    self._logerror = log_errors\n</code></pre>"},{"location":"reference/pyrevit/revit/#pyrevit.revit.Transaction-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.Transaction.name","title":"<code>name</code>  <code>property</code> <code>writable</code>","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.Transaction.status","title":"<code>status</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.Transaction-functions","title":"Functions","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.Transaction.has_started","title":"<code>has_started()</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/transaction.py</code> <pre><code>def has_started(self):\n    return self._rvtxn.HasStarted()\n</code></pre>"},{"location":"reference/pyrevit/revit/#pyrevit.revit.Transaction.has_ended","title":"<code>has_ended()</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/transaction.py</code> <pre><code>def has_ended(self):\n    return self._rvtxn.HasEnded()\n</code></pre>"},{"location":"reference/pyrevit/revit/#pyrevit.revit.DryTransaction","title":"<code>DryTransaction(name=None, doc=None, clear_after_rollback=False, show_error_dialog=False, swallow_errors=False, log_errors=True, nested=False)</code>","text":"<p>               Bases: <code>Transaction</code></p> <p>Wrapper to a transaction that doesn't commit anything (dry-run).</p> Source code in <code>pyrevitlib/pyrevit/revit/db/transaction.py</code> <pre><code>def __init__(self, name=None,\n             doc=None,\n             clear_after_rollback=False,\n             show_error_dialog=False,\n             swallow_errors=False,\n             log_errors=True,\n             nested=False):\n    doc = doc or DOCS.doc\n    # create nested transaction if one is already open\n    if doc.IsModifiable or nested:\n        self._rvtxn = \\\n            DB.SubTransaction(doc)\n    else:\n        self._rvtxn = \\\n            DB.Transaction(doc, name if name else DEFAULT_TRANSACTION_NAME)\n        self._fhndlr_ops = self._rvtxn.GetFailureHandlingOptions()\n        self._fhndlr_ops = \\\n            self._fhndlr_ops.SetClearAfterRollback(clear_after_rollback)\n        self._fhndlr_ops = \\\n            self._fhndlr_ops.SetForcedModalHandling(show_error_dialog)\n        if swallow_errors:\n            self._fhndlr_ops = \\\n                self._fhndlr_ops.SetFailuresPreprocessor(\n                    failure.FailureSwallower()\n                    )\n        self._rvtxn.SetFailureHandlingOptions(self._fhndlr_ops)\n    self._logerror = log_errors\n</code></pre>"},{"location":"reference/pyrevit/revit/#pyrevit.revit.DryTransaction-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.DryTransaction.name","title":"<code>name</code>  <code>property</code> <code>writable</code>","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.DryTransaction.status","title":"<code>status</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.DryTransaction-functions","title":"Functions","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.DryTransaction.has_started","title":"<code>has_started()</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/transaction.py</code> <pre><code>def has_started(self):\n    return self._rvtxn.HasStarted()\n</code></pre>"},{"location":"reference/pyrevit/revit/#pyrevit.revit.DryTransaction.has_ended","title":"<code>has_ended()</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/transaction.py</code> <pre><code>def has_ended(self):\n    return self._rvtxn.HasEnded()\n</code></pre>"},{"location":"reference/pyrevit/revit/#pyrevit.revit.TransactionGroup","title":"<code>TransactionGroup(name=None, doc=None, assimilate=True, log_errors=True)</code>","text":"<p>Transactions group with context manager.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/transaction.py</code> <pre><code>def __init__(self, name=None, doc=None, assimilate=True, log_errors=True):\n    self._rvtxn_grp = \\\n        DB.TransactionGroup(doc or DOCS.doc,\n                            name if name else DEFAULT_TRANSACTION_NAME)\n    self.assimilate = assimilate\n    self._logerror = log_errors\n</code></pre>"},{"location":"reference/pyrevit/revit/#pyrevit.revit.TransactionGroup-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.TransactionGroup.assimilate","title":"<code>assimilate = assimilate</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.TransactionGroup.name","title":"<code>name</code>  <code>property</code> <code>writable</code>","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.TransactionGroup.status","title":"<code>status</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.TransactionGroup-functions","title":"Functions","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.TransactionGroup.has_started","title":"<code>has_started()</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/transaction.py</code> <pre><code>def has_started(self):\n    return self._rvtxn_grp.HasStarted()\n</code></pre>"},{"location":"reference/pyrevit/revit/#pyrevit.revit.TransactionGroup.has_ended","title":"<code>has_ended()</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/transaction.py</code> <pre><code>def has_ended(self):\n    return self._rvtxn_grp.HasEnded()\n</code></pre>"},{"location":"reference/pyrevit/revit/#pyrevit.revit.RevitWrapper","title":"<code>RevitWrapper()</code>","text":"<p>               Bases: <code>ModuleType</code></p> <p>Revit application wrapper.</p> Source code in <code>pyrevitlib/pyrevit/revit/__init__.py</code> <pre><code>def __init__(self):\n    pass\n</code></pre>"},{"location":"reference/pyrevit/revit/#pyrevit.revit.RevitWrapper-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.RevitWrapper.uidoc","title":"<code>uidoc</code>  <code>property</code>","text":"<p>Active UI Document.</p>"},{"location":"reference/pyrevit/revit/#pyrevit.revit.RevitWrapper.doc","title":"<code>doc</code>  <code>property</code>","text":"<p>Active document.</p>"},{"location":"reference/pyrevit/revit/#pyrevit.revit.RevitWrapper.docs","title":"<code>docs</code>  <code>property</code>","text":"<p>Active documents.</p>"},{"location":"reference/pyrevit/revit/#pyrevit.revit.RevitWrapper.active_view","title":"<code>active_view</code>  <code>property</code> <code>writable</code>","text":"<p>Active view.</p>"},{"location":"reference/pyrevit/revit/#pyrevit.revit.RevitWrapper.active_ui_view","title":"<code>active_ui_view</code>  <code>property</code>","text":"<p>Active UI view.</p>"},{"location":"reference/pyrevit/revit/#pyrevit.revit.RevitWrapper.servers","title":"<code>servers</code>  <code>property</code>","text":"<p>Available revit server names.</p>"},{"location":"reference/pyrevit/revit/#pyrevit.revit.RevitWrapper-functions","title":"Functions","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.RevitWrapper.open_doc","title":"<code>open_doc(doc_path)</code>  <code>staticmethod</code>","text":"<p>Open document at given path.</p> <p>Parameters:</p> Name Type Description Default <code>doc_path</code> <code>str</code> <p>document file path</p> required <p>Returns:</p> Type Description <code>Document</code> <p>opened document</p> Source code in <code>pyrevitlib/pyrevit/revit/__init__.py</code> <pre><code>@staticmethod\ndef open_doc(doc_path):\n    \"\"\"Open document at given path.\n\n    Args:\n        doc_path (str): document file path\n\n    Returns:\n        (DB.Document): opened document\n    \"\"\"\n    return HOST_APP.app.OpenDocumentFile(doc_path)\n</code></pre>"},{"location":"reference/pyrevit/revit/#pyrevit.revit.RevitWrapper.close_doc","title":"<code>close_doc(doc)</code>  <code>staticmethod</code>","text":"<p>Close given document.</p> <p>Parameters:</p> Name Type Description Default <code>doc</code> <code>Document</code> <p>document</p> required Source code in <code>pyrevitlib/pyrevit/revit/__init__.py</code> <pre><code>@staticmethod\ndef close_doc(doc):\n    \"\"\"Close given document.\n\n    Args:\n        doc (DB.Document): document\n    \"\"\"\n    return doc.Close()\n</code></pre>"},{"location":"reference/pyrevit/revit/#pyrevit.revit.RevitWrapper.post_command","title":"<code>post_command(command_id)</code>  <code>staticmethod</code>","text":"<p>Request Revit to run a command.</p> <p>Parameters:</p> Name Type Description Default <code>command_id</code> <code>str</code> <p>command identifier e.g. ID_REVIT_SAVE_AS_TEMPLATE</p> required Source code in <code>pyrevitlib/pyrevit/revit/__init__.py</code> <pre><code>@staticmethod\ndef post_command(command_id):\n    \"\"\"Request Revit to run a command.\n\n    Args:\n        command_id (str): command identifier e.g. ID_REVIT_SAVE_AS_TEMPLATE\n    \"\"\"\n    HOST_APP.post_command(command_id)\n</code></pre>"},{"location":"reference/pyrevit/revit/#pyrevit.revit.ErrorSwallower","title":"<code>ErrorSwallower(log_errors=True)</code>","text":"<p>Suppresses warnings during script execution.</p> <p>Examples:</p> <pre><code>with ErrorSwallower() as swallower:\n    for fam in families:\n        revit.doc.EditFamily(fam)\n        if swallower.get_swallowed():\n            logger.warn(\"Warnings swallowed\")\n</code></pre> Source code in <code>pyrevitlib/pyrevit/revit/__init__.py</code> <pre><code>def __init__(self, log_errors=True):\n    self._fswallower = failure.FailureSwallower()\n    self._logerror = log_errors\n</code></pre>"},{"location":"reference/pyrevit/revit/#pyrevit.revit.ErrorSwallower-functions","title":"Functions","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.ErrorSwallower.on_failure_processing","title":"<code>on_failure_processing(_, event_args)</code>","text":"<p>Failure processing event handler.</p> Source code in <code>pyrevitlib/pyrevit/revit/__init__.py</code> <pre><code>def on_failure_processing(self, _, event_args):\n    \"\"\"Failure processing event handler.\"\"\"\n    try:\n        failure_accesssor = event_args.GetFailuresAccessor()\n        mlogger.debug('request for failure processing...')\n        result = event_args.GetProcessingResult()\n        mlogger.debug('current failure processing result: %s', result)\n        result = self._fswallower.preprocess_failures(failure_accesssor)\n        mlogger.debug('setting failure processing results to: %s', result)\n        event_args.SetProcessingResult(result)\n    except Exception as fpex:\n        mlogger.error('Error occured while processing failures. | %s', fpex)\n</code></pre>"},{"location":"reference/pyrevit/revit/#pyrevit.revit.ErrorSwallower.get_swallowed_errors","title":"<code>get_swallowed_errors()</code>","text":"<p>Return swallowed errors.</p> Source code in <code>pyrevitlib/pyrevit/revit/__init__.py</code> <pre><code>def get_swallowed_errors(self):\n    \"\"\"Return swallowed errors.\"\"\"\n    return self._fswallower.get_swallowed_failures()\n</code></pre>"},{"location":"reference/pyrevit/revit/#pyrevit.revit.ErrorSwallower.reset","title":"<code>reset()</code>","text":"<p>Reset swallowed errors.</p> Source code in <code>pyrevitlib/pyrevit/revit/__init__.py</code> <pre><code>def reset(self):\n    \"\"\"Reset swallowed errors.\"\"\"\n    self._fswallower.reset()\n</code></pre>"},{"location":"reference/pyrevit/revit/#pyrevit.revit-functions","title":"Functions","text":""},{"location":"reference/pyrevit/revit/#pyrevit.revit.carryout","title":"<code>carryout(name, doc=None)</code>","text":"<p>Transaction Decorator.</p> <p>Decorate any function with <code>@doc.carryout('Txn name')</code> and the funciton will run within an Transaction context.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the Transaction</p> required <code>doc</code> <code>Document</code> <p>Revit document</p> <code>None</code> <pre><code>@doc.carryout('Do Something')\ndef set_some_parameter(wall, value):\n    wall.parameters['Comments'].value = value\n\n\nset_some_parameter(wall, value)\n</code></pre> Source code in <code>pyrevitlib/pyrevit/revit/db/transaction.py</code> <pre><code>def carryout(name, doc=None):\n    \"\"\"Transaction Decorator.\n\n    Decorate any function with ``@doc.carryout('Txn name')``\n    and the funciton will run within an Transaction context.\n\n    Args:\n        name (str): Name of the Transaction\n        doc (Document): Revit document\n\n    ```python\n    @doc.carryout('Do Something')\n    def set_some_parameter(wall, value):\n        wall.parameters['Comments'].value = value\n\n\n    set_some_parameter(wall, value)\n    ```\n    \"\"\"\n    from functools import wraps\n\n    def wrap(f):\n        @wraps(f)\n        def wrapped_f(*args, **kwargs):\n            with Transaction(name, doc=doc):\n                return_value = f(*args, **kwargs)\n            return return_value\n        return wrapped_f\n    return wrap\n</code></pre>"},{"location":"reference/pyrevit/revit/#pyrevit.revit.serialize","title":"<code>serialize(api_object)</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/pickling.py</code> <pre><code>def serialize(api_object):\n    mlogger.debug('Attemping to serialize: %s', api_object)\n\n    # wrap none in a none serializer for none values\n    if api_object is None:\n        return NoneSerializer()\n\n    # make sure given type is a Revit API type\n    if not api.is_api_object(api_object):\n        raise PyRevitException(\"Only Revit API types are supported.\")\n\n    # get available serializers\n    serializers = coreutils.get_all_subclasses(\n        [Serializable, EnumSerializable]\n        )\n\n    # pick the compatible serializer\n    try:\n        compatible_serializer = \\\n            next(\n                x for x in serializers\n                if x.api_types and isinstance(api_object, x.api_types)\n                )\n        mlogger.debug('Serializer found for: %s', api_object)\n        return compatible_serializer(api_object)\n    except StopIteration:\n        mlogger.debug('Serializer not found for: %s', api_object)\n        # if no deserializer found,\n        # see if given data is iterable\n        # NOTE: commented this out since .serialize should only get api objects\n        # if isinstance(api_object, Iterable):\n        #     mlogger.debug('Iterating over: %s', api_object)\n        #     return _serialize_items(api_object)\n\n        # otherwise throw an exception\n        raise PyRevitException(\n            \"No serializers have been implemented for \\\"%s\\\"\" % repr(api_object)\n            )\n</code></pre>"},{"location":"reference/pyrevit/revit/#pyrevit.revit.deserialize","title":"<code>deserialize(python_object)</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/pickling.py</code> <pre><code>def deserialize(python_object):\n    if isinstance(python_object, Iterable):\n        result_list = []\n        for python_item in python_object:\n            result_list.append(deserialize(python_item))\n        return result_list\n\n    if isinstance(python_object, Serializable):\n        return python_object.deserialize()\n</code></pre>"},{"location":"reference/pyrevit/revit/#pyrevit.revit.get_journals_folder","title":"<code>get_journals_folder()</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/journals.py</code> <pre><code>def get_journals_folder():\n    return op.dirname(HOST_APP.app.RecordingJournalFilename)\n</code></pre>"},{"location":"reference/pyrevit/revit/#pyrevit.revit.get_current_journal_file","title":"<code>get_current_journal_file()</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/journals.py</code> <pre><code>def get_current_journal_file():\n    return HOST_APP.app.RecordingJournalFilename\n</code></pre>"},{"location":"reference/pyrevit/revit/#pyrevit.revit.get_current_session_id","title":"<code>get_current_session_id()</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/journals.py</code> <pre><code>def get_current_session_id():\n    re_finder = re.compile(r'.*&gt;Session\\s+(\\$.{8}).*')\n    journal_file = get_current_journal_file()\n    with open(journal_file, \"r\") as jfile:\n        for jline in reversed(jfile.readlines()):\n            match = re_finder.match(jline)\n            if match:\n                return match.groups()[0]\n</code></pre>"},{"location":"reference/pyrevit/revit/#pyrevit.revit.pick_element","title":"<code>pick_element(message='')</code>","text":"<p>Asks the user to pick an element.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>An optional message to display.</p> <code>''</code> <p>Returns:</p> Type Description <code>Element</code> <p>element selected by the user.</p> Source code in <code>pyrevitlib/pyrevit/revit/selection.py</code> <pre><code>def pick_element(message=''):\n    \"\"\"Asks the user to pick an element.\n\n    Args:\n        message (str): An optional message to display.\n\n    Returns:\n        (Element): element selected by the user.\n    \"\"\"\n    return _pick_obj(UI.Selection.ObjectType.Element,\n                     message)\n</code></pre>"},{"location":"reference/pyrevit/revit/#pyrevit.revit.pick_element_by_category","title":"<code>pick_element_by_category(cat_name_or_builtin, message='')</code>","text":"<p>Returns the element of the specified category picked by the user.</p> <p>Parameters:</p> Name Type Description Default <code>cat_name_or_builtin</code> <code>str</code> <p>name or built-in category of the element to pick.</p> required <code>message</code> <code>str</code> <p>message to display on selection. Defaults to ''.</p> <code>''</code> <p>Returns:</p> Type Description <code>Element</code> <p>picked element.</p> <p>Raises:</p> Type Description <code>PyRevitException</code> <p>If no category matches the specified name or builtin.</p> Source code in <code>pyrevitlib/pyrevit/revit/selection.py</code> <pre><code>def pick_element_by_category(cat_name_or_builtin, message=''):\n    \"\"\"Returns the element of the specified category picked by the user.\n\n    Args:\n        cat_name_or_builtin (str): name or built-in category of the element\n            to pick.\n        message (str, optional): message to display on selection.\n            Defaults to ''.\n\n    Returns:\n        (Element): picked element.\n\n    Raises:\n        PyRevitException: If no category matches the specified name or builtin.\n    \"\"\"\n    category = query.get_category(cat_name_or_builtin)\n    if category:\n        pick_filter = PickByCategorySelectionFilter(category.Id)\n        return _pick_obj(UI.Selection.ObjectType.Element,\n                         message,\n                         selection_filter=pick_filter)\n    else:\n        raise PyRevitException(\"Can not determine category id from: {}\"\n                               .format(cat_name_or_builtin))\n</code></pre>"},{"location":"reference/pyrevit/revit/#pyrevit.revit.pick_elementpoint","title":"<code>pick_elementpoint(message='', world=False)</code>","text":"<p>Returns the element point selected by the user.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>message to display. Defaults to ''.</p> <code>''</code> <code>world</code> <code>bool</code> <p>whether to use world coordinates. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>PointOnElement</code> <p>The selected point.</p> Source code in <code>pyrevitlib/pyrevit/revit/selection.py</code> <pre><code>def pick_elementpoint(message='', world=False):\n    \"\"\"Returns the element point selected by the user.\n\n    Args:\n        message (str, optional): message to display. Defaults to ''.\n        world (bool, optional): whether to use world coordinates. Defaults to False.\n\n    Returns:\n        (PointOnElement): The selected point.\n    \"\"\"\n    return _pick_obj(UI.Selection.ObjectType.PointOnElement,\n                     message,\n                     world=world)\n</code></pre>"},{"location":"reference/pyrevit/revit/#pyrevit.revit.pick_edge","title":"<code>pick_edge(message='')</code>","text":"<p>Returns the edge selected by the user.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>message to display. Defaults to ''.</p> <code>''</code> <p>Returns:</p> Type Description <code>Edge</code> <p>The selected edge.</p> Source code in <code>pyrevitlib/pyrevit/revit/selection.py</code> <pre><code>def pick_edge(message=''):\n    \"\"\"Returns the edge selected by the user.\n\n    Args:\n        message (str, optional): message to display. Defaults to ''.\n\n    Returns:\n        (Edge): The selected edge.\n    \"\"\"\n    return _pick_obj(UI.Selection.ObjectType.Edge,\n                     message)\n</code></pre>"},{"location":"reference/pyrevit/revit/#pyrevit.revit.pick_face","title":"<code>pick_face(message='')</code>","text":"<p>Returns the face selected by the user.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>message to display. Defaults to ''.</p> <code>''</code> <p>Returns:</p> Type Description <code>Face</code> <p>The selected face.</p> Source code in <code>pyrevitlib/pyrevit/revit/selection.py</code> <pre><code>def pick_face(message=''):\n    \"\"\"Returns the face selected by the user.\n\n    Args:\n        message (str, optional): message to display. Defaults to ''.\n\n    Returns:\n        (Face): The selected face.\n    \"\"\"\n    return _pick_obj(UI.Selection.ObjectType.Face,\n                     message)\n</code></pre>"},{"location":"reference/pyrevit/revit/#pyrevit.revit.pick_linked","title":"<code>pick_linked(message='')</code>","text":"<p>Returns the linked element selected by the user.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>message to display. Defaults to ''.</p> <code>''</code> <p>Returns:</p> Type Description <code>LinkedElement</code> <p>The selected linked element.</p> Source code in <code>pyrevitlib/pyrevit/revit/selection.py</code> <pre><code>def pick_linked(message=''):\n    \"\"\"Returns the linked element selected by the user.\n\n    Args:\n        message (str, optional): message to display. Defaults to ''.\n\n    Returns:\n        (LinkedElement): The selected linked element.\n    \"\"\"\n    return _pick_obj(UI.Selection.ObjectType.LinkedElement,\n                     message)\n</code></pre>"},{"location":"reference/pyrevit/revit/#pyrevit.revit.pick_elements","title":"<code>pick_elements(message='')</code>","text":"<p>Asks the user to pick multiple elements.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>An optional message to display.</p> <code>''</code> <p>Returns:</p> Type Description <code>list[Element]</code> <p>elements selected by the user.</p> Source code in <code>pyrevitlib/pyrevit/revit/selection.py</code> <pre><code>def pick_elements(message=''):\n    \"\"\"Asks the user to pick multiple elements.\n\n    Args:\n        message (str): An optional message to display.\n\n    Returns:\n        (list[Element]): elements selected by the user.\n    \"\"\"\n    return _pick_obj(UI.Selection.ObjectType.Element,\n                     message,\n                     multiple=True)\n</code></pre>"},{"location":"reference/pyrevit/revit/#pyrevit.revit.pick_elements_by_category","title":"<code>pick_elements_by_category(cat_name_or_builtin, message='')</code>","text":"<p>Returns the elements of the specified category picked by the user.</p> <p>Parameters:</p> Name Type Description Default <code>cat_name_or_builtin</code> <code>str</code> <p>name or built-in category of the elements to pick.</p> required <code>message</code> <code>str</code> <p>message to display on selection. Defaults to ''.</p> <code>''</code> <p>Returns:</p> Type Description <code>list[Element]</code> <p>picked elements.</p> <p>Raises:</p> Type Description <code>PyRevitException</code> <p>If no category matches the specified name or builtin.</p> Source code in <code>pyrevitlib/pyrevit/revit/selection.py</code> <pre><code>def pick_elements_by_category(cat_name_or_builtin, message=''):\n    \"\"\"Returns the elements of the specified category picked by the user.\n\n    Args:\n        cat_name_or_builtin (str): name or built-in category of the elements\n            to pick.\n        message (str, optional): message to display on selection.\n            Defaults to ''.\n\n    Returns:\n        (list[Element]): picked elements.\n\n    Raises:\n        PyRevitException: If no category matches the specified name or builtin.\n    \"\"\"\n    category = query.get_category(cat_name_or_builtin)\n    if category:\n        pick_filter = PickByCategorySelectionFilter(category.Id)\n        return _pick_obj(UI.Selection.ObjectType.Element,\n                         message,\n                         multiple=True,\n                         selection_filter=pick_filter)\n    else:\n        raise PyRevitException(\"Can not determine category id from: {}\"\n                               .format(cat_name_or_builtin))\n</code></pre>"},{"location":"reference/pyrevit/revit/#pyrevit.revit.get_picked_elements","title":"<code>get_picked_elements(message='')</code>","text":"<p>Allows the user to pick multple elements, one at a time.</p> <p>It keeps asking the user to pick an element until no elements are selected.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The message to display. Defaults to ''.</p> <code>''</code> <p>Yields:</p> Type Description <code>Element</code> <p>selected element</p> Source code in <code>pyrevitlib/pyrevit/revit/selection.py</code> <pre><code>def get_picked_elements(message=''):\n    \"\"\"Allows the user to pick multple elements, one at a time.\n\n    It keeps asking the user to pick an element until no elements are selected.\n\n    Args:\n        message (str, optional): The message to display. Defaults to ''.\n\n    Yields:\n        (DB.Element): selected element\n    \"\"\"\n    picked_element = True\n    while picked_element:\n        picked_element = pick_element(message=message)\n        if not picked_element:\n            break\n        yield picked_element\n</code></pre>"},{"location":"reference/pyrevit/revit/#pyrevit.revit.get_picked_elements_by_category","title":"<code>get_picked_elements_by_category(cat_name_or_builtin, message='')</code>","text":"<p>Pick elements by category.</p> <p>Keeps asking the user to pick an element until no elements are selected.</p> <p>Parameters:</p> Name Type Description Default <code>cat_name_or_builtin</code> <code>str</code> <p>category name or built-in category.</p> required <code>message</code> <code>str</code> <p>message to display while picking elements.</p> <code>''</code> <p>Yields:</p> Type Description <code>Element</code> <p>The picked elements from the specified category.</p> Source code in <code>pyrevitlib/pyrevit/revit/selection.py</code> <pre><code>def get_picked_elements_by_category(cat_name_or_builtin, message=''):\n    \"\"\"Pick elements by category.\n\n    Keeps asking the user to pick an element until no elements are selected.\n\n    Args:\n        cat_name_or_builtin (str): category name or built-in category.\n        message (str, optional): message to display while picking elements.\n\n    Yields:\n        (DB.Element): The picked elements from the specified category.\n    \"\"\"\n    picked_element = True\n    while picked_element:\n        picked_element = pick_element_by_category(cat_name_or_builtin,\n                                                  message=message)\n        if not picked_element:\n            break\n        yield picked_element\n</code></pre>"},{"location":"reference/pyrevit/revit/#pyrevit.revit.pick_elementpoints","title":"<code>pick_elementpoints(message='', world=False)</code>","text":"<p>Selects element points.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The message to display when selecting element points.</p> <code>''</code> <code>world</code> <code>bool</code> <p>Select points in world coordinates. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>list[PointOnElement]</code> <p>selected element points.</p> Source code in <code>pyrevitlib/pyrevit/revit/selection.py</code> <pre><code>def pick_elementpoints(message='', world=False):\n    \"\"\"Selects element points.\n\n    Args:\n        message (str): The message to display when selecting element points.\n        world (bool, optional): Select points in world coordinates. Defaults to False.\n\n    Returns:\n        (list[PointOnElement]): selected element points.\n    \"\"\"\n    return _pick_obj(UI.Selection.ObjectType.PointOnElement,\n                     message,\n                     multiple=True, world=world)\n</code></pre>"},{"location":"reference/pyrevit/revit/#pyrevit.revit.pick_edges","title":"<code>pick_edges(message='')</code>","text":"<p>Selects edges.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The message to display when selecting edges.</p> <code>''</code> <p>Returns:</p> Type Description <code>list[Edge]</code> <p>selected edges.</p> Source code in <code>pyrevitlib/pyrevit/revit/selection.py</code> <pre><code>def pick_edges(message=''):\n    \"\"\"Selects edges.\n\n    Args:\n        message (str): The message to display when selecting edges.\n\n    Returns:\n        (list[Edge]): selected edges.\n    \"\"\"\n    return _pick_obj(UI.Selection.ObjectType.Edge,\n                     message,\n                     multiple=True)\n</code></pre>"},{"location":"reference/pyrevit/revit/#pyrevit.revit.pick_faces","title":"<code>pick_faces(message='')</code>","text":"<p>Selects faces.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The message to display when selecting the faces.</p> <code>''</code> <p>Returns:</p> Type Description <code>list[Face]</code> <p>selected faces.</p> Source code in <code>pyrevitlib/pyrevit/revit/selection.py</code> <pre><code>def pick_faces(message=''):\n    \"\"\"Selects faces.\n\n    Args:\n        message (str): The message to display when selecting the faces.\n\n    Returns:\n        (list[Face]): selected faces.\n    \"\"\"\n    return _pick_obj(UI.Selection.ObjectType.Face,\n                     message,\n                     multiple=True)\n</code></pre>"},{"location":"reference/pyrevit/revit/#pyrevit.revit.pick_linkeds","title":"<code>pick_linkeds(message='')</code>","text":"<p>Selects linked elements.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The message to display when selecting linked elements.</p> <code>''</code> <p>Returns:</p> Type Description <code>list[LinkedElement]</code> <p>selected linked elements.</p> Source code in <code>pyrevitlib/pyrevit/revit/selection.py</code> <pre><code>def pick_linkeds(message=''):\n    \"\"\"Selects linked elements.\n\n    Args:\n        message (str): The message to display when selecting linked elements.\n\n    Returns:\n        (list[LinkedElement]): selected linked elements.\n    \"\"\"\n    return _pick_obj(UI.Selection.ObjectType.LinkedElement,\n                     message,\n                     multiple=True)\n</code></pre>"},{"location":"reference/pyrevit/revit/#pyrevit.revit.pick_point","title":"<code>pick_point(message='')</code>","text":"<p>Pick a point from the user interface.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>A message to display when prompting for the point.</p> <code>''</code> <p>Returns:</p> Type Description <code>tuple or None</code> <p>A tuple representing the picked point as (x, y, z) coordinates, or None if no point was picked or an error occurred.</p> Source code in <code>pyrevitlib/pyrevit/revit/selection.py</code> <pre><code>def pick_point(message=''):\n    \"\"\"Pick a point from the user interface.\n\n    Args:\n        message (str): A message to display when prompting for the point.\n\n    Returns:\n        (tuple or None): A tuple representing the picked point as (x, y, z)\n            coordinates, or None if no point was picked or an error occurred.\n    \"\"\"\n    try:\n        return HOST_APP.uidoc.Selection.PickPoint(message)\n    except Exception:\n        return None\n</code></pre>"},{"location":"reference/pyrevit/revit/#pyrevit.revit.pick_rectangle","title":"<code>pick_rectangle(message='', pick_filter=None)</code>","text":"<p>Picks elements from the user interface by specifying a rectangular area.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>A custom message to display when prompting the user to pick elements. Default is an empty string.</p> <code>''</code> <code>pick_filter</code> <code>object</code> <p>An object specifying the filter to apply when picking elements. Default is None.</p> <code>None</code> <p>Returns:</p> Type Description <code>list[ElementId]</code> <p>The selected elements.</p> Source code in <code>pyrevitlib/pyrevit/revit/selection.py</code> <pre><code>def pick_rectangle(message='', pick_filter=None):\n    \"\"\"Picks elements from the user interface by specifying a rectangular area.\n\n    Args:\n        message (str, optional): A custom message to display when prompting\n            the user to pick elements. Default is an empty string.\n        pick_filter (object, optional): An object specifying the filter to apply\n            when picking elements. Default is None.\n\n    Returns:\n        (list[DB.ElementId]): The selected elements.\n    \"\"\"\n    if pick_filter:\n        return HOST_APP.uidoc.Selection.PickElementsByRectangle(pick_filter,\n                                                                message)\n    else:\n        return HOST_APP.uidoc.Selection.PickElementsByRectangle(message)\n</code></pre>"},{"location":"reference/pyrevit/revit/#pyrevit.revit.get_selection_category_set","title":"<code>get_selection_category_set()</code>","text":"<p>Returns a CategorySet with the categories of the selected elements.</p> <p>Returns:</p> Type Description <code>CategorySet</code> <p>categories of the selected elements.</p> Source code in <code>pyrevitlib/pyrevit/revit/selection.py</code> <pre><code>def get_selection_category_set():\n    \"\"\"Returns a CategorySet with the categories of the selected elements.\n\n    Returns:\n        (CategorySet): categories of the selected elements.\n    \"\"\"\n    selection = ElementSelection()\n    cset = DB.CategorySet()\n    for element in selection:\n        cset.Insert(element.Category)\n    return cset\n</code></pre>"},{"location":"reference/pyrevit/revit/#pyrevit.revit.get_selection","title":"<code>get_selection()</code>","text":"<p>Returns the current selected items.</p> <p>Returns:</p> Type Description <code>ElementSelection</code> <p>the current selected items</p> Source code in <code>pyrevitlib/pyrevit/revit/selection.py</code> <pre><code>def get_selection():\n    \"\"\"Returns the current selected items.\n\n    Returns:\n        (ElementSelection): the current selected items\n    \"\"\"\n    return ElementSelection()\n</code></pre>"},{"location":"reference/pyrevit/revit/#pyrevit.revit.get_imported_symbol","title":"<code>get_imported_symbol(symbol_name)</code>","text":"<p>Geth an imported symbol by its name.</p> <p>Parameters:</p> Name Type Description Default <code>symbol_name</code> <code>str</code> <p>symbol name</p> required <p>Returns:</p> Type Description <code>Any</code> <p>imported symbol, if found, None otherwise.</p> Source code in <code>pyrevitlib/pyrevit/revit/__init__.py</code> <pre><code>def get_imported_symbol(symbol_name):\n    \"\"\"Geth an imported symbol by its name.\n\n    Args:\n        symbol_name (str): symbol name\n\n    Returns:\n        (Any): imported symbol, if found, None otherwise.\n    \"\"\"\n    return globals().get(symbol_name, None)\n</code></pre>"},{"location":"reference/pyrevit/revit/bim360/","title":"bim360","text":"<p>BIM360-related utilities.</p>"},{"location":"reference/pyrevit/revit/bim360/#pyrevit.revit.bim360-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/revit/bim360/#pyrevit.revit.bim360.mlogger","title":"<code>mlogger = get_logger(__name__)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/revit/bim360/#pyrevit.revit.bim360.COLLAB_CACHE_PATH_FORMAT","title":"<code>COLLAB_CACHE_PATH_FORMAT = '%LOCALAPPDATA%/Autodesk/Revit/Autodesk Revit {version}/CollaborationCache'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/revit/bim360/#pyrevit.revit.bim360-classes","title":"Classes","text":""},{"location":"reference/pyrevit/revit/bim360/#pyrevit.revit.bim360.CollabCacheModel","title":"<code>CollabCacheModel(model_path)</code>","text":"<p>               Bases: <code>object</code></p> <p>Collaboration cache for a Revit project.</p> Source code in <code>pyrevitlib/pyrevit/revit/bim360.py</code> <pre><code>def __init__(self, model_path):\n    self.model_path = model_path\n    self.model_dir = op.dirname(model_path)\n    self.model_name_ex = op.basename(model_path)\n    self.model_name = op.splitext(self.model_name_ex)[0]\n\n    self.central_cache_model_path = \\\n        op.join(self.model_dir, 'CentralCache', self.model_name_ex)\n    self.model_backup_path = \\\n        op.join(self.model_dir, '{}_backup'.format(self.model_name))\n\n    try:\n        finfo = files.get_file_info(self.model_path)\n        self.product = finfo.RevitProduct.Name\n        self.project = op.basename(finfo.CentralModelPath)\n    except Exception:\n        self.product = \"?\"\n        self.project = self.model_name_ex\n</code></pre>"},{"location":"reference/pyrevit/revit/bim360/#pyrevit.revit.bim360.CollabCacheModel-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/revit/bim360/#pyrevit.revit.bim360.CollabCacheModel.model_path","title":"<code>model_path = model_path</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/bim360/#pyrevit.revit.bim360.CollabCacheModel.model_dir","title":"<code>model_dir = op.dirname(model_path)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/bim360/#pyrevit.revit.bim360.CollabCacheModel.model_name_ex","title":"<code>model_name_ex = op.basename(model_path)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/bim360/#pyrevit.revit.bim360.CollabCacheModel.model_name","title":"<code>model_name = op.splitext(self.model_name_ex)[0]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/bim360/#pyrevit.revit.bim360.CollabCacheModel.central_cache_model_path","title":"<code>central_cache_model_path = op.join(self.model_dir, 'CentralCache', self.model_name_ex)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/bim360/#pyrevit.revit.bim360.CollabCacheModel.model_backup_path","title":"<code>model_backup_path = op.join(self.model_dir, '{}_backup'.format(self.model_name))</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/bim360/#pyrevit.revit.bim360.CollabCacheModel.product","title":"<code>product = finfo.RevitProduct.Name</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/bim360/#pyrevit.revit.bim360.CollabCacheModel.project","title":"<code>project = op.basename(finfo.CentralModelPath)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/bim360/#pyrevit.revit.bim360.CollabCache","title":"<code>CollabCache(cache_path)</code>","text":"<p>               Bases: <code>object</code></p> <p>Collaboration cache instance containing multiple projects.</p> Source code in <code>pyrevitlib/pyrevit/revit/bim360.py</code> <pre><code>def __init__(self, cache_path):\n    self.cache_path = cache_path\n    self.cache_id = op.basename(cache_path)\n    self.cache_models = []\n    for entry in os.listdir(self.cache_path):\n        if entry.lower().endswith('.rvt'):\n            self.cache_models.append(\n                CollabCacheModel(op.join(cache_path, entry))\n                )\n\n    self.cache_linked_models = []\n    lmodels_path = op.join(self.cache_path, 'LinkedModels')\n    if op.exists(lmodels_path):\n        for entry in os.listdir(lmodels_path):\n            if entry.lower().endswith('.rvt'):\n                self.cache_linked_models.append(\n                    CollabCacheModel(op.join(lmodels_path, entry))\n                    )\n</code></pre>"},{"location":"reference/pyrevit/revit/bim360/#pyrevit.revit.bim360.CollabCache-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/revit/bim360/#pyrevit.revit.bim360.CollabCache.cache_path","title":"<code>cache_path = cache_path</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/bim360/#pyrevit.revit.bim360.CollabCache.cache_id","title":"<code>cache_id = op.basename(cache_path)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/bim360/#pyrevit.revit.bim360.CollabCache.cache_models","title":"<code>cache_models = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/bim360/#pyrevit.revit.bim360.CollabCache.cache_linked_models","title":"<code>cache_linked_models = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/bim360/#pyrevit.revit.bim360-functions","title":"Functions","text":""},{"location":"reference/pyrevit/revit/bim360/#pyrevit.revit.bim360.get_collab_caches","title":"<code>get_collab_caches()</code>","text":"<p>Get a list of project caches stored under collaboration cache.</p> Source code in <code>pyrevitlib/pyrevit/revit/bim360.py</code> <pre><code>def get_collab_caches():\n    \"\"\"Get a list of project caches stored under collaboration cache.\"\"\"\n    collab_root = op.normpath(op.expandvars(\n        COLLAB_CACHE_PATH_FORMAT.format(version=HOST_APP.version)\n    ))\n    mlogger.debug('cache root: %s', collab_root)\n    collab_caches = []\n    if op.exists(collab_root):\n        for cache_root in os.listdir(collab_root):\n            cache_root_path = op.join(collab_root, cache_root)\n            for cache_inst in os.listdir(cache_root_path):\n                cache_inst_path = op.join(cache_root_path, cache_inst)\n                mlogger.debug('cache inst: %s', cache_inst_path)\n                if op.isdir(cache_inst_path):\n                    collab_caches.append(\n                        CollabCache(cache_inst_path)\n                        )\n    return collab_caches\n</code></pre>"},{"location":"reference/pyrevit/revit/bim360/#pyrevit.revit.bim360.clear_model_cache","title":"<code>clear_model_cache(collab_cache_model)</code>","text":"<p>Clear caches for given collaboration cache model.</p> <p>Parameters:</p> Name Type Description Default <code>collab_cache_model</code> <code>CollabCacheModel</code> <p>cache model to clear</p> required Source code in <code>pyrevitlib/pyrevit/revit/bim360.py</code> <pre><code>def clear_model_cache(collab_cache_model):\n    \"\"\"Clear caches for given collaboration cache model.\n\n    Args:\n        collab_cache_model (bim360.CollabCacheModel): cache model to clear\n    \"\"\"\n    if isinstance(collab_cache_model, CollabCacheModel):\n        cm = collab_cache_model\n        mlogger.debug('Deleting %s', cm.model_path)\n        try:\n            if op.exists(cm.model_path):\n                os.remove(cm.model_path)\n        except Exception as cmdel_ex:\n            mlogger.error(\n                'Error deleting model cache @ %s | %s',\n                cm.model_path,\n                str(cmdel_ex)\n                )\n\n        mlogger.debug('Deleting %s', cm.model_backup_path)\n        try:\n            if op.exists(cm.model_backup_path):\n                coreutils.fully_remove_dir(cm.model_backup_path)\n        except Exception as cmbdel_ex:\n            mlogger.error(\n                'Error deleting model backup @ %s | %s',\n                cm.model_backup_path,\n                str(cmbdel_ex)\n                )\n\n        mlogger.debug('Deleting %s', cm.central_cache_model_path)\n        try:\n            if op.exists(cm.central_cache_model_path):\n                os.remove(cm.central_cache_model_path)\n        except Exception as ccmdel_ex:\n            mlogger.error(\n                'Error deleting central model cache @ %s | %s',\n                cm.central_cache_model_path,\n                str(ccmdel_ex)\n                )\n</code></pre>"},{"location":"reference/pyrevit/revit/dc3dserver/","title":"dc3dserver","text":"<p>DirectContext3DServer wrapper and utilities.</p>"},{"location":"reference/pyrevit/revit/dc3dserver/#pyrevit.revit.dc3dserver-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/revit/dc3dserver/#pyrevit.revit.dc3dserver.Edge","title":"<code>Edge = namedtuple('Edge', ['a', 'b', 'color'])</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/revit/dc3dserver/#pyrevit.revit.dc3dserver.Triangle","title":"<code>Triangle = namedtuple('Triangle', ['a', 'b', 'c', 'normal', 'color'])</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/revit/dc3dserver/#pyrevit.revit.dc3dserver-classes","title":"Classes","text":""},{"location":"reference/pyrevit/revit/dc3dserver/#pyrevit.revit.dc3dserver.Mesh","title":"<code>Mesh(edges, triangles)</code>","text":"<p>               Bases: <code>object</code></p> <p>Geometry container class to generate DirectContext3DServer buffers.</p> Source code in <code>pyrevitlib/pyrevit/revit/dc3dserver.py</code> <pre><code>def __init__(self, edges, triangles):\n    if not isinstance(edges, list):\n        raise ValueError(\"List of Edges should be provided\")\n    self.edges = edges\n    if not isinstance(triangles, list):\n        raise ValueError(\"List of Triangles should be provided\")\n    self.triangles = triangles\n\n    vertices = []\n    for edge in self.edges:\n        vertices.extend([edge.a, edge.b])\n    for triangle in self.triangles:\n        vertices.extend([triangle.a, triangle.b, triangle.c])\n    self.vertices = vertices\n</code></pre>"},{"location":"reference/pyrevit/revit/dc3dserver/#pyrevit.revit.dc3dserver.Mesh-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/revit/dc3dserver/#pyrevit.revit.dc3dserver.Mesh.edges","title":"<code>edges = edges</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/dc3dserver/#pyrevit.revit.dc3dserver.Mesh.triangles","title":"<code>triangles = triangles</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/dc3dserver/#pyrevit.revit.dc3dserver.Mesh.vertices","title":"<code>vertices = vertices</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/dc3dserver/#pyrevit.revit.dc3dserver.Mesh-functions","title":"Functions","text":""},{"location":"reference/pyrevit/revit/dc3dserver/#pyrevit.revit.dc3dserver.Mesh.calculate_triangle_normal","title":"<code>calculate_triangle_normal(a, b, c)</code>  <code>staticmethod</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/dc3dserver.py</code> <pre><code>@staticmethod\ndef calculate_triangle_normal(a, b, c):\n    return (c - a).CrossProduct(b - a)\n</code></pre>"},{"location":"reference/pyrevit/revit/dc3dserver/#pyrevit.revit.dc3dserver.Mesh.from_solid","title":"<code>from_solid(doc, solid)</code>  <code>classmethod</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/dc3dserver.py</code> <pre><code>@classmethod\ndef from_solid(cls, doc, solid):\n    try:\n        if not isinstance(solid, DB.Solid):\n            raise TypeError(\"Provided object has to be a Revit Solid!\")\n        triangles = []\n        edges = []\n        for face in solid.Faces:\n            if face.MaterialElementId == DB.ElementId.InvalidElementId:\n                # make it white if material is &lt;By Category&gt;\n                color = DB.ColorWithTransparency(255, 255, 255, 0)\n            else:\n                material = doc.GetElement(face.MaterialElementId)\n                color = DB.ColorWithTransparency(\n                    material.Color.Red,\n                    material.Color.Green,\n                    material.Color.Blue,\n                    int(material.Transparency / 100 * 255)\n                )\n            face_mesh = face.Triangulate()\n            triangle_count = face_mesh.NumTriangles\n            for idx in range(triangle_count):\n                mesh_triangle = face_mesh.get_Triangle(idx)\n                if face_mesh.DistributionOfNormals == \\\n                        DB.DistributionOfNormals.OnePerFace:\n                    normal = face_mesh.GetNormal(0)\n                elif face_mesh.DistributionOfNormals == \\\n                        DB.DistributionOfNormals.OnEachFacet:\n                    normal = face_mesh.GetNormal(idx)\n                elif face_mesh.DistributionOfNormals == \\\n                        DB.DistributionOfNormals.AtEachPoint:\n                    normal = (\n                        face_mesh.GetNormal(mesh_triangle.get_Index(0)) +\n                        face_mesh.GetNormal(mesh_triangle.get_Index(1)) +\n                        face_mesh.GetNormal(mesh_triangle.get_Index(2))\n                    ).Normalize()\n                triangles.append(\n                    Triangle(\n                        mesh_triangle.get_Vertex(0),\n                        mesh_triangle.get_Vertex(1),\n                        mesh_triangle.get_Vertex(2),\n                        normal,\n                        color\n                    )\n                )\n        for edge in solid.Edges:\n            pts = edge.Tessellate()\n            for idx in range(len(pts)-1):\n                edges.append(\n                    Edge(\n                        pts[idx],\n                        pts[idx+1],\n                        DB.ColorWithTransparency(0,0,0,0)\n                    )\n                )\n        return cls(edges, triangles)\n    except:\n        print(traceback.format_exc())\n</code></pre>"},{"location":"reference/pyrevit/revit/dc3dserver/#pyrevit.revit.dc3dserver.Mesh.from_boundingbox","title":"<code>from_boundingbox(bounding_box, color, black_edges=True)</code>  <code>classmethod</code>","text":"<p>Generates a Mesh object from the input BoundigBoxXYZ.</p> <p>Parameters:</p> Name Type Description Default <code>bounding_box</code> <code>BoundingBoxXYZ</code> <p>The source object.</p> required <code>color</code> <code>ColorWithTransparency</code> <p>The desired color.</p> required <code>black_edges</code> <code>bool</code> <p>To have black edges instead of the provided color. Defaults to True.</p> <code>True</code> <p>Returns:</p> Type Description <code>Mesh</code> <p>The resulting Mesh</p> Source code in <code>pyrevitlib/pyrevit/revit/dc3dserver.py</code> <pre><code>@classmethod\ndef from_boundingbox(cls, bounding_box, color, black_edges = True):\n    \"\"\"Generates a Mesh object from the input BoundigBoxXYZ.\n\n    Args:\n        bounding_box (DB.BoundingBoxXYZ): The source object.\n        color (DB.ColorWithTransparency): The desired color.\n        black_edges (bool, optional):\n            To have black edges instead of the provided color.\n            Defaults to True.\n\n    Returns:\n        (Mesh): The resulting Mesh\n    \"\"\"\n    try:\n        # get all untransformed vertices of the boundingbox\n        vertices = [\n            [\n                DB.XYZ(\n                    bounding_box.Min.X,\n                    bounding_box.Min.Y,\n                    bounding_box.Min.Z\n                ),\n                DB.XYZ(\n                    bounding_box.Min.X,\n                    bounding_box.Max.Y,\n                    bounding_box.Min.Z\n                ),\n                DB.XYZ(\n                    bounding_box.Max.X,\n                    bounding_box.Max.Y,\n                    bounding_box.Min.Z\n                ),\n                DB.XYZ(\n                    bounding_box.Max.X,\n                    bounding_box.Min.Y,\n                    bounding_box.Min.Z\n                ),\n            ],\n            [\n                DB.XYZ(\n                    bounding_box.Min.X,\n                    bounding_box.Min.Y,\n                    bounding_box.Max.Z\n                ),\n                DB.XYZ(\n                    bounding_box.Min.X,\n                    bounding_box.Max.Y,\n                    bounding_box.Max.Z\n                ),\n                DB.XYZ(\n                    bounding_box.Max.X,\n                    bounding_box.Max.Y,\n                    bounding_box.Max.Z\n                ),\n                DB.XYZ(\n                    bounding_box.Max.X,\n                    bounding_box.Min.Y,\n                    bounding_box.Max.Z\n                )\n            ]\n        ]\n        # apply it's transform if it has any\n        vertices = [\n            [bounding_box.Transform.OfPoint(pt) for pt in vertices[idx]]\n            for idx in range(len(vertices))\n        ]\n\n        if black_edges:\n            edge_color = DB.ColorWithTransparency(0,0,0,0)\n        else:\n            edge_color = color\n\n        edges = []\n        # creating top and bottom face triangles\n        triangles = [\n                Triangle(\n                    vertices[0][0],\n                    vertices[0][2],\n                    vertices[0][1],\n                    Mesh.calculate_triangle_normal(\n                        vertices[0][0],\n                        vertices[0][2],\n                        vertices[0][1]\n                    ),\n                    color),\n                Triangle(\n                    vertices[0][0],\n                    vertices[0][3],\n                    vertices[0][2],\n                    Mesh.calculate_triangle_normal(\n                        vertices[0][0],\n                        vertices[0][3],\n                        vertices[0][2]\n                    ),\n                    color),\n                Triangle(\n                    vertices[1][0],\n                    vertices[1][1],\n                    vertices[1][2],\n                    Mesh.calculate_triangle_normal(\n                        vertices[1][0],\n                        vertices[1][1],\n                        vertices[1][2]\n                    ),\n                    color),\n                Triangle(\n                    vertices[1][0],\n                    vertices[1][2],\n                    vertices[1][3],\n                    Mesh.calculate_triangle_normal(\n                        vertices[1][0],\n                        vertices[1][2],\n                        vertices[1][3]\n                    ),\n                    color)\n        ]\n\n        # creating edges and face triangles for the sides\n        for idx in range(4):\n            edges.extend([\n                Edge(vertices[0][idx], vertices[1][idx], edge_color),\n                Edge(vertices[0][idx], vertices[0][idx-1], edge_color),\n                Edge(vertices[1][idx], vertices[1][idx-1], edge_color)\n            ])\n            triangles.extend([\n                Triangle(\n                    vertices[0][idx],\n                    vertices[1][idx],\n                    vertices[0][idx-1],\n                    Mesh.calculate_triangle_normal(\n                        vertices[0][idx],\n                        vertices[1][idx],\n                        vertices[0][idx-1]\n                    ),\n                    color),\n                Triangle(\n                    vertices[1][idx],\n                    vertices[1][idx-1],\n                    vertices[0][idx-1],\n                    Mesh.calculate_triangle_normal(\n                        vertices[1][idx],\n                        vertices[1][idx-1],\n                        vertices[0][idx-1]\n                    ),\n                    color)\n            ])\n\n        return cls(edges, triangles)\n    except Exception:\n        print(traceback.format_exc())\n</code></pre>"},{"location":"reference/pyrevit/revit/dc3dserver/#pyrevit.revit.dc3dserver.Buffer","title":"<code>Buffer(display_style, vertex_buffer, vertex_count, index_buffer, index_count, vertex_format, effect_instance, primitive_type, start, primitive_count)</code>","text":"<p>               Bases: <code>object</code></p> <p>Buffer container for DirectContext3DServer.</p> Source code in <code>pyrevitlib/pyrevit/revit/dc3dserver.py</code> <pre><code>def __init__(self,\n             display_style,\n             vertex_buffer,\n             vertex_count,\n             index_buffer,\n             index_count,\n             vertex_format,\n             effect_instance,\n             primitive_type,\n             start,\n             primitive_count):\n    self.display_style = display_style\n    self.vertex_buffer = vertex_buffer\n    self.vertex_count = vertex_count\n    self.index_buffer = index_buffer\n    self.index_count = index_count\n    self.vertex_format = vertex_format\n    self.effect_instance = effect_instance\n    self.primitive_type = primitive_type\n    self.start = start\n    self.primitive_count = primitive_count\n</code></pre>"},{"location":"reference/pyrevit/revit/dc3dserver/#pyrevit.revit.dc3dserver.Buffer-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/revit/dc3dserver/#pyrevit.revit.dc3dserver.Buffer.display_style","title":"<code>display_style = display_style</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/dc3dserver/#pyrevit.revit.dc3dserver.Buffer.vertex_buffer","title":"<code>vertex_buffer = vertex_buffer</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/dc3dserver/#pyrevit.revit.dc3dserver.Buffer.vertex_count","title":"<code>vertex_count = vertex_count</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/dc3dserver/#pyrevit.revit.dc3dserver.Buffer.index_buffer","title":"<code>index_buffer = index_buffer</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/dc3dserver/#pyrevit.revit.dc3dserver.Buffer.index_count","title":"<code>index_count = index_count</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/dc3dserver/#pyrevit.revit.dc3dserver.Buffer.vertex_format","title":"<code>vertex_format = vertex_format</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/dc3dserver/#pyrevit.revit.dc3dserver.Buffer.effect_instance","title":"<code>effect_instance = effect_instance</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/dc3dserver/#pyrevit.revit.dc3dserver.Buffer.primitive_type","title":"<code>primitive_type = primitive_type</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/dc3dserver/#pyrevit.revit.dc3dserver.Buffer.start","title":"<code>start = start</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/dc3dserver/#pyrevit.revit.dc3dserver.Buffer.primitive_count","title":"<code>primitive_count = primitive_count</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/dc3dserver/#pyrevit.revit.dc3dserver.Buffer-functions","title":"Functions","text":""},{"location":"reference/pyrevit/revit/dc3dserver/#pyrevit.revit.dc3dserver.Buffer.is_valid","title":"<code>is_valid(display_style)</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/dc3dserver.py</code> <pre><code>def is_valid(self, display_style):\n    return all([\n        self.display_style == display_style,\n        self.vertex_buffer.IsValid,\n        self.index_buffer.IsValid,\n        self.vertex_format.IsValid,\n        self.effect_instance.IsValid\n    ])\n</code></pre>"},{"location":"reference/pyrevit/revit/dc3dserver/#pyrevit.revit.dc3dserver.Buffer.build_edge_buffer","title":"<code>build_edge_buffer(display_style, meshes)</code>  <code>classmethod</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/dc3dserver.py</code> <pre><code>@classmethod\ndef build_edge_buffer(cls, display_style, meshes):\n    try:\n        if not meshes:\n            return\n        edges = [\n            edge for edges in [m.edges for m in meshes]\n            for edge in edges\n        ]\n\n        format_bits = dc3d.VertexFormatBits.PositionColored\n        vertex_format = dc3d.VertexFormat(format_bits)\n\n        effect_instance = dc3d.EffectInstance(format_bits)\n\n        vertex_count = (dc3d.VertexPositionColored.GetSizeInFloats()\n                        * len(edges) * 2)\n        vertex_buffer = dc3d.VertexBuffer(vertex_count)\n\n        index_count = dc3d.IndexLine.GetSizeInShortInts() * len(edges)\n        index_buffer = dc3d.IndexBuffer(index_count)\n\n        vertex_buffer.Map(vertex_count)\n        index_buffer.Map(index_count)\n        vertex_stream_pos = vertex_buffer.GetVertexStreamPositionColored()\n        index_stream_pos = index_buffer.GetIndexStreamLine()\n        for edge in edges:\n            edge_index = edges.index(edge)\n            first_idx = edge_index * 2\n            vertex_stream_pos.AddVertex(dc3d.VertexPositionColored(\n                edge.a, edge.color\n            ))\n            vertex_stream_pos.AddVertex(dc3d.VertexPositionColored(\n                edge.b, edge.color\n            ))\n            index_stream_pos.AddLine(dc3d.IndexLine(\n                first_idx,\n                first_idx + 1\n            ))\n        vertex_buffer.Unmap()\n        index_buffer.Unmap()\n\n        return cls(\n            display_style,\n            vertex_buffer,\n            vertex_count,\n            index_buffer,\n            index_count,\n            vertex_format,\n            effect_instance,\n            dc3d.PrimitiveType.LineList,\n            0,\n            len(edges)\n        )\n    except:\n        print(traceback.format_exc())\n</code></pre>"},{"location":"reference/pyrevit/revit/dc3dserver/#pyrevit.revit.dc3dserver.Buffer.build_triangle_buffer","title":"<code>build_triangle_buffer(display_style, meshes, transparent=False)</code>  <code>classmethod</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/dc3dserver.py</code> <pre><code>@classmethod\ndef build_triangle_buffer(cls, display_style, meshes, transparent = False):\n    try:\n        if not meshes:\n            return\n        triangles = [\n            triangle for triangles in [m.triangles for m in meshes]\n            for triangle in triangles\n            if transparent == (triangle.color.GetTransparency() &gt; 0)\n        ]\n\n        if not triangles:\n            return\n\n        shaded = any([\n                display_style == DB.DisplayStyle.Shading,\n                display_style == DB.DisplayStyle.ShadingWithEdges\n        ])\n\n        format_bits = dc3d.VertexFormatBits.PositionNormalColored\n        vertex_format = dc3d.VertexFormat(format_bits)\n\n        if shaded:\n            effect_instance = dc3d.EffectInstance(\n                dc3d.VertexFormatBits.PositionNormalColored\n            )\n        else:\n            effect_instance = dc3d.EffectInstance(\n                dc3d.VertexFormatBits.PositionColored\n            )\n\n        vertex_count = (dc3d.VertexPositionNormalColored.GetSizeInFloats()\n                        * len(triangles) * 3)\n        vertex_buffer = dc3d.VertexBuffer(vertex_count)\n\n        index_count = (dc3d.IndexTriangle.GetSizeInShortInts()\n                       * len(triangles))\n        index_buffer = dc3d.IndexBuffer(index_count)\n\n        vertex_buffer.Map(vertex_count)\n        index_buffer.Map(index_count)\n        vertex_stream_pos = (vertex_buffer\n                             .GetVertexStreamPositionNormalColored())\n        index_stream_pos = index_buffer.GetIndexStreamTriangle()\n        for triangle in triangles:\n            if display_style == DB.DisplayStyle.HLR:\n                color = DB.ColorWithTransparency(\n                    255, 255, 255, triangle.color.GetTransparency()\n                )\n            else:\n                color = triangle.color\n            normal = triangle.normal\n            triangle_index = triangles.index(triangle)\n            first_idx = triangle_index * 3\n            vertex_stream_pos.AddVertex(dc3d.VertexPositionNormalColored(\n                triangle.a, normal, color\n            ))\n            vertex_stream_pos.AddVertex(dc3d.VertexPositionNormalColored(\n                triangle.b, normal, color\n            ))\n            vertex_stream_pos.AddVertex(dc3d.VertexPositionNormalColored(\n                triangle.c, normal, color\n            ))\n            index_stream_pos.AddTriangle(dc3d.IndexTriangle(\n                first_idx,\n                first_idx + 1,\n                first_idx + 2\n            ))\n        vertex_buffer.Unmap()\n        index_buffer.Unmap()\n\n        return cls(\n            display_style,\n            vertex_buffer,\n            vertex_count,\n            index_buffer,\n            index_count,\n            vertex_format,\n            effect_instance,\n            dc3d.PrimitiveType.TriangleList,\n            0,\n            len(triangles)\n        )\n    except:\n        print(traceback.format_exc())\n</code></pre>"},{"location":"reference/pyrevit/revit/dc3dserver/#pyrevit.revit.dc3dserver.Buffer.flush","title":"<code>flush()</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/dc3dserver.py</code> <pre><code>def flush(self):\n    dc3d.DrawContext.FlushBuffer(\n        self.vertex_buffer,\n        self.vertex_count,\n        self.index_buffer,\n        self.index_count,\n        self.vertex_format,\n        self.effect_instance,\n        self.primitive_type,\n        self.start,\n        self.primitive_count\n    )\n</code></pre>"},{"location":"reference/pyrevit/revit/dc3dserver/#pyrevit.revit.dc3dserver.Server","title":"<code>Server(guid=None, uidoc=None, name='pyRevit DirectContext3DServer', description='Displaying temporary geometries', vendor_id='pyRevit', register=True)</code>","text":"<p>               Bases: <code>IDirectContext3DServer</code></p> <p>A generic DirectContext3dServer interface implementation.</p> <p>Initalize a DirectContext3DServer instance.</p> <p>Parameters:</p> Name Type Description Default <code>guid</code> <code>Guid</code> <p>The guid of the server, auto-generated if None. Defaults to None.</p> <code>None</code> <code>uidoc</code> <code>UIDocument</code> <p>Required only, if the geometry is Document specific. Defaults to None.</p> <code>None</code> <code>name</code> <code>str</code> <p>The name of the server. Defaults to \"pyRevit DirectContext3DServer\".</p> <code>'pyRevit DirectContext3DServer'</code> <code>description</code> <code>str</code> <p>The descritpion of the server. Defaults to \"Displaying temporary geometries\".</p> <code>'Displaying temporary geometries'</code> <code>vendor_id</code> <code>str</code> <p>The name of the vendor. Defaults to \"pyRevit\".</p> <code>'pyRevit'</code> <code>register</code> <code>bool</code> <p>To register the server on initalization. Defaults to True.</p> <code>True</code> Source code in <code>pyrevitlib/pyrevit/revit/dc3dserver.py</code> <pre><code>def __init__(\n        self,\n        guid=None,\n        uidoc=None,\n        name=\"pyRevit DirectContext3DServer\",\n        description=\"Displaying temporary geometries\",\n        vendor_id=\"pyRevit\",\n        register=True\n):\n    \"\"\"Initalize a DirectContext3DServer instance.\n\n    Args:\n        guid (System.Guid, optional):\n            The guid of the server, auto-generated if None.\n            Defaults to None.\n        uidoc (UI.UIDocument, optional):\n            Required only, if the geometry is Document specific.\n            Defaults to None.\n        name (str, optional):\n            The name of the server.\n            Defaults to \"pyRevit DirectContext3DServer\".\n        description (str, optional):\n            The descritpion of the server.\n            Defaults to \"Displaying temporary geometries\".\n        vendor_id (str, optional):\n            The name of the vendor. Defaults to \"pyRevit\".\n        register (bool, optional):\n            To register the server on initalization.\n            Defaults to True.\n    \"\"\"\n    try:\n        if guid is None:\n            self.guid = Guid.NewGuid()\n        else:\n            self.guid = guid\n        self.uidoc = uidoc\n        self.name = name\n        self.description = description\n        self.vendor_id = vendor_id\n        self.meshes = []\n        self._line_buffer = None\n        self._transparent_buffer = None\n        self._opaque_buffer = None\n        self.enabled_view_types = [\n            DB.ViewType.ThreeD,\n            DB.ViewType.Elevation,\n            DB.ViewType.Section,\n            DB.ViewType.FloorPlan,\n            DB.ViewType.CeilingPlan,\n            DB.ViewType.EngineeringPlan\n        ]\n\n        if register:\n            self.add_server()\n\n    except Exception:\n        print(traceback.format_exc())\n</code></pre>"},{"location":"reference/pyrevit/revit/dc3dserver/#pyrevit.revit.dc3dserver.Server-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/revit/dc3dserver/#pyrevit.revit.dc3dserver.Server.guid","title":"<code>guid = Guid.NewGuid()</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/dc3dserver/#pyrevit.revit.dc3dserver.Server.uidoc","title":"<code>uidoc = uidoc</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/dc3dserver/#pyrevit.revit.dc3dserver.Server.name","title":"<code>name = name</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/dc3dserver/#pyrevit.revit.dc3dserver.Server.description","title":"<code>description = description</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/dc3dserver/#pyrevit.revit.dc3dserver.Server.vendor_id","title":"<code>vendor_id = vendor_id</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/dc3dserver/#pyrevit.revit.dc3dserver.Server.enabled_view_types","title":"<code>enabled_view_types = [DB.ViewType.ThreeD, DB.ViewType.Elevation, DB.ViewType.Section, DB.ViewType.FloorPlan, DB.ViewType.CeilingPlan, DB.ViewType.EngineeringPlan]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/dc3dserver/#pyrevit.revit.dc3dserver.Server.meshes","title":"<code>meshes</code>  <code>property</code> <code>writable</code>","text":"<p>The container for the source geometries.</p>"},{"location":"reference/pyrevit/revit/dc3dserver/#pyrevit.revit.dc3dserver.Server-functions","title":"Functions","text":""},{"location":"reference/pyrevit/revit/dc3dserver/#pyrevit.revit.dc3dserver.Server.CanExecute","title":"<code>CanExecute(view)</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/dc3dserver.py</code> <pre><code>def CanExecute(self, view):\n    if any(vt == view.ViewType for vt in self.enabled_view_types):\n        if self.uidoc is not None:\n            return self.uidoc.Document.Equals(view.Document)\n        return True\n    return False\n</code></pre>"},{"location":"reference/pyrevit/revit/dc3dserver/#pyrevit.revit.dc3dserver.Server.GetApplicationId","title":"<code>GetApplicationId()</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/dc3dserver.py</code> <pre><code>def GetApplicationId(self):\n    return \"\"\n</code></pre>"},{"location":"reference/pyrevit/revit/dc3dserver/#pyrevit.revit.dc3dserver.Server.GetBoundingBox","title":"<code>GetBoundingBox(view)</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/dc3dserver.py</code> <pre><code>def GetBoundingBox(self, view):\n    try:\n        if not self.meshes:\n            return\n\n        vertices = [\n            vertex for vertices in [m.vertices for m in self.meshes]\n            for vertex in vertices\n        ]\n\n        if not len(vertices) &gt; 1:\n            return\n\n        outline = DB.Outline(vertices[0], vertices[1])\n\n        for idx in range(2, len(vertices)):\n            outline.AddPoint(vertices[idx])\n\n        return outline\n    except:\n        print(traceback.format_exc())\n</code></pre>"},{"location":"reference/pyrevit/revit/dc3dserver/#pyrevit.revit.dc3dserver.Server.GetDescription","title":"<code>GetDescription()</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/dc3dserver.py</code> <pre><code>def GetDescription(self):\n    return self.description\n</code></pre>"},{"location":"reference/pyrevit/revit/dc3dserver/#pyrevit.revit.dc3dserver.Server.GetName","title":"<code>GetName()</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/dc3dserver.py</code> <pre><code>def GetName(self):\n    return self.name\n</code></pre>"},{"location":"reference/pyrevit/revit/dc3dserver/#pyrevit.revit.dc3dserver.Server.GetServerId","title":"<code>GetServerId()</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/dc3dserver.py</code> <pre><code>def GetServerId(self):\n    return self.guid\n</code></pre>"},{"location":"reference/pyrevit/revit/dc3dserver/#pyrevit.revit.dc3dserver.Server.GetServiceId","title":"<code>GetServiceId()</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/dc3dserver.py</code> <pre><code>def GetServiceId(self):\n    return ( es.ExternalServices\n            .BuiltInExternalServices.DirectContext3DService)\n</code></pre>"},{"location":"reference/pyrevit/revit/dc3dserver/#pyrevit.revit.dc3dserver.Server.GetSourceId","title":"<code>GetSourceId()</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/dc3dserver.py</code> <pre><code>def GetSourceId(self):\n    return \"\"\n</code></pre>"},{"location":"reference/pyrevit/revit/dc3dserver/#pyrevit.revit.dc3dserver.Server.GetVendorId","title":"<code>GetVendorId()</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/dc3dserver.py</code> <pre><code>def GetVendorId(self):\n    return self.vendor_id\n</code></pre>"},{"location":"reference/pyrevit/revit/dc3dserver/#pyrevit.revit.dc3dserver.Server.UsesHandles","title":"<code>UsesHandles()</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/dc3dserver.py</code> <pre><code>def UsesHandles(self):\n    return False\n</code></pre>"},{"location":"reference/pyrevit/revit/dc3dserver/#pyrevit.revit.dc3dserver.Server.UseInTransparentPass","title":"<code>UseInTransparentPass(view)</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/dc3dserver.py</code> <pre><code>def UseInTransparentPass(self, view):\n    return True\n</code></pre>"},{"location":"reference/pyrevit/revit/dc3dserver/#pyrevit.revit.dc3dserver.Server.RenderScene","title":"<code>RenderScene(view, display_style)</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/dc3dserver.py</code> <pre><code>def RenderScene(self, view, display_style):\n    try:\n        if self.meshes:\n            if all([\n                self._line_buffer is None,\n                self._opaque_buffer is None,\n                self._transparent_buffer is None\n            ]) or any([\n                (self._line_buffer is not None\n                    and not self._line_buffer.is_valid(display_style)),\n                (self._opaque_buffer is not None\n                    and not self._opaque_buffer.is_valid(display_style)),\n                (self._transparent_buffer is not None\n                    and not self._transparent_buffer.is_valid(display_style))\n            ]):\n                self.update_buffers(display_style)\n\n            if dc3d.DrawContext.IsTransparentPass():\n                if (self._transparent_buffer is not None\n                        and display_style != DB.DisplayStyle.Wireframe):\n                    self._transparent_buffer.flush()\n            else:\n                if (self._opaque_buffer is not None\n                        and display_style != DB.DisplayStyle.Wireframe):\n                    self._opaque_buffer.flush()\n                if (self._line_buffer is not None\n                        and display_style != DB.DisplayStyle.Rendering\n                        and display_style != DB.DisplayStyle.Shading):\n                    self._line_buffer.flush()\n    except:\n        print(traceback.format_exc())\n</code></pre>"},{"location":"reference/pyrevit/revit/dc3dserver/#pyrevit.revit.dc3dserver.Server.add_server","title":"<code>add_server()</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/dc3dserver.py</code> <pre><code>def add_server(self):\n    service = es.ExternalServiceRegistry.GetService(self.GetServiceId())\n    # check for leftovers\n    if service.IsRegisteredServerId(self.GetServerId()):\n        self.remove_server()\n    service.AddServer(self)\n    server_ids = service.GetActiveServerIds()\n    server_ids.Add(self.GetServerId())\n    service.SetActiveServers(server_ids)\n</code></pre>"},{"location":"reference/pyrevit/revit/dc3dserver/#pyrevit.revit.dc3dserver.Server.remove_server","title":"<code>remove_server()</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/dc3dserver.py</code> <pre><code>def remove_server(self):\n    service = es.ExternalServiceRegistry.GetService(self.GetServiceId())\n    if service.IsRegisteredServerId(self.GetServerId()):\n        service.RemoveServer(self.GetServerId())\n</code></pre>"},{"location":"reference/pyrevit/revit/dc3dserver/#pyrevit.revit.dc3dserver.Server.update_buffers","title":"<code>update_buffers(display_style)</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/dc3dserver.py</code> <pre><code>def update_buffers(self, display_style):\n    self._line_buffer = Buffer.build_edge_buffer(display_style, self.meshes)\n    self._opaque_buffer = Buffer.build_triangle_buffer(\n        display_style, self.meshes, transparent=False)\n    self._transparent_buffer = Buffer.build_triangle_buffer(\n        display_style, self.meshes, transparent=True)\n</code></pre>"},{"location":"reference/pyrevit/revit/events/","title":"events","text":"<p>Revit events handler management.</p>"},{"location":"reference/pyrevit/revit/events/#pyrevit.revit.events-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/revit/events/#pyrevit.revit.events.mlogger","title":"<code>mlogger = get_logger(__name__)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/revit/events/#pyrevit.revit.events.REGISTERED_HANDLERS","title":"<code>REGISTERED_HANDLERS = {}</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/revit/events/#pyrevit.revit.events.HANDLER_UNREGISTERER","title":"<code>HANDLER_UNREGISTERER = FuncAsEventHandler(unregister_exec_handlers, purge=False)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/revit/events/#pyrevit.revit.events.HANDLER_UNREGISTERER_EXTEVENT","title":"<code>HANDLER_UNREGISTERER_EXTEVENT = UI.ExternalEvent.Create(HANDLER_UNREGISTERER)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/revit/events/#pyrevit.revit.events-classes","title":"Classes","text":""},{"location":"reference/pyrevit/revit/events/#pyrevit.revit.events.FuncAsEventHandler","title":"<code>FuncAsEventHandler(handler_func, purge=True)</code>","text":"<p>               Bases: <code>IExternalEventHandler</code></p> <p>Turns a function into an event handler.</p> Source code in <code>pyrevitlib/pyrevit/revit/events.py</code> <pre><code>def __init__(self, handler_func, purge=True):\n    self.name = 'FuncAsEventHandler'\n    self.handler_group_id = None\n    self.handler_func = handler_func\n    self.purge = purge\n</code></pre>"},{"location":"reference/pyrevit/revit/events/#pyrevit.revit.events.FuncAsEventHandler-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/revit/events/#pyrevit.revit.events.FuncAsEventHandler.name","title":"<code>name = 'FuncAsEventHandler'</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/events/#pyrevit.revit.events.FuncAsEventHandler.handler_group_id","title":"<code>handler_group_id = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/events/#pyrevit.revit.events.FuncAsEventHandler.handler_func","title":"<code>handler_func = handler_func</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/events/#pyrevit.revit.events.FuncAsEventHandler.purge","title":"<code>purge = purge</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/events/#pyrevit.revit.events.FuncAsEventHandler-functions","title":"Functions","text":""},{"location":"reference/pyrevit/revit/events/#pyrevit.revit.events.FuncAsEventHandler.Execute","title":"<code>Execute(uiapp)</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/events.py</code> <pre><code>def Execute(self, uiapp):\n    if self.handler_func and self.handler_group_id:\n        self.handler_func(self.handler_group_id)\n        if self.purge:\n            self.handler_group_id = self.handler_func = None\n</code></pre>"},{"location":"reference/pyrevit/revit/events/#pyrevit.revit.events.FuncAsEventHandler.GetName","title":"<code>GetName()</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/events.py</code> <pre><code>def GetName(self):\n    return self.name\n</code></pre>"},{"location":"reference/pyrevit/revit/events/#pyrevit.revit.events-functions","title":"Functions","text":""},{"location":"reference/pyrevit/revit/events/#pyrevit.revit.events.create_handler","title":"<code>create_handler(handler_func, handler_args_type)</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/events.py</code> <pre><code>def create_handler(handler_func, handler_args_type):\n    return framework.EventHandler[handler_args_type](handler_func)\n</code></pre>"},{"location":"reference/pyrevit/revit/events/#pyrevit.revit.events.add_handler","title":"<code>add_handler(event_name, handler_func)</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/events.py</code> <pre><code>def add_handler(event_name, handler_func):\n    event_handler = None\n\n    if event_name == 'doc-changed':\n        event_handler = \\\n            create_handler(handler_func, DB.Events.DocumentChangedEventArgs)\n        HOST_APP.app.DocumentChanged += event_handler\n\n    elif event_name == 'doc-closed':\n        event_handler = \\\n            create_handler(handler_func, DB.Events.DocumentClosedEventArgs)\n        HOST_APP.app.DocumentClosed += event_handler\n\n    elif event_name == 'doc-opened':\n        event_handler = \\\n            create_handler(handler_func, DB.Events.DocumentOpenedEventArgs)\n        HOST_APP.app.DocumentOpened += event_handler\n\n    elif event_name == 'view-activated':\n        event_handler = \\\n            create_handler(handler_func, UI.Events.ViewActivatedEventArgs)\n        HOST_APP.uiapp.ViewActivated += event_handler\n\n    return event_handler\n</code></pre>"},{"location":"reference/pyrevit/revit/events/#pyrevit.revit.events.remove_handler","title":"<code>remove_handler(event_name, event_handler)</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/events.py</code> <pre><code>def remove_handler(event_name, event_handler):\n    if event_name == 'doc-changed':\n        HOST_APP.app.DocumentChanged -= event_handler\n\n    elif event_name == 'doc-closed':\n        HOST_APP.app.DocumentClosed -= event_handler\n\n    elif event_name == 'doc-opened':\n        HOST_APP.app.DocumentOpened -= event_handler\n\n    elif event_name == 'view-activated':\n        HOST_APP.uiapp.ViewActivated -= event_handler\n</code></pre>"},{"location":"reference/pyrevit/revit/events/#pyrevit.revit.events.register_handler","title":"<code>register_handler(event_name, handler_func, handler_group_id)</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/events.py</code> <pre><code>def register_handler(event_name, handler_func, handler_group_id):\n    if handler_group_id not in REGISTERED_HANDLERS:\n        REGISTERED_HANDLERS[handler_group_id] = {}\n    event_handler = add_handler(event_name, handler_func)\n    if event_handler:\n        REGISTERED_HANDLERS[handler_group_id][event_name] = event_handler\n</code></pre>"},{"location":"reference/pyrevit/revit/events/#pyrevit.revit.events.unregister_handler","title":"<code>unregister_handler(event_name, handler_func, handler_group_id)</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/events.py</code> <pre><code>def unregister_handler(event_name, handler_func, handler_group_id):\n    if handler_group_id in REGISTERED_HANDLERS \\\n            and event_name in REGISTERED_HANDLERS[handler_group_id]:\n        event_handler = REGISTERED_HANDLERS[handler_group_id].pop(event_name)\n        remove_handler(event_name, event_handler)\n</code></pre>"},{"location":"reference/pyrevit/revit/events/#pyrevit.revit.events.unregister_exec_handlers","title":"<code>unregister_exec_handlers(handler_group_id)</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/events.py</code> <pre><code>def unregister_exec_handlers(handler_group_id):\n    if handler_group_id in REGISTERED_HANDLERS:\n        for event_name, handler_func in \\\n                REGISTERED_HANDLERS[handler_group_id].items():\n            unregister_handler(event_name, handler_func, handler_group_id)\n</code></pre>"},{"location":"reference/pyrevit/revit/events/#pyrevit.revit.events.delayed_unregister_exec_handlers","title":"<code>delayed_unregister_exec_handlers(handler_group_id)</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/events.py</code> <pre><code>def delayed_unregister_exec_handlers(handler_group_id):\n    HANDLER_UNREGISTERER.handler_group_id = handler_group_id\n    HANDLER_UNREGISTERER_EXTEVENT.Raise()\n</code></pre>"},{"location":"reference/pyrevit/revit/events/#pyrevit.revit.events.handle","title":"<code>handle(*args)</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/events.py</code> <pre><code>def handle(*args): #pylint: disable=no-method-argument\n    def decorator(function):\n        def wrapper(*args, **kwargs):\n            return function(*args, **kwargs)\n        for event_name in args:\n            register_handler(event_name, wrapper, EXEC_PARAMS.exec_id)\n        return wrapper\n    return decorator\n</code></pre>"},{"location":"reference/pyrevit/revit/events/#pyrevit.revit.events.stop_events","title":"<code>stop_events()</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/events.py</code> <pre><code>def stop_events():\n    if EXEC_PARAMS.exec_id in REGISTERED_HANDLERS:\n        if HOST_APP.has_api_context:\n            unregister_exec_handlers(EXEC_PARAMS.exec_id)\n        else:\n            # request underegister from external event\n            delayed_unregister_exec_handlers(EXEC_PARAMS.exec_id)\n</code></pre>"},{"location":"reference/pyrevit/revit/features/","title":"features","text":"<p>Host application feature detectors.</p>"},{"location":"reference/pyrevit/revit/features/#pyrevit.revit.features-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/revit/features/#pyrevit.revit.features.GLOBAL_PARAMS","title":"<code>GLOBAL_PARAMS = hasattr(DB, 'GlobalParametersManager')</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/revit/files/","title":"files","text":"<p>Helper functions for working with revit files.</p>"},{"location":"reference/pyrevit/revit/files/#pyrevit.revit.files-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/revit/files/#pyrevit.revit.files.mlogger","title":"<code>mlogger = get_logger(__name__)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/revit/files/#pyrevit.revit.files-functions","title":"Functions","text":""},{"location":"reference/pyrevit/revit/files/#pyrevit.revit.files.cleanup_backups","title":"<code>cleanup_backups(main_revitfile)</code>","text":"<p>Remove all incremental saves of the given Revit file.</p> Source code in <code>pyrevitlib/pyrevit/revit/files.py</code> <pre><code>def cleanup_backups(main_revitfile):\n    \"\"\"Remove all incremental saves of the given Revit file.\"\"\"\n    file_dir = op.dirname(main_revitfile)\n    fname, fext = op.splitext(op.basename(main_revitfile))\n    backup_fname = re.compile(r'{}\\.\\d\\d\\d\\d\\.{}'.format(fname,\n                                                         fext.replace('.', '')))\n    for f in os.listdir(file_dir):\n        if backup_fname.findall(f):\n            file_path = op.join(file_dir, f)\n            try:\n                os.remove(file_path)\n            except Exception as osremove_err:\n                mlogger.error('Error backup file cleanup on: %s | %s',\n                              file_path, osremove_err)\n</code></pre>"},{"location":"reference/pyrevit/revit/files/#pyrevit.revit.files.correct_text_encoding","title":"<code>correct_text_encoding(filename)</code>","text":"<p>Convert encoding of text file generated by Revit to UTF-8.</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>file path</p> required Source code in <code>pyrevitlib/pyrevit/revit/files.py</code> <pre><code>def correct_text_encoding(filename):\n    \"\"\"Convert encoding of text file generated by Revit to UTF-8.\n\n    Args:\n        filename (str): file path\n    \"\"\"\n    fcontent = None\n    if coreutils.check_encoding_bom(filename, bom_bytes=codecs.BOM_UTF16):\n        with codecs.open(filename, 'r', 'utf_16_le') as oldf:\n            fcontent = oldf.readlines()\n    elif coreutils.check_encoding_bom(filename, bom_bytes=codecs.BOM_UTF8):\n        with codecs.open(filename, 'r', 'utf_8') as oldf:\n            fcontent = oldf.readlines()\n\n    with codecs.open(filename, 'w', 'utf-8') as newf:\n        newf.writelines(fcontent)\n</code></pre>"},{"location":"reference/pyrevit/revit/files/#pyrevit.revit.files.read_text","title":"<code>read_text(filepath)</code>","text":"<p>Safely read text files with Revit encoding.</p> Source code in <code>pyrevitlib/pyrevit/revit/files.py</code> <pre><code>def read_text(filepath):\n    \"\"\"Safely read text files with Revit encoding.\"\"\"\n    with codecs.open(filepath, 'r', 'utf_16_le') as text_file:\n        return text_file.read()\n</code></pre>"},{"location":"reference/pyrevit/revit/files/#pyrevit.revit.files.write_text","title":"<code>write_text(filepath, contents)</code>","text":"<p>Safely write text files with Revit encoding.</p> Source code in <code>pyrevitlib/pyrevit/revit/files.py</code> <pre><code>def write_text(filepath, contents):\n    \"\"\"Safely write text files with Revit encoding.\"\"\"\n    # if 'utf_16_le' is specified, codecs will not write the BOM\n    with codecs.open(filepath, 'w', 'utf_16') as text_file:\n        text_file.write(contents)\n</code></pre>"},{"location":"reference/pyrevit/revit/files/#pyrevit.revit.files.get_file_info","title":"<code>get_file_info(filepath)</code>","text":"<p>Returns file information.</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>str</code> <p>file path</p> required <p>Returns:</p> Type Description <code>RevitModelFile</code> <p>file information</p> Source code in <code>pyrevitlib/pyrevit/revit/files.py</code> <pre><code>def get_file_info(filepath):\n    \"\"\"Returns file information.\n\n    Args:\n        filepath (str): file path\n\n    Returns:\n        (RevitModelFile): file information\n    \"\"\"\n    return TargetApps.Revit.RevitModelFile(filepath)\n</code></pre>"},{"location":"reference/pyrevit/revit/geom/","title":"geom","text":"<p>Geometric utilities for Revit.</p>"},{"location":"reference/pyrevit/revit/geom/#pyrevit.revit.geom-functions","title":"Functions","text":""},{"location":"reference/pyrevit/revit/geom/#pyrevit.revit.geom.convert_point_coord_system","title":"<code>convert_point_coord_system(rvt_point, rvt_transform)</code>","text":"<p>Return coordinates of point in another coordinate system.</p> <p>Parameters:</p> Name Type Description Default <code>rvt_point</code> <code>XYZ</code> <p>Revit point</p> required <code>rvt_transform</code> <code>Transform</code> <p>Revit transform for target coord system</p> required <p>Returns:</p> Type Description <code>XYZ</code> <p>Point coordinates in new coordinate system.</p> Source code in <code>pyrevitlib/pyrevit/revit/geom.py</code> <pre><code>def convert_point_coord_system(rvt_point, rvt_transform):\n    \"\"\"Return coordinates of point in another coordinate system.\n\n    Args:\n        rvt_point (DB.XYZ): Revit point\n        rvt_transform (DB.Transform): Revit transform for target coord system\n\n    Returns:\n        (DB.XYZ): Point coordinates in new coordinate system.\n    \"\"\"\n    # transform the origin of the old coordinate system in the new\n    # coordinate system\n    return rvt_transform.OfVector(rvt_transform.Origin - rvt_point)\n</code></pre>"},{"location":"reference/pyrevit/revit/geom/#pyrevit.revit.geom.convert_point_to_metric","title":"<code>convert_point_to_metric(rvt_point)</code>","text":"<p>Convert given point coordinates to metric.</p> Source code in <code>pyrevitlib/pyrevit/revit/geom.py</code> <pre><code>def convert_point_to_metric(rvt_point):\n    \"\"\"Convert given point coordinates to metric.\"\"\"\n    return DB.XYZ(rvt_point.X * 0.3048,\n                  rvt_point.Y * 0.3048,\n                  rvt_point.Z * 0.3048)\n</code></pre>"},{"location":"reference/pyrevit/revit/journals/","title":"journals","text":"<p>Provide access to Revit Journal Files.</p>"},{"location":"reference/pyrevit/revit/journals/#pyrevit.revit.journals-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/revit/journals/#pyrevit.revit.journals-functions","title":"Functions","text":""},{"location":"reference/pyrevit/revit/journals/#pyrevit.revit.journals.get_journals_folder","title":"<code>get_journals_folder()</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/journals.py</code> <pre><code>def get_journals_folder():\n    return op.dirname(HOST_APP.app.RecordingJournalFilename)\n</code></pre>"},{"location":"reference/pyrevit/revit/journals/#pyrevit.revit.journals.get_current_journal_file","title":"<code>get_current_journal_file()</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/journals.py</code> <pre><code>def get_current_journal_file():\n    return HOST_APP.app.RecordingJournalFilename\n</code></pre>"},{"location":"reference/pyrevit/revit/journals/#pyrevit.revit.journals.get_current_session_id","title":"<code>get_current_session_id()</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/journals.py</code> <pre><code>def get_current_session_id():\n    re_finder = re.compile(r'.*&gt;Session\\s+(\\$.{8}).*')\n    journal_file = get_current_journal_file()\n    with open(journal_file, \"r\") as jfile:\n        for jline in reversed(jfile.readlines()):\n            match = re_finder.match(jline)\n            if match:\n                return match.groups()[0]\n</code></pre>"},{"location":"reference/pyrevit/revit/report/","title":"report","text":"<p>\"Utility methods for reporting Revit data uniformly.</p>"},{"location":"reference/pyrevit/revit/report/#pyrevit.revit.report-classes","title":"Classes","text":""},{"location":"reference/pyrevit/revit/report/#pyrevit.revit.report-functions","title":"Functions","text":""},{"location":"reference/pyrevit/revit/report/#pyrevit.revit.report.print_revision","title":"<code>print_revision(rev, prefix='', print_id=True)</code>","text":"<p>Print a revision.</p> <p>Parameters:</p> Name Type Description Default <code>rev</code> <code>Revision</code> <p>revision to output</p> required <code>prefix</code> <code>str</code> <p>prefix to add to the output text. Defaults to empty string.</p> <code>''</code> <code>print_id</code> <code>bool</code> <p>whether to print the revision id. Defaults to True.</p> <code>True</code> Source code in <code>pyrevitlib/pyrevit/revit/report.py</code> <pre><code>def print_revision(rev, prefix='', print_id=True):\n    \"\"\"Print a revision.\n\n    Args:\n        rev (DB.Revision): revision to output\n        prefix (str, optional): prefix to add to the output text. Defaults to empty string.\n        print_id (bool, optional): whether to print the revision id. Defaults to True.\n    \"\"\"\n    outstr = 'SEQ#: {} REV#: {} DATE: {} TYPE: {} DESC: {} ' \\\n             .format(rev.SequenceNumber,\n                     str(query.get_param(rev, 'RevisionNumber', '')).ljust(5),\n                     str(rev.RevisionDate).ljust(10),\n                     str(rev.NumberType if rev.NumberType else \"\").ljust(15),\n                     str(rev.Description).replace('\\n', '').replace('\\r', ''))\n    if print_id:\n        outstr = PyRevitOutputWindow.linkify(rev.Id) + '\\t' + outstr\n    print(prefix + outstr)\n</code></pre>"},{"location":"reference/pyrevit/revit/report/#pyrevit.revit.report.print_sheet","title":"<code>print_sheet(sht, prefix='', print_id=True)</code>","text":"<p>Print the name of a sheet.</p> <p>Parameters:</p> Name Type Description Default <code>sht</code> <code>ViewSheet</code> <p>sheet to output</p> required <code>prefix</code> <code>str</code> <p>prefix to add to the output text. Defaults to empty string.</p> <code>''</code> <code>print_id</code> <code>bool</code> <p>whether to print the sheet id. Defaults to True.</p> <code>True</code> Source code in <code>pyrevitlib/pyrevit/revit/report.py</code> <pre><code>def print_sheet(sht, prefix='', print_id=True):\n    \"\"\"Print the name of a sheet.\n\n    Args:\n        sht (DB.ViewSheet): sheet to output\n        prefix (str, optional): prefix to add to the output text. Defaults to empty string.\n        print_id (bool, optional): whether to print the sheet id. Defaults to True.\n    \"\"\"\n    outstr = '{}\\t{}'.format(\n        sht.Parameter[DB.BuiltInParameter.SHEET_NUMBER].AsString(),\n        sht.Parameter[DB.BuiltInParameter.SHEET_NAME].AsString()\n        )\n    if print_id:\n        outstr = PyRevitOutputWindow.linkify(sht.Id) + '\\t' + outstr\n    print(prefix + outstr)\n</code></pre>"},{"location":"reference/pyrevit/revit/report/#pyrevit.revit.report.print_view","title":"<code>print_view(view, prefix='', print_id=True)</code>","text":"<p>Print the name of a view.</p> <p>Parameters:</p> Name Type Description Default <code>view</code> <code>View</code> <p>view to output</p> required <code>prefix</code> <code>str</code> <p>prefix to add to the output text. Defaults to empty string.</p> <code>''</code> <code>print_id</code> <code>bool</code> <p>whether to print the view id. Defaults to True.</p> <code>True</code> Source code in <code>pyrevitlib/pyrevit/revit/report.py</code> <pre><code>def print_view(view, prefix='', print_id=True):\n    \"\"\"Print the name of a view.\n\n    Args:\n        view (DB.View): view to output\n        prefix (str, optional): prefix to add to the output text. Defaults to empty string.\n        print_id (bool, optional): whether to print the view id. Defaults to True.\n    \"\"\"\n    outstr = query.get_name(view)\n    if print_id:\n        outstr = PyRevitOutputWindow.linkify(view.Id) + '\\t' + outstr\n    print(prefix + outstr)\n</code></pre>"},{"location":"reference/pyrevit/revit/selection/","title":"selection","text":"<p>Elements selection utilities.</p>"},{"location":"reference/pyrevit/revit/selection/#pyrevit.revit.selection-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/revit/selection/#pyrevit.revit.selection.mlogger","title":"<code>mlogger = get_logger(__name__)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/revit/selection/#pyrevit.revit.selection-classes","title":"Classes","text":""},{"location":"reference/pyrevit/revit/selection/#pyrevit.revit.selection.ElementSelection","title":"<code>ElementSelection(element_list=None)</code>","text":"<p>Element selection handler.</p> <p>Parameters:</p> Name Type Description Default <code>element_list</code> <code>list[Element]</code> <p>list of selected elements</p> <code>None</code> Source code in <code>pyrevitlib/pyrevit/revit/selection.py</code> <pre><code>def __init__(self, element_list=None):\n    if element_list is None:\n        if HOST_APP.uidoc:\n            self._refs = \\\n                [x for x in HOST_APP.uidoc.Selection.GetElementIds()]\n        else:\n            self._refs = []\n    else:\n        self._refs = ElementSelection.get_element_ids(element_list)\n</code></pre>"},{"location":"reference/pyrevit/revit/selection/#pyrevit.revit.selection.ElementSelection-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/revit/selection/#pyrevit.revit.selection.ElementSelection.is_empty","title":"<code>is_empty</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/selection/#pyrevit.revit.selection.ElementSelection.elements","title":"<code>elements</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/selection/#pyrevit.revit.selection.ElementSelection.element_ids","title":"<code>element_ids</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/selection/#pyrevit.revit.selection.ElementSelection.first","title":"<code>first</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/selection/#pyrevit.revit.selection.ElementSelection.last","title":"<code>last</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/selection/#pyrevit.revit.selection.ElementSelection-functions","title":"Functions","text":""},{"location":"reference/pyrevit/revit/selection/#pyrevit.revit.selection.ElementSelection.get_element_ids","title":"<code>get_element_ids(mixed_list)</code>  <code>classmethod</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/selection.py</code> <pre><code>@classmethod\ndef get_element_ids(cls, mixed_list):\n    return ensure.ensure_element_ids(mixed_list)\n</code></pre>"},{"location":"reference/pyrevit/revit/selection/#pyrevit.revit.selection.ElementSelection.set_to","title":"<code>set_to(element_list)</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/selection.py</code> <pre><code>def set_to(self, element_list):\n    self._refs = ElementSelection.get_element_ids(element_list)\n    HOST_APP.uidoc.Selection.SetElementIds(\n        framework.List[DB.ElementId](self._refs)\n        )\n    HOST_APP.uidoc.RefreshActiveView()\n</code></pre>"},{"location":"reference/pyrevit/revit/selection/#pyrevit.revit.selection.ElementSelection.clear","title":"<code>clear()</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/selection.py</code> <pre><code>def clear(self):\n    HOST_APP.uidoc.Selection.SetElementIds(\n        framework.List[DB.ElementId]([DB.ElementId.InvalidElementId])\n    )\n    HOST_APP.uidoc.RefreshActiveView()\n</code></pre>"},{"location":"reference/pyrevit/revit/selection/#pyrevit.revit.selection.ElementSelection.append","title":"<code>append(element_list)</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/selection.py</code> <pre><code>def append(self, element_list):\n    self._refs.extend(ElementSelection.get_element_ids(element_list))\n    self.set_to(self._refs)\n</code></pre>"},{"location":"reference/pyrevit/revit/selection/#pyrevit.revit.selection.ElementSelection.include","title":"<code>include(element_type)</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/selection.py</code> <pre><code>def include(self, element_type):\n    refs = [x for x in self._refs\n            if isinstance(DOCS.doc.GetElement(x),\n                          element_type)]\n    return ElementSelection(refs)\n</code></pre>"},{"location":"reference/pyrevit/revit/selection/#pyrevit.revit.selection.ElementSelection.exclude","title":"<code>exclude(element_type)</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/selection.py</code> <pre><code>def exclude(self, element_type):\n    refs = [x for x in self._refs\n            if not isinstance(DOCS.doc.GetElement(x),\n                              element_type)]\n    return ElementSelection(refs)\n</code></pre>"},{"location":"reference/pyrevit/revit/selection/#pyrevit.revit.selection.ElementSelection.no_views","title":"<code>no_views()</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/selection.py</code> <pre><code>def no_views(self):\n    return self.exclude(DB.View)\n</code></pre>"},{"location":"reference/pyrevit/revit/selection/#pyrevit.revit.selection.ElementSelection.only_views","title":"<code>only_views()</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/selection.py</code> <pre><code>def only_views(self):\n    return self.include(DB.View)\n</code></pre>"},{"location":"reference/pyrevit/revit/selection/#pyrevit.revit.selection.ElementSelection.expand_groups","title":"<code>expand_groups()</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/selection.py</code> <pre><code>def expand_groups(self):\n    expanded_refs = []\n    for element in self.elements:\n        if isinstance(element, DB.Group):\n            expanded_refs.extend(element.GetMemberIds())\n        else:\n            expanded_refs.append(element.Id)\n    self._refs = expanded_refs\n</code></pre>"},{"location":"reference/pyrevit/revit/selection/#pyrevit.revit.selection.PickByCategorySelectionFilter","title":"<code>PickByCategorySelectionFilter(category_id)</code>","text":"<p>               Bases: <code>ISelectionFilter</code></p> Source code in <code>pyrevitlib/pyrevit/revit/selection.py</code> <pre><code>def __init__(self, category_id):\n    self.category_id = category_id\n</code></pre>"},{"location":"reference/pyrevit/revit/selection/#pyrevit.revit.selection.PickByCategorySelectionFilter-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/revit/selection/#pyrevit.revit.selection.PickByCategorySelectionFilter.category_id","title":"<code>category_id = category_id</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/selection/#pyrevit.revit.selection.PickByCategorySelectionFilter-functions","title":"Functions","text":""},{"location":"reference/pyrevit/revit/selection/#pyrevit.revit.selection.PickByCategorySelectionFilter.AllowElement","title":"<code>AllowElement(element)</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/selection.py</code> <pre><code>def AllowElement(self, element):\n    if element.Category and self.category_id == element.Category.Id:\n        return True\n    else:\n        return False\n</code></pre>"},{"location":"reference/pyrevit/revit/selection/#pyrevit.revit.selection.PickByCategorySelectionFilter.AllowReference","title":"<code>AllowReference(refer, point)</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/selection.py</code> <pre><code>def AllowReference(self, refer, point):  # pylint: disable=W0613\n    return False\n</code></pre>"},{"location":"reference/pyrevit/revit/selection/#pyrevit.revit.selection-functions","title":"Functions","text":""},{"location":"reference/pyrevit/revit/selection/#pyrevit.revit.selection.pick_element","title":"<code>pick_element(message='')</code>","text":"<p>Asks the user to pick an element.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>An optional message to display.</p> <code>''</code> <p>Returns:</p> Type Description <code>Element</code> <p>element selected by the user.</p> Source code in <code>pyrevitlib/pyrevit/revit/selection.py</code> <pre><code>def pick_element(message=''):\n    \"\"\"Asks the user to pick an element.\n\n    Args:\n        message (str): An optional message to display.\n\n    Returns:\n        (Element): element selected by the user.\n    \"\"\"\n    return _pick_obj(UI.Selection.ObjectType.Element,\n                     message)\n</code></pre>"},{"location":"reference/pyrevit/revit/selection/#pyrevit.revit.selection.pick_element_by_category","title":"<code>pick_element_by_category(cat_name_or_builtin, message='')</code>","text":"<p>Returns the element of the specified category picked by the user.</p> <p>Parameters:</p> Name Type Description Default <code>cat_name_or_builtin</code> <code>str</code> <p>name or built-in category of the element to pick.</p> required <code>message</code> <code>str</code> <p>message to display on selection. Defaults to ''.</p> <code>''</code> <p>Returns:</p> Type Description <code>Element</code> <p>picked element.</p> <p>Raises:</p> Type Description <code>PyRevitException</code> <p>If no category matches the specified name or builtin.</p> Source code in <code>pyrevitlib/pyrevit/revit/selection.py</code> <pre><code>def pick_element_by_category(cat_name_or_builtin, message=''):\n    \"\"\"Returns the element of the specified category picked by the user.\n\n    Args:\n        cat_name_or_builtin (str): name or built-in category of the element\n            to pick.\n        message (str, optional): message to display on selection.\n            Defaults to ''.\n\n    Returns:\n        (Element): picked element.\n\n    Raises:\n        PyRevitException: If no category matches the specified name or builtin.\n    \"\"\"\n    category = query.get_category(cat_name_or_builtin)\n    if category:\n        pick_filter = PickByCategorySelectionFilter(category.Id)\n        return _pick_obj(UI.Selection.ObjectType.Element,\n                         message,\n                         selection_filter=pick_filter)\n    else:\n        raise PyRevitException(\"Can not determine category id from: {}\"\n                               .format(cat_name_or_builtin))\n</code></pre>"},{"location":"reference/pyrevit/revit/selection/#pyrevit.revit.selection.pick_elementpoint","title":"<code>pick_elementpoint(message='', world=False)</code>","text":"<p>Returns the element point selected by the user.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>message to display. Defaults to ''.</p> <code>''</code> <code>world</code> <code>bool</code> <p>whether to use world coordinates. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>PointOnElement</code> <p>The selected point.</p> Source code in <code>pyrevitlib/pyrevit/revit/selection.py</code> <pre><code>def pick_elementpoint(message='', world=False):\n    \"\"\"Returns the element point selected by the user.\n\n    Args:\n        message (str, optional): message to display. Defaults to ''.\n        world (bool, optional): whether to use world coordinates. Defaults to False.\n\n    Returns:\n        (PointOnElement): The selected point.\n    \"\"\"\n    return _pick_obj(UI.Selection.ObjectType.PointOnElement,\n                     message,\n                     world=world)\n</code></pre>"},{"location":"reference/pyrevit/revit/selection/#pyrevit.revit.selection.pick_edge","title":"<code>pick_edge(message='')</code>","text":"<p>Returns the edge selected by the user.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>message to display. Defaults to ''.</p> <code>''</code> <p>Returns:</p> Type Description <code>Edge</code> <p>The selected edge.</p> Source code in <code>pyrevitlib/pyrevit/revit/selection.py</code> <pre><code>def pick_edge(message=''):\n    \"\"\"Returns the edge selected by the user.\n\n    Args:\n        message (str, optional): message to display. Defaults to ''.\n\n    Returns:\n        (Edge): The selected edge.\n    \"\"\"\n    return _pick_obj(UI.Selection.ObjectType.Edge,\n                     message)\n</code></pre>"},{"location":"reference/pyrevit/revit/selection/#pyrevit.revit.selection.pick_face","title":"<code>pick_face(message='')</code>","text":"<p>Returns the face selected by the user.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>message to display. Defaults to ''.</p> <code>''</code> <p>Returns:</p> Type Description <code>Face</code> <p>The selected face.</p> Source code in <code>pyrevitlib/pyrevit/revit/selection.py</code> <pre><code>def pick_face(message=''):\n    \"\"\"Returns the face selected by the user.\n\n    Args:\n        message (str, optional): message to display. Defaults to ''.\n\n    Returns:\n        (Face): The selected face.\n    \"\"\"\n    return _pick_obj(UI.Selection.ObjectType.Face,\n                     message)\n</code></pre>"},{"location":"reference/pyrevit/revit/selection/#pyrevit.revit.selection.pick_linked","title":"<code>pick_linked(message='')</code>","text":"<p>Returns the linked element selected by the user.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>message to display. Defaults to ''.</p> <code>''</code> <p>Returns:</p> Type Description <code>LinkedElement</code> <p>The selected linked element.</p> Source code in <code>pyrevitlib/pyrevit/revit/selection.py</code> <pre><code>def pick_linked(message=''):\n    \"\"\"Returns the linked element selected by the user.\n\n    Args:\n        message (str, optional): message to display. Defaults to ''.\n\n    Returns:\n        (LinkedElement): The selected linked element.\n    \"\"\"\n    return _pick_obj(UI.Selection.ObjectType.LinkedElement,\n                     message)\n</code></pre>"},{"location":"reference/pyrevit/revit/selection/#pyrevit.revit.selection.pick_elements","title":"<code>pick_elements(message='')</code>","text":"<p>Asks the user to pick multiple elements.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>An optional message to display.</p> <code>''</code> <p>Returns:</p> Type Description <code>list[Element]</code> <p>elements selected by the user.</p> Source code in <code>pyrevitlib/pyrevit/revit/selection.py</code> <pre><code>def pick_elements(message=''):\n    \"\"\"Asks the user to pick multiple elements.\n\n    Args:\n        message (str): An optional message to display.\n\n    Returns:\n        (list[Element]): elements selected by the user.\n    \"\"\"\n    return _pick_obj(UI.Selection.ObjectType.Element,\n                     message,\n                     multiple=True)\n</code></pre>"},{"location":"reference/pyrevit/revit/selection/#pyrevit.revit.selection.pick_elements_by_category","title":"<code>pick_elements_by_category(cat_name_or_builtin, message='')</code>","text":"<p>Returns the elements of the specified category picked by the user.</p> <p>Parameters:</p> Name Type Description Default <code>cat_name_or_builtin</code> <code>str</code> <p>name or built-in category of the elements to pick.</p> required <code>message</code> <code>str</code> <p>message to display on selection. Defaults to ''.</p> <code>''</code> <p>Returns:</p> Type Description <code>list[Element]</code> <p>picked elements.</p> <p>Raises:</p> Type Description <code>PyRevitException</code> <p>If no category matches the specified name or builtin.</p> Source code in <code>pyrevitlib/pyrevit/revit/selection.py</code> <pre><code>def pick_elements_by_category(cat_name_or_builtin, message=''):\n    \"\"\"Returns the elements of the specified category picked by the user.\n\n    Args:\n        cat_name_or_builtin (str): name or built-in category of the elements\n            to pick.\n        message (str, optional): message to display on selection.\n            Defaults to ''.\n\n    Returns:\n        (list[Element]): picked elements.\n\n    Raises:\n        PyRevitException: If no category matches the specified name or builtin.\n    \"\"\"\n    category = query.get_category(cat_name_or_builtin)\n    if category:\n        pick_filter = PickByCategorySelectionFilter(category.Id)\n        return _pick_obj(UI.Selection.ObjectType.Element,\n                         message,\n                         multiple=True,\n                         selection_filter=pick_filter)\n    else:\n        raise PyRevitException(\"Can not determine category id from: {}\"\n                               .format(cat_name_or_builtin))\n</code></pre>"},{"location":"reference/pyrevit/revit/selection/#pyrevit.revit.selection.get_picked_elements","title":"<code>get_picked_elements(message='')</code>","text":"<p>Allows the user to pick multple elements, one at a time.</p> <p>It keeps asking the user to pick an element until no elements are selected.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The message to display. Defaults to ''.</p> <code>''</code> <p>Yields:</p> Type Description <code>Element</code> <p>selected element</p> Source code in <code>pyrevitlib/pyrevit/revit/selection.py</code> <pre><code>def get_picked_elements(message=''):\n    \"\"\"Allows the user to pick multple elements, one at a time.\n\n    It keeps asking the user to pick an element until no elements are selected.\n\n    Args:\n        message (str, optional): The message to display. Defaults to ''.\n\n    Yields:\n        (DB.Element): selected element\n    \"\"\"\n    picked_element = True\n    while picked_element:\n        picked_element = pick_element(message=message)\n        if not picked_element:\n            break\n        yield picked_element\n</code></pre>"},{"location":"reference/pyrevit/revit/selection/#pyrevit.revit.selection.get_picked_elements_by_category","title":"<code>get_picked_elements_by_category(cat_name_or_builtin, message='')</code>","text":"<p>Pick elements by category.</p> <p>Keeps asking the user to pick an element until no elements are selected.</p> <p>Parameters:</p> Name Type Description Default <code>cat_name_or_builtin</code> <code>str</code> <p>category name or built-in category.</p> required <code>message</code> <code>str</code> <p>message to display while picking elements.</p> <code>''</code> <p>Yields:</p> Type Description <code>Element</code> <p>The picked elements from the specified category.</p> Source code in <code>pyrevitlib/pyrevit/revit/selection.py</code> <pre><code>def get_picked_elements_by_category(cat_name_or_builtin, message=''):\n    \"\"\"Pick elements by category.\n\n    Keeps asking the user to pick an element until no elements are selected.\n\n    Args:\n        cat_name_or_builtin (str): category name or built-in category.\n        message (str, optional): message to display while picking elements.\n\n    Yields:\n        (DB.Element): The picked elements from the specified category.\n    \"\"\"\n    picked_element = True\n    while picked_element:\n        picked_element = pick_element_by_category(cat_name_or_builtin,\n                                                  message=message)\n        if not picked_element:\n            break\n        yield picked_element\n</code></pre>"},{"location":"reference/pyrevit/revit/selection/#pyrevit.revit.selection.pick_elementpoints","title":"<code>pick_elementpoints(message='', world=False)</code>","text":"<p>Selects element points.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The message to display when selecting element points.</p> <code>''</code> <code>world</code> <code>bool</code> <p>Select points in world coordinates. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>list[PointOnElement]</code> <p>selected element points.</p> Source code in <code>pyrevitlib/pyrevit/revit/selection.py</code> <pre><code>def pick_elementpoints(message='', world=False):\n    \"\"\"Selects element points.\n\n    Args:\n        message (str): The message to display when selecting element points.\n        world (bool, optional): Select points in world coordinates. Defaults to False.\n\n    Returns:\n        (list[PointOnElement]): selected element points.\n    \"\"\"\n    return _pick_obj(UI.Selection.ObjectType.PointOnElement,\n                     message,\n                     multiple=True, world=world)\n</code></pre>"},{"location":"reference/pyrevit/revit/selection/#pyrevit.revit.selection.pick_edges","title":"<code>pick_edges(message='')</code>","text":"<p>Selects edges.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The message to display when selecting edges.</p> <code>''</code> <p>Returns:</p> Type Description <code>list[Edge]</code> <p>selected edges.</p> Source code in <code>pyrevitlib/pyrevit/revit/selection.py</code> <pre><code>def pick_edges(message=''):\n    \"\"\"Selects edges.\n\n    Args:\n        message (str): The message to display when selecting edges.\n\n    Returns:\n        (list[Edge]): selected edges.\n    \"\"\"\n    return _pick_obj(UI.Selection.ObjectType.Edge,\n                     message,\n                     multiple=True)\n</code></pre>"},{"location":"reference/pyrevit/revit/selection/#pyrevit.revit.selection.pick_faces","title":"<code>pick_faces(message='')</code>","text":"<p>Selects faces.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The message to display when selecting the faces.</p> <code>''</code> <p>Returns:</p> Type Description <code>list[Face]</code> <p>selected faces.</p> Source code in <code>pyrevitlib/pyrevit/revit/selection.py</code> <pre><code>def pick_faces(message=''):\n    \"\"\"Selects faces.\n\n    Args:\n        message (str): The message to display when selecting the faces.\n\n    Returns:\n        (list[Face]): selected faces.\n    \"\"\"\n    return _pick_obj(UI.Selection.ObjectType.Face,\n                     message,\n                     multiple=True)\n</code></pre>"},{"location":"reference/pyrevit/revit/selection/#pyrevit.revit.selection.pick_linkeds","title":"<code>pick_linkeds(message='')</code>","text":"<p>Selects linked elements.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The message to display when selecting linked elements.</p> <code>''</code> <p>Returns:</p> Type Description <code>list[LinkedElement]</code> <p>selected linked elements.</p> Source code in <code>pyrevitlib/pyrevit/revit/selection.py</code> <pre><code>def pick_linkeds(message=''):\n    \"\"\"Selects linked elements.\n\n    Args:\n        message (str): The message to display when selecting linked elements.\n\n    Returns:\n        (list[LinkedElement]): selected linked elements.\n    \"\"\"\n    return _pick_obj(UI.Selection.ObjectType.LinkedElement,\n                     message,\n                     multiple=True)\n</code></pre>"},{"location":"reference/pyrevit/revit/selection/#pyrevit.revit.selection.pick_point","title":"<code>pick_point(message='')</code>","text":"<p>Pick a point from the user interface.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>A message to display when prompting for the point.</p> <code>''</code> <p>Returns:</p> Type Description <code>tuple or None</code> <p>A tuple representing the picked point as (x, y, z) coordinates, or None if no point was picked or an error occurred.</p> Source code in <code>pyrevitlib/pyrevit/revit/selection.py</code> <pre><code>def pick_point(message=''):\n    \"\"\"Pick a point from the user interface.\n\n    Args:\n        message (str): A message to display when prompting for the point.\n\n    Returns:\n        (tuple or None): A tuple representing the picked point as (x, y, z)\n            coordinates, or None if no point was picked or an error occurred.\n    \"\"\"\n    try:\n        return HOST_APP.uidoc.Selection.PickPoint(message)\n    except Exception:\n        return None\n</code></pre>"},{"location":"reference/pyrevit/revit/selection/#pyrevit.revit.selection.pick_rectangle","title":"<code>pick_rectangle(message='', pick_filter=None)</code>","text":"<p>Picks elements from the user interface by specifying a rectangular area.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>A custom message to display when prompting the user to pick elements. Default is an empty string.</p> <code>''</code> <code>pick_filter</code> <code>object</code> <p>An object specifying the filter to apply when picking elements. Default is None.</p> <code>None</code> <p>Returns:</p> Type Description <code>list[ElementId]</code> <p>The selected elements.</p> Source code in <code>pyrevitlib/pyrevit/revit/selection.py</code> <pre><code>def pick_rectangle(message='', pick_filter=None):\n    \"\"\"Picks elements from the user interface by specifying a rectangular area.\n\n    Args:\n        message (str, optional): A custom message to display when prompting\n            the user to pick elements. Default is an empty string.\n        pick_filter (object, optional): An object specifying the filter to apply\n            when picking elements. Default is None.\n\n    Returns:\n        (list[DB.ElementId]): The selected elements.\n    \"\"\"\n    if pick_filter:\n        return HOST_APP.uidoc.Selection.PickElementsByRectangle(pick_filter,\n                                                                message)\n    else:\n        return HOST_APP.uidoc.Selection.PickElementsByRectangle(message)\n</code></pre>"},{"location":"reference/pyrevit/revit/selection/#pyrevit.revit.selection.get_selection_category_set","title":"<code>get_selection_category_set()</code>","text":"<p>Returns a CategorySet with the categories of the selected elements.</p> <p>Returns:</p> Type Description <code>CategorySet</code> <p>categories of the selected elements.</p> Source code in <code>pyrevitlib/pyrevit/revit/selection.py</code> <pre><code>def get_selection_category_set():\n    \"\"\"Returns a CategorySet with the categories of the selected elements.\n\n    Returns:\n        (CategorySet): categories of the selected elements.\n    \"\"\"\n    selection = ElementSelection()\n    cset = DB.CategorySet()\n    for element in selection:\n        cset.Insert(element.Category)\n    return cset\n</code></pre>"},{"location":"reference/pyrevit/revit/selection/#pyrevit.revit.selection.get_selection","title":"<code>get_selection()</code>","text":"<p>Returns the current selected items.</p> <p>Returns:</p> Type Description <code>ElementSelection</code> <p>the current selected items</p> Source code in <code>pyrevitlib/pyrevit/revit/selection.py</code> <pre><code>def get_selection():\n    \"\"\"Returns the current selected items.\n\n    Returns:\n        (ElementSelection): the current selected items\n    \"\"\"\n    return ElementSelection()\n</code></pre>"},{"location":"reference/pyrevit/revit/serverutils/","title":"serverutils","text":"<p>Helper functions for working with revit server.</p>"},{"location":"reference/pyrevit/revit/serverutils/#pyrevit.revit.serverutils-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/revit/serverutils/#pyrevit.revit.serverutils.MODEL_HISTORY_SQLDB","title":"<code>MODEL_HISTORY_SQLDB = '/Data/Model.db3'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/revit/serverutils/#pyrevit.revit.serverutils.SyncHistory","title":"<code>SyncHistory = namedtuple('SyncHistory', ['index', 'userid', 'timestamp'])</code>  <code>module-attribute</code>","text":"<p>namedtuple for model sync history data in revit server</p> <p>Attributes:</p> Name Type Description <code>index</code> <code>int</code> <p>row index in history db</p> <code>userid</code> <code>str</code> <p>user identifier</p> <code>timestamp</code> <code>str</code> <p>time stamp string (e.g. \"2017-12-13 19:56:20\")</p>"},{"location":"reference/pyrevit/revit/serverutils/#pyrevit.revit.serverutils-functions","title":"Functions","text":""},{"location":"reference/pyrevit/revit/serverutils/#pyrevit.revit.serverutils.get_server_path","title":"<code>get_server_path(doc, path_dict)</code>","text":"<p>Return file path of a model hosted on revit server.</p> <p>Parameters:</p> Name Type Description Default <code>doc</code> <code>Document</code> <p>revit document object</p> required <code>path_dict</code> <code>dict</code> <p>dict of RSN paths and their directory paths</p> required <p>Examples:</p> <p><pre><code>rsn_paths = {'RSN://SERVERNAME': '//servername/filestore'}\nget_server_path(doc, rsn_paths)\n</code></pre> \"//servername/filestore/path/to/model.rvt\"</p> Source code in <code>pyrevitlib/pyrevit/revit/serverutils.py</code> <pre><code>def get_server_path(doc, path_dict):\n    \"\"\"Return file path of a model hosted on revit server.\n\n    Args:\n        doc (Document): revit document object\n        path_dict (dict): dict of RSN paths and their directory paths\n\n    Examples:\n        ```python\n        rsn_paths = {'RSN://SERVERNAME': '//servername/filestore'}\n        get_server_path(doc, rsn_paths)\n        ```\n        \"//servername/filestore/path/to/model.rvt\"\n    \"\"\"\n    model_path = doc.GetWorksharingCentralModelPath()\n    path = DB.ModelPathUtils.ConvertModelPathToUserVisiblePath(model_path)\n    for key, value in path_dict.items():\n        path = path.replace(key, value)\n\n    return path\n</code></pre>"},{"location":"reference/pyrevit/revit/serverutils/#pyrevit.revit.serverutils.get_model_sync_history","title":"<code>get_model_sync_history(server_path)</code>","text":"<p>Read model sync history from revit server sqlite history file.</p> <p>Parameters:</p> Name Type Description Default <code>server_path</code> <code>str</code> <p>directory path of revit server filestore</p> required <p>Returns:</p> Type Description <code>list[SyncHistory]</code> <p>list of SyncHistory instances</p> <p>Examples:</p> <p><pre><code>get_model_sync_history(\"//servername/path/to/model.rvt\")\n</code></pre> [SyncHistory(index=498, userid=\"user\",             timestamp=\"2017-12-13 19:56:20\")]</p> Source code in <code>pyrevitlib/pyrevit/revit/serverutils.py</code> <pre><code>def get_model_sync_history(server_path):\n    \"\"\"Read model sync history from revit server sqlite history file.\n\n    Args:\n        server_path (str): directory path of revit server filestore\n\n    Returns:\n        (list[SyncHistory]): list of SyncHistory instances\n\n    Examples:\n        ```python\n        get_model_sync_history(\"//servername/path/to/model.rvt\")\n        ```\n        [SyncHistory(index=498, userid=\"user\",\n                    timestamp=\"2017-12-13 19:56:20\")]\n    \"\"\"\n    db_path = server_path + MODEL_HISTORY_SQLDB\n    conn = sqlite3.connect(db_path)\n    sync_hist = []\n    for row in conn.execute(\"SELECT * FROM ModelHistory\"):\n        sync_hist.append(SyncHistory(index=int(row[0]),\n                                     userid=row[1],\n                                     timestamp=row[2][:-1]))\n    return sync_hist\n</code></pre>"},{"location":"reference/pyrevit/revit/tabs/","title":"tabs","text":"<p>Document colorizer python API.</p>"},{"location":"reference/pyrevit/revit/tabs/#pyrevit.revit.tabs-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/revit/tabs/#pyrevit.revit.tabs-functions","title":"Functions","text":""},{"location":"reference/pyrevit/revit/tabs/#pyrevit.revit.tabs.hex_to_brush","title":"<code>hex_to_brush(color_hex)</code>","text":"<p>Convert hex color to WPF brush.</p> Source code in <code>pyrevitlib/pyrevit/revit/tabs.py</code> <pre><code>def hex_to_brush(color_hex):\n    \"\"\"Convert hex color to WPF brush.\"\"\"\n    return Media.SolidColorBrush(\n        Media.ColorConverter.ConvertFromString(color_hex)\n    )\n</code></pre>"},{"location":"reference/pyrevit/revit/tabs/#pyrevit.revit.tabs.hex_from_brush","title":"<code>hex_from_brush(solid_brush)</code>","text":"<p>Convert WPF brush to hex color.</p> Source code in <code>pyrevitlib/pyrevit/revit/tabs.py</code> <pre><code>def hex_from_brush(solid_brush):\n    \"\"\"Convert WPF brush to hex color.\"\"\"\n    color = solid_brush.Color\n    color_hex = ''.join(\n        '{:02X}'.format(int(x)) for x in\n        [color.A, color.R, color.G, color.B]\n        )\n    return '#' + color_hex\n</code></pre>"},{"location":"reference/pyrevit/revit/tabs/#pyrevit.revit.tabs.get_tabcoloring_theme","title":"<code>get_tabcoloring_theme(usercfg)</code>","text":"<p>Get tab coloring theme from settings.</p> Source code in <code>pyrevitlib/pyrevit/revit/tabs.py</code> <pre><code>def get_tabcoloring_theme(usercfg):\n    \"\"\"Get tab coloring theme from settings.\"\"\"\n    tabcfgs = _get_tabcoloring_cfgs(usercfg)\n\n    theme = types.TabColoringTheme()\n    theme.SortDocTabs = _get_sort_colorize_docs(tabcfgs)\n    theme.TabStyle = _get_tabstyle(tabcfgs)\n    theme.FamilyTabStyle = _get_family_tabstyle(tabcfgs)\n\n    theme.TabOrderRules = _get_tab_orderrules(tabcfgs)\n    theme.TabFilterRules = _get_tab_filterrules(tabcfgs)\n\n    return theme\n</code></pre>"},{"location":"reference/pyrevit/revit/tabs/#pyrevit.revit.tabs.reset_tab_ordercolors","title":"<code>reset_tab_ordercolors(usercfg, theme)</code>","text":"<p>Reset tab order colors to internal default.</p> Source code in <code>pyrevitlib/pyrevit/revit/tabs.py</code> <pre><code>def reset_tab_ordercolors(usercfg, theme):\n    \"\"\"Reset tab order colors to internal default.\"\"\"\n    tabcfgs = _get_tabcoloring_cfgs(usercfg)\n    theme.TabOrderRules = _get_tab_orderrules(tabcfgs, default=True)\n</code></pre>"},{"location":"reference/pyrevit/revit/tabs/#pyrevit.revit.tabs.set_tabcoloring_theme","title":"<code>set_tabcoloring_theme(usercfg, theme)</code>","text":"<p>Set tab coloring theme in settings.</p> Source code in <code>pyrevitlib/pyrevit/revit/tabs.py</code> <pre><code>def set_tabcoloring_theme(usercfg, theme):\n    \"\"\"Set tab coloring theme in settings.\"\"\"\n    tabcfgs = _get_tabcoloring_cfgs(usercfg)\n\n    _set_sort_colorize_docs(tabcfgs, theme)\n    _set_tabstyle(tabcfgs, theme)\n    _set_family_tabstyle(tabcfgs, theme)\n\n    _set_tab_ordercolors(tabcfgs, theme)\n    _set_tab_filtercolors(tabcfgs, theme)\n</code></pre>"},{"location":"reference/pyrevit/revit/tabs/#pyrevit.revit.tabs.get_tab_orderrule","title":"<code>get_tab_orderrule(theme, index)</code>","text":"<p>Get coloring rule from active theme, at index.</p> Source code in <code>pyrevitlib/pyrevit/revit/tabs.py</code> <pre><code>def get_tab_orderrule(theme, index):\n    \"\"\"Get coloring rule from active theme, at index.\"\"\"\n    return hex_from_brush(theme.TabOrderRules[index].Brush)\n</code></pre>"},{"location":"reference/pyrevit/revit/tabs/#pyrevit.revit.tabs.add_tab_orderrule","title":"<code>add_tab_orderrule(theme, color)</code>","text":"<p>Add coloring rule to active theme.</p> Source code in <code>pyrevitlib/pyrevit/revit/tabs.py</code> <pre><code>def add_tab_orderrule(theme, color):\n    \"\"\"Add coloring rule to active theme.\"\"\"\n    theme.TabOrderRules.Add(\n        types.TabColoringRule(hex_to_brush(color))\n        )\n</code></pre>"},{"location":"reference/pyrevit/revit/tabs/#pyrevit.revit.tabs.remove_tab_orderrule","title":"<code>remove_tab_orderrule(theme, index)</code>","text":"<p>Remove coloring rule at index, from active theme.</p> Source code in <code>pyrevitlib/pyrevit/revit/tabs.py</code> <pre><code>def remove_tab_orderrule(theme, index):\n    \"\"\"Remove coloring rule at index, from active theme.\"\"\"\n    theme.TabOrderRules.RemoveAt(index)\n</code></pre>"},{"location":"reference/pyrevit/revit/tabs/#pyrevit.revit.tabs.update_tab_orderrule","title":"<code>update_tab_orderrule(theme, index, color)</code>","text":"<p>Update coloring rule at index, on active theme.</p> Source code in <code>pyrevitlib/pyrevit/revit/tabs.py</code> <pre><code>def update_tab_orderrule(theme, index, color):\n    \"\"\"Update coloring rule at index, on active theme.\"\"\"\n    tor = theme.TabOrderRules[index]\n    tor.Brush = hex_to_brush(color)\n</code></pre>"},{"location":"reference/pyrevit/revit/tabs/#pyrevit.revit.tabs.get_tab_filterrule","title":"<code>get_tab_filterrule(theme, index)</code>","text":"<p>Get coloring filter rule from active theme, at index.</p> Source code in <code>pyrevitlib/pyrevit/revit/tabs.py</code> <pre><code>def get_tab_filterrule(theme, index):\n    \"\"\"Get coloring filter rule from active theme, at index.\"\"\"\n    tfr = theme.TabFilterRules[index]\n    color = tfr.Brush.Color\n    color_hex = ''.join(\n        '{:02X}'.format(int(x)) for x in\n        [color.A, color.R, color.G, color.B]\n        )\n    return '#' + color_hex, str(tfr.TitleFilter)\n</code></pre>"},{"location":"reference/pyrevit/revit/tabs/#pyrevit.revit.tabs.add_tab_filterrule","title":"<code>add_tab_filterrule(theme, color, title_filter)</code>","text":"<p>Add coloring filter rule to active theme.</p> Source code in <code>pyrevitlib/pyrevit/revit/tabs.py</code> <pre><code>def add_tab_filterrule(theme, color, title_filter):\n    \"\"\"Add coloring filter rule to active theme.\"\"\"\n    fc = types.TabColoringRule(hex_to_brush(color), title_filter)\n    theme.TabFilterRules.Add(fc)\n</code></pre>"},{"location":"reference/pyrevit/revit/tabs/#pyrevit.revit.tabs.remove_tab_filterrule","title":"<code>remove_tab_filterrule(theme, index)</code>","text":"<p>Remove coloring filter rule at index, from active theme.</p> Source code in <code>pyrevitlib/pyrevit/revit/tabs.py</code> <pre><code>def remove_tab_filterrule(theme, index):\n    \"\"\"Remove coloring filter rule at index, from active theme.\"\"\"\n    theme.TabFilterRules.RemoveAt(index)\n</code></pre>"},{"location":"reference/pyrevit/revit/tabs/#pyrevit.revit.tabs.update_tab_filterrule","title":"<code>update_tab_filterrule(theme, index, color=None, title_filter=None)</code>","text":"<p>Update coloring filter rule at index, on active theme.</p> Source code in <code>pyrevitlib/pyrevit/revit/tabs.py</code> <pre><code>def update_tab_filterrule(theme, index, color=None, title_filter=None):\n    \"\"\"Update coloring filter rule at index, on active theme.\"\"\"\n    tfr = theme.TabFilterRules[index]\n    if color:\n        tfr.Brush = hex_to_brush(color)\n    if title_filter:\n        tfr.TitleFilter = Regex(title_filter)\n</code></pre>"},{"location":"reference/pyrevit/revit/tabs/#pyrevit.revit.tabs.update_tabstyle","title":"<code>update_tabstyle(theme, tab_style)</code>","text":"<p>Update current tab style.</p> Source code in <code>pyrevitlib/pyrevit/revit/tabs.py</code> <pre><code>def update_tabstyle(theme, tab_style):\n    \"\"\"Update current tab style.\"\"\"\n    for ts in types.TabColoringTheme.AvailableStyles:\n        if ts.Name == tab_style.Name:\n            theme.TabStyle = ts\n</code></pre>"},{"location":"reference/pyrevit/revit/tabs/#pyrevit.revit.tabs.update_family_tabstyle","title":"<code>update_family_tabstyle(theme, tab_style)</code>","text":"<p>Update current family tab style.</p> Source code in <code>pyrevitlib/pyrevit/revit/tabs.py</code> <pre><code>def update_family_tabstyle(theme, tab_style):\n    \"\"\"Update current family tab style.\"\"\"\n    for ts in types.TabColoringTheme.AvailableStyles:\n        if ts.Name == tab_style.Name:\n            theme.FamilyTabStyle = ts\n</code></pre>"},{"location":"reference/pyrevit/revit/tabs/#pyrevit.revit.tabs.get_doc_colorizer_state","title":"<code>get_doc_colorizer_state()</code>","text":"<p>Get state of document colorizer.</p> Source code in <code>pyrevitlib/pyrevit/revit/tabs.py</code> <pre><code>def get_doc_colorizer_state():\n    \"\"\"Get state of document colorizer.\"\"\"\n    return types.DocumentTabEventUtils.IsUpdatingDocumentTabs\n</code></pre>"},{"location":"reference/pyrevit/revit/tabs/#pyrevit.revit.tabs.get_styled_slots","title":"<code>get_styled_slots()</code>","text":"<p>Get list of current styling slots.</p> Source code in <code>pyrevitlib/pyrevit/revit/tabs.py</code> <pre><code>def get_styled_slots():\n    \"\"\"Get list of current styling slots.\"\"\"\n    active_theme = types.DocumentTabEventUtils.TabColoringTheme\n    if active_theme:\n        return list(active_theme.StyledDocuments)\n</code></pre>"},{"location":"reference/pyrevit/revit/tabs/#pyrevit.revit.tabs.toggle_doc_colorizer","title":"<code>toggle_doc_colorizer()</code>","text":"<p>Toggle state of document colorizer.</p> Source code in <code>pyrevitlib/pyrevit/revit/tabs.py</code> <pre><code>def toggle_doc_colorizer():\n    \"\"\"Toggle state of document colorizer.\"\"\"\n    if types.DocumentTabEventUtils.IsUpdatingDocumentTabs:\n        types.DocumentTabEventUtils.StopGroupingDocumentTabs()\n    else:\n        types.DocumentTabEventUtils.StartGroupingDocumentTabs(HOST_APP.uiapp)\n    return types.DocumentTabEventUtils.IsUpdatingDocumentTabs\n</code></pre>"},{"location":"reference/pyrevit/revit/tabs/#pyrevit.revit.tabs.reset_doc_colorizer","title":"<code>reset_doc_colorizer()</code>","text":"<p>Reset document colorizer.</p> Source code in <code>pyrevitlib/pyrevit/revit/tabs.py</code> <pre><code>def reset_doc_colorizer():\n    \"\"\"Reset document colorizer.\"\"\"\n    types.DocumentTabEventUtils.ResetGroupingDocumentTabs()\n</code></pre>"},{"location":"reference/pyrevit/revit/tabs/#pyrevit.revit.tabs.init_doc_colorizer","title":"<code>init_doc_colorizer(usercfg)</code>","text":"<p>Initialize document colorizer from settings.</p> Source code in <code>pyrevitlib/pyrevit/revit/tabs.py</code> <pre><code>def init_doc_colorizer(usercfg):\n    \"\"\"Initialize document colorizer from settings.\"\"\"\n    uiapp = HOST_APP.uiapp\n    if HOST_APP.is_newer_than(2018):\n        current_tabcolorizer = \\\n            envvars.get_pyrevit_env_var(envvars.TABCOLORIZER_ENVVAR)\n\n        new_theme = get_tabcoloring_theme(usercfg)\n\n        # cancel out the colorizer from previous runtime version\n        if current_tabcolorizer:\n            # TODO: adopt the previous slots state\n            # prev_theme = current_tabcolorizer.TabColoringTheme\n            # if prev_theme:\n            #     new_theme.InitSlots(prev_theme)\n            current_tabcolorizer.StopGroupingDocumentTabs()\n\n        # start or stop the document colorizer\n        types.DocumentTabEventUtils.TabColoringTheme = new_theme\n        if usercfg.colorize_docs:\n            types.DocumentTabEventUtils.StartGroupingDocumentTabs(uiapp)\n        else:\n            types.DocumentTabEventUtils.StopGroupingDocumentTabs()\n\n        # set the new colorizer\n        envvars.set_pyrevit_env_var(\n            envvars.TABCOLORIZER_ENVVAR,\n            types.DocumentTabEventUtils\n            )\n</code></pre>"},{"location":"reference/pyrevit/revit/ui/","title":"ui","text":"<p>UI functions.</p>"},{"location":"reference/pyrevit/revit/ui/#pyrevit.revit.ui-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/revit/ui/#pyrevit.revit.ui-functions","title":"Functions","text":""},{"location":"reference/pyrevit/revit/ui/#pyrevit.revit.ui.get_mainwindow_hwnd","title":"<code>get_mainwindow_hwnd()</code>","text":"<p>Get the handle of the main window.</p> <p>Returns:</p> Type Description <code>intptr</code> <p>The handle of the main window.</p> Source code in <code>pyrevitlib/pyrevit/revit/ui.py</code> <pre><code>def get_mainwindow_hwnd():\n    \"\"\"Get the handle of the main window.\n\n    Returns:\n        (intptr): The handle of the main window.\n    \"\"\"\n    return HOST_APP.proc_window\n</code></pre>"},{"location":"reference/pyrevit/revit/ui/#pyrevit.revit.ui.get_mainwindow","title":"<code>get_mainwindow()</code>","text":"<p>Get the main window of the application.</p> <p>Returns:</p> Type Description <code>MainWindow</code> <p>The root visual of the main window.</p> Source code in <code>pyrevitlib/pyrevit/revit/ui.py</code> <pre><code>def get_mainwindow():\n    \"\"\"Get the main window of the application.\n\n    Returns:\n        (MainWindow): The root visual of the main window.\n    \"\"\"\n    try:\n        hwnd_source = Interop.HwndSource.FromHwnd(HOST_APP.proc_window)\n        return hwnd_source.RootVisual\n    except Exception:\n        pass\n</code></pre>"},{"location":"reference/pyrevit/revit/ui/#pyrevit.revit.ui.get_statusbar_hwnd","title":"<code>get_statusbar_hwnd()</code>","text":"<p>Retrieves the handle of the status bar control belonging to the main window.</p> <p>Returns:</p> Type Description <code>IntPtr</code> <p>The handle of the status bar control.</p> Source code in <code>pyrevitlib/pyrevit/revit/ui.py</code> <pre><code>def get_statusbar_hwnd():\n    \"\"\"Retrieves the handle of the status bar control belonging to the main window.\n\n    Returns:\n        (IntPtr): The handle of the status bar control.\n    \"\"\"\n    return Common.User32.FindWindowEx(\n        get_mainwindow_hwnd(),\n        IntPtr.Zero,\n        \"msctls_statusbar32\",\n        \"\")\n</code></pre>"},{"location":"reference/pyrevit/revit/ui/#pyrevit.revit.ui.set_statusbar_text","title":"<code>set_statusbar_text(text)</code>","text":"<p>Sets the text of the status bar.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text to be displayed in the status bar.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the text was successfully set, False otherwise.</p> Source code in <code>pyrevitlib/pyrevit/revit/ui.py</code> <pre><code>def set_statusbar_text(text):\n    \"\"\"Sets the text of the status bar.\n\n    Parameters:\n        text (str): The text to be displayed in the status bar.\n\n    Returns:\n        (bool): True if the text was successfully set, False otherwise.\n    \"\"\"\n    status_bar_ptr = get_statusbar_hwnd()\n\n    if status_bar_ptr != IntPtr.Zero:\n        Common.User32.SetWindowText(status_bar_ptr, text)\n        return True\n\n    return False\n</code></pre>"},{"location":"reference/pyrevit/revit/ui/#pyrevit.revit.ui.get_window_rectangle","title":"<code>get_window_rectangle()</code>","text":"<p>Get the rectangle coordinates of the main window.</p> <p>Returns:</p> Type Description <code>Tuple[int, int, int, int]</code> <p>The left, top, right, and bottom  coordinates of the window rectangle.</p> Source code in <code>pyrevitlib/pyrevit/revit/ui.py</code> <pre><code>def get_window_rectangle():\n    \"\"\"Get the rectangle coordinates of the main window.\n\n    Returns:\n        (Tuple[int, int, int, int]): The left, top, right, and bottom \n            coordinates of the window rectangle.\n    \"\"\"\n    return Common.User32.GetWindowRect(get_mainwindow_hwnd())\n</code></pre>"},{"location":"reference/pyrevit/revit/ui/#pyrevit.revit.ui.is_infocenter_visible","title":"<code>is_infocenter_visible()</code>","text":"<p>Check if the InfoCenter toolbar is visible.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the InfoCenter toolbar is visible, False otherwise.</p> Source code in <code>pyrevitlib/pyrevit/revit/ui.py</code> <pre><code>def is_infocenter_visible():\n    \"\"\"Check if the InfoCenter toolbar is visible.\n\n    Returns:\n        (bool): True if the InfoCenter toolbar is visible, False otherwise.\n    \"\"\"\n    return ad.ComponentManager.InfoCenterToolBar.Visibility == \\\n        Windows.Visibility.Visible\n</code></pre>"},{"location":"reference/pyrevit/revit/ui/#pyrevit.revit.ui.toggle_infocenter","title":"<code>toggle_infocenter()</code>","text":"<p>Toggles the visibility of the InfoCenter toolbar.</p> <p>This function retrieves the current visibility state of the InfoCenter  toolbar and toggles it to the opposite state. If the toolbar is currently collapsed, it will be set to visible, and if it is currently visible, it will be set to collapsed. The function then returns the visibility state of the InfoCenter toolbar after the toggle operation.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the InfoCenter toolbar is visible, False otherwise.</p> Source code in <code>pyrevitlib/pyrevit/revit/ui.py</code> <pre><code>def toggle_infocenter():\n    \"\"\"Toggles the visibility of the InfoCenter toolbar.\n\n    This function retrieves the current visibility state of the InfoCenter \n    toolbar and toggles it to the opposite state.\n    If the toolbar is currently collapsed, it will be set to visible,\n    and if it is currently visible, it will be set to collapsed.\n    The function then returns the visibility state of the InfoCenter toolbar\n    after the toggle operation.\n\n    Returns:\n        (bool): True if the InfoCenter toolbar is visible, False otherwise.\n    \"\"\"\n    current_state = ad.ComponentManager.InfoCenterToolBar.Visibility\n    is_hidden = (current_state == Windows.Visibility.Collapsed)\n    ad.ComponentManager.InfoCenterToolBar.Visibility = \\\n        Windows.Visibility.Visible if is_hidden else \\\n            Windows.Visibility.Collapsed\n    return is_infocenter_visible()\n</code></pre>"},{"location":"reference/pyrevit/revit/ui/#pyrevit.revit.ui.get_ribbon_roottype","title":"<code>get_ribbon_roottype()</code>","text":"<p>Get the type of the ribbon root.</p> <p>Returns:</p> Type Description <code>type</code> <p>type of the ribbon root</p> Source code in <code>pyrevitlib/pyrevit/revit/ui.py</code> <pre><code>def get_ribbon_roottype():\n    \"\"\"Get the type of the ribbon root.\n\n    Returns:\n        (type): type of the ribbon root\n    \"\"\"\n    ap_assm = clr.GetClrType(ap.Windows.RibbonTabList).Assembly\n    for apt in ap_assm.GetTypes():\n        if 'PanelSetListView' in apt.Name:\n            return apt\n</code></pre>"},{"location":"reference/pyrevit/revit/ui/#pyrevit.revit.ui.get_current_theme","title":"<code>get_current_theme()</code>","text":"<p>Get the current UI theme.</p> <p>Returns:</p> Name Type Description <code>UITheme</code> <code>UITheme</code> <p>The current UI theme.</p> Source code in <code>pyrevitlib/pyrevit/revit/ui.py</code> <pre><code>def get_current_theme():\n    \"\"\"Get the current UI theme.\n\n    Returns:\n        UITheme (UITheme): The current UI theme.\n    \"\"\"\n    return UIThemeManager.CurrentTheme\n</code></pre>"},{"location":"reference/pyrevit/revit/ui/#pyrevit.revit.ui.set_current_theme","title":"<code>set_current_theme(theme='Dark')</code>","text":"<p>Sets the current UI theme to either 'Dark' or 'Light'.</p> <p>Parameters:</p> Name Type Description Default <code>theme</code> <code>str</code> <p>The theme to set. Defaults to 'Dark'.</p> <code>'Dark'</code> Source code in <code>pyrevitlib/pyrevit/revit/ui.py</code> <pre><code>def set_current_theme(theme='Dark'):\n    \"\"\"Sets the current UI theme to either 'Dark' or 'Light'.\n\n    Args:\n        theme (str, optional): The theme to set. Defaults to 'Dark'.\n    \"\"\"\n    if theme == 'Dark':\n        UIThemeManager.CurrentTheme = UITheme.Dark\n    else:\n        UIThemeManager.CurrentTheme = UITheme.Light\n</code></pre>"},{"location":"reference/pyrevit/revit/ui/#pyrevit.revit.ui.resolve_icon_file","title":"<code>resolve_icon_file(directory, icon_name)</code>","text":"<p>Resolves the icon file path based on the current UI theme.</p> <p>Parameters:</p> Name Type Description Default <code>directory</code> <code>str</code> <p>The directory where the icon file is located.</p> required <code>icon_name</code> <code>str</code> <p>The name of the icon file.</p> required <p>Returns:</p> Name Type Description <code>full_file_path</code> <code>str</code> <p>The full file path of the icon file.</p> Source code in <code>pyrevitlib/pyrevit/revit/ui.py</code> <pre><code>def resolve_icon_file(directory, icon_name):\n    \"\"\"Resolves the icon file path based on the current UI theme.\n\n    Args:\n        directory (str): The directory where the icon file is located.\n        icon_name (str): The name of the icon file.\n\n    Returns:\n        full_file_path (str): The full file path of the icon file.\n    \"\"\"\n    full_file_path = op.join(directory, icon_name)\n\n    if HOST_APP.is_newer_than(2024, True) and get_current_theme() == UITheme.Dark:\n        dark_icon_name = op.splitext(icon_name)[0] + ICON_DARK_SUFFIX + ICON_FILE_FORMAT\n        dark_file_path = op.join(directory, dark_icon_name)\n        full_file_path = dark_file_path if op.exists(dark_file_path) else full_file_path\n\n    return full_file_path if op.exists(full_file_path) else None\n</code></pre>"},{"location":"reference/pyrevit/revit/units/","title":"units","text":"<p>Unit conversion utilities for Revit.</p>"},{"location":"reference/pyrevit/revit/units/#pyrevit.revit.units-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/revit/units/#pyrevit.revit.units-functions","title":"Functions","text":""},{"location":"reference/pyrevit/revit/units/#pyrevit.revit.units.format_area","title":"<code>format_area(area_value, doc=None)</code>","text":"<p>Return formatted area value in document units.</p> <p>Parameters:</p> Name Type Description Default <code>area_value</code> <code>float</code> <p>area value</p> required <code>doc</code> <code>Document</code> <p>Revit document, defaults to current</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>formatted value</p> Source code in <code>pyrevitlib/pyrevit/revit/units.py</code> <pre><code>def format_area(area_value, doc=None):\n    \"\"\"Return formatted area value in document units.\n\n    Args:\n        area_value (float): area value\n        doc (DB.Document, optional): Revit document, defaults to current\n\n    Returns:\n        (str): formatted value\n    \"\"\"\n    doc = doc or DOCS.doc\n    if HOST_APP.is_newer_than(2021):\n        return DB.UnitFormatUtils.Format(units=doc.GetUnits(),\n                                         specTypeId=DB.SpecTypeId.Area,\n                                         value=area_value,\n                                         forEditing=False)\n    else:\n        return DB.UnitFormatUtils.Format(units=doc.GetUnits(),\n                                         unitType=DB.UnitType.UT_Area,\n                                         value=area_value,\n                                         maxAccuracy=False,\n                                         forEditing=False)\n</code></pre>"},{"location":"reference/pyrevit/revit/units/#pyrevit.revit.units.format_slope","title":"<code>format_slope(slope_value, doc=None)</code>","text":"<p>Return formatted slope value in document units.</p> <p>Parameters:</p> Name Type Description Default <code>slope_value</code> <code>float</code> <p>slope value</p> required <code>doc</code> <code>Document</code> <p>Revit document, defaults to current</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>formatted value</p> Source code in <code>pyrevitlib/pyrevit/revit/units.py</code> <pre><code>def format_slope(slope_value, doc=None):\n    \"\"\"Return formatted slope value in document units.\n\n    Args:\n        slope_value (float): slope value\n        doc (DB.Document, optional): Revit document, defaults to current\n\n    Returns:\n        (str): formatted value\n    \"\"\"\n    doc = doc or DOCS.doc\n    if HOST_APP.is_newer_than(2021):\n        return DB.UnitFormatUtils.Format(units=doc.GetUnits(),\n                                         specTypeId=DB.SpecTypeId.Slope,\n                                         value=slope_value,\n                                         forEditing=False)\n    else:\n        return DB.UnitFormatUtils.Format(units=doc.GetUnits(),\n                                         unitType=DB.UnitType.UT_Slope,\n                                         value=slope_value,\n                                         maxAccuracy=False,\n                                         forEditing=False)\n</code></pre>"},{"location":"reference/pyrevit/revit/units/#pyrevit.revit.units.project_to_viewport","title":"<code>project_to_viewport(xyz, view)</code>","text":"<p>Project a point to viewport coordinates.</p> <p>Parameters:</p> Name Type Description Default <code>xyz</code> <code>XYZ</code> <p>point to project</p> required <code>view</code> <code>View</code> <p>target view</p> required <p>Returns:</p> Type Description <code>UV</code> <p>[description]</p> Source code in <code>pyrevitlib/pyrevit/revit/units.py</code> <pre><code>def project_to_viewport(xyz, view):\n    \"\"\"Project a point to viewport coordinates.\n\n    Args:\n        xyz (DB.XYZ): point to project\n        view (DB.View): target view\n\n    Returns:\n        (DB.UV): [description]\n    \"\"\"\n    plane = _create_view_plane(view)\n    uv, _ = plane.Project(xyz)\n    return uv\n</code></pre>"},{"location":"reference/pyrevit/revit/units/#pyrevit.revit.units.project_to_world","title":"<code>project_to_world(uv, view)</code>","text":"<p>Get view-based point (UV) back to model coordinates.</p> <p>Parameters:</p> Name Type Description Default <code>uv</code> <code>UV</code> <p>point on a view</p> required <code>view</code> <code>View</code> <p>view to get coordinates from</p> required <p>Returns:</p> Type Description <code>XYZ</code> <p>point in world coordinates</p> Source code in <code>pyrevitlib/pyrevit/revit/units.py</code> <pre><code>def project_to_world(uv, view):\n    \"\"\"Get view-based point (UV) back to model coordinates.\n\n    Args:\n        uv (DB.UV): point on a view\n        view (DB.View): view to get coordinates from\n\n    Returns:\n        (DB.XYZ): point in world coordinates\n    \"\"\"\n    plane = _create_view_plane(view)\n    trf = DB.Transform.Identity\n    trf.BasisX = plane.XVec\n    trf.BasisY = plane.YVec\n    trf.BasisZ = plane.Normal\n    trf.Origin = plane.Origin\n    return trf.OfPoint(DB.XYZ(uv.U, uv.V, 0))\n</code></pre>"},{"location":"reference/pyrevit/revit/units/#pyrevit.revit.units.get_spec_name","title":"<code>get_spec_name(forge_id)</code>","text":"<p>Returns the measurable spec name for the given unit id.</p> <p>Parameters:</p> Name Type Description Default <code>forge_id</code> <code>ForgeTypeId</code> <p>Unit id</p> required <p>Returns:</p> Type Description <code>str</code> <p>Spec name</p> Source code in <code>pyrevitlib/pyrevit/revit/units.py</code> <pre><code>def get_spec_name(forge_id):\n    \"\"\"Returns the measurable spec name for the given unit id.\n\n    Args:\n        forge_id (DB.ForgeTypeId): Unit id\n\n    Returns:\n        (str): Spec name\n    \"\"\"\n    if HOST_APP.is_newer_than(2021) \\\n            and DB.UnitUtils.IsMeasurableSpec(forge_id):\n        return DB.UnitUtils.GetTypeCatalogStringForSpec(forge_id)\n    return \"\"\n</code></pre>"},{"location":"reference/pyrevit/revit/units/#pyrevit.revit.units.get_unit_name","title":"<code>get_unit_name(forge_id)</code>","text":"<p>Returns the unit name for the given unit id.</p> <p>Parameters:</p> Name Type Description Default <code>forge_id</code> <code>ForgeTypeId</code> <p>Unit id</p> required <p>Returns:</p> Type Description <code>str</code> <p>Unit name</p> Source code in <code>pyrevitlib/pyrevit/revit/units.py</code> <pre><code>def get_unit_name(forge_id):\n    \"\"\"Returns the unit name for the given unit id.\n\n    Args:\n        forge_id (DB.ForgeTypeId): Unit id\n\n    Returns:\n        (str): Unit name\n    \"\"\"\n    if HOST_APP.is_newer_than(2021) \\\n            and DB.UnitUtils.IsUnit(forge_id):\n        return DB.UnitUtils.GetTypeCatalogStringForUnit(forge_id)\n    return \"\"\n</code></pre>"},{"location":"reference/pyrevit/revit/db/","title":"db","text":"<p>Revit DB objects wrappers.</p>"},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db-classes","title":"Classes","text":""},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.BaseWrapper","title":"<code>BaseWrapper(obj=None)</code>","text":"<p>               Bases: <code>object</code></p> <p>Base revit databse object wrapper.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/__init__.py</code> <pre><code>def __init__(self, obj=None):\n    self._wrapped = obj\n</code></pre>"},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.BaseWrapper-functions","title":"Functions","text":""},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.BaseWrapper.unwrap","title":"<code>unwrap()</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/__init__.py</code> <pre><code>def unwrap(self):\n    return self._wrapped\n</code></pre>"},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.BaseWrapper.compare_attr","title":"<code>compare_attr(src, dest, attr_name, case_sensitive=False)</code>  <code>staticmethod</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/__init__.py</code> <pre><code>@staticmethod\ndef compare_attr(src, dest, attr_name, case_sensitive=False):\n    if case_sensitive:\n        return safe_strtype(getattr(src, attr_name, '')).lower() == \\\n               safe_strtype(getattr(dest, attr_name, '')).lower()\n    else:\n        return safe_strtype(getattr(src, attr_name)) == \\\n               safe_strtype(getattr(dest, attr_name))\n</code></pre>"},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.BaseWrapper.compare_attrs","title":"<code>compare_attrs(src, dest, attr_names, case_sensitive=False)</code>  <code>staticmethod</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/__init__.py</code> <pre><code>@staticmethod\ndef compare_attrs(src, dest, attr_names, case_sensitive=False):\n    return [BaseWrapper.compare_attr(src,\n                                     dest,\n                                     x,\n                                     case_sensitive=case_sensitive)\n            for x in attr_names]\n</code></pre>"},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.ElementWrapper","title":"<code>ElementWrapper(element)</code>","text":"<p>               Bases: <code>BaseWrapper</code></p> <p>Revit element wrapper.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/__init__.py</code> <pre><code>def __init__(self, element):\n    super(ElementWrapper, self).__init__(element)\n    if not isinstance(self._wrapped, DB.Element):\n        raise PyRevitException('Can not wrap object that are not '\n                               'derived from Element.')\n</code></pre>"},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.ElementWrapper-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.ElementWrapper.assoc_doc","title":"<code>assoc_doc</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.ElementWrapper.name","title":"<code>name</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.ElementWrapper.symbol_name","title":"<code>symbol_name</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.ElementWrapper.family_name","title":"<code>family_name</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.ElementWrapper.id","title":"<code>id</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.ElementWrapper.unique_id","title":"<code>unique_id</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.ElementWrapper.workset_id","title":"<code>workset_id</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.ElementWrapper.mark","title":"<code>mark</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.ElementWrapper.location","title":"<code>location</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.ElementWrapper.x","title":"<code>x</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.ElementWrapper.y","title":"<code>y</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.ElementWrapper.z","title":"<code>z</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.ElementWrapper-functions","title":"Functions","text":""},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.ElementWrapper.unwrap","title":"<code>unwrap()</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/__init__.py</code> <pre><code>def unwrap(self):\n    return self._wrapped\n</code></pre>"},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.ElementWrapper.compare_attr","title":"<code>compare_attr(src, dest, attr_name, case_sensitive=False)</code>  <code>staticmethod</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/__init__.py</code> <pre><code>@staticmethod\ndef compare_attr(src, dest, attr_name, case_sensitive=False):\n    if case_sensitive:\n        return safe_strtype(getattr(src, attr_name, '')).lower() == \\\n               safe_strtype(getattr(dest, attr_name, '')).lower()\n    else:\n        return safe_strtype(getattr(src, attr_name)) == \\\n               safe_strtype(getattr(dest, attr_name))\n</code></pre>"},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.ElementWrapper.compare_attrs","title":"<code>compare_attrs(src, dest, attr_names, case_sensitive=False)</code>  <code>staticmethod</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/__init__.py</code> <pre><code>@staticmethod\ndef compare_attrs(src, dest, attr_names, case_sensitive=False):\n    return [BaseWrapper.compare_attr(src,\n                                     dest,\n                                     x,\n                                     case_sensitive=case_sensitive)\n            for x in attr_names]\n</code></pre>"},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.ElementWrapper.get_param","title":"<code>get_param(param_name)</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/__init__.py</code> <pre><code>def get_param(self, param_name):\n    return self._wrapped.LookupParameter(param_name)\n</code></pre>"},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.ElementWrapper.safe_get_param","title":"<code>safe_get_param(param_name, default=None)</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/__init__.py</code> <pre><code>def safe_get_param(self, param_name, default=None):\n    try:\n        return self._wrapped.LookupParameter(param_name)\n    except Exception:\n        return default\n</code></pre>"},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.ExternalRef","title":"<code>ExternalRef(link, extref)</code>","text":"<p>               Bases: <code>ElementWrapper</code></p> <p>External reference wraper.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/__init__.py</code> <pre><code>def __init__(self, link, extref):\n    super(ExternalRef, self).__init__(link)\n    self._extref = extref\n</code></pre>"},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.ExternalRef-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.ExternalRef.assoc_doc","title":"<code>assoc_doc</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.ExternalRef.symbol_name","title":"<code>symbol_name</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.ExternalRef.family_name","title":"<code>family_name</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.ExternalRef.id","title":"<code>id</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.ExternalRef.unique_id","title":"<code>unique_id</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.ExternalRef.workset_id","title":"<code>workset_id</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.ExternalRef.mark","title":"<code>mark</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.ExternalRef.location","title":"<code>location</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.ExternalRef.x","title":"<code>x</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.ExternalRef.y","title":"<code>y</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.ExternalRef.z","title":"<code>z</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.ExternalRef.name","title":"<code>name</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.ExternalRef.link","title":"<code>link</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.ExternalRef.linktype","title":"<code>linktype</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.ExternalRef.path","title":"<code>path</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.ExternalRef-functions","title":"Functions","text":""},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.ExternalRef.unwrap","title":"<code>unwrap()</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/__init__.py</code> <pre><code>def unwrap(self):\n    return self._wrapped\n</code></pre>"},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.ExternalRef.compare_attr","title":"<code>compare_attr(src, dest, attr_name, case_sensitive=False)</code>  <code>staticmethod</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/__init__.py</code> <pre><code>@staticmethod\ndef compare_attr(src, dest, attr_name, case_sensitive=False):\n    if case_sensitive:\n        return safe_strtype(getattr(src, attr_name, '')).lower() == \\\n               safe_strtype(getattr(dest, attr_name, '')).lower()\n    else:\n        return safe_strtype(getattr(src, attr_name)) == \\\n               safe_strtype(getattr(dest, attr_name))\n</code></pre>"},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.ExternalRef.compare_attrs","title":"<code>compare_attrs(src, dest, attr_names, case_sensitive=False)</code>  <code>staticmethod</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/__init__.py</code> <pre><code>@staticmethod\ndef compare_attrs(src, dest, attr_names, case_sensitive=False):\n    return [BaseWrapper.compare_attr(src,\n                                     dest,\n                                     x,\n                                     case_sensitive=case_sensitive)\n            for x in attr_names]\n</code></pre>"},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.ExternalRef.get_param","title":"<code>get_param(param_name)</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/__init__.py</code> <pre><code>def get_param(self, param_name):\n    return self._wrapped.LookupParameter(param_name)\n</code></pre>"},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.ExternalRef.safe_get_param","title":"<code>safe_get_param(param_name, default=None)</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/__init__.py</code> <pre><code>def safe_get_param(self, param_name, default=None):\n    try:\n        return self._wrapped.LookupParameter(param_name)\n    except Exception:\n        return default\n</code></pre>"},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.ExternalRef.reload","title":"<code>reload()</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/__init__.py</code> <pre><code>def reload(self):\n    return self._wrapped.Reload()\n</code></pre>"},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.ProjectParameter","title":"<code>ProjectParameter(param_def, param_binding=None, param_ext_def=False)</code>","text":"<p>               Bases: <code>BaseWrapper</code></p> <p>Project parameter wrapper.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/__init__.py</code> <pre><code>def __init__(self, param_def, param_binding=None, param_ext_def=False):\n    super(ProjectParameter, self).__init__()\n    self.param_def = param_def\n    self.param_binding = param_binding\n    self.param_binding_type = self._determine_binding_type()\n\n    self.shared = False\n    self.param_ext_def = None\n    self.param_guid = ''\n    if param_ext_def:\n        self.shared = True\n        self.param_ext_def = param_ext_def\n        self.param_guid = self.param_ext_def.GUID.ToString()\n\n    self.name = self.param_def.Name\n\n    # Revit &lt;2017 does not have the Id parameter\n    self.param_id = getattr(self.param_def, 'Id', None)\n\n    if HOST_APP.is_exactly(2021):\n        # Revit &gt;2021 does not have the UnitType property\n        self.unit_type = self.param_def.GetSpecTypeId()\n        self.param_type = self.param_def.ParameterType\n        self.param_group = self.param_def.ParameterGroup\n    elif HOST_APP.is_newer_than(2022, or_equal=True):\n        # GetSpecTypeId() Removed in Revit 2022\n        self.unit_type = self.param_def.GetDataType()\n        # Revit &gt;2022 does not have the ParameterType property\n        self.param_type = self.param_def.GetDataType()\n        # ParameterGroup deprecated\n        self.param_group = self.param_def.GetGroupTypeId().TypeId\n    else:\n        self.unit_type = self.param_def.UnitType\n        self.param_type = self.param_def.ParameterType\n        self.param_group = self.param_def.ParameterGroup\n</code></pre>"},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.ProjectParameter-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.ProjectParameter.param_def","title":"<code>param_def = param_def</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.ProjectParameter.param_binding","title":"<code>param_binding = param_binding</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.ProjectParameter.param_binding_type","title":"<code>param_binding_type = self._determine_binding_type()</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.ProjectParameter.shared","title":"<code>shared = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.ProjectParameter.param_ext_def","title":"<code>param_ext_def = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.ProjectParameter.param_guid","title":"<code>param_guid = ''</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.ProjectParameter.name","title":"<code>name = self.param_def.Name</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.ProjectParameter.param_id","title":"<code>param_id = getattr(self.param_def, 'Id', None)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.ProjectParameter.unit_type","title":"<code>unit_type = self.param_def.GetSpecTypeId()</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.ProjectParameter.param_type","title":"<code>param_type = self.param_def.ParameterType</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.ProjectParameter.param_group","title":"<code>param_group = self.param_def.ParameterGroup</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.ProjectParameter-functions","title":"Functions","text":""},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.ProjectParameter.unwrap","title":"<code>unwrap()</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/__init__.py</code> <pre><code>def unwrap(self):\n    return self._wrapped\n</code></pre>"},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.ProjectParameter.compare_attr","title":"<code>compare_attr(src, dest, attr_name, case_sensitive=False)</code>  <code>staticmethod</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/__init__.py</code> <pre><code>@staticmethod\ndef compare_attr(src, dest, attr_name, case_sensitive=False):\n    if case_sensitive:\n        return safe_strtype(getattr(src, attr_name, '')).lower() == \\\n               safe_strtype(getattr(dest, attr_name, '')).lower()\n    else:\n        return safe_strtype(getattr(src, attr_name)) == \\\n               safe_strtype(getattr(dest, attr_name))\n</code></pre>"},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.ProjectParameter.compare_attrs","title":"<code>compare_attrs(src, dest, attr_names, case_sensitive=False)</code>  <code>staticmethod</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/__init__.py</code> <pre><code>@staticmethod\ndef compare_attrs(src, dest, attr_names, case_sensitive=False):\n    return [BaseWrapper.compare_attr(src,\n                                     dest,\n                                     x,\n                                     case_sensitive=case_sensitive)\n            for x in attr_names]\n</code></pre>"},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.ProjectInfo","title":"<code>ProjectInfo(doc)</code>","text":"<p>               Bases: <code>BaseWrapper</code></p> <p>Project information.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/__init__.py</code> <pre><code>def __init__(self, doc):\n    super(ProjectInfo, self).__init__()\n    self._doc = doc\n</code></pre>"},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.ProjectInfo-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.ProjectInfo.name","title":"<code>name</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.ProjectInfo.number","title":"<code>number</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.ProjectInfo.address","title":"<code>address</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.ProjectInfo.author","title":"<code>author</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.ProjectInfo.building_name","title":"<code>building_name</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.ProjectInfo.client_name","title":"<code>client_name</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.ProjectInfo.issue_date","title":"<code>issue_date</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.ProjectInfo.org_name","title":"<code>org_name</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.ProjectInfo.org_desc","title":"<code>org_desc</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.ProjectInfo.status","title":"<code>status</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.ProjectInfo.location","title":"<code>location</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.ProjectInfo.path","title":"<code>path</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.ProjectInfo.filename","title":"<code>filename</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.ProjectInfo-functions","title":"Functions","text":""},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.ProjectInfo.unwrap","title":"<code>unwrap()</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/__init__.py</code> <pre><code>def unwrap(self):\n    return self._wrapped\n</code></pre>"},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.ProjectInfo.compare_attr","title":"<code>compare_attr(src, dest, attr_name, case_sensitive=False)</code>  <code>staticmethod</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/__init__.py</code> <pre><code>@staticmethod\ndef compare_attr(src, dest, attr_name, case_sensitive=False):\n    if case_sensitive:\n        return safe_strtype(getattr(src, attr_name, '')).lower() == \\\n               safe_strtype(getattr(dest, attr_name, '')).lower()\n    else:\n        return safe_strtype(getattr(src, attr_name)) == \\\n               safe_strtype(getattr(dest, attr_name))\n</code></pre>"},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.ProjectInfo.compare_attrs","title":"<code>compare_attrs(src, dest, attr_names, case_sensitive=False)</code>  <code>staticmethod</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/__init__.py</code> <pre><code>@staticmethod\ndef compare_attrs(src, dest, attr_names, case_sensitive=False):\n    return [BaseWrapper.compare_attr(src,\n                                     dest,\n                                     x,\n                                     case_sensitive=case_sensitive)\n            for x in attr_names]\n</code></pre>"},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.XYZPoint","title":"<code>XYZPoint(obj=None)</code>","text":"<p>               Bases: <code>BaseWrapper</code></p> <p>Wrapper for XYZ point.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/__init__.py</code> <pre><code>def __init__(self, obj=None):\n    self._wrapped = obj\n</code></pre>"},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.XYZPoint-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.XYZPoint.x","title":"<code>x</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.XYZPoint.y","title":"<code>y</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.XYZPoint.z","title":"<code>z</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.XYZPoint-functions","title":"Functions","text":""},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.XYZPoint.unwrap","title":"<code>unwrap()</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/__init__.py</code> <pre><code>def unwrap(self):\n    return self._wrapped\n</code></pre>"},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.XYZPoint.compare_attr","title":"<code>compare_attr(src, dest, attr_name, case_sensitive=False)</code>  <code>staticmethod</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/__init__.py</code> <pre><code>@staticmethod\ndef compare_attr(src, dest, attr_name, case_sensitive=False):\n    if case_sensitive:\n        return safe_strtype(getattr(src, attr_name, '')).lower() == \\\n               safe_strtype(getattr(dest, attr_name, '')).lower()\n    else:\n        return safe_strtype(getattr(src, attr_name)) == \\\n               safe_strtype(getattr(dest, attr_name))\n</code></pre>"},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db.XYZPoint.compare_attrs","title":"<code>compare_attrs(src, dest, attr_names, case_sensitive=False)</code>  <code>staticmethod</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/__init__.py</code> <pre><code>@staticmethod\ndef compare_attrs(src, dest, attr_names, case_sensitive=False):\n    return [BaseWrapper.compare_attr(src,\n                                     dest,\n                                     x,\n                                     case_sensitive=case_sensitive)\n            for x in attr_names]\n</code></pre>"},{"location":"reference/pyrevit/revit/db/#pyrevit.revit.db-functions","title":"Functions","text":""},{"location":"reference/pyrevit/revit/db/count/","title":"count","text":"<p>Counting functions for Revit elements.</p>"},{"location":"reference/pyrevit/revit/db/count/#pyrevit.revit.db.count-functions","title":"Functions","text":""},{"location":"reference/pyrevit/revit/db/count/#pyrevit.revit.db.count.count_unpinned_revit_links","title":"<code>count_unpinned_revit_links(revitlinks_elements)</code>","text":"<p>Returns the number of unpinned Revit links in the document.</p> <p>Parameters:</p> Name Type Description Default <code>rvtlinks_elements</code> <code>list</code> <p>A list of Revit link elements.</p> required <p>Returns:</p> Name Type Description <code>int</code> <p>The number of unpinned Revit links in the document.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/count.py</code> <pre><code>def count_unpinned_revit_links(revitlinks_elements):\n    \"\"\"\n    Returns the number of unpinned Revit links in the document.\n\n    Args:\n        rvtlinks_elements (list): A list of Revit link elements.\n\n    Returns:\n        int: The number of unpinned Revit links in the document.\n    \"\"\"\n    return sum(\n        1\n        for rvt_link in revitlinks_elements\n        if hasattr(rvt_link, \"Pinned\") and not rvt_link.Pinned\n    )\n</code></pre>"},{"location":"reference/pyrevit/revit/db/count/#pyrevit.revit.db.count.count_unplaced_rooms","title":"<code>count_unplaced_rooms(rooms)</code>","text":"<p>Counts the number of unplaced rooms in a given list of rooms. An unplaced room is defined as a room with no location (i.e., room.Location is None).</p> <p>Parameters:</p> Name Type Description Default <code>rooms</code> <code>list</code> <p>A list of room objects. Defaults to None.</p> required <p>Returns:</p> Name Type Description <code>int</code> <p>The number of unplaced rooms in the list.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/count.py</code> <pre><code>def count_unplaced_rooms(rooms):\n    \"\"\"\n    Counts the number of unplaced rooms in a given list of rooms.\n    An unplaced room is defined as a room with no location (i.e., room.Location is None).\n\n    Args:\n        rooms (list, optional): A list of room objects. Defaults to None.\n\n    Returns:\n        int: The number of unplaced rooms in the list.\n    \"\"\"\n    return sum(1 for room in rooms if room.Location is None)\n</code></pre>"},{"location":"reference/pyrevit/revit/db/count/#pyrevit.revit.db.count.count_unbounded_rooms","title":"<code>count_unbounded_rooms(rooms)</code>","text":"<p>Counts the number of unbounded rooms (rooms with an area of 0) in the given list of rooms.</p> <p>Parameters:</p> Name Type Description Default <code>rooms</code> <code>list</code> <p>A list of room objects. Each room object should have an 'Area' attribute.</p> required <p>Returns:</p> Name Type Description <code>int</code> <p>The number of unbounded rooms in the list.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/count.py</code> <pre><code>def count_unbounded_rooms(rooms):\n    \"\"\"\n    Counts the number of unbounded rooms (rooms with an area of 0) in the given list of rooms.\n\n    Args:\n        rooms (list, optional): A list of room objects. Each room object should have an 'Area' attribute.\n\n    Returns:\n        int: The number of unbounded rooms in the list.\n    \"\"\"\n    return sum(1 for room in rooms if room.Area == 0)\n</code></pre>"},{"location":"reference/pyrevit/revit/db/count/#pyrevit.revit.db.count.count_analytical_model_activated","title":"<code>count_analytical_model_activated(document)</code>","text":"<p>Returns the number of activated analytical models in the document.</p> <p>Args: document (Document): A Revit document.</p> <p>Returns: int: The number of elements with the analytical model activated in the document.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/count.py</code> <pre><code>def count_analytical_model_activated(document):\n    \"\"\"\n    Returns the number of activated analytical models in the document.\n\n    Args:\n    document (Document): A Revit document.\n\n    Returns:\n    int: The number of elements with the analytical model activated in the document.\n    \"\"\"\n    param = DB.BuiltInParameter.STRUCTURAL_ANALYTICAL_MODEL\n    provider = DB.ParameterValueProvider(DB.ElementId(param))\n    evaluator = DB.FilterNumericEquals()\n    rule = DB.FilterIntegerRule(provider, evaluator, 1)\n    elem_param_filter = DB.ElementParameterFilter(rule)\n    return (\n        DB.FilteredElementCollector(document)\n        .WherePasses(elem_param_filter)\n        .GetElementCount()\n    )\n</code></pre>"},{"location":"reference/pyrevit/revit/db/count/#pyrevit.revit.db.count.count_copied_views","title":"<code>count_copied_views(views_set)</code>","text":"<p>Returns the number of views in the given set that have \"Copy\" or \"Copie\" in their name.</p> <p>Args: views_set (set): A set of views to check for copied views. Defaults to None.</p> <p>Returns: int: The number of views in the set that have \"Copy\" or \"Copie\" in their name.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/count.py</code> <pre><code>def count_copied_views(views_set):\n    \"\"\"\n    Returns the number of views in the given set that have \"Copy\" or \"Copie\" in their name.\n\n    Args:\n    views_set (set): A set of views to check for copied views. Defaults to None.\n\n    Returns:\n    int: The number of views in the set that have \"Copy\" or \"Copie\" in their name.\n    \"\"\"\n    copied_view_names = [\"Copy\", \"Copie\"]\n    copied_views_count = 0\n    for view in views_set:\n        view_name = q.get_name(view)\n        try:\n            # FIXME French compatibility, make it universal\n            if any(name in view_name for name in copied_view_names):\n                copied_views_count += 1\n        except Exception as e:\n            print(e)\n    return copied_views_count\n</code></pre>"},{"location":"reference/pyrevit/revit/db/count/#pyrevit.revit.db.count.count_unused_view_templates","title":"<code>count_unused_view_templates(views_list, document)</code>","text":"<p>Returns the count of unused view templates in the given list of views.</p> <p>Parameters:</p> Name Type Description Default <code>views</code> <code>list</code> <p>A list of views to check for unused view templates.</p> required <p>Returns:</p> Name Type Description <code>int</code> <p>The count of unused view templates.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/count.py</code> <pre><code>def count_unused_view_templates(views_list, document):\n    \"\"\"\n    Returns the count of unused view templates in the given list of views.\n\n    Args:\n        views (list): A list of views to check for unused view templates.\n\n    Returns:\n        int: The count of unused view templates.\n    \"\"\"\n    if views_list is None:\n        return 0\n    applied_templates = [v.ViewTemplateId for v in views_list if hasattr(v, \"ViewTemplateId\")]\n    view_templates_list = q.get_all_view_templates(doc=document)\n    unused_view_templates = []\n    for v in view_templates_list:\n        if v.Id not in applied_templates:\n            unused_view_templates.append(v)\n    return len(unused_view_templates)\n</code></pre>"},{"location":"reference/pyrevit/revit/db/count/#pyrevit.revit.db.count.count_unused_filters_in_views","title":"<code>count_unused_filters_in_views(view_list, filters)</code>","text":"<p>Counts the number of unused filters in the given list of views.</p> <p>Parameters:</p> Name Type Description Default <code>view_list</code> <code>list</code> <p>A list of Revit view objects to check for filter usage.</p> required <code>filters</code> <code>list</code> <p>A list of filter objects to check against the views.</p> required <code>Returns</code> required <code>int</code> <p>The number of filters that are not used in any of the provided views.</p> required Source code in <code>pyrevitlib/pyrevit/revit/db/count.py</code> <pre><code>def count_unused_filters_in_views(view_list, filters):\n    \"\"\"\n    Counts the number of unused filters in the given list of views.\n\n    Args:\n        view_list (list): A list of Revit view objects to check for filter usage.\n        filters (list): A list of filter objects to check against the views.\n\n        Returns:\n        int: The number of filters that are not used in any of the provided views.\n    \"\"\"\n    used_filters_set = set()\n    all_filters = set()\n    get_elementid_value = get_elementid_value_func()\n    for flt in filters:\n        all_filters.add(get_elementid_value(flt.Id))\n    for v in view_list:\n        if hasattr(v, \"AreGraphicsOverridesAllowed\") and v.AreGraphicsOverridesAllowed():\n            view_filters = v.GetFilters()\n            for filter_id in view_filters:\n                used_filters_set.add(get_elementid_value(filter_id))\n    unused_view_filters_count = len(all_filters - used_filters_set)\n    return unused_view_filters_count\n</code></pre>"},{"location":"reference/pyrevit/revit/db/count/#pyrevit.revit.db.count.count_linked_dwg_files","title":"<code>count_linked_dwg_files(document)</code>","text":"<p>Returns the number of linked DWG files in the document.</p> <p>Parameters:</p> Name Type Description Default <code>document</code> <code>Document</code> <p>The Revit document to search for linked DWG files.</p> required <p>Returns:</p> Name Type Description <code>int</code> <p>The number of linked DWG files in the document.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/count.py</code> <pre><code>def count_linked_dwg_files(document):\n    \"\"\"\n    Returns the number of linked DWG files in the document.\n\n    Args:\n        document (DB.Document): The Revit document to search for linked DWG files.\n\n    Returns:\n        int: The number of linked DWG files in the document.\n    \"\"\"\n    dwg_collector = q.get_elements_by_class(DB.ImportInstance, doc=document)\n    if not dwg_collector:\n        return 0\n    dwg_imported = 0\n    for dwg in dwg_collector:\n        if not dwg.IsLinked:\n            dwg_imported += 1\n    return len(dwg_collector) - dwg_imported\n</code></pre>"},{"location":"reference/pyrevit/revit/db/count/#pyrevit.revit.db.count.count_in_place_families","title":"<code>count_in_place_families(document)</code>","text":"<p>This function collects all the in-place families in the given document and returns their count.</p> <p>Args: - document: The Revit document to search for in-place families in.</p> <p>Returns: - int: The count of in-place families.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/count.py</code> <pre><code>def count_in_place_families(document):\n    \"\"\"\n    This function collects all the in-place families in the given document and returns their count.\n\n    Args:\n    - document: The Revit document to search for in-place families in.\n\n    Returns:\n    - int: The count of in-place families.\n    \"\"\"\n    familyinstance_collector = q.get_elements_by_class(DB.FamilyInstance, doc=document)\n    in_place_family_count = sum(\n        1\n        for x in familyinstance_collector\n        if x.Symbol and x.Symbol.Family and x.Symbol.Family.IsInPlace\n    )\n    return in_place_family_count\n</code></pre>"},{"location":"reference/pyrevit/revit/db/count/#pyrevit.revit.db.count.count_total_families","title":"<code>count_total_families(document)</code>","text":"<p>Counts the total number of unique family names in the given Revit document.</p> <p>Parameters:</p> Name Type Description Default <code>document</code> <p>The Revit document to count families from.</p> required <p>Returns:</p> Name Type Description <code>int</code> <p>The total number of unique family names in the document.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/count.py</code> <pre><code>def count_total_families(document):\n    \"\"\"\n    Counts the total number of unique family names in the given Revit document.\n\n    Args:\n        document: The Revit document to count families from.\n\n    Returns:\n        int: The total number of unique family names in the document.\n    \"\"\"\n    families_collection = q.get_families(document, only_editable=True)\n    unique_families = []\n    for fam in families_collection:\n        if fam.Name not in unique_families:\n            unique_families.append(fam.Name)\n    if not unique_families:\n        return 0\n    return len(unique_families)\n</code></pre>"},{"location":"reference/pyrevit/revit/db/count/#pyrevit.revit.db.count.count_textnote_types_with_changed_width_factor","title":"<code>count_textnote_types_with_changed_width_factor(text_notes_types)</code>","text":"<p>Counts the number of text note types that have a width factor different from the default value of 1.</p> <p>Parameters:</p> Name Type Description Default <code>text_notes_types</code> <code>list</code> <p>A list of text note types to check.</p> required <p>Returns:</p> Name Type Description <code>int</code> <p>The number of text note types with a changed width factor.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/count.py</code> <pre><code>def count_textnote_types_with_changed_width_factor(text_notes_types):\n    \"\"\"\n    Counts the number of text note types that have a width factor different from the default value of 1.\n\n    Args:\n        text_notes_types (list): A list of text note types to check.\n\n    Returns:\n        int: The number of text note types with a changed width factor.\n    \"\"\"\n    if text_notes_types is None:\n        return 0\n    changed_width_factor = 0\n    for textnote in text_notes_types:\n        width_factor = textnote.get_Parameter(\n            DB.BuiltInParameter.TEXT_WIDTH_SCALE\n        ).AsDouble()\n        if width_factor != 1:\n            changed_width_factor += 1\n    return changed_width_factor\n</code></pre>"},{"location":"reference/pyrevit/revit/db/count/#pyrevit.revit.db.count.count_textnote_types_with_opaque_background","title":"<code>count_textnote_types_with_opaque_background(text_notes_types)</code>","text":"<p>Counts the number of text notes with an opaque background.</p> <p>Parameters:</p> Name Type Description Default <code>text_notes_types</code> <code>list</code> <p>A list of text note elements.</p> required <p>Returns:</p> Name Type Description <code>int</code> <p>The number of text notes with an opaque background.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/count.py</code> <pre><code>def count_textnote_types_with_opaque_background(text_notes_types):\n    \"\"\"\n    Counts the number of text notes with an opaque background.\n\n    Args:\n        text_notes_types (list): A list of text note elements.\n\n    Returns:\n        int: The number of text notes with an opaque background.\n    \"\"\"\n    if text_notes_types is None:\n        return 0\n    text_opaque_background = 0\n    for textnote in text_notes_types:\n        text_background = textnote.get_Parameter(\n            DB.BuiltInParameter.TEXT_BACKGROUND\n        ).AsInteger()\n        if text_background == 0:\n            text_opaque_background += 1\n    return text_opaque_background\n</code></pre>"},{"location":"reference/pyrevit/revit/db/count/#pyrevit.revit.db.count.count_text_notes_with_all_caps","title":"<code>count_text_notes_with_all_caps(text_notes)</code>","text":"<p>Counts the number of text notes that have all capital letters.</p> <p>Parameters:</p> Name Type Description Default <code>text_notes</code> <code>list</code> <p>A list of text note objects.</p> required <p>Returns:</p> Name Type Description <code>int</code> <p>The number of text notes with all capital letters.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/count.py</code> <pre><code>def count_text_notes_with_all_caps(text_notes):\n    \"\"\"\n    Counts the number of text notes that have all capital letters.\n\n    Args:\n        text_notes (list): A list of text note objects.\n\n    Returns:\n        int: The number of text notes with all capital letters.\n    \"\"\"\n    if text_notes is None:\n        return 0\n    caps_count = 0\n    for text_note in text_notes:\n        caps_status = text_note.GetFormattedText().GetAllCapsStatus()\n        if caps_status:\n            caps_count += 1\n    return caps_count\n</code></pre>"},{"location":"reference/pyrevit/revit/db/count/#pyrevit.revit.db.count.count_unnamed_reference_planes","title":"<code>count_unnamed_reference_planes(reference_planes)</code>","text":"<p>Returns the count of unnamed reference planes in the given document.</p> <p>Parameters:</p> Name Type Description Default <code>document</code> <code>Document</code> <p>The document to search for reference planes. Defaults to the active document.</p> required <p>Returns:</p> Name Type Description <code>int</code> <p>The count of unnamed reference planes.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/count.py</code> <pre><code>def count_unnamed_reference_planes(reference_planes):\n    \"\"\"\n    Returns the count of unnamed reference planes in the given document.\n\n    Args:\n        document (DB.Document): The document to search for reference planes. Defaults to the active document.\n\n    Returns:\n        int: The count of unnamed reference planes.\n    \"\"\"\n    if reference_planes is None:\n        return 0\n    unnamed_ref_planes_count = 0\n    # Default reference plane label, not the most elegant solution\n    reference_plane_default_label = DB.LabelUtils.GetLabelFor(\n        DB.BuiltInCategory.OST_CLines\n    ).replace(\"s\", \"\")\n    for ref_plane in reference_planes:\n        if ref_plane.Name == reference_plane_default_label:\n            unnamed_ref_planes_count += 1\n    return unnamed_ref_planes_count\n</code></pre>"},{"location":"reference/pyrevit/revit/db/count/#pyrevit.revit.db.count.count_dimension_overrides","title":"<code>count_dimension_overrides(dimensions)</code>","text":"<p>Counts the number of dimension overrides in a list of dimensions. This function iterates through a list of dimensions and counts how many of them have a value override. It also checks for overrides in dimension segments if they exist.</p> <p>Parameters:</p> Name Type Description Default <code>dimensions</code> <code>list</code> <p>A list of dimension objects to check for overrides.</p> required <p>Returns:</p> Name Type Description <code>int</code> <p>The total count of dimension overrides found in the list of dimensions.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/count.py</code> <pre><code>def count_dimension_overrides(dimensions):\n    \"\"\"\n    Counts the number of dimension overrides in a list of dimensions.\n    This function iterates through a list of dimensions and counts how many of them\n    have a value override. It also checks for overrides in dimension segments if they exist.\n\n    Args:\n        dimensions (list): A list of dimension objects to check for overrides.\n\n    Returns:\n        int: The total count of dimension overrides found in the list of dimensions.\n    \"\"\"\n    if dimensions is None:\n        return 0\n    dim_overrides_count = 0\n    for d in dimensions:\n        if d.ValueOverride is not None:\n            dim_overrides_count += 1\n        if d.Segments:\n            for seg in d.Segments:\n                if seg.ValueOverride:\n                    dim_overrides_count += 1\n    return dim_overrides_count\n</code></pre>"},{"location":"reference/pyrevit/revit/db/count/#pyrevit.revit.db.count.count_revision_clouds","title":"<code>count_revision_clouds(document)</code>","text":"<p>Returns the number of revision clouds in the given document.</p> <p>Parameters:</p> Name Type Description Default <code>document</code> <code>Document</code> <p>The document to search for revision clouds in. Defaults to the active document.</p> required <p>Returns:</p> Name Type Description <code>int</code> <p>The number of revision clouds in the document.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/count.py</code> <pre><code>def count_revision_clouds(document):\n    \"\"\"\n    Returns the number of revision clouds in the given document.\n\n    Args:\n        document (DB.Document): The document to search for revision clouds in. Defaults to the active document.\n\n    Returns:\n        int: The number of revision clouds in the document.\n    \"\"\"\n    return (\n        DB.FilteredElementCollector(document)\n        .OfCategory(DB.BuiltInCategory.OST_RevisionClouds)\n        .WhereElementIsNotElementType()\n        .GetElementCount()\n    )\n</code></pre>"},{"location":"reference/pyrevit/revit/db/count/#pyrevit.revit.db.count.count_groups","title":"<code>count_groups(doc)</code>","text":"<p>Counts the instances and types of model and detail groups in a Revit document, excluding array members.</p> <p>Parameters:</p> Name Type Description Default <code>doc</code> <code>Document</code> <p>The Revit document to process.</p> required <p>Returns:</p> Name Type Description <code>tuple</code> <p>A tuple containing four integers: - model_group_instances_count (int): The count of model group instances. - model_group_types_count (int): The count of model group types. - detail_group_instances_count (int): The count of detail group instances. - detail_group_types_count (int): The count of detail group types.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/count.py</code> <pre><code>def count_groups(doc):\n    \"\"\"\n    Counts the instances and types of model and detail groups in a Revit document, excluding array members.\n\n    Args:\n        doc (DB.Document): The Revit document to process.\n\n    Returns:\n        tuple: A tuple containing four integers:\n            - model_group_instances_count (int): The count of model group instances.\n            - model_group_types_count (int): The count of model group types.\n            - detail_group_instances_count (int): The count of detail group instances.\n            - detail_group_types_count (int): The count of detail group types.\n    \"\"\"\n    arrays_members_collector = DB.FilteredElementCollector(doc).OfCategory(DB.BuiltInCategory.OST_IOSArrays).ToElements()\n    arraysmembers = set()\n    for array in arrays_members_collector:\n        if array.OwnerViewId != DB.ElementId.InvalidElementId:\n            arraysmembers.update(array.GetOriginalMemberIds())\n            arraysmembers.update(array.GetCopiedMemberIds())\n\n    arrays_grouptype_members = set(doc.GetElement(array).GetTypeId() for array in arraysmembers)\n\n\n    model_groups = DB.FilteredElementCollector(doc).OfCategory(DB.BuiltInCategory.OST_IOSModelGroups).ToElements()\n    model_group_instances_count = 0\n    model_group_types_count = 0\n    for model_group in model_groups:\n        if type(model_group) is DB.GroupType and model_group.Id not in arrays_grouptype_members:\n            model_group_types_count += 1\n        elif type(model_group) is DB.Group and model_group.Id not in arraysmembers:\n            model_group_instances_count += 1\n\n    detail_groups = DB.FilteredElementCollector(doc).OfCategory(DB.BuiltInCategory.OST_IOSDetailGroups).ToElements()\n    detail_group_instances_count = 0\n    detail_group_types_count = 0\n    for detail_group in detail_groups:\n        if type(detail_group) is DB.GroupType and detail_group.Id not in arrays_grouptype_members:\n            detail_group_types_count += 1\n        elif type(detail_group) is DB.Group and detail_group.Id not in arraysmembers:\n            detail_group_instances_count += 1\n    return model_group_instances_count, model_group_types_count, detail_group_instances_count, detail_group_types_count\n</code></pre>"},{"location":"reference/pyrevit/revit/db/create/","title":"create","text":"<p>Database objects creation functions.</p>"},{"location":"reference/pyrevit/revit/db/create/#pyrevit.revit.db.create-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/revit/db/create/#pyrevit.revit.db.create.mlogger","title":"<code>mlogger = get_logger(__name__)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/revit/db/create/#pyrevit.revit.db.create.PARAM_VALUE_EVALUATORS","title":"<code>PARAM_VALUE_EVALUATORS = {'startswith': (DB.FilterStringBeginsWith, DB.FilterStringBeginsWith), 'contains': (DB.FilterStringContains, DB.FilterStringContains), 'endswith': (DB.FilterStringEndsWith, DB.FilterStringEndsWith), '==': (DB.FilterStringEquals, DB.FilterNumericEquals), '&gt;': (DB.FilterStringGreater, DB.FilterNumericGreater), '&gt;=': (DB.FilterStringGreaterOrEqual, DB.FilterNumericGreaterOrEqual), '&lt;': (DB.FilterStringLess, DB.FilterNumericLess), '&lt;=': (DB.FilterStringLessOrEqual, DB.FilterNumericLessOrEqual)}</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/revit/db/create/#pyrevit.revit.db.create-classes","title":"Classes","text":""},{"location":"reference/pyrevit/revit/db/create/#pyrevit.revit.db.create.FamilyLoaderOptionsHandler","title":"<code>FamilyLoaderOptionsHandler(overwriteParameterValues=True)</code>","text":"<p>               Bases: <code>IFamilyLoadOptions</code></p> <p>Family loader options handler.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/create.py</code> <pre><code>def __init__(self, overwriteParameterValues=True):\n    self._overwriteParameterValues = overwriteParameterValues\n</code></pre>"},{"location":"reference/pyrevit/revit/db/create/#pyrevit.revit.db.create.FamilyLoaderOptionsHandler-functions","title":"Functions","text":""},{"location":"reference/pyrevit/revit/db/create/#pyrevit.revit.db.create.FamilyLoaderOptionsHandler.OnFamilyFound","title":"<code>OnFamilyFound(familyInUse, overwriteParameterValues)</code>","text":"<p>A method called when the family was found in the target document.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/create.py</code> <pre><code>def OnFamilyFound(self, familyInUse, overwriteParameterValues): #pylint: disable=W0613\n    \"\"\"A method called when the family was found in the target document.\"\"\"\n    overwriteParameterValues.Value = self._overwriteParameterValues\n    return True\n</code></pre>"},{"location":"reference/pyrevit/revit/db/create/#pyrevit.revit.db.create.FamilyLoaderOptionsHandler.OnSharedFamilyFound","title":"<code>OnSharedFamilyFound(sharedFamily, familyInUse, source, overwriteParameterValues)</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/create.py</code> <pre><code>def OnSharedFamilyFound(self,\n                        sharedFamily, #pylint: disable=W0613\n                        familyInUse, #pylint: disable=W0613\n                        source, #pylint: disable=W0613\n                        overwriteParameterValues): #pylint: disable=W0613\n    source.Value = DB.FamilySource.Family\n    overwriteParameterValues.Value = self._overwriteParameterValues\n    return True\n</code></pre>"},{"location":"reference/pyrevit/revit/db/create/#pyrevit.revit.db.create.CopyUseDestination","title":"<code>CopyUseDestination</code>","text":"<p>               Bases: <code>IDuplicateTypeNamesHandler</code></p> <p>Handle copy and paste errors.</p>"},{"location":"reference/pyrevit/revit/db/create/#pyrevit.revit.db.create.CopyUseDestination-functions","title":"Functions","text":""},{"location":"reference/pyrevit/revit/db/create/#pyrevit.revit.db.create.CopyUseDestination.OnDuplicateTypeNamesFound","title":"<code>OnDuplicateTypeNamesFound(args)</code>","text":"<p>Use destination model types if duplicate.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/create.py</code> <pre><code>def OnDuplicateTypeNamesFound(self, args):  #pylint: disable=unused-argument\n    \"\"\"Use destination model types if duplicate.\"\"\"\n    return DB.DuplicateTypeAction.UseDestinationTypes\n</code></pre>"},{"location":"reference/pyrevit/revit/db/create/#pyrevit.revit.db.create-functions","title":"Functions","text":""},{"location":"reference/pyrevit/revit/db/create/#pyrevit.revit.db.create.create_param_from_definition","title":"<code>create_param_from_definition(param_def, category_list, builtin_param_group, type_param=False, allow_vary_betwen_groups=False, doc=None)</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/create.py</code> <pre><code>def create_param_from_definition(param_def,\n                                 category_list,\n                                 builtin_param_group,\n                                 type_param=False,\n                                 allow_vary_betwen_groups=False, #pylint: disable=unused-argument\n                                 doc=None):\n    doc = doc or DOCS.doc\n    # verify and create category set\n    if category_list:\n        category_set = query.get_category_set(category_list, doc=doc)\n    else:\n        category_set = query.get_all_category_set(doc=doc)\n\n    if not category_set:\n        raise PyRevitException('Can not create category set.')\n\n    # create binding\n    if type_param:\n        new_binding = \\\n            HOST_APP.app.Create.NewTypeBinding(category_set)\n    else:\n        new_binding = \\\n            HOST_APP.app.Create.NewInstanceBinding(category_set)\n\n    # FIXME: set allow_vary_betwen_groups\n    # param_def.SetAllowVaryBetweenGroups(doc, allow_vary_betwen_groups)\n    # insert the binding\n    doc.ParameterBindings.Insert(param_def,\n                                 new_binding,\n                                 builtin_param_group)\n    return True\n</code></pre>"},{"location":"reference/pyrevit/revit/db/create/#pyrevit.revit.db.create.create_shared_param","title":"<code>create_shared_param(param_id_or_name, category_list, builtin_param_group, type_param=False, allow_vary_betwen_groups=False, doc=None)</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/create.py</code> <pre><code>def create_shared_param(param_id_or_name,\n                        category_list,\n                        builtin_param_group,\n                        type_param=False,\n                        allow_vary_betwen_groups=False,\n                        doc=None):\n    doc = doc or DOCS.doc\n    # get define shared parameters\n    # this is where we grab the ExternalDefinition for the parameter\n    msp_list = query.get_defined_sharedparams()\n    param_def = None\n    for msp in msp_list:\n        if msp == param_id_or_name:\n            param_def = msp.param_def\n    if not param_def:\n        raise PyRevitException('Can not find shared parameter.')\n\n    # now create the binding for this definition\n    return create_param_from_definition(\n        param_def,\n        category_list,\n        builtin_param_group=builtin_param_group,\n        type_param=type_param,\n        allow_vary_betwen_groups=allow_vary_betwen_groups,\n        doc=doc)\n</code></pre>"},{"location":"reference/pyrevit/revit/db/create/#pyrevit.revit.db.create.create_new_project","title":"<code>create_new_project(template=None, imperial=True)</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/create.py</code> <pre><code>def create_new_project(template=None, imperial=True):\n    if template:\n        return HOST_APP.app.NewProjectDocument(template)\n    else:\n        units = DB.UnitSystem.Imperial if imperial else DB.UnitSystem.Metric\n        return HOST_APP.app.NewProjectDocument(units)\n</code></pre>"},{"location":"reference/pyrevit/revit/db/create/#pyrevit.revit.db.create.create_revision","title":"<code>create_revision(description=None, by=None, to=None, date=None, alphanum=False, nonum=False, doc=None)</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/create.py</code> <pre><code>def create_revision(description=None, by=None, to=None, date=None,\n                    alphanum=False, nonum=False, doc=None):\n    new_rev = DB.Revision.Create(doc or DOCS.doc)\n    new_rev.Description = description\n    new_rev.IssuedBy = by or ''\n    new_rev.IssuedTo = to or ''\n    if alphanum:\n        new_rev.NumberType = DB.RevisionNumberType.Alphanumeric\n    if nonum:\n        new_rev.NumberType = coreutils.get_enum_none(DB.RevisionNumberType)\n    new_rev.RevisionDate = date or ''\n    return new_rev\n</code></pre>"},{"location":"reference/pyrevit/revit/db/create/#pyrevit.revit.db.create.copy_elements","title":"<code>copy_elements(element_ids, src_doc, dest_doc)</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/create.py</code> <pre><code>def copy_elements(element_ids, src_doc, dest_doc):\n    cp_options = DB.CopyPasteOptions()\n    cp_options.SetDuplicateTypeNamesHandler(CopyUseDestination())\n\n    if element_ids:\n        DB.ElementTransformUtils.CopyElements(\n            src_doc,\n            framework.List[DB.ElementId](element_ids),\n            dest_doc, None, cp_options\n            )\n\n    return True\n</code></pre>"},{"location":"reference/pyrevit/revit/db/create/#pyrevit.revit.db.create.copy_revisions","title":"<code>copy_revisions(revisions, src_doc, dest_doc)</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/create.py</code> <pre><code>def copy_revisions(revisions, src_doc, dest_doc):\n    if revisions is None:\n        all_src_revs = query.get_revisions(doc=src_doc)\n    else:\n        all_src_revs = revisions\n\n    for src_rev in all_src_revs:\n        # get an updated list of revisions\n        if any([query.compare_revisions(x, src_rev)\n                for x in query.get_revisions(doc=dest_doc)]):\n            mlogger.debug('Revision already exists: %s %s',\n                          src_rev.RevisionDate, src_rev.Description)\n        else:\n            mlogger.debug('Creating revision: %s %s',\n                          src_rev.RevisionDate, src_rev.Description)\n            create_revision(description=src_rev.Description,\n                            by=src_rev.IssuedBy,\n                            to=src_rev.IssuedTo,\n                            date=src_rev.RevisionDate,\n                            doc=dest_doc)\n</code></pre>"},{"location":"reference/pyrevit/revit/db/create/#pyrevit.revit.db.create.copy_all_revisions","title":"<code>copy_all_revisions(src_doc, dest_doc)</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/create.py</code> <pre><code>def copy_all_revisions(src_doc, dest_doc):\n    copy_revisions(None, src_doc=src_doc, dest_doc=dest_doc)\n</code></pre>"},{"location":"reference/pyrevit/revit/db/create/#pyrevit.revit.db.create.copy_viewtemplates","title":"<code>copy_viewtemplates(viewtemplates, src_doc, dest_doc)</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/create.py</code> <pre><code>def copy_viewtemplates(viewtemplates, src_doc, dest_doc):\n    if viewtemplates is None:\n        all_viewtemplates = query.get_all_view_templates(doc=src_doc)\n    else:\n        all_viewtemplates = viewtemplates\n\n    vtemp_ids = [x.Id for x in all_viewtemplates]\n    copy_elements(vtemp_ids, src_doc=src_doc, dest_doc=dest_doc)\n</code></pre>"},{"location":"reference/pyrevit/revit/db/create/#pyrevit.revit.db.create.create_sheet","title":"<code>create_sheet(sheet_num, sheet_name, titleblock_id=DB.ElementId.InvalidElementId, doc=None)</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/create.py</code> <pre><code>def create_sheet(sheet_num, sheet_name,\n                 titleblock_id=DB.ElementId.InvalidElementId, doc=None):\n    doc = doc or DOCS.doc\n    mlogger.debug('Creating sheet: %s - %s', sheet_num, sheet_name)\n    mlogger.debug('Titleblock id is: %s', titleblock_id)\n    newsheet = DB.ViewSheet.Create(doc, titleblock_id)\n    newsheet.Name = sheet_name\n    newsheet.SheetNumber = sheet_num\n    return newsheet\n</code></pre>"},{"location":"reference/pyrevit/revit/db/create/#pyrevit.revit.db.create.create_3d_view","title":"<code>create_3d_view(view_name, isometric=True, doc=None)</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/create.py</code> <pre><code>def create_3d_view(view_name, isometric=True, doc=None):\n    doc = doc or DOCS.doc\n    nview = query.get_view_by_name(view_name, doc=doc)\n    if not nview:\n        default_3dview_type = \\\n            doc.GetDefaultElementTypeId(DB.ElementTypeGroup.ViewType3D)\n        if isometric:\n            nview = DB.View3D.CreateIsometric(doc, default_3dview_type)\n        else:\n            nview = DB.View3D.CreatePerspective(doc, default_3dview_type)\n\n    if HOST_APP.is_newer_than('2019', or_equal=True):\n        nview.Name = view_name\n    else:\n        nview.ViewName = view_name\n\n    nview.CropBoxActive = False\n    nview.CropBoxVisible = False\n    if nview.CanToggleBetweenPerspectiveAndIsometric():\n        if isometric:\n            nview.ToggleToIsometric()\n        else:\n            nview.ToggleToPerspective()\n    return nview\n</code></pre>"},{"location":"reference/pyrevit/revit/db/create/#pyrevit.revit.db.create.create_revision_sheetset","title":"<code>create_revision_sheetset(revisions, name_format='Revision {}', match_any=True, doc=None)</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/create.py</code> <pre><code>def create_revision_sheetset(revisions,\n                             name_format='Revision {}',\n                             match_any=True,\n                             doc=None):\n    doc = doc or DOCS.doc\n    # get printed printmanager\n    printmanager = doc.PrintManager\n    printmanager.PrintRange = DB.PrintRange.Select\n    viewsheetsetting = printmanager.ViewSheetSetting\n\n    # collect data\n    sheetsnotsorted = DB.FilteredElementCollector(doc)\\\n                        .OfCategory(DB.BuiltInCategory.OST_Sheets)\\\n                        .WhereElementIsNotElementType()\\\n                        .ToElements()\n\n    sheets = sorted(sheetsnotsorted, key=lambda x: x.SheetNumber)\n    viewsheetsets = DB.FilteredElementCollector(doc)\\\n                      .OfClass(DB.ViewSheetSet)\\\n                      .WhereElementIsNotElementType()\\\n                      .ToElements()\n\n    allviewsheetsets = {vss.Name: vss for vss in viewsheetsets}\n    revnums = [str(query.get_rev_number(x)) for x in revisions]\n    sheetsetname = name_format.format(', '.join(revnums))\n\n    # find revised sheets\n    myviewset = DB.ViewSet()\n    check_func = any if match_any else all\n    get_elementid_value = get_elementid_value_func()\n    for sheet in sheets:\n        revs = sheet.GetAllRevisionIds()\n        sheet_revids = [get_elementid_value(x) for x in revs]\n        if check_func([get_elementid_value(x.Id) in sheet_revids for x in revisions]):\n                myviewset.Insert(sheet)\n    # needs transaction\n    # delete existing sheet set if any\n    # create new sheet set\n    if sheetsetname in allviewsheetsets.keys():\n        viewsheetsetting.CurrentViewSheetSet = \\\n            allviewsheetsets[sheetsetname]\n        viewsheetsetting.Delete()\n\n    viewsheetsetting.CurrentViewSheetSet.Views = myviewset\n    viewsheetsetting.SaveAs(sheetsetname)\n    return myviewset\n</code></pre>"},{"location":"reference/pyrevit/revit/db/create/#pyrevit.revit.db.create.load_family","title":"<code>load_family(family_file, doc=None)</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/create.py</code> <pre><code>def load_family(family_file, doc=None):\n    doc = doc or DOCS.doc\n    mlogger.debug('Loading family from: %s', family_file)\n    ret_ref = clr.Reference[DB.Family]()\n    return doc.LoadFamily(family_file, FamilyLoaderOptionsHandler(), ret_ref)\n</code></pre>"},{"location":"reference/pyrevit/revit/db/create/#pyrevit.revit.db.create.enable_worksharing","title":"<code>enable_worksharing(levels_workset_name='Shared Levels and Grids', default_workset_name='Workset1', doc=None)</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/create.py</code> <pre><code>def enable_worksharing(levels_workset_name='Shared Levels and Grids',\n                       default_workset_name='Workset1',\n                       doc=None):\n    doc = doc or DOCS.doc\n    if not doc.IsWorkshared:\n        if doc.CanEnableWorksharing:\n            doc.EnableWorksharing(levels_workset_name, default_workset_name)\n        else:\n            raise PyRevitException('Worksharing can not be enabled. '\n                                   '(CanEnableWorksharing is False)')\n</code></pre>"},{"location":"reference/pyrevit/revit/db/create/#pyrevit.revit.db.create.create_workset","title":"<code>create_workset(workset_name, doc=None)</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/create.py</code> <pre><code>def create_workset(workset_name, doc=None):\n    doc = doc or DOCS.doc\n    if not doc.IsWorkshared:\n        raise PyRevitException('Document is not workshared.')\n\n    return DB.Workset.Create(doc, workset_name)\n</code></pre>"},{"location":"reference/pyrevit/revit/db/create/#pyrevit.revit.db.create.create_filledregion","title":"<code>create_filledregion(filledregion_name, fillpattern_element, doc=None)</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/create.py</code> <pre><code>def create_filledregion(filledregion_name, fillpattern_element, doc=None):\n    doc = doc or DOCS.doc\n    filledregion_types = DB.FilteredElementCollector(doc) \\\n                           .OfClass(DB.FilledRegionType)\n    for filledregion_type in filledregion_types:\n        if query.get_name(filledregion_type) == filledregion_name:\n            raise PyRevitException('Filled Region matching \\\"{}\\\" already '\n                                   'exists.'.format(filledregion_name))\n    source_filledregion = filledregion_types.FirstElement()\n    new_filledregion = source_filledregion.Duplicate(filledregion_name)\n    if HOST_APP.is_newer_than(2019, or_equal=True) : \n        new_filledregion.ForegroundPatternId = fillpattern_element.Id\n    else: \n        new_filledregion.FillPatternId = fillpattern_element.Id\n    return new_filledregion\n</code></pre>"},{"location":"reference/pyrevit/revit/db/create/#pyrevit.revit.db.create.create_text_type","title":"<code>create_text_type(name, font_name=None, font_size=0.01042, tab_size=0.02084, bold=False, italic=False, underline=False, with_factor=1.0, doc=None)</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/create.py</code> <pre><code>def create_text_type(name,\n                     font_name=None,\n                     font_size=0.01042,\n                     tab_size=0.02084,\n                     bold=False,\n                     italic=False,\n                     underline=False,\n                     with_factor=1.0,\n                     doc=None):\n    doc = doc or DOCS.doc\n    tnote_typeid = doc.GetDefaultElementTypeId(DB.ElementTypeGroup.TextNoteType)\n    tnote_type = doc.GetElement(tnote_typeid)\n    spec_tnote_type = tnote_type.Duplicate(name)\n    if font_name:\n        spec_tnote_type.Parameter[DB.BuiltInParameter.TEXT_FONT].Set(font_name)\n    spec_tnote_type.Parameter[DB.BuiltInParameter.TEXT_SIZE].Set(font_size)\n    spec_tnote_type.Parameter[DB.BuiltInParameter.TEXT_TAB_SIZE].Set(tab_size)\n    spec_tnote_type.Parameter[DB.BuiltInParameter.TEXT_STYLE_BOLD]\\\n        .Set(1 if bold else 0)\n    spec_tnote_type.Parameter[DB.BuiltInParameter.TEXT_STYLE_ITALIC]\\\n        .Set(1 if italic else 0)\n    spec_tnote_type.Parameter[DB.BuiltInParameter.TEXT_STYLE_UNDERLINE]\\\n        .Set(1 if underline else 0)\n    spec_tnote_type.Parameter[DB.BuiltInParameter.TEXT_WIDTH_SCALE]\\\n        .Set(1 if with_factor else 0)\n    return spec_tnote_type\n</code></pre>"},{"location":"reference/pyrevit/revit/db/create/#pyrevit.revit.db.create.create_param_value_filter","title":"<code>create_param_value_filter(filter_name, param_id, param_values, evaluator, match_any=True, case_sensitive=False, exclude=False, category_list=None, doc=None)</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/create.py</code> <pre><code>def create_param_value_filter(filter_name,\n                              param_id,\n                              param_values,\n                              evaluator,\n                              match_any=True,\n                              case_sensitive=False,\n                              exclude=False,\n                              category_list=None,\n                              doc=None):\n    doc = doc or DOCS.doc\n\n    if HOST_APP.is_newer_than(2019, or_equal=True):\n        rules = None\n    else:\n        rules = framework.List[DB.FilterRule]()\n    param_prov = DB.ParameterValueProvider(param_id)\n\n    # decide how to combine the rules\n    logical_merge = \\\n        DB.LogicalOrFilter if match_any else DB.LogicalAndFilter\n\n    # create the rule set\n    get_elementid_value = get_elementid_value_func()\n    for pvalue in param_values:\n        # grab the evaluator\n        param_eval = PARAM_VALUE_EVALUATORS.get(evaluator, None)\n        if not param_eval:\n            raise PyRevitException(\"Unknown evaluator\")\n\n        # if value is str, eval is expected to be str\n        str_eval, num_eval = param_eval\n        if isinstance(pvalue, str):\n            if HOST_APP.is_newer_than(2022):\n                rule = DB.FilterStringRule(param_prov,\n                                        str_eval(),\n                                        pvalue)\n            else:\n                rule = DB.FilterStringRule(param_prov,\n                                        str_eval(),\n                                        pvalue,\n                                        case_sensitive)\n        # if num_eval is for str, e.g. \"contains\", or \"startswith\"\n        # convert numeric values to str\n        elif isinstance(num_eval, DB.FilterStringRuleEvaluator):\n            if isinstance(pvalue, (int, float)):\n                if HOST_APP.is_newer_than(2022):\n                    rule = DB.FilterStringRule(param_prov,\n                                            num_eval(),\n                                            str(pvalue))\n                else:\n                    rule = DB.FilterStringRule(param_prov,\n                                            num_eval(),\n                                            str(pvalue),\n                                            False)\n            elif isinstance(pvalue, DB.ElementId):\n                p_id = str(get_elementid_value(pvalue))\n                if HOST_APP.is_newer_than(2022):\n                    rule = DB.FilterStringRule(param_prov,\n                                            num_eval(),\n                                            p_id)\n                else:\n                    rule = DB.FilterStringRule(param_prov,\n                                            num_eval(),\n                                            p_id,\n                                            False)\n        # if value is int, eval is expected to be numeric\n        elif isinstance(pvalue, int):\n            rule = DB.FilterIntegerRule(param_prov,\n                                        num_eval(),\n                                        pvalue)\n        # if value is float, eval is expected to be numeric\n        elif isinstance(pvalue, float):\n            rule = DB.FilterDoubleRule(param_prov,\n                                       num_eval(),\n                                       pvalue,\n                                       sys.float_info.epsilon)\n        # if value is element id, eval is expected to be numeric\n        elif isinstance(pvalue, DB.ElementId):\n            rule = DB.FilterElementIdRule(param_prov,\n                                          num_eval(),\n                                          pvalue)\n        if exclude:\n            rule = DB.FilterInverseRule(rule)\n\n        if HOST_APP.is_newer_than(2019, or_equal=True):\n            if rules:\n                rules = logical_merge(rules, DB.ElementParameterFilter(rule))\n            else:\n                rules = DB.ElementParameterFilter(rule)\n        else:\n            rules.Add(rule)\n\n    # collect applicable categories\n    if category_list:\n        category_set = query.get_category_set(category_list, doc=doc)\n    else:\n        category_set = query.get_all_category_set(doc=doc)\n\n    # filter the applicable categories\n    filter_cats = []\n    for cat in category_set:\n        if DB.ParameterFilterElement.AllRuleParametersApplicable(\n                doc,\n                framework.List[DB.ElementId]([cat.Id]),\n                rules\n            ):\n            filter_cats.append(cat.Id)\n\n    # create filter\n    return DB.ParameterFilterElement.Create(\n        doc,\n        filter_name,\n        framework.List[DB.ElementId](filter_cats),\n        rules\n        )\n</code></pre>"},{"location":"reference/pyrevit/revit/db/delete/","title":"delete","text":"<p>Database elements deletion functions.</p>"},{"location":"reference/pyrevit/revit/db/delete/#pyrevit.revit.db.delete-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/revit/db/delete/#pyrevit.revit.db.delete-functions","title":"Functions","text":""},{"location":"reference/pyrevit/revit/db/delete/#pyrevit.revit.db.delete.clear_sheet_revisions","title":"<code>clear_sheet_revisions(sheet)</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/delete.py</code> <pre><code>def clear_sheet_revisions(sheet):\n    sheet.SetAdditionalRevisionIds(List[DB.ElementId]([]))\n</code></pre>"},{"location":"reference/pyrevit/revit/db/delete/#pyrevit.revit.db.delete.delete_elements","title":"<code>delete_elements(element_list, doc=None)</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/delete.py</code> <pre><code>def delete_elements(element_list, doc=None):\n    doc = doc or DOCS.doc\n    element_ids = ensure.ensure_element_ids(element_list)\n    return doc.Delete(List[DB.ElementId](element_ids))\n</code></pre>"},{"location":"reference/pyrevit/revit/db/delete/#pyrevit.revit.db.delete.delete_revision","title":"<code>delete_revision(rvt_rev, doc=None)</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/delete.py</code> <pre><code>def delete_revision(rvt_rev, doc=None):\n    doc = doc or DOCS.doc\n    return doc.Delete(rvt_rev.Id)\n</code></pre>"},{"location":"reference/pyrevit/revit/db/delete/#pyrevit.revit.db.delete.reset_subcategories","title":"<code>reset_subcategories(doc=None, purgable=False, filterfunc=None)</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/delete.py</code> <pre><code>def reset_subcategories(doc=None, purgable=False, filterfunc=None):\n    # get subcategories\n    cats_to_delete = query.get_subcategories(doc=doc,\n                                             purgable=purgable,\n                                             filterfunc=filterfunc)\n    doc.Delete(List[DB.ElementId]([x.Id for x in cats_to_delete]))\n    del cats_to_delete\n</code></pre>"},{"location":"reference/pyrevit/revit/db/ensure/","title":"ensure","text":"<p>Idempotent operations to ensure a datbase object exists.</p>"},{"location":"reference/pyrevit/revit/db/ensure/#pyrevit.revit.db.ensure-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/revit/db/ensure/#pyrevit.revit.db.ensure.mlogger","title":"<code>mlogger = get_logger(__name__)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/revit/db/ensure/#pyrevit.revit.db.ensure-classes","title":"Classes","text":""},{"location":"reference/pyrevit/revit/db/ensure/#pyrevit.revit.db.ensure-functions","title":"Functions","text":""},{"location":"reference/pyrevit/revit/db/ensure/#pyrevit.revit.db.ensure.ensure_sharedparam","title":"<code>ensure_sharedparam(sparam_name, sparam_categories, sparam_group, load_param=True, allow_vary_betwen_groups=False, doc=None)</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/ensure.py</code> <pre><code>def ensure_sharedparam(sparam_name, sparam_categories, sparam_group,\n                       load_param=True, allow_vary_betwen_groups=False,\n                       doc=None):\n    doc = doc or DOCS.doc\n    if query.model_has_parameter(sparam_name, doc=doc):\n        if allow_vary_betwen_groups:\n            param = query.get_project_parameter(sparam_name, doc=doc)\n            if isinstance(param.param_def, DB.InternalDefinition) \\\n                    and not param.param_def.VariesAcrossGroups:\n                param.param_def.SetAllowVaryBetweenGroups(doc, True)\n        return True\n    elif load_param:\n        create.create_shared_param(\n            sparam_name,\n            sparam_categories,\n            sparam_group,\n            doc=doc,\n            allow_vary_betwen_groups=allow_vary_betwen_groups\n            )\n        return True\n</code></pre>"},{"location":"reference/pyrevit/revit/db/ensure/#pyrevit.revit.db.ensure.ensure_sharedparam_file","title":"<code>ensure_sharedparam_file(spfilepath)</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/ensure.py</code> <pre><code>def ensure_sharedparam_file(spfilepath):\n    if spfilepath and not HOST_APP.app.SharedParametersFilename:\n        HOST_APP.app.SharedParametersFilename = spfilepath\n    elif HOST_APP.app.SharedParametersFilename \\\n            and not op.normpath(HOST_APP.app.SharedParametersFilename) \\\n                == op.normpath(spfilepath):\n        HOST_APP.app.SharedParametersFilename = spfilepath\n\n    return HOST_APP.app.OpenSharedParameterFile()\n</code></pre>"},{"location":"reference/pyrevit/revit/db/ensure/#pyrevit.revit.db.ensure.ensure_family","title":"<code>ensure_family(family_name, family_file, doc=None)</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/ensure.py</code> <pre><code>def ensure_family(family_name, family_file, doc=None):\n    doc = doc or DOCS.doc\n    famsym = query.get_family(family_name, doc=doc)\n    if not famsym:\n        with transaction.Transaction('Load Family', doc=doc):\n            mlogger.debug('Family \\\"%s\\\" did not exist.', family_name)\n            if create.load_family(family_file, doc=doc):\n                return query.get_family(family_name, doc=doc)\n            else:\n                raise PyRevitException('Error loading family from: {}'\n                                       .format(family_file))\n    return famsym\n</code></pre>"},{"location":"reference/pyrevit/revit/db/ensure/#pyrevit.revit.db.ensure.ensure_element_ids","title":"<code>ensure_element_ids(mixed_list)</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/ensure.py</code> <pre><code>def ensure_element_ids(mixed_list):\n    element_id_list = []\n\n    if not hasattr(mixed_list, '__iter__'):\n        mixed_list = [mixed_list]\n\n    for item in mixed_list:\n        if isinstance(item, DB.ElementId):\n            element_id_list.append(item)\n        elif isinstance(item, DB.Element):\n            element_id_list.append(item.Id)\n        elif hasattr(item, 'Id') and isinstance(item.Id, DB.ElementId):\n            element_id_list.append(item.Id)\n        elif isinstance(item, int):\n            element_id_list.append(DB.ElementId(item))\n\n    return element_id_list\n</code></pre>"},{"location":"reference/pyrevit/revit/db/ensure/#pyrevit.revit.db.ensure.ensure_workset","title":"<code>ensure_workset(workset_name, partial=False, doc=None)</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/ensure.py</code> <pre><code>def ensure_workset(workset_name, partial=False, doc=None):\n    doc = doc or DOCS.doc\n    workset = query.model_has_workset(workset_name, partial=partial, doc=doc)\n    if workset:\n        return workset\n    else:\n        return create.create_workset(workset_name, doc=doc)\n</code></pre>"},{"location":"reference/pyrevit/revit/db/ensure/#pyrevit.revit.db.ensure.ensure_text_type","title":"<code>ensure_text_type(name, font_name=None, font_size=0.01042, tab_size=0.02084, bold=False, italic=False, underline=False, with_factor=1.0, doc=None)</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/ensure.py</code> <pre><code>def ensure_text_type(name,\n                     font_name=None,\n                     font_size=0.01042,\n                     tab_size=0.02084,\n                     bold=False,\n                     italic=False,\n                     underline=False,\n                     with_factor=1.0,\n                     doc=None):\n    doc = doc or DOCS.doc\n    # check if type exists\n    for ttype in query.get_types_by_class(DB.TextNoteType, doc=doc):\n        if query.get_name(ttype) == name:\n            return ttype\n    # otherwise create it\n    return create.create_text_type(\n        name,\n        font_name=font_name,\n        font_size=font_size,\n        tab_size=tab_size,\n        bold=bold,\n        italic=italic,\n        underline=underline,\n        with_factor=with_factor,\n        doc=doc)\n</code></pre>"},{"location":"reference/pyrevit/revit/db/ensure/#pyrevit.revit.db.ensure.revision_has_numbertype","title":"<code>revision_has_numbertype(revision)</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/ensure.py</code> <pre><code>def revision_has_numbertype(revision):\n    doc = revision.Document\n    none_numtype = coreutils.get_enum_none(DB.RevisionNumberType)\n    if HOST_APP.is_newer_than(2022):\n        numbering = doc.GetElement(revision.RevisionNumberingSequenceId)\n        if numbering:\n            return numbering.NumberType != none_numtype\n    else:\n        return revision.NumberType != none_numtype\n</code></pre>"},{"location":"reference/pyrevit/revit/db/failure/","title":"failure","text":"<p>Revit failures handler.</p>"},{"location":"reference/pyrevit/revit/db/failure/#pyrevit.revit.db.failure-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/revit/db/failure/#pyrevit.revit.db.failure.mlogger","title":"<code>mlogger = get_logger(__name__)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/revit/db/failure/#pyrevit.revit.db.failure.RESOLUTION_TYPES","title":"<code>RESOLUTION_TYPES = [DB.FailureResolutionType.MoveElements, DB.FailureResolutionType.CreateElements, DB.FailureResolutionType.DetachElements, DB.FailureResolutionType.FixElements, DB.FailureResolutionType.UnlockConstraints, DB.FailureResolutionType.SkipElements, DB.FailureResolutionType.DeleteElements, DB.FailureResolutionType.QuitEditMode, DB.FailureResolutionType.SetValue, DB.FailureResolutionType.SaveDocument]</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/revit/db/failure/#pyrevit.revit.db.failure-classes","title":"Classes","text":""},{"location":"reference/pyrevit/revit/db/failure/#pyrevit.revit.db.failure.FailureSwallower","title":"<code>FailureSwallower(log_errors=True)</code>","text":"<p>               Bases: <code>IFailuresPreprocessor</code></p> <p>Swallows all failures.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/failure.py</code> <pre><code>def __init__(self, log_errors=True):\n    self._logerror = log_errors\n    self._failures_swallowed = []\n</code></pre>"},{"location":"reference/pyrevit/revit/db/failure/#pyrevit.revit.db.failure.FailureSwallower-functions","title":"Functions","text":""},{"location":"reference/pyrevit/revit/db/failure/#pyrevit.revit.db.failure.FailureSwallower.get_swallowed_failures","title":"<code>get_swallowed_failures()</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/failure.py</code> <pre><code>def get_swallowed_failures(self):\n    failures = set()\n    failure_reg = HOST_APP.app.GetFailureDefinitionRegistry()\n    if failure_reg:\n        for failure_id in self._failures_swallowed:\n            failure_obj = failure_reg.FindFailureDefinition(failure_id)\n            if failure_obj:\n                failures.add(failure_obj)\n            else:\n                mlogger.debug(\n                    'can not find failure definition for: %s', failure_id\n                    )\n    return failures\n</code></pre>"},{"location":"reference/pyrevit/revit/db/failure/#pyrevit.revit.db.failure.FailureSwallower.reset","title":"<code>reset()</code>","text":"<p>Reset swallowed errors.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/failure.py</code> <pre><code>def reset(self):\n    \"\"\"Reset swallowed errors.\"\"\"\n    self._failures_swallowed = []\n</code></pre>"},{"location":"reference/pyrevit/revit/db/failure/#pyrevit.revit.db.failure.FailureSwallower.preprocess_failures","title":"<code>preprocess_failures(failure_accessor)</code>","text":"<p>Pythonic wrapper for <code>PreprocessFailures</code> interface method.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/failure.py</code> <pre><code>def preprocess_failures(self, failure_accessor):\n    \"\"\"Pythonic wrapper for `PreprocessFailures` interface method.\"\"\"\n    return self.PreprocessFailures(failure_accessor)\n</code></pre>"},{"location":"reference/pyrevit/revit/db/failure/#pyrevit.revit.db.failure.FailureSwallower.PreprocessFailures","title":"<code>PreprocessFailures(failuresAccessor)</code>","text":"<p>Required IFailuresPreprocessor interface method.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/failure.py</code> <pre><code>def PreprocessFailures(self, failuresAccessor):\n    \"\"\"Required IFailuresPreprocessor interface method.\"\"\"\n    severity = failuresAccessor.GetSeverity()\n    # log some info\n    mlogger.debug('processing failure with severity: %s', severity)\n\n    if severity == coreutils.get_enum_none(DB.FailureSeverity):\n        mlogger.debug('clean document. returning with'\n                      'FailureProcessingResult.Continue')\n        return DB.FailureProcessingResult.Continue\n\n    # log the failure messages\n    failures = failuresAccessor.GetFailureMessages()\n    mlogger.debug('processing %s failure messages.', len(failures))\n\n    # go through failures and attempt resolution\n    action_taken = False\n    get_elementid_value = get_elementid_value_func()\n    for failure in failures:\n\n        failure_id = failure.GetFailureDefinitionId()\n        failure_guid = getattr(failure_id, 'Guid', '')\n        failure_severity = failure.GetSeverity()\n        failure_desc = failure.GetDescriptionText()\n        failure_has_res = failure.HasResolutions()\n\n        # log failure info\n        mlogger.debug('processing failure msg: %s', failure_guid)\n        mlogger.debug('\\tseverity: %s', failure_severity)\n        mlogger.debug('\\tdescription: %s', failure_desc)\n        mlogger.debug('\\telements: %s',\n                      [get_elementid_value(x)\n                       for x in failure.GetFailingElementIds()])\n        mlogger.debug('\\thas resolutions: %s', failure_has_res)\n\n        # attempt resolution\n        mlogger.debug('attempt resolving failure: %s', failure_guid)\n\n        # if it's a warning and does not have any resolution\n        # delete it! it might have a popup window\n        if not failure_has_res \\\n                and failure_severity == DB.FailureSeverity.Warning:\n            failuresAccessor.DeleteWarning(failure)\n            mlogger.debug(\n                'deleted warning with no acceptable resolution: %s',\n                failure_guid\n                )\n            continue\n\n        # find failure definition id\n        # at this point the failure_has_res is True\n        failure_def_accessor = get_failure_by_id(failure_id)\n        default_res = failure_def_accessor.GetDefaultResolutionType()\n\n        # iterate through resolution options, pick one and resolve\n        for res_type in RESOLUTION_TYPES:\n            if default_res == res_type:\n                mlogger.debug(\n                    'using default failure resolution: %s', res_type)\n                self._set_and_resolve(failuresAccessor, failure, res_type)\n                action_taken = True\n                break\n            elif failure.HasResolutionOfType(res_type):\n                mlogger.debug('setting failure resolution to: %s', res_type)\n                self._set_and_resolve(failuresAccessor, failure, res_type)\n                # marked as action taken\n                action_taken = True\n                break\n            else:\n                mlogger.debug('invalid failure resolution: %s', res_type)\n\n    # report back\n    if action_taken:\n        mlogger.debug('resolving failures with '\n                      'FailureProcessingResult.ProceedWithCommit')\n        return DB.FailureProcessingResult.ProceedWithCommit\n    else:\n        mlogger.debug('resolving failures with '\n                      'FailureProcessingResult.Continue')\n        return DB.FailureProcessingResult.Continue\n</code></pre>"},{"location":"reference/pyrevit/revit/db/failure/#pyrevit.revit.db.failure-functions","title":"Functions","text":""},{"location":"reference/pyrevit/revit/db/failure/#pyrevit.revit.db.failure.get_failure_by_guid","title":"<code>get_failure_by_guid(failure_guid)</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/failure.py</code> <pre><code>def get_failure_by_guid(failure_guid):\n    fdr = HOST_APP.app.GetFailureDefinitionRegistry()\n    fgid = framework.Guid(failure_guid)\n    fid = DB.FailureDefinitionId(fgid)\n    return fdr.FindFailureDefinition(fid)\n</code></pre>"},{"location":"reference/pyrevit/revit/db/failure/#pyrevit.revit.db.failure.get_failure_by_id","title":"<code>get_failure_by_id(failure_id)</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/failure.py</code> <pre><code>def get_failure_by_id(failure_id):\n    fdr = HOST_APP.app.GetFailureDefinitionRegistry()\n    return fdr.FindFailureDefinition(failure_id)\n</code></pre>"},{"location":"reference/pyrevit/revit/db/pickling/","title":"pickling","text":"<p>Methods and Classes to convert Revit types to serializable.</p>"},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.mlogger","title":"<code>mlogger = logger.get_logger(__name__)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling-classes","title":"Classes","text":""},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.Serializable","title":"<code>Serializable()</code>","text":"<p>               Bases: <code>object</code></p> Source code in <code>pyrevitlib/pyrevit/revit/db/pickling.py</code> <pre><code>def __init__(self):\n    pass\n</code></pre>"},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.Serializable-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.Serializable.api_types","title":"<code>api_types = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.Serializable-functions","title":"Functions","text":""},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.Serializable.deserialize","title":"<code>deserialize()</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/pickling.py</code> <pre><code>def deserialize(self):\n    return None\n</code></pre>"},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.EnumSerializable","title":"<code>EnumSerializable(enum_value)</code>","text":"<p>               Bases: <code>Serializable</code></p> Source code in <code>pyrevitlib/pyrevit/revit/db/pickling.py</code> <pre><code>def __init__(self, enum_value):\n    self.value = str(enum_value)\n</code></pre>"},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.EnumSerializable-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.EnumSerializable.api_types","title":"<code>api_types = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.EnumSerializable.value","title":"<code>value = str(enum_value)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.EnumSerializable-functions","title":"Functions","text":""},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.EnumSerializable.deserialize","title":"<code>deserialize()</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/pickling.py</code> <pre><code>def deserialize(self):\n    return coreutils.get_enum_value(self.api_types, self.value)\n</code></pre>"},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.NoneSerializer","title":"<code>NoneSerializer()</code>","text":"<p>               Bases: <code>Serializable</code></p> Source code in <code>pyrevitlib/pyrevit/revit/db/pickling.py</code> <pre><code>def __init__(self):\n    pass\n</code></pre>"},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.NoneSerializer-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.NoneSerializer.api_types","title":"<code>api_types = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.NoneSerializer-functions","title":"Functions","text":""},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.NoneSerializer.deserialize","title":"<code>deserialize()</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/pickling.py</code> <pre><code>def deserialize(self):\n    return None\n</code></pre>"},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.ElementId","title":"<code>ElementId(element_id)</code>","text":"<p>               Bases: <code>Serializable</code></p> Source code in <code>pyrevitlib/pyrevit/revit/db/pickling.py</code> <pre><code>def __init__(self, element_id):\n    get_elementid_value = get_elementid_value_func()\n    self.integer_value = get_elementid_value(element_id)\n</code></pre>"},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.ElementId-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.ElementId.api_types","title":"<code>api_types = DB.ElementId</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.ElementId.integer_value","title":"<code>integer_value = get_elementid_value(element_id)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.ElementId-functions","title":"Functions","text":""},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.ElementId.deserialize","title":"<code>deserialize()</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/pickling.py</code> <pre><code>def deserialize(self):\n    return DB.ElementId(self.integer_value)\n</code></pre>"},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.XYZ","title":"<code>XYZ(xyz)</code>","text":"<p>               Bases: <code>Serializable</code></p> Source code in <code>pyrevitlib/pyrevit/revit/db/pickling.py</code> <pre><code>def __init__(self, xyz):\n    self.x = xyz.X\n    self.y = xyz.Y\n    self.z = xyz.Z\n</code></pre>"},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.XYZ-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.XYZ.api_types","title":"<code>api_types = DB.XYZ</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.XYZ.x","title":"<code>x = xyz.X</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.XYZ.y","title":"<code>y = xyz.Y</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.XYZ.z","title":"<code>z = xyz.Z</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.XYZ-functions","title":"Functions","text":""},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.XYZ.deserialize","title":"<code>deserialize()</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/pickling.py</code> <pre><code>def deserialize(self):\n    return DB.XYZ(self.x, self.y, self.z)\n</code></pre>"},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.UV","title":"<code>UV(uv)</code>","text":"<p>               Bases: <code>Serializable</code></p> Source code in <code>pyrevitlib/pyrevit/revit/db/pickling.py</code> <pre><code>def __init__(self, uv):\n    self.u = uv.U\n    self.v = uv.V\n</code></pre>"},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.UV-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.UV.api_types","title":"<code>api_types = DB.UV</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.UV.u","title":"<code>u = uv.U</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.UV.v","title":"<code>v = uv.V</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.UV-functions","title":"Functions","text":""},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.UV.deserialize","title":"<code>deserialize()</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/pickling.py</code> <pre><code>def deserialize(self):\n    return DB.UV(self.u, self.v)\n</code></pre>"},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.Line","title":"<code>Line(line)</code>","text":"<p>               Bases: <code>Serializable</code></p> Source code in <code>pyrevitlib/pyrevit/revit/db/pickling.py</code> <pre><code>def __init__(self, line):\n    self.start = XYZ(line.GetEndPoint(0))\n    self.end = XYZ(line.GetEndPoint(1))\n</code></pre>"},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.Line-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.Line.api_types","title":"<code>api_types = DB.Line</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.Line.start","title":"<code>start = XYZ(line.GetEndPoint(0))</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.Line.end","title":"<code>end = XYZ(line.GetEndPoint(1))</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.Line-functions","title":"Functions","text":""},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.Line.deserialize","title":"<code>deserialize()</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/pickling.py</code> <pre><code>def deserialize(self):\n    return DB.Line.CreateBound(self.start.deserialize(),\n                               self.end.deserialize())\n</code></pre>"},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.CurveLoop","title":"<code>CurveLoop(crv_loop)</code>","text":"<p>               Bases: <code>Serializable</code></p> Source code in <code>pyrevitlib/pyrevit/revit/db/pickling.py</code> <pre><code>def __init__(self, crv_loop):\n    self.curves = []\n    for crv in crv_loop:\n        self.curves.append(serialize(crv))\n</code></pre>"},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.CurveLoop-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.CurveLoop.api_types","title":"<code>api_types = DB.CurveLoop</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.CurveLoop.curves","title":"<code>curves = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.CurveLoop-functions","title":"Functions","text":""},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.CurveLoop.deserialize","title":"<code>deserialize()</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/pickling.py</code> <pre><code>def deserialize(self):\n    crv_loop = DB.CurveLoop()\n    for crv in self.curves:\n        crv_loop.Append(crv.deserialize())\n    return crv_loop\n</code></pre>"},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.ViewOrientation3D","title":"<code>ViewOrientation3D(view_orientation_3d)</code>","text":"<p>               Bases: <code>Serializable</code></p> Source code in <code>pyrevitlib/pyrevit/revit/db/pickling.py</code> <pre><code>def __init__(self, view_orientation_3d):\n    self.eye = XYZ(view_orientation_3d.EyePosition)\n    self.forward = XYZ(view_orientation_3d.ForwardDirection)\n    self.up = XYZ(view_orientation_3d.UpDirection)\n</code></pre>"},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.ViewOrientation3D-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.ViewOrientation3D.api_types","title":"<code>api_types = DB.ViewOrientation3D</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.ViewOrientation3D.eye","title":"<code>eye = XYZ(view_orientation_3d.EyePosition)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.ViewOrientation3D.forward","title":"<code>forward = XYZ(view_orientation_3d.ForwardDirection)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.ViewOrientation3D.up","title":"<code>up = XYZ(view_orientation_3d.UpDirection)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.ViewOrientation3D-functions","title":"Functions","text":""},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.ViewOrientation3D.deserialize","title":"<code>deserialize()</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/pickling.py</code> <pre><code>def deserialize(self):\n    return DB.ViewOrientation3D(self.eye.deserialize(),\n                                self.up.deserialize(),\n                                self.forward.deserialize())\n</code></pre>"},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.Transform","title":"<code>Transform(transform)</code>","text":"<p>               Bases: <code>Serializable</code></p> Source code in <code>pyrevitlib/pyrevit/revit/db/pickling.py</code> <pre><code>def __init__(self, transform):\n    self.basis_x = XYZ(transform.BasisX)\n    self.basis_y = XYZ(transform.BasisY)\n    self.basis_z = XYZ(transform.BasisZ)\n    self.origin = XYZ(transform.Origin)\n    self.scale = transform.Scale\n</code></pre>"},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.Transform-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.Transform.api_types","title":"<code>api_types = DB.Transform</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.Transform.basis_x","title":"<code>basis_x = XYZ(transform.BasisX)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.Transform.basis_y","title":"<code>basis_y = XYZ(transform.BasisY)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.Transform.basis_z","title":"<code>basis_z = XYZ(transform.BasisZ)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.Transform.origin","title":"<code>origin = XYZ(transform.Origin)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.Transform.scale","title":"<code>scale = transform.Scale</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.Transform-functions","title":"Functions","text":""},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.Transform.deserialize","title":"<code>deserialize()</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/pickling.py</code> <pre><code>def deserialize(self):\n    transform = DB.Transform.Identity\n    transform.BasisX = self.basis_x.deserialize()\n    transform.BasisY = self.basis_y.deserialize()\n    transform.BasisZ = self.basis_z.deserialize()\n    transform.Origin = self.origin.deserialize()\n    transform.ScaleBasis(self.scale)\n    return transform\n</code></pre>"},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.BoundingBoxXYZ","title":"<code>BoundingBoxXYZ(bbox_xyz)</code>","text":"<p>               Bases: <code>Serializable</code></p> Source code in <code>pyrevitlib/pyrevit/revit/db/pickling.py</code> <pre><code>def __init__(self, bbox_xyz):\n    self.min = XYZ(bbox_xyz.Min)\n    self.max = XYZ(bbox_xyz.Max)\n    self.transform = Transform(bbox_xyz.Transform)\n</code></pre>"},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.BoundingBoxXYZ-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.BoundingBoxXYZ.api_types","title":"<code>api_types = DB.BoundingBoxXYZ</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.BoundingBoxXYZ.min","title":"<code>min = XYZ(bbox_xyz.Min)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.BoundingBoxXYZ.max","title":"<code>max = XYZ(bbox_xyz.Max)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.BoundingBoxXYZ.transform","title":"<code>transform = Transform(bbox_xyz.Transform)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.BoundingBoxXYZ-functions","title":"Functions","text":""},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.BoundingBoxXYZ.deserialize","title":"<code>deserialize()</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/pickling.py</code> <pre><code>def deserialize(self):\n    bbox_xyz = DB.BoundingBoxXYZ()\n    bbox_xyz.Min = self.min.deserialize()\n    bbox_xyz.Max = self.max.deserialize()\n    bbox_xyz.Transform = self.transform.deserialize()\n    return bbox_xyz\n</code></pre>"},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.ViewType","title":"<code>ViewType(enum_value)</code>","text":"<p>               Bases: <code>EnumSerializable</code></p> Source code in <code>pyrevitlib/pyrevit/revit/db/pickling.py</code> <pre><code>def __init__(self, enum_value):\n    self.value = str(enum_value)\n</code></pre>"},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.ViewType-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.ViewType.value","title":"<code>value = str(enum_value)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.ViewType.api_types","title":"<code>api_types = DB.ViewType</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.ViewType-functions","title":"Functions","text":""},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.ViewType.deserialize","title":"<code>deserialize()</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/pickling.py</code> <pre><code>def deserialize(self):\n    return coreutils.get_enum_value(self.api_types, self.value)\n</code></pre>"},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.Grid","title":"<code>Grid(gridline)</code>","text":"<p>               Bases: <code>Serializable</code></p> Source code in <code>pyrevitlib/pyrevit/revit/db/pickling.py</code> <pre><code>def __init__(self, gridline):\n    from rpw import doc\n\n    cView = doc.ActiveView\n    curves=gridline.GetCurvesInView(DB.DatumExtentType.ViewSpecific, cView)\n    cCurve = curves[0]\n    start_curve = gridline.GetLeader(DB.DatumEnds.End0, cView)\n    end_curve = gridline.GetLeader(DB.DatumEnds.End1, cView)\n\n    if start_curve:\n      self.start_elbow = XYZ(start_curve.Elbow.X, start_curve.Elbow.Y, start_curve.Elbow.Z)\n      self.start_leader = XYZ(start_curve.End.X, start_curve.End.Y, start_curve.End.Z)\n      self.start_anchor = XYZ(start_curve.Anchor.X, start_curve.Anchor.Y, start_curve.Anchor.Z)\n\n    if end_curve:\n      self.end_elbow = XYZ(end_curve.Elbow.X, end_curve.Elbow.Y, end_curve.Elbow.Z)\n      self.end_leader = XYZ(end_curve.End.X, end_curve.End.Y, end_curve.End.Z)\n      self.end_anchor = XYZ(end_curve.Anchor.X, end_curve.Anchor.Y, end_curve.Anchor.Z)\n\n    self.grid_name = gridline.Name\n    self.start = XYZ(cCurve.GetEndPoint(0))\n    self.end = XYZ(cCurve.GetEndPoint(1))\n\n    if isinstance(cCurve, DB.Arc):\n      self.center = XYZ(cCurve.Center.X, cCurve.Center.Y, cCurve.Center.Z)\n\n    self.starts_with_bubble = gridline.HasBubbleInView(DB.DatumEnds.End0, cView)\n    self.start_bubble_visible = gridline.IsBubbleVisibleInView(DB.DatumEnds.End0, cView)\n\n    self.ends_with_bubble = gridline.HasBubbleInView(DB.DatumEnds.End1, cView)\n    self.end_bubble_visible = gridline.IsBubbleVisibleInView(DB.DatumEnds.End1, cView)\n</code></pre>"},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.Grid-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.Grid.api_types","title":"<code>api_types = DB.Grid</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.Grid.start_elbow","title":"<code>start_elbow = XYZ(start_curve.Elbow.X, start_curve.Elbow.Y, start_curve.Elbow.Z)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.Grid.start_leader","title":"<code>start_leader = XYZ(start_curve.End.X, start_curve.End.Y, start_curve.End.Z)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.Grid.start_anchor","title":"<code>start_anchor = XYZ(start_curve.Anchor.X, start_curve.Anchor.Y, start_curve.Anchor.Z)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.Grid.end_elbow","title":"<code>end_elbow = XYZ(end_curve.Elbow.X, end_curve.Elbow.Y, end_curve.Elbow.Z)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.Grid.end_leader","title":"<code>end_leader = XYZ(end_curve.End.X, end_curve.End.Y, end_curve.End.Z)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.Grid.end_anchor","title":"<code>end_anchor = XYZ(end_curve.Anchor.X, end_curve.Anchor.Y, end_curve.Anchor.Z)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.Grid.grid_name","title":"<code>grid_name = gridline.Name</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.Grid.start","title":"<code>start = XYZ(cCurve.GetEndPoint(0))</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.Grid.end","title":"<code>end = XYZ(cCurve.GetEndPoint(1))</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.Grid.center","title":"<code>center = XYZ(cCurve.Center.X, cCurve.Center.Y, cCurve.Center.Z)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.Grid.starts_with_bubble","title":"<code>starts_with_bubble = gridline.HasBubbleInView(DB.DatumEnds.End0, cView)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.Grid.start_bubble_visible","title":"<code>start_bubble_visible = gridline.IsBubbleVisibleInView(DB.DatumEnds.End0, cView)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.Grid.ends_with_bubble","title":"<code>ends_with_bubble = gridline.HasBubbleInView(DB.DatumEnds.End1, cView)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.Grid.end_bubble_visible","title":"<code>end_bubble_visible = gridline.IsBubbleVisibleInView(DB.DatumEnds.End1, cView)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.Grid-functions","title":"Functions","text":""},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.Grid.deserialize","title":"<code>deserialize()</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/pickling.py</code> <pre><code>def deserialize(self):\n    name = self.grid_name\n    start = DB.XYZ(self.start.deserialize())\n    end = DB.XYZ(self.end.deserialize())\n    center = DB.XYZ(self.center.deserialize())\n    bubble_start = {self.starts_with_bubble, self.start_bubble_visible}\n    bubble_end = {self.ends_with_bubble, self.end_bubble_visible}\n    start_curve = {self.start_leader, self.start_elbow, self.start_anchor}\n    end_curve = {self.end_leader, self.end_elbow, self.end_anchor}\n\n    return name, start, end, center, bubble_start, bubble_end, start_curve, end_curve\n</code></pre>"},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling-functions","title":"Functions","text":""},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.serialize","title":"<code>serialize(api_object)</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/pickling.py</code> <pre><code>def serialize(api_object):\n    mlogger.debug('Attemping to serialize: %s', api_object)\n\n    # wrap none in a none serializer for none values\n    if api_object is None:\n        return NoneSerializer()\n\n    # make sure given type is a Revit API type\n    if not api.is_api_object(api_object):\n        raise PyRevitException(\"Only Revit API types are supported.\")\n\n    # get available serializers\n    serializers = coreutils.get_all_subclasses(\n        [Serializable, EnumSerializable]\n        )\n\n    # pick the compatible serializer\n    try:\n        compatible_serializer = \\\n            next(\n                x for x in serializers\n                if x.api_types and isinstance(api_object, x.api_types)\n                )\n        mlogger.debug('Serializer found for: %s', api_object)\n        return compatible_serializer(api_object)\n    except StopIteration:\n        mlogger.debug('Serializer not found for: %s', api_object)\n        # if no deserializer found,\n        # see if given data is iterable\n        # NOTE: commented this out since .serialize should only get api objects\n        # if isinstance(api_object, Iterable):\n        #     mlogger.debug('Iterating over: %s', api_object)\n        #     return _serialize_items(api_object)\n\n        # otherwise throw an exception\n        raise PyRevitException(\n            \"No serializers have been implemented for \\\"%s\\\"\" % repr(api_object)\n            )\n</code></pre>"},{"location":"reference/pyrevit/revit/db/pickling/#pyrevit.revit.db.pickling.deserialize","title":"<code>deserialize(python_object)</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/pickling.py</code> <pre><code>def deserialize(python_object):\n    if isinstance(python_object, Iterable):\n        result_list = []\n        for python_item in python_object:\n            result_list.append(deserialize(python_item))\n        return result_list\n\n    if isinstance(python_object, Serializable):\n        return python_object.deserialize()\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/","title":"query","text":"<p>Helper functions to query info and elements from Revit.</p>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.mlogger","title":"<code>mlogger = logger.get_logger(__name__)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.GRAPHICAL_VIEWTYPES","title":"<code>GRAPHICAL_VIEWTYPES = [DB.ViewType.FloorPlan, DB.ViewType.CeilingPlan, DB.ViewType.Elevation, DB.ViewType.ThreeD, DB.ViewType.Schedule, DB.ViewType.DrawingSheet, DB.ViewType.Report, DB.ViewType.DraftingView, DB.ViewType.Legend, DB.ViewType.EngineeringPlan, DB.ViewType.AreaPlan, DB.ViewType.Section, DB.ViewType.Detail, DB.ViewType.CostReport, DB.ViewType.LoadsReport, DB.ViewType.PresureLossReport, DB.ViewType.ColumnSchedule, DB.ViewType.PanelSchedule, DB.ViewType.Walkthrough, DB.ViewType.Rendering]</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.DETAIL_CURVES","title":"<code>DETAIL_CURVES = (DB.DetailLine, DB.DetailArc, DB.DetailEllipse, DB.DetailNurbSpline)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.MODEL_CURVES","title":"<code>MODEL_CURVES = (DB.ModelLine, DB.ModelArc, DB.ModelEllipse, DB.ModelNurbSpline)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.BUILTINCATEGORIES_VIEW","title":"<code>BUILTINCATEGORIES_VIEW = [DB.BuiltInCategory.OST_Views, DB.BuiltInCategory.OST_ReferenceViewer, DB.BuiltInCategory.OST_Viewers]</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.GridPoint","title":"<code>GridPoint = namedtuple('GridPoint', ['point', 'grids'])</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.SheetRefInfo","title":"<code>SheetRefInfo = namedtuple('SheetRefInfo', ['sheet_num', 'sheet_name', 'detail_num', 'ref_viewid'])</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.ElementHistory","title":"<code>ElementHistory = namedtuple('ElementHistory', ['creator', 'owner', 'last_changed_by'])</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query-classes","title":"Classes","text":""},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query-functions","title":"Functions","text":""},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_name","title":"<code>get_name(element, title_on_sheet=False)</code>","text":"<p>Retrieves the name of a Revit element, with special handling for views.</p> <p>Parameters:</p> Name Type Description Default <code>element</code> <code>Element</code> <p>The Revit element whose name is to be retrieved.</p> required <code>title_on_sheet</code> <code>bool</code> <p>If True and the element is a view,                              attempts to retrieve the view's title                              on the sheet. Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>str</code> <p>The name of the element. For views, it may return the view's title  on the sheet if <code>title_on_sheet</code> is True and the title is available.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_name(element, title_on_sheet=False):\n    \"\"\"\n    Retrieves the name of a Revit element, with special handling for views.\n\n    Args:\n        element (DB.Element): The Revit element whose name is to be retrieved.\n        title_on_sheet (bool, optional): If True and the element is a view,\n                                         attempts to retrieve the view's title\n                                         on the sheet. Defaults to False.\n\n    Returns:\n        str: The name of the element. For views, it may return the view's title\n             on the sheet if `title_on_sheet` is True and the title is available.\n    \"\"\"\n    if isinstance(element, DB.View):\n        view_name = None\n        if title_on_sheet:\n            titleos_param = element.Parameter[DB.BuiltInParameter.VIEW_DESCRIPTION]\n            view_name = titleos_param.AsString()\n        if view_name:\n            return view_name\n        else:\n            if HOST_APP.is_newer_than(\"2019\", or_equal=True):\n                return element.Name\n            else:\n                return element.ViewName\n    if PY3:\n        return element.Name\n    else:\n        return Element.Name.GetValue(element)\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_type","title":"<code>get_type(element)</code>","text":"<p>Get element type.</p> <p>Parameters:</p> Name Type Description Default <code>element</code> <code>Element</code> <p>source element</p> required <p>Returns:</p> Type Description <code>ElementType</code> <p>type object of given element</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_type(element):\n    \"\"\"Get element type.\n\n    Args:\n        element (DB.Element): source element\n\n    Returns:\n        (DB.ElementType): type object of given element\n    \"\"\"\n    type_id = element.GetTypeId()\n    return element.Document.GetElement(type_id)\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_symbol_name","title":"<code>get_symbol_name(element)</code>","text":"<p>Retrieves the name of the symbol associated with the given Revit element.</p> <p>Parameters:</p> Name Type Description Default <code>element</code> <p>The Revit element from which to retrieve the symbol name.</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>The name of the symbol associated with the given element.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_symbol_name(element):\n    \"\"\"\n    Retrieves the name of the symbol associated with the given Revit element.\n\n    Args:\n        element: The Revit element from which to retrieve the symbol name.\n\n    Returns:\n        str: The name of the symbol associated with the given element.\n    \"\"\"\n    return get_name(element.Symbol)\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_family_name","title":"<code>get_family_name(element)</code>","text":"<p>Retrieves the family name of a given Revit element.</p> <p>Parameters:</p> Name Type Description Default <code>element</code> <p>The Revit element from which to get the family name.      It is expected to have a 'Symbol' attribute with a 'Family' property.</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>The name of the family to which the element belongs.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_family_name(element):\n    \"\"\"\n    Retrieves the family name of a given Revit element.\n\n    Args:\n        element: The Revit element from which to get the family name.\n                 It is expected to have a 'Symbol' attribute with a 'Family' property.\n\n    Returns:\n        str: The name of the family to which the element belongs.\n    \"\"\"\n    return get_name(element.Symbol.Family)\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_episodeid","title":"<code>get_episodeid(element)</code>","text":"<p>Extract episode id from the given Revit element.</p> <p>Parameters:</p> Name Type Description Default <code>element</code> <p>The Revit element from which to extract the episode id.</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>The episode id extracted from the element's UniqueId.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_episodeid(element):\n    \"\"\"\n    Extract episode id from the given Revit element.\n\n    Args:\n        element: The Revit element from which to extract the episode id.\n\n    Returns:\n        str: The episode id extracted from the element's UniqueId.\n    \"\"\"\n    return str(element.UniqueId)[:36]\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_guid","title":"<code>get_guid(element)</code>","text":"<p>Generates a GUID for a given Revit element by performing a bitwise XOR operation on parts of the element's UniqueId.</p> <p>Parameters:</p> Name Type Description Default <code>element</code> <p>The Revit element for which the GUID is to be generated. The element      must have a UniqueId attribute.</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>A string representing the generated GUID.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_guid(element):\n    \"\"\"\n    Generates a GUID for a given Revit element by performing a bitwise XOR operation\n    on parts of the element's UniqueId.\n\n    Args:\n        element: The Revit element for which the GUID is to be generated. The element\n                 must have a UniqueId attribute.\n\n    Returns:\n        str: A string representing the generated GUID.\n    \"\"\"\n    uid = str(element.UniqueId)\n    last_32_bits = int(uid[28:36], 16)\n    element_id = int(uid[37:], 16)\n    xor = last_32_bits ^ element_id\n    return uid[:28] + \"{0:x}\".format(xor)\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_param","title":"<code>get_param(element, param_name, default=None)</code>","text":"<p>Retrieves a parameter from a Revit element by its name.</p> <p>Parameters:</p> Name Type Description Default <code>element</code> <code>Element</code> <p>The Revit element from which to retrieve the parameter.</p> required <code>param_name</code> <code>str</code> <p>The name of the parameter to retrieve.</p> required <code>default</code> <p>The value to return if the parameter is not found or an error occurs. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <p>The parameter if found, otherwise the default value.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_param(element, param_name, default=None):\n    \"\"\"\n    Retrieves a parameter from a Revit element by its name.\n\n    Args:\n        element (DB.Element): The Revit element from which to retrieve the parameter.\n        param_name (str): The name of the parameter to retrieve.\n        default: The value to return if the parameter is not found or an error occurs. Defaults to None.\n\n    Returns:\n        The parameter if found, otherwise the default value.\n    \"\"\"\n    if isinstance(element, DB.Element):\n        try:\n            return element.LookupParameter(param_name)\n        except Exception:\n            return default\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_mark","title":"<code>get_mark(element)</code>","text":"<p>Retrieves the 'Mark' parameter value from a given Revit element.</p> <p>Parameters:</p> Name Type Description Default <code>element</code> <p>The Revit element from which to retrieve the 'Mark' parameter.</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>The value of the 'Mark' parameter as a string.</p> <p>Returns an empty string if the parameter is not found.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_mark(element):\n    \"\"\"\n    Retrieves the 'Mark' parameter value from a given Revit element.\n\n    Args:\n        element: The Revit element from which to retrieve the 'Mark' parameter.\n\n    Returns:\n        str: The value of the 'Mark' parameter as a string.\n    Returns an empty string if the parameter is not found.\n    \"\"\"\n    mparam = element.Parameter[DB.BuiltInParameter.ALL_MODEL_MARK]\n    return mparam.AsString() if mparam else \"\"\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_location","title":"<code>get_location(element)</code>","text":"<p>Get element location point.</p> <p>Parameters:</p> Name Type Description Default <code>element</code> <code>Element</code> <p>source element</p> required <p>Returns:</p> Type Description <code>XYZ</code> <p>X, Y, Z of location point element</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_location(element):\n    \"\"\"Get element location point.\n\n\n    Args:\n        element (DB.Element): source element\n\n\n    Returns:\n        (DB.XYZ): X, Y, Z of location point element\n    \"\"\"\n    locp = element.Location.Point\n    return (locp.X, locp.Y, locp.Z)\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_biparam_stringequals_filter","title":"<code>get_biparam_stringequals_filter(bip_paramvalue_dict)</code>","text":"<p>Creates a Revit ElementParameterFilter based on a dictionary of built-in parameter (BIP) values and their corresponding filter values.</p> <p>Parameters:</p> Name Type Description Default <code>bip_paramvalue_dict</code> <code>dict</code> <p>A dictionary where keys are built-in parameter (BIP)                         identifiers and values are the corresponding filter values.</p> required <p>Returns:</p> Type Description <p>DB.ElementParameterFilter: A filter that can be used to filter Revit elements based                        on the specified BIP values.</p> <p>Raises:</p> Type Description <code>PyRevitException</code> <p>If no filters could be created from the provided dictionary.</p> Notes <ul> <li>The function handles different Revit API versions by checking if the host application   is newer than the 2022 version.</li> <li>For Revit versions newer than 2022, the <code>FilterStringRule</code> does not require the   <code>caseSensitive</code> parameter.</li> </ul> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_biparam_stringequals_filter(bip_paramvalue_dict):\n    \"\"\"\n    Creates a Revit ElementParameterFilter based on a dictionary of built-in parameter (BIP)\n    values and their corresponding filter values.\n\n    Args:\n        bip_paramvalue_dict (dict): A dictionary where keys are built-in parameter (BIP)\n                                    identifiers and values are the corresponding filter values.\n\n    Returns:\n        DB.ElementParameterFilter: A filter that can be used to filter Revit elements based\n                                   on the specified BIP values.\n\n    Raises:\n        PyRevitException: If no filters could be created from the provided dictionary.\n\n    Notes:\n        - The function handles different Revit API versions by checking if the host application\n          is newer than the 2022 version.\n        - For Revit versions newer than 2022, the `FilterStringRule` does not require the\n          `caseSensitive` parameter.\n    \"\"\"\n    filters = []\n    for bip, fvalue in bip_paramvalue_dict.items():\n        bip_id = DB.ElementId(bip)\n        bip_valueprovider = DB.ParameterValueProvider(bip_id)\n        if HOST_APP.is_newer_than(2022):\n            bip_valuerule = DB.FilterStringRule(\n                bip_valueprovider, DB.FilterStringEquals(), fvalue\n            )\n        else:\n            bip_valuerule = DB.FilterStringRule(\n                bip_valueprovider, DB.FilterStringEquals(), fvalue, True\n            )\n        filters.append(bip_valuerule)\n\n    if filters:\n        return DB.ElementParameterFilter(framework.List[DB.FilterRule](filters))\n    else:\n        raise PyRevitException(\"Error creating filters.\")\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_all_elements","title":"<code>get_all_elements(doc=None)</code>","text":"<p>Retrieves all elements from the given Revit document. This function uses a FilteredElementCollector to collect all elements in the provided document, including both element types and instances.</p> <p>Parameters:</p> Name Type Description Default <code>doc</code> <code>Document</code> <p>The Revit document to collect elements from.                       If not provided, the default document (DOCS.doc) is used.</p> <code>None</code> <p>Returns:</p> Type Description <p>List[Element]: A list of all elements in the document.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_all_elements(doc=None):\n    \"\"\"\n    Retrieves all elements from the given Revit document.\n    This function uses a FilteredElementCollector to collect all elements\n    in the provided document, including both element types and instances.\n\n    Args:\n        doc (Document, optional): The Revit document to collect elements from.\n                                  If not provided, the default document (DOCS.doc) is used.\n\n    Returns:\n        List[Element]: A list of all elements in the document.\n    \"\"\"\n    return (\n        DB.FilteredElementCollector(doc or DOCS.doc)\n        .WherePasses(\n            DB.LogicalOrFilter(\n                DB.ElementIsElementTypeFilter(False),\n                DB.ElementIsElementTypeFilter(True),\n            )\n        )\n        .ToElements()\n    )\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_all_elements_in_view","title":"<code>get_all_elements_in_view(view)</code>","text":"<p>Retrieves all elements in the specified Revit view.</p> <p>Parameters:</p> Name Type Description Default <code>view</code> <code>View</code> <p>The Revit view from which to collect elements.</p> required <p>Returns:</p> Type Description <p>list[Autodesk.Revit.DB.Element]: A list of elements present in the specified view.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_all_elements_in_view(view):\n    \"\"\"\n    Retrieves all elements in the specified Revit view.\n\n    Args:\n        view (Autodesk.Revit.DB.View): The Revit view from which to collect elements.\n\n    Returns:\n        list[Autodesk.Revit.DB.Element]: A list of elements present in the specified view.\n    \"\"\"\n    return (\n        DB.FilteredElementCollector(view.Document, view.Id)\n        .WhereElementIsNotElementType()\n        .ToElements()\n    )\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_param_value","title":"<code>get_param_value(targetparam)</code>","text":"<p>Retrieves the value of a given Revit parameter. Parameters: targetparam (DB.Parameter or DB.GlobalParameter): The parameter whose value is to be retrieved.</p> <p>value (varies): The value of the parameter. The type of the returned value depends on the storage type of the parameter:     - Double: Returns a float.     - Integer: Returns an int.     - String: Returns a str.     - ElementId: Returns an ElementId.     If the parameter is a GlobalParameter, returns the value directly from the GlobalParameter.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_param_value(targetparam):\n    \"\"\"\n    Retrieves the value of a given Revit parameter.\n    Parameters:\n    targetparam (DB.Parameter or DB.GlobalParameter): The parameter whose value is to be retrieved.\n\n    Returns:\n    value (varies): The value of the parameter. The type of the returned value depends on the storage type of the parameter:\n        - Double:\n    Returns a float.\n        - Integer:\n    Returns an int.\n        - String:\n    Returns a str.\n        - ElementId:\n    Returns an ElementId.\n        If the parameter is a GlobalParameter, returns the value directly from the GlobalParameter.\n    \"\"\"\n    value = None\n    if isinstance(targetparam, DB.Parameter):\n        if targetparam.StorageType == DB.StorageType.Double:\n            value = targetparam.AsDouble()\n        elif targetparam.StorageType == DB.StorageType.Integer:\n            value = targetparam.AsInteger()\n        elif targetparam.StorageType == DB.StorageType.String:\n            value = targetparam.AsString()\n        elif targetparam.StorageType == DB.StorageType.ElementId:\n            value = targetparam.AsElementId()\n    elif isinstance(targetparam, DB.GlobalParameter):\n        return targetparam.GetValue().Value\n    return value\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_value_range","title":"<code>get_value_range(param_name, doc=None)</code>","text":"<p>Retrieves a set of unique values for a specified parameter from all elements in the given Revit document.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The name of the parameter to retrieve values for.</p> required <code>doc</code> <code>Document</code> <p>The Revit document to search within. If None, the current document is used.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>set</code> <p>A set of unique values for the specified parameter. The values can be of any type, but are typically strings.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_value_range(param_name, doc=None):\n    \"\"\"\n    Retrieves a set of unique values for a specified parameter from all elements in the given Revit document.\n\n    Args:\n        param_name (str): The name of the parameter to retrieve values for.\n        doc (Document, optional): The Revit document to search within. If None, the current document is used.\n\n    Returns:\n        set: A set of unique values for the specified parameter. The values can be of any type, but are typically strings.\n    \"\"\"\n    values = set()\n    for element in get_all_elements(doc):\n        targetparam = element.LookupParameter(param_name)\n        if targetparam:\n            value = get_param_value(targetparam)\n            if value is not None and safe_strtype(value).lower() != \"none\":\n                if isinstance(value, str) and not value.isspace():\n                    values.add(value)\n                else:\n                    values.add(value)\n    return values\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_elements_by_parameter","title":"<code>get_elements_by_parameter(param_name, param_value, doc=None, partial=False)</code>","text":"<p>Retrieves elements from the Revit document that match a given parameter name and value.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The name of the parameter to search for.</p> required <code>param_value</code> <code>str or other</code> <p>The value of the parameter to match.</p> required <code>doc</code> <code>Document</code> <p>The Revit document to search in. If None, the current document is used.</p> <code>None</code> <code>partial</code> <code>bool</code> <p>If True, performs a partial match on string parameter values. Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>list</code> <p>A list of elements that match the specified parameter name and value.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_elements_by_parameter(param_name, param_value, doc=None, partial=False):\n    \"\"\"\n    Retrieves elements from the Revit document that match a given parameter name and value.\n\n    Args:\n        param_name (str): The name of the parameter to search for.\n        param_value (str or other): The value of the parameter to match.\n        doc (Document, optional): The Revit document to search in. If None, the current document is used.\n        partial (bool, optional): If True, performs a partial match on string parameter values. Defaults to False.\n\n    Returns:\n        list: A list of elements that match the specified parameter name and value.\n    \"\"\"\n    found_els = []\n    for element in get_all_elements(doc):\n        targetparam = element.LookupParameter(param_name)\n        if targetparam:\n            value = get_param_value(targetparam)\n            if (\n                partial\n                and value is not None\n                and isinstance(value, str)\n                and param_value in value\n            ):\n                found_els.append(element)\n            elif param_value == value:\n                found_els.append(element)\n    return found_els\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_elements_by_param_value","title":"<code>get_elements_by_param_value(param_name, param_value, inverse=False, doc=None)</code>","text":"<p>Retrieves elements from the Revit document based on a parameter name and value.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The name of the parameter to filter by.</p> required <code>param_value</code> <code>str</code> <p>The value of the parameter to filter by.</p> required <code>inverse</code> <code>bool</code> <p>If True, inverts the filter to exclude elements with the specified parameter value. Defaults to False.</p> <code>False</code> <code>doc</code> <code>Document</code> <p>The Revit document to search in. If None, uses the default document.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>list</code> <p>A list of elements that match the parameter name and value.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_elements_by_param_value(param_name, param_value, inverse=False, doc=None):\n    \"\"\"\n    Retrieves elements from the Revit document based on a parameter name and value.\n\n    Args:\n        param_name (str): The name of the parameter to filter by.\n        param_value (str): The value of the parameter to filter by.\n        inverse (bool, optional): If True, inverts the filter to exclude elements with the specified parameter value. Defaults to False.\n        doc (Document, optional): The Revit document to search in. If None, uses the default document.\n\n    Returns:\n        list: A list of elements that match the parameter name and value.\n    \"\"\"\n    doc = doc or DOCS.doc\n    param_id = get_project_parameter_id(param_name, doc)\n    if param_id:\n        pvprov = DB.ParameterValueProvider(param_id)\n        pfilter = DB.FilterStringEquals()\n        if HOST_APP.is_newer_than(2022):\n            vrule = DB.FilterStringRule(pvprov, pfilter, param_value)\n        else:\n            vrule = DB.FilterStringRule(pvprov, pfilter, param_value, True)\n        if inverse:\n            vrule = DB.FilterInverseRule(vrule)\n        param_filter = DB.ElementParameterFilter(vrule)\n        return DB.FilteredElementCollector(doc).WherePasses(param_filter).ToElements()\n    else:\n        return []\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_elements_by_categories","title":"<code>get_elements_by_categories(element_bicats, elements=None, doc=None)</code>","text":"<p>Retrieves elements from a Revit document based on specified categories.</p> <p>Parameters:</p> Name Type Description Default <code>element_bicats</code> <code>list</code> <p>A list of built-in categories to filter elements by.</p> required <code>elements</code> <code>list</code> <p>A list of elements to filter. If provided, the function will filter these elements.</p> <code>None</code> <code>doc</code> <code>Document</code> <p>The Revit document to collect elements from. If not provided, the active document is used.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>list</code> <p>A list of elements that belong to the specified categories.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_elements_by_categories(element_bicats, elements=None, doc=None):\n    \"\"\"\n    Retrieves elements from a Revit document based on specified categories.\n\n    Args:\n        element_bicats (list): A list of built-in categories to filter elements by.\n        elements (list, optional): A list of elements to filter. If provided, the function will filter these elements.\n        doc (DB.Document, optional): The Revit document to collect elements from. If not provided, the active document is used.\n\n    Returns:\n        list: A list of elements that belong to the specified categories.\n    \"\"\"\n    if elements:\n        return [\n            x\n            for x in elements\n            if get_builtincategory(x.Category.Name) in element_bicats\n        ]\n    cat_filters = [DB.ElementCategoryFilter(x) for x in element_bicats if x]\n    elcats_filter = DB.LogicalOrFilter(framework.List[DB.ElementFilter](cat_filters))\n    return (\n        DB.FilteredElementCollector(doc or DOCS.doc)\n        .WherePasses(elcats_filter)\n        .WhereElementIsNotElementType()\n        .ToElements()\n    )\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_elements_by_class","title":"<code>get_elements_by_class(element_class, elements=None, doc=None, view_id=None)</code>","text":"<p>Retrieves elements of a specified class from a Revit document or a given list of elements.</p> <p>Parameters:</p> Name Type Description Default <code>element_class</code> <code>type</code> <p>The class type of the elements to retrieve.</p> required <code>elements</code> <code>list</code> <p>A list of elements to filter by the specified class. Defaults to None.</p> <code>None</code> <code>doc</code> <code>Document</code> <p>The Revit document to search within. Defaults to None.</p> <code>None</code> <code>view_id</code> <code>ElementId</code> <p>The ID of the view to restrict the search to. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>list</code> <p>A list of elements of the specified class.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_elements_by_class(element_class, elements=None, doc=None, view_id=None):\n    \"\"\"\n    Retrieves elements of a specified class from a Revit document or a given list of elements.\n\n    Args:\n        element_class (type): The class type of the elements to retrieve.\n        elements (list, optional): A list of elements to filter by the specified class. Defaults to None.\n        doc (DB.Document, optional): The Revit document to search within. Defaults to None.\n        view_id (DB.ElementId, optional): The ID of the view to restrict the search to. Defaults to None.\n\n    Returns:\n        list: A list of elements of the specified class.\n    \"\"\"\n    if elements:\n        return [x for x in elements if isinstance(x, element_class)]\n    if view_id:\n        return (\n            DB.FilteredElementCollector(doc or DOCS.doc, view_id)\n            .OfClass(element_class)\n            .WhereElementIsNotElementType()\n            .ToElements()\n        )\n    else:\n        return (\n            DB.FilteredElementCollector(doc or DOCS.doc)\n            .OfClass(element_class)\n            .WhereElementIsNotElementType()\n            .ToElements()\n        )\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_types_by_class","title":"<code>get_types_by_class(type_class, types=None, doc=None)</code>","text":"<p>Retrieves elements of a specified class type from a given list or from the Revit document.</p> <p>Parameters:</p> Name Type Description Default <code>type_class</code> <code>type</code> <p>The class type to filter elements by.</p> required <code>types</code> <code>list</code> <p>A list of elements to filter. If not provided, elements will be collected from the Revit document.</p> <code>None</code> <code>doc</code> <code>Document</code> <p>The Revit document to collect elements from if 'types' is not provided. Defaults to the active document.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>list</code> <p>A list of elements that are instances of the specified class type.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_types_by_class(type_class, types=None, doc=None):\n    \"\"\"\n    Retrieves elements of a specified class type from a given list or from the Revit document.\n\n    Args:\n        type_class (type): The class type to filter elements by.\n        types (list, optional): A list of elements to filter. If not provided, elements will be collected from the Revit document.\n        doc (Document, optional): The Revit document to collect elements from if 'types' is not provided. Defaults to the active document.\n\n    Returns:\n        list: A list of elements that are instances of the specified class type.\n    \"\"\"\n    if types:\n        return [x for x in types if isinstance(x, type_class)]\n    return DB.FilteredElementCollector(doc or DOCS.doc).OfClass(type_class).ToElements()\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_family","title":"<code>get_family(family_name, doc=None)</code>","text":"<p>Retrieves all family elements in the Revit document that match the given family name.</p> <p>Parameters:</p> Name Type Description Default <code>family_name</code> <code>str</code> <p>The name of the family to search for.</p> required <code>doc</code> <code>Document</code> <p>The Revit document to search in. If not provided, the current document is used.</p> <code>None</code> <p>Returns:</p> Type Description <p>list[DB.Element]: A list of family elements that match the given family name.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_family(family_name, doc=None):\n    \"\"\"\n    Retrieves all family elements in the Revit document that match the given family name.\n\n    Args:\n        family_name (str): The name of the family to search for.\n        doc (DB.Document, optional): The Revit document to search in. If not provided, the current document is used.\n\n    Returns:\n        list[DB.Element]: A list of family elements that match the given family name.\n    \"\"\"\n    families = (\n        DB.FilteredElementCollector(doc or DOCS.doc)\n        .WherePasses(\n            get_biparam_stringequals_filter(\n                {DB.BuiltInParameter.SYMBOL_FAMILY_NAME_PARAM: family_name}\n            )\n        )\n        .WhereElementIsElementType()\n        .ToElements()\n    )\n    return families\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_family_symbol","title":"<code>get_family_symbol(family_name, symbol_name, doc=None)</code>","text":"<p>Retrieves family symbols from a Revit document based on the specified family name and symbol name.</p> <p>Parameters:</p> Name Type Description Default <code>family_name</code> <code>str</code> <p>The name of the family to search for.</p> required <code>symbol_name</code> <code>str</code> <p>The name of the symbol within the family to search for.</p> required <code>doc</code> <code>Document</code> <p>The Revit document to search in. If not provided, the default document is used.</p> <code>None</code> <p>Returns:</p> Type Description <p>list[DB.Element]: A list of family symbols that match the specified family name and symbol name.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_family_symbol(family_name, symbol_name, doc=None):\n    \"\"\"\n    Retrieves family symbols from a Revit document based on the specified family name and symbol name.\n\n    Args:\n        family_name (str): The name of the family to search for.\n        symbol_name (str): The name of the symbol within the family to search for.\n        doc (DB.Document, optional): The Revit document to search in. If not provided, the default document is used.\n\n    Returns:\n        list[DB.Element]: A list of family symbols that match the specified family name and symbol name.\n    \"\"\"\n    famsyms = (\n        DB.FilteredElementCollector(doc or DOCS.doc)\n        .WherePasses(\n            get_biparam_stringequals_filter(\n                {\n                    DB.BuiltInParameter.SYMBOL_FAMILY_NAME_PARAM: family_name,\n                    DB.BuiltInParameter.SYMBOL_NAME_PARAM: symbol_name,\n                }\n            )\n        )\n        .WhereElementIsElementType()\n        .ToElements()\n    )\n    return famsyms\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_families","title":"<code>get_families(doc=None, only_editable=True)</code>","text":"<p>Retrieves a list of families from the given Revit document.</p> <p>Parameters:</p> Name Type Description Default <code>doc</code> <code>Document</code> <p>The Revit document to retrieve families from.                       If not provided, defaults to DOCS.doc.</p> <code>None</code> <code>only_editable</code> <code>bool</code> <p>If True, only returns families that are editable.                             Defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>list</code> <p>A list of Family objects from the document. If only_editable is True,   only includes families that are editable.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_families(doc=None, only_editable=True):\n    \"\"\"\n    Retrieves a list of families from the given Revit document.\n\n    Args:\n        doc (Document, optional): The Revit document to retrieve families from.\n                                  If not provided, defaults to DOCS.doc.\n        only_editable (bool, optional): If True, only returns families that are editable.\n                                        Defaults to True.\n\n    Returns:\n        list: A list of Family objects from the document. If only_editable is True,\n              only includes families that are editable.\n    \"\"\"\n    doc = doc or DOCS.doc\n    families = [\n        x.Family\n        for x in set(\n            DB.FilteredElementCollector(doc).WhereElementIsElementType().ToElements()\n        )\n        if isinstance(x, (DB.FamilySymbol, DB.AnnotationSymbolType))\n    ]\n    if only_editable:\n        return [x for x in families if x.IsEditable]\n    return families\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_noteblock_families","title":"<code>get_noteblock_families(doc=None)</code>","text":"<p>Retrieves a list of noteblock families from the given Revit document.</p> <p>Parameters:</p> Name Type Description Default <code>doc</code> <code>Document</code> <p>The Revit document to query. If not provided,                       the default document (DOCS.doc) will be used.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>list</code> <p>A list of noteblock family elements in the document.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_noteblock_families(doc=None):\n    \"\"\"\n    Retrieves a list of noteblock families from the given Revit document.\n\n    Args:\n        doc (Document, optional): The Revit document to query. If not provided,\n                                  the default document (DOCS.doc) will be used.\n\n    Returns:\n        list: A list of noteblock family elements in the document.\n    \"\"\"\n    doc = doc or DOCS.doc\n    return [\n        doc.GetElement(x) for x in DB.ViewSchedule.GetValidFamiliesForNoteBlock(doc)\n    ]\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_elements_by_family","title":"<code>get_elements_by_family(family_name, doc=None)</code>","text":"<p>Retrieves elements from a Revit document based on the specified family name.</p> <p>Parameters:</p> Name Type Description Default <code>family_name</code> <code>str</code> <p>The name of the family to filter elements by.</p> required <code>doc</code> <code>Document</code> <p>The Revit document to search within. If not provided,                          the default document (DOCS.doc) will be used.</p> <code>None</code> <p>Returns:</p> Type Description <p>list[DB.Element]: A list of elements that belong to the specified family.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_elements_by_family(family_name, doc=None):\n    \"\"\"\n    Retrieves elements from a Revit document based on the specified family name.\n\n    Args:\n        family_name (str): The name of the family to filter elements by.\n        doc (DB.Document, optional): The Revit document to search within. If not provided,\n                                     the default document (DOCS.doc) will be used.\n\n    Returns:\n        list[DB.Element]: A list of elements that belong to the specified family.\n    \"\"\"\n    famsyms = (\n        DB.FilteredElementCollector(doc or DOCS.doc)\n        .WherePasses(\n            get_biparam_stringequals_filter(\n                {DB.BuiltInParameter.SYMBOL_FAMILY_NAME_PARAM: family_name}\n            )\n        )\n        .WhereElementIsNotElementType()\n        .ToElements()\n    )\n    return famsyms\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_elements_by_familytype","title":"<code>get_elements_by_familytype(family_name, symbol_name, doc=None)</code>","text":"<p>Retrieves elements from a Revit document based on the specified family and symbol names.</p> <p>Parameters:</p> Name Type Description Default <code>family_name</code> <code>str</code> <p>The name of the family to filter elements by.</p> required <code>symbol_name</code> <code>str</code> <p>The name of the symbol (type) to filter elements by.</p> required <code>doc</code> <code>Document</code> <p>The Revit document to search in. If not provided, the current document is used.</p> <code>None</code> <p>Returns:</p> Type Description <p>list[DB.Element]: A list of elements that match the specified family and symbol names.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_elements_by_familytype(family_name, symbol_name, doc=None):\n    \"\"\"\n    Retrieves elements from a Revit document based on the specified family and symbol names.\n\n    Args:\n        family_name (str): The name of the family to filter elements by.\n        symbol_name (str): The name of the symbol (type) to filter elements by.\n        doc (DB.Document, optional): The Revit document to search in. If not provided, the current document is used.\n\n    Returns:\n        list[DB.Element]: A list of elements that match the specified family and symbol names.\n    \"\"\"\n    syms = (\n        DB.FilteredElementCollector(doc or DOCS.doc)\n        .WherePasses(\n            get_biparam_stringequals_filter(\n                {\n                    DB.BuiltInParameter.SYMBOL_FAMILY_NAME_PARAM: family_name,\n                    DB.BuiltInParameter.SYMBOL_NAME_PARAM: symbol_name,\n                }\n            )\n        )\n        .WhereElementIsNotElementType()\n        .ToElements()\n    )\n    return syms\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.find_workset","title":"<code>find_workset(workset_name_or_list, doc=None, partial=True)</code>","text":"<p>Finds a workset in the given Revit document by name or list of names.</p> <p>Parameters:</p> Name Type Description Default <code>workset_name_or_list</code> <code>str or list</code> <p>The name of the workset to find or a list of workset names.</p> required <code>doc</code> <code>Document</code> <p>The Revit document to search in. If None, the default document is used.</p> <code>None</code> <code>partial</code> <code>bool</code> <p>If True, allows partial matching of workset names. Defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>Workset</code> <p>The first matching workset found, or None if no match is found.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def find_workset(workset_name_or_list, doc=None, partial=True):\n    \"\"\"\n    Finds a workset in the given Revit document by name or list of names.\n\n    Args:\n        workset_name_or_list (str or list): The name of the workset to find or a list of workset names.\n        doc (Document, optional): The Revit document to search in. If None, the default document is used.\n        partial (bool, optional): If True, allows partial matching of workset names. Defaults to True.\n\n    Returns:\n        Workset: The first matching workset found, or None if no match is found.\n    \"\"\"\n    workset_clctr = DB.FilteredWorksetCollector(doc or DOCS.doc).ToWorksets()\n    if isinstance(workset_name_or_list, list):\n        for workset in workset_clctr:\n            for workset_name in workset_name_or_list:\n                if workset_name in workset.Name:\n                    return workset\n    elif isinstance(workset_name_or_list, str):\n        workset_name = workset_name_or_list\n\n        if partial:\n            for workset in workset_clctr:\n                if workset_name in workset.Name:\n                    return workset\n        else:\n            for workset in workset_clctr:\n                if workset_name == workset.Name:\n                    return workset\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.model_has_family","title":"<code>model_has_family(family_name, doc=None)</code>","text":"<p>Checks if the Revit model contains a family with the given name.</p> <p>Parameters:</p> Name Type Description Default <code>family_name</code> <code>str</code> <p>The name of the family to search for.</p> required <code>doc</code> <code>Document</code> <p>The Revit document to search in. If None, the current document is used.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the family is found in the model, False otherwise.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def model_has_family(family_name, doc=None):\n    \"\"\"\n    Checks if the Revit model contains a family with the given name.\n\n    Args:\n        family_name (str): The name of the family to search for.\n        doc (Document, optional): The Revit document to search in. If None, the current document is used.\n\n    Returns:\n        bool: True if the family is found in the model, False otherwise.\n    \"\"\"\n    collector = get_family(family_name, doc=doc)\n    return hasattr(collector, \"Count\") and collector.Count &gt; 0\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.model_has_workset","title":"<code>model_has_workset(workset_name, partial=False, doc=None)</code>","text":"<p>Checks if the model has a workset with the given name.</p> <p>Parameters:</p> Name Type Description Default <code>workset_name</code> <code>str</code> <p>The name of the workset to search for.</p> required <code>partial</code> <code>bool</code> <p>If True, allows partial matching of the workset name. Defaults to False.</p> <code>False</code> <code>doc</code> <code>Document</code> <p>The Revit document to search within. If None, the current document is used. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the workset is found, False otherwise.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def model_has_workset(workset_name, partial=False, doc=None):\n    \"\"\"\n    Checks if the model has a workset with the given name.\n\n    Args:\n        workset_name (str): The name of the workset to search for.\n        partial (bool, optional): If True, allows partial matching of the workset name. Defaults to False.\n        doc (Document, optional): The Revit document to search within. If None, the current document is used. Defaults to None.\n\n    Returns:\n        bool: True if the workset is found, False otherwise.\n    \"\"\"\n\n    return find_workset(workset_name, partial=partial, doc=doc)\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_worksets_names","title":"<code>get_worksets_names(doc=None)</code>","text":"<p>Returns a string with the names of all user worksets in a document</p> <p>Parameters:</p> Name Type Description Default <code>document</code> <code>Document</code> <p>A Revit document. de</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>A string with the names of all user worksets in a document.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_worksets_names(doc=None):\n    \"\"\"\n\n    Returns a string with the names of all user worksets in a document\n\n\n    Args:\n        document (Document): A Revit document. de\n\n\n    Returns:\n        str: A string with the names of all user worksets in a document.\n    \"\"\"\n    doc = doc or DOCS.doc\n    if not hasattr(doc, \"IsWorkshared\"):\n        return \"-\"\n    if not doc.IsWorkshared:\n        return \"Not Workshared\"\n    worksets_collection = (\n        DB.FilteredWorksetCollector(doc).OfKind(DB.WorksetKind.UserWorkset).ToWorksets()\n    )\n    return \", \".join(w.Name for w in worksets_collection)\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_critical_warnings_count","title":"<code>get_critical_warnings_count(warnings, critical_warnings_template)</code>","text":"<p>Counts the number of critical warnings from a list of warnings based on a template.</p> <p>Parameters:</p> Name Type Description Default <code>warnings</code> <code>list</code> <p>A list of warning objects. Each warning object should have a method               <code>GetFailureDefinitionId</code> that returns an object with a <code>Guid</code> attribute.</p> required <code>critical_warnings_template</code> <code>list</code> <p>A list of string representations of GUIDs that are                                 considered critical warnings.</p> required <p>Returns:</p> Name Type Description <code>int</code> <p>The count of critical warnings.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_critical_warnings_count(warnings, critical_warnings_template):\n    \"\"\"\n    Counts the number of critical warnings from a list of warnings based on a template.\n\n    Args:\n        warnings (list): A list of warning objects. Each warning object should have a method \n                         `GetFailureDefinitionId` that returns an object with a `Guid` attribute.\n        critical_warnings_template (list): A list of string representations of GUIDs that are \n                                           considered critical warnings.\n\n    Returns:\n        int: The count of critical warnings.\n    \"\"\"\n    warnings_guid = [warning.GetFailureDefinitionId().Guid for warning in warnings] \n    return sum(\n        1\n        for warning_guid in warnings_guid\n        if str(warning_guid) in critical_warnings_template\n    )\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_sharedparam_definition_file","title":"<code>get_sharedparam_definition_file()</code>","text":"<p>Retrieves the shared parameters definition file from the host application.</p> <p>Returns:</p> Name Type Description <code>SharedParameterFile</code> <p>The shared parameters file if it exists and is successfully opened.</p> <p>Raises:</p> Type Description <code>PyRevitException</code> <p>If the shared parameters file is not defined or cannot be opened.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_sharedparam_definition_file():\n    \"\"\"\n    Retrieves the shared parameters definition file from the host application.\n\n    Returns:\n        SharedParameterFile: The shared parameters file if it exists and is successfully opened.\n\n    Raises:\n        PyRevitException: If the shared parameters file is not defined or cannot be opened.\n    \"\"\"\n    if HOST_APP.app.SharedParametersFilename:\n        sparamf = HOST_APP.app.OpenSharedParameterFile()\n        if sparamf:\n            return sparamf\n        else:\n            raise PyRevitException(\"Failed opening Shared Parameters file.\")\n    else:\n        raise PyRevitException(\"No Shared Parameters file defined.\")\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_defined_sharedparams","title":"<code>get_defined_sharedparams()</code>","text":"<p>Retrieves all defined shared parameters from the shared parameter file.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>A list of DB.ExternalDefinition objects representing the shared parameters.</p> <p>Raises:</p> Type Description <code>PyRevitException</code> <p>If there is an error accessing the shared parameter file.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_defined_sharedparams():\n    \"\"\"\n    Retrieves all defined shared parameters from the shared parameter file.\n\n    Returns:\n        list: A list of DB.ExternalDefinition objects representing the shared parameters.\n\n    Raises:\n        PyRevitException: If there is an error accessing the shared parameter file.\n    \"\"\"\n    pp_list = []\n    try:\n        for def_group in get_sharedparam_definition_file().Groups:\n            pp_list.extend([x for x in def_group.Definitions])\n    except PyRevitException as ex:\n        mlogger.debug(\"Error getting shared parameters. | %s\", ex)\n    return pp_list\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_project_parameters","title":"<code>get_project_parameters(doc=None)</code>","text":"<p>Retrieves the project parameters from the given Revit document.</p> <p>Parameters:</p> Name Type Description Default <code>doc</code> <code>Document</code> <p>The Revit document from which to retrieve the project parameters.                       If not provided, defaults to <code>DOCS.doc</code>.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>list</code> <p>A list of ProjectParameter objects representing the project parameters in the document.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_project_parameters(doc=None):\n    \"\"\"\n    Retrieves the project parameters from the given Revit document.\n\n    Args:\n        doc (Document, optional): The Revit document from which to retrieve the project parameters.\n                                  If not provided, defaults to `DOCS.doc`.\n\n    Returns:\n        list: A list of ProjectParameter objects representing the project parameters in the document.\n    \"\"\"\n    doc = doc or DOCS.doc\n    shared_params = {x.Name: x for x in get_defined_sharedparams()}\n\n    pp_list = []\n    if doc and not doc.IsFamilyDocument:\n        param_bindings = doc.ParameterBindings\n        pb_iterator = param_bindings.ForwardIterator()\n        pb_iterator.Reset()\n        while pb_iterator.MoveNext():\n            msp = db.ProjectParameter(\n                pb_iterator.Key,\n                param_bindings[pb_iterator.Key],\n                param_ext_def=shared_params.get(pb_iterator.Key.Name, None),\n            )\n            pp_list.append(msp)\n    return pp_list\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_project_parameter_id","title":"<code>get_project_parameter_id(param_name, doc=None)</code>","text":"<p>Retrieves the ID of a project parameter by its name.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The name of the project parameter to find.</p> required <code>doc</code> <code>Document</code> <p>The Revit document to search in. If not provided,                       the default document (DOCS.doc) will be used.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>ElementId</code> <p>The ID of the project parameter.</p> <p>Raises:</p> Type Description <code>PyRevitException</code> <p>If the parameter with the specified name is not found.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_project_parameter_id(param_name, doc=None):\n    \"\"\"\n    Retrieves the ID of a project parameter by its name.\n\n    Args:\n        param_name (str): The name of the project parameter to find.\n        doc (Document, optional): The Revit document to search in. If not provided,\n                                  the default document (DOCS.doc) will be used.\n\n    Returns:\n        ElementId: The ID of the project parameter.\n\n    Raises:\n        PyRevitException: If the parameter with the specified name is not found.\n    \"\"\"\n    doc = doc or DOCS.doc\n    for project_param in get_project_parameters(doc):\n        if project_param.name == param_name:\n            return project_param.param_id\n    raise PyRevitException(\"Parameter not found: {}\".format(param_name))\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_project_parameter","title":"<code>get_project_parameter(param_id_or_name, doc=None)</code>","text":"<p>Retrieves a project parameter by its ID or name.</p> <p>Parameters:</p> Name Type Description Default <code>param_id_or_name</code> <code>str or int</code> <p>The ID or name of the project parameter to retrieve.</p> required <code>doc</code> <code>Document</code> <p>The Revit document to search in. If not provided, the default document is used.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>ProjectParameter</code> <p>The matching project parameter if found, otherwise None.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_project_parameter(param_id_or_name, doc=None):\n    \"\"\"\n    Retrieves a project parameter by its ID or name.\n\n    Args:\n        param_id_or_name (str or int): The ID or name of the project parameter to retrieve.\n        doc (Document, optional): The Revit document to search in. If not provided, the default document is used.\n\n    Returns:\n        ProjectParameter: The matching project parameter if found, otherwise None.\n    \"\"\"\n    pp_list = get_project_parameters(doc or DOCS.doc)\n    for msp in pp_list:\n        if msp == param_id_or_name:\n            return msp\n    return None\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.model_has_parameter","title":"<code>model_has_parameter(param_id_or_name, doc=None)</code>","text":"<p>Checks if the model has a specific parameter by its ID or name.</p> <p>Parameters:</p> Name Type Description Default <code>param_id_or_name</code> <code>str or int</code> <p>The parameter ID or name to check for.</p> required <code>doc</code> <code>Document</code> <p>The Revit document to search in. If None, the current document is used.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the parameter exists in the model, False otherwise.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def model_has_parameter(param_id_or_name, doc=None):\n    \"\"\"\n    Checks if the model has a specific parameter by its ID or name.\n\n    Args:\n        param_id_or_name (str or int): The parameter ID or name to check for.\n        doc (Document, optional): The Revit document to search in. If None, the current document is used.\n\n    Returns:\n        bool: True if the parameter exists in the model, False otherwise.\n    \"\"\"\n    return get_project_parameter(param_id_or_name, doc=doc)\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_global_parameters","title":"<code>get_global_parameters(doc=None)</code>","text":"<p>Retrieves all global parameters from the given Revit document.</p> <p>Parameters:</p> Name Type Description Default <code>doc</code> <code>Document</code> <p>The Revit document from which to retrieve global parameters.                       If not provided, defaults to DOCS.doc.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>list</code> <p>A list of global parameter elements in the document.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_global_parameters(doc=None):\n    \"\"\"\n    Retrieves all global parameters from the given Revit document.\n\n    Args:\n        doc (Document, optional): The Revit document from which to retrieve global parameters.\n                                  If not provided, defaults to DOCS.doc.\n\n    Returns:\n        list: A list of global parameter elements in the document.\n    \"\"\"\n    doc = doc or DOCS.doc\n    return [\n        doc.GetElement(x)\n        for x in DB.GlobalParametersManager.GetAllGlobalParameters(doc)\n    ]\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_global_parameter","title":"<code>get_global_parameter(param_name, doc=None)</code>","text":"<p>Retrieves a global parameter by its name from the given Revit document.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The name of the global parameter to retrieve.</p> required <code>doc</code> <code>Document</code> <p>The Revit document to search in. If not provided, defaults to DOCS.doc.</p> <code>None</code> <p>Returns:</p> Type Description <p>DB.GlobalParameter: The global parameter element if found, otherwise None.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_global_parameter(param_name, doc=None):\n    \"\"\"\n    Retrieves a global parameter by its name from the given Revit document.\n\n    Args:\n        param_name (str): The name of the global parameter to retrieve.\n        doc (DB.Document, optional): The Revit document to search in. If not provided, defaults to DOCS.doc.\n\n    Returns:\n        DB.GlobalParameter: The global parameter element if found, otherwise None.\n    \"\"\"\n    doc = doc or DOCS.doc\n    if features.GLOBAL_PARAMS:\n        param_id = DB.GlobalParametersManager.FindByName(doc, param_name)\n        if param_id != DB.ElementId.InvalidElementId:\n            return doc.GetElement(param_id)\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_project_info","title":"<code>get_project_info(doc=None)</code>","text":"<p>Retrieves the project information from the given Revit document.</p> <p>Parameters:</p> Name Type Description Default <code>doc</code> <code>Document</code> <p>The Revit document from which to retrieve the project information.                       If not provided, the default document (DOCS.doc) will be used.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>ProjectInfo</code> <p>The project information of the specified or default Revit document.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_project_info(doc=None):\n    \"\"\"\n    Retrieves the project information from the given Revit document.\n\n    Args:\n        doc (Document, optional): The Revit document from which to retrieve the project information.\n                                  If not provided, the default document (DOCS.doc) will be used.\n\n    Returns:\n        ProjectInfo: The project information of the specified or default Revit document.\n    \"\"\"\n    return db.ProjectInfo(doc or DOCS.doc)\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_phases_names","title":"<code>get_phases_names(doc=None)</code>","text":"<p>Returns a comma-separated list of the names of the phases in a project.</p> <p>Parameters:</p> Name Type Description Default <code>document</code> <code>Document</code> <p>A Revit document.</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>A comma-separated list of the names of the phases in a project.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_phases_names(doc=None):\n    \"\"\"\n\n    Returns a comma-separated list of the names of the phases in a project.\n\n\n    Args:\n        document (Document): A Revit document.\n\n\n    Returns:\n        str: A comma-separated list of the names of the phases in a project.\n    \"\"\"\n    if not hasattr(doc, \"Phases\"):\n        return \"-\"\n    return \", \".join(phase.Name for phase in doc.Phases)\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_revisions","title":"<code>get_revisions(doc=None)</code>","text":"<p>Retrieves a list of revision elements from the given Revit document.</p> <p>Parameters:</p> Name Type Description Default <code>doc</code> <code>Document</code> <p>The Revit document to retrieve revisions from.                       If not provided, the default document (DOCS.doc) is used.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>list</code> <p>A list of revision elements in the specified Revit document.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_revisions(doc=None):\n    \"\"\"\n    Retrieves a list of revision elements from the given Revit document.\n\n    Args:\n        doc (Document, optional): The Revit document to retrieve revisions from.\n                                  If not provided, the default document (DOCS.doc) is used.\n\n    Returns:\n        list: A list of revision elements in the specified Revit document.\n    \"\"\"\n    return list(\n        DB.FilteredElementCollector(doc or DOCS.doc)\n        .OfCategory(DB.BuiltInCategory.OST_Revisions)\n        .WhereElementIsNotElementType()\n    )\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_sheet_revisions","title":"<code>get_sheet_revisions(sheet)</code>","text":"<p>Retrieves the revisions associated with a given Revit sheet.</p> <p>Parameters:</p> Name Type Description Default <code>sheet</code> <code>ViewSheet</code> <p>The Revit sheet from which to retrieve revisions.</p> required <p>Returns:</p> Type Description <p>list[Autodesk.Revit.DB.Element]: A list of revision elements associated with the sheet.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_sheet_revisions(sheet):\n    \"\"\"\n    Retrieves the revisions associated with a given Revit sheet.\n\n    Args:\n        sheet (Autodesk.Revit.DB.ViewSheet): The Revit sheet from which to retrieve revisions.\n\n    Returns:\n        list[Autodesk.Revit.DB.Element]: A list of revision elements associated with the sheet.\n    \"\"\"\n    doc = sheet.Document\n    return [doc.GetElement(x) for x in sheet.GetAdditionalRevisionIds()]\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_current_sheet_revision","title":"<code>get_current_sheet_revision(sheet)</code>","text":"<p>Retrieves the current revision of the given sheet.</p> <p>Parameters:</p> Name Type Description Default <code>sheet</code> <code>ViewSheet</code> <p>The sheet for which to get the current revision.</p> required <p>Returns:</p> Type Description <p>Autodesk.Revit.DB.Element: The current revision element of the sheet.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_current_sheet_revision(sheet):\n    \"\"\"\n    Retrieves the current revision of the given sheet.\n\n    Args:\n        sheet (Autodesk.Revit.DB.ViewSheet): The sheet for which to get the current revision.\n\n    Returns:\n        Autodesk.Revit.DB.Element: The current revision element of the sheet.\n    \"\"\"\n    doc = sheet.Document\n    return doc.GetElement(sheet.GetCurrentRevision())\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_sheets","title":"<code>get_sheets(include_placeholders=True, include_noappear=True, doc=None)</code>","text":"<p>Retrieves a list of sheets from the Revit document.</p> <p>Parameters:</p> Name Type Description Default <code>include_placeholders</code> <code>bool</code> <p>If True, includes placeholder sheets in the result. Defaults to True.</p> <code>True</code> <code>include_noappear</code> <code>bool</code> <p>If True, includes sheets that do not appear in the project browser. Defaults to True.</p> <code>True</code> <code>doc</code> <code>Document</code> <p>The Revit document to retrieve sheets from. If None, uses the current document. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>list</code> <p>A list of sheets from the specified Revit document.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_sheets(include_placeholders=True, include_noappear=True, doc=None):\n    \"\"\"\n    Retrieves a list of sheets from the Revit document.\n\n    Args:\n        include_placeholders (bool, optional): If True, includes placeholder sheets in the result. Defaults to True.\n        include_noappear (bool, optional): If True, includes sheets that do not appear in the project browser. Defaults to True.\n        doc (Document, optional): The Revit document to retrieve sheets from. If None, uses the current document. Defaults to None.\n\n    Returns:\n        list: A list of sheets from the specified Revit document.\n    \"\"\"\n    sheets = list(\n        DB.FilteredElementCollector(doc or DOCS.doc)\n        .OfCategory(DB.BuiltInCategory.OST_Sheets)\n        .WhereElementIsNotElementType()\n    )\n    if not include_noappear:\n        sheets = [\n            x\n            for x in sheets\n            if x.Parameter[DB.BuiltInParameter.SHEET_SCHEDULED].AsInteger() &gt; 0\n        ]\n    if not include_placeholders:\n        return [x for x in sheets if not x.IsPlaceholder]\n\n    return sheets\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_document_clean_name","title":"<code>get_document_clean_name(doc=None)</code>","text":"<p>Return the name of the given document without the file path or file extension.</p> <p>Parameters:</p> Name Type Description Default <code>doc</code> <code>Document</code> <p>The Revit document to retrieve links from. If None, the default document (DOCS.doc) is used. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>str</code> <p>The name of the given document without the file path or file</p> <p>extension.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_document_clean_name(doc=None):\n    \"\"\"\n    Return the name of the given document without the file path or file\n    extension.\n\n    Args:\n        doc (DB.Document, optional): The Revit document to retrieve links from. If None, the default document\n            (DOCS.doc) is used. Defaults to None.\n\n    Returns:\n        str: The name of the given document without the file path or file\n        extension.\n    \"\"\"\n    document_name = db.ProjectInfo(doc or DOCS.doc).path\n    if not document_name:\n        return \"File Not Saved\"\n    if document_name.startswith(\"BIM 360://\"):\n        path = document_name.split(\"://\", 1)[1]\n    else:\n        path = document_name\n    return splitext(basename(path))[0]\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_links","title":"<code>get_links(linktype=None, doc=None)</code>","text":"<p>Retrieves external file references (links) from a Revit document.</p> <p>Parameters:</p> Name Type Description Default <code>linktype</code> <code>ExternalFileReferenceType</code> <p>The type of external file reference to filter by. If None, all external file references are returned. Defaults to None.</p> <code>None</code> <code>doc</code> <code>Document</code> <p>The Revit document to retrieve links from. If None, the default document (DOCS.doc) is used. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>list</code> <p>A list of db.ExternalRef objects representing the external file references in the document.</p> <p>Raises:</p> Type Description <code>PyRevitException</code> <p>If the document is not saved or if there is an error reading the links from the model path.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_links(linktype=None, doc=None):\n    \"\"\"\n    Retrieves external file references (links) from a Revit document.\n\n    Args:\n        linktype (DB.ExternalFileReferenceType, optional): The type of external file reference to filter by.\n            If None, all external file references are returned. Defaults to None.\n        doc (DB.Document, optional): The Revit document to retrieve links from. If None, the default document\n            (DOCS.doc) is used. Defaults to None.\n\n    Returns:\n        list: A list of db.ExternalRef objects representing the external file references in the document.\n\n    Raises:\n        PyRevitException: If the document is not saved or if there is an error reading the links from the model path.\n    \"\"\"\n    doc = doc or DOCS.doc\n    location = doc.PathName\n    if not location:\n        raise PyRevitException(\"PathName is empty. Model is not saved.\")\n    links = []\n    model_path = DB.ModelPathUtils.ConvertUserVisiblePathToModelPath(location)\n    if not model_path:\n        raise PyRevitException(\"Model is not saved. Can not read links.\")\n    try:\n        trans_data = DB.TransmissionData.ReadTransmissionData(model_path)\n        external_refs = trans_data.GetAllExternalFileReferenceIds()\n        for ref_id in external_refs:\n            ext_ref = trans_data.GetLastSavedReferenceData(ref_id)\n            link = doc.GetElement(ref_id)\n            if linktype:\n                if ext_ref.ExternalFileReferenceType == linktype:\n                    links.append(db.ExternalRef(link, ext_ref))\n            else:\n                links.append(db.ExternalRef(link, ext_ref))\n        return links\n    except Exception as data_err:\n        raise PyRevitException(\n            \"Error reading links from model path: {} | {}\".format(model_path, data_err)\n        )\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_linked_models","title":"<code>get_linked_models(doc=None, loaded_only=False)</code>","text":"<p>Retrieves the linked Revit models in the given document.</p> <p>Parameters:</p> Name Type Description Default <code>doc</code> <code>Document</code> <p>The Revit document to search for linked models.                       If None, defaults to DOCS.doc.</p> <code>None</code> <code>loaded_only</code> <code>bool</code> <p>If True, only returns the linked models that are currently loaded.                           Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>list</code> <p>A list of linked Revit models. If loaded_only is True, only the loaded models are returned.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_linked_models(doc=None, loaded_only=False):\n    \"\"\"\n    Retrieves the linked Revit models in the given document.\n\n    Args:\n        doc (Document, optional): The Revit document to search for linked models.\n                                  If None, defaults to DOCS.doc.\n        loaded_only (bool, optional): If True, only returns the linked models that are currently loaded.\n                                      Defaults to False.\n\n    Returns:\n        list: A list of linked Revit models. If loaded_only is True, only the loaded models are returned.\n    \"\"\"\n    doc = doc or DOCS.doc\n    linkedmodels = get_links(linktype=DB.ExternalFileReferenceType.RevitLink, doc=doc)\n    if loaded_only:\n        return [x for x in linkedmodels if DB.RevitLinkType.IsLoaded(doc, x.id)]\n\n    return linkedmodels\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_linked_model_doc","title":"<code>get_linked_model_doc(linked_model)</code>","text":"<p>Retrieves the document of a linked Revit model.</p> <p>Parameters:</p> Name Type Description Default <code>linked_model</code> <code>Union[RevitLinkType, ExternalRef]</code> <p>The linked model, which can be either a RevitLinkType or an ExternalRef.</p> required <p>Returns:</p> Name Type Description <code>Document</code> <p>The document of the linked model if found, otherwise None.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_linked_model_doc(linked_model):\n    \"\"\"\n    Retrieves the document of a linked Revit model.\n\n    Args:\n        linked_model (Union[DB.RevitLinkType, db.ExternalRef]): The linked model, which can be either a RevitLinkType or an ExternalRef.\n\n    Returns:\n        Document: The document of the linked model if found, otherwise None.\n    \"\"\"\n    lmodel = None\n    if isinstance(linked_model, DB.RevitLinkType):\n        lmodel = db.ExternalRef(linked_model)  # pylint: disable=E1120\n    elif isinstance(linked_model, db.ExternalRef):\n        lmodel = linked_model\n\n    if lmodel:\n        for open_doc in DOCS.docs:\n            if open_doc.Title == lmodel.name:\n                return open_doc\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_linked_model_types","title":"<code>get_linked_model_types(doc, rvt_links_instances)</code>","text":"<p>Retrieves the types of linked Revit models. Args:     doc (Document): The Revit document. Defaults to None.     rvt_links_instances (list): A list of Revit link instances. Returns:     list: A list of linked model types.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_linked_model_types(doc, rvt_links_instances):\n    \"\"\"\n    Retrieves the types of linked Revit models.\n    Args:\n        doc (Document): The Revit document. Defaults to None.\n        rvt_links_instances (list): A list of Revit link instances.\n    Returns:\n        list: A list of linked model types.\n    \"\"\"\n    return [doc.GetElement(rvtlink.GetTypeId()) for rvtlink in rvt_links_instances]\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_linked_model_instances","title":"<code>get_linked_model_instances(doc=None)</code>","text":"<p>Returns a list of all rvt_links instances in a document</p> <p>Parameters:</p> Name Type Description Default <code>doc</code> <code>Document</code> <p>A Revit document.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>list</code> <p>A list of Revit link instances.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_linked_model_instances(doc=None):\n    \"\"\"\n    Returns a list of all rvt_links instances in a document\n\n    Args:\n        doc (Document): A Revit document.\n\n    Returns:\n        list: A list of Revit link instances.\n    \"\"\"\n    return (\n        DB.FilteredElementCollector(doc or DOCS.doc)\n        .OfCategory(DB.BuiltInCategory.OST_RvtLinks)\n        .WhereElementIsNotElementType()\n    )\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_rvt_link_status","title":"<code>get_rvt_link_status(doc=None)</code>","text":"<p>Retrieves the status of linked Revit models in the given document.</p> <p>Parameters:</p> Name Type Description Default <code>doc</code> <code>Document</code> <p>The Revit document to query. If None, the current document is used.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>list</code> <p>A list of statuses for each linked Revit model type.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_rvt_link_status(doc=None):\n    \"\"\"\n    Retrieves the status of linked Revit models in the given document.\n\n    Args:\n        doc (Document, optional): The Revit document to query. If None, the current document is used.\n\n    Returns:\n        list: A list of statuses for each linked Revit model type.\n    \"\"\"\n    doc = doc or DOCS.doc\n    rvtlinks_instances = get_linked_model_instances(doc)\n    rvtlinks_types = get_linked_model_types(doc, rvtlinks_instances)\n    return [rvtlinktype.GetLinkedFileStatus() for rvtlinktype in rvtlinks_types]\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_rvt_link_doc_name","title":"<code>get_rvt_link_doc_name(rvtlink_instance)</code>","text":"<p>Retrieves the name of the Revit link document from the given Revit link instance.</p> <p>Parameters:</p> Name Type Description Default <code>rvtlink_instance</code> <p>The Revit link instance from which to extract the document name.</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>The name of the Revit link document, without the file extension and any directory paths.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_rvt_link_doc_name(rvtlink_instance):\n    \"\"\"\n    Retrieves the name of the Revit link document from the given Revit link instance.\n\n    Args:\n        rvtlink_instance: The Revit link instance from which to extract the document name.\n\n    Returns:\n        str: The name of the Revit link document, without the file extension and any directory paths.\n    \"\"\"\n    return get_name(rvtlink_instance).split(\" \\ \")[0].split(\".rvt\")[0]\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_rvt_link_instance_name","title":"<code>get_rvt_link_instance_name(rvtlink_instance=None)</code>","text":"<p>Retrieves the name of a Revit link instance.</p> <p>Parameters:</p> Name Type Description Default <code>rvtlink_instance</code> <p>The Revit link instance object.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>str</code> <p>The name of the Revit link instance, extracted from the full name.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_rvt_link_instance_name(rvtlink_instance=None):\n    \"\"\"\n    Retrieves the name of a Revit link instance.\n\n    Args:\n        rvtlink_instance: The Revit link instance object.\n\n    Returns:\n        str: The name of the Revit link instance, extracted from the full name.\n    \"\"\"\n    return get_name(rvtlink_instance).split(\" : \")[1]\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.find_first_legend","title":"<code>find_first_legend(doc=None)</code>","text":"<p>Finds the first legend view in the given Revit document.</p> <p>Parameters:</p> Name Type Description Default <code>doc</code> <code>Document</code> <p>The Revit document to search in. If not provided,                       it defaults to DOCS.doc.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>View</code> <p>The first legend view found in the document, or None if no legend view is found.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def find_first_legend(doc=None):\n    \"\"\"\n    Finds the first legend view in the given Revit document.\n\n    Args:\n        doc (Document, optional): The Revit document to search in. If not provided,\n                                  it defaults to DOCS.doc.\n\n    Returns:\n        View: The first legend view found in the document, or None if no legend view is found.\n    \"\"\"\n    doc = doc or DOCS.doc\n    for view in DB.FilteredElementCollector(doc).OfClass(DB.View):\n        if view.ViewType == DB.ViewType.Legend and not view.IsTemplate:\n            return view\n    return None\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.compare_revisions","title":"<code>compare_revisions(src_rev, dest_rev, case_sensitive=False)</code>","text":"<p>Compare two revision objects based on specific attributes.</p> <p>Parameters:</p> Name Type Description Default <code>src_rev</code> <code>object</code> <p>The source revision object to compare.</p> required <code>dest_rev</code> <code>object</code> <p>The destination revision object to compare.</p> required <code>case_sensitive</code> <code>bool</code> <p>Flag to indicate if the comparison should be case sensitive. Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>bool</code> <p>True if all specified attributes match between the two revisions, False otherwise.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def compare_revisions(src_rev, dest_rev, case_sensitive=False):\n    \"\"\"\n    Compare two revision objects based on specific attributes.\n\n    Args:\n        src_rev (object): The source revision object to compare.\n        dest_rev (object): The destination revision object to compare.\n        case_sensitive (bool, optional): Flag to indicate if the comparison should be case sensitive. Defaults to False.\n\n    Returns:\n        bool: True if all specified attributes match between the two revisions, False otherwise.\n    \"\"\"\n    return all(\n        db.BaseWrapper.compare_attrs(\n            src_rev,\n            dest_rev,\n            [\"RevisionDate\", \"Description\", \"IssuedBy\", \"IssuedTo\"],\n            case_sensitive=case_sensitive,\n        )\n    )\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_all_views","title":"<code>get_all_views(doc=None, view_types=None, include_nongraphical=False)</code>","text":"<p>Retrieves all views from the given Revit document, with optional filtering by view types and graphical views.</p> <p>Parameters:</p> Name Type Description Default <code>doc</code> <code>Document</code> <p>The Revit document to retrieve views from. If None, defaults to DOCS.doc.</p> <code>None</code> <code>view_types</code> <code>list</code> <p>A list of view types to filter the views. If None, no filtering is applied.</p> <code>None</code> <code>include_nongraphical</code> <code>bool</code> <p>If True, includes non-graphical views in the result. Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>list</code> <p>A list of views from the Revit document, filtered by the specified criteria.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_all_views(doc=None, view_types=None, include_nongraphical=False):\n    \"\"\"\n    Retrieves all views from the given Revit document, with optional filtering by view types and graphical views.\n\n    Args:\n        doc (Document, optional): The Revit document to retrieve views from. If None, defaults to DOCS.doc.\n        view_types (list, optional): A list of view types to filter the views. If None, no filtering is applied.\n        include_nongraphical (bool, optional): If True, includes non-graphical views in the result. Defaults to False.\n\n    Returns:\n        list: A list of views from the Revit document, filtered by the specified criteria.\n    \"\"\"\n    doc = doc or DOCS.doc\n    all_views = (\n        DB.FilteredElementCollector(doc)\n        .OfClass(DB.View)\n        .WhereElementIsNotElementType()\n        .ToElements()\n    )\n\n    if view_types:\n        all_views = [x for x in all_views if x.ViewType in view_types]\n    if not include_nongraphical:\n        return [\n            x\n            for x in all_views\n            if x.ViewType in GRAPHICAL_VIEWTYPES\n            and not x.IsTemplate\n            and not x.ViewSpecific\n        ]\n    return all_views\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_all_view_templates","title":"<code>get_all_view_templates(doc=None, view_types=None)</code>","text":"<p>Retrieves all view templates from the given Revit document.</p> <p>Parameters:</p> Name Type Description Default <code>doc</code> <code>Document</code> <p>The Revit document to search for view templates.                       If None, the active document will be used.</p> <code>None</code> <code>view_types</code> <code>list</code> <p>A list of view types to filter the views.                          If None, all view types will be considered.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>list</code> <p>A list of view templates found in the document.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_all_view_templates(doc=None, view_types=None):\n    \"\"\"\n    Retrieves all view templates from the given Revit document.\n\n    Args:\n        doc (Document, optional): The Revit document to search for view templates.\n                                  If None, the active document will be used.\n        view_types (list, optional): A list of view types to filter the views.\n                                     If None, all view types will be considered.\n\n    Returns:\n        list: A list of view templates found in the document.\n    \"\"\"\n    return [\n        x\n        for x in get_all_views(\n            doc=doc, view_types=view_types, include_nongraphical=True\n        )\n        if x.IsTemplate\n    ]\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_sheet_by_number","title":"<code>get_sheet_by_number(sheet_num, doc=None)</code>","text":"<p>Retrieves a sheet from the document by its sheet number.</p> <p>Parameters:</p> Name Type Description Default <code>sheet_num</code> <code>str</code> <p>The sheet number to search for.</p> required <code>doc</code> <code>Document</code> <p>The Revit document to search within.                       If not provided, defaults to DOCS.doc.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Element</code> <p>The sheet element with the specified sheet number,      or None if no matching sheet is found.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_sheet_by_number(sheet_num, doc=None):\n    \"\"\"\n    Retrieves a sheet from the document by its sheet number.\n\n    Args:\n        sheet_num (str): The sheet number to search for.\n        doc (Document, optional): The Revit document to search within.\n                                  If not provided, defaults to DOCS.doc.\n\n    Returns:\n        Element: The sheet element with the specified sheet number,\n                 or None if no matching sheet is found.\n    \"\"\"\n    doc = doc or DOCS.doc\n    return next((x for x in get_sheets(doc=doc) if x.SheetNumber == sheet_num), None)\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_viewport_by_number","title":"<code>get_viewport_by_number(sheet_num, detail_num, doc=None)</code>","text":"<p>Retrieves a viewport from a Revit document based on the sheet number and detail number.</p> <p>Parameters:</p> Name Type Description Default <code>sheet_num</code> <code>str</code> <p>The number of the sheet containing the viewport.</p> required <code>detail_num</code> <code>str</code> <p>The detail number of the viewport to retrieve.</p> required <code>doc</code> <code>Document</code> <p>The Revit document to search in. If not provided, defaults to DOCS.doc.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Element</code> <p>The viewport element if found, otherwise None.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_viewport_by_number(sheet_num, detail_num, doc=None):\n    \"\"\"\n    Retrieves a viewport from a Revit document based on the sheet number and detail number.\n\n    Args:\n        sheet_num (str): The number of the sheet containing the viewport.\n        detail_num (str): The detail number of the viewport to retrieve.\n        doc (Document, optional): The Revit document to search in. If not provided, defaults to DOCS.doc.\n\n    Returns:\n        Element: The viewport element if found, otherwise None.\n    \"\"\"\n    doc = doc or DOCS.doc\n    sheet = get_sheet_by_number(sheet_num, doc=doc)\n    if sheet:\n        vps = [doc.GetElement(x) for x in sheet.GetAllViewports()]\n        for vp in vps:\n            det_num = vp.Parameter[\n                DB.BuiltInParameter.VIEWPORT_DETAIL_NUMBER\n            ].AsString()\n            if det_num == detail_num:\n                return vp\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_view_by_sheetref","title":"<code>get_view_by_sheetref(sheet_num, detail_num, doc=None)</code>","text":"<p>Retrieves the view ID associated with a given sheet number and detail number.</p> <p>Parameters:</p> Name Type Description Default <code>sheet_num</code> <code>int</code> <p>The sheet number to search for.</p> required <code>detail_num</code> <code>int</code> <p>The detail number to search for.</p> required <code>doc</code> <code>Document</code> <p>The Revit document to search within. If not provided, defaults to DOCS.doc.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>ElementId</code> <p>The ID of the view associated with the specified sheet and detail numbers, or None if not found.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_view_by_sheetref(sheet_num, detail_num, doc=None):\n    \"\"\"\n    Retrieves the view ID associated with a given sheet number and detail number.\n\n    Args:\n        sheet_num (int): The sheet number to search for.\n        detail_num (int): The detail number to search for.\n        doc (Document, optional): The Revit document to search within. If not provided, defaults to DOCS.doc.\n\n    Returns:\n        ElementId: The ID of the view associated with the specified sheet and detail numbers, or None if not found.\n    \"\"\"\n    doc = doc or DOCS.doc\n    vport = get_viewport_by_number(sheet_num, detail_num, doc=doc)\n    if vport:\n        return vport.ViewId\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.is_schedule","title":"<code>is_schedule(view)</code>","text":"<p>Determines if the given view is a schedule that is not a template, title block revision schedule, internal keynote schedule, or keynote legend.</p> <p>Parameters:</p> Name Type Description Default <code>view</code> <code>View</code> <p>The Revit view to check.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the view is a schedule and not one of the excluded types, False otherwise.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def is_schedule(view):\n    \"\"\"\n    Determines if the given view is a schedule that is not a template,\n    title block revision schedule, internal keynote schedule, or keynote legend.\n\n    Args:\n        view (DB.View): The Revit view to check.\n\n    Returns:\n        bool: True if the view is a schedule and not one of the excluded types, False otherwise.\n    \"\"\"\n    if isinstance(view, DB.ViewSchedule) and not view.IsTemplate:\n        isrevsched = view.IsTitleblockRevisionSchedule\n        isintkeynote = view.IsInternalKeynoteSchedule\n        iskeynotelegend = (\n            view.Definition.CategoryId\n            == get_category(DB.BuiltInCategory.OST_KeynoteTags).Id\n        )\n\n        return not (isrevsched or isintkeynote or iskeynotelegend)\n    return False\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_all_schedules","title":"<code>get_all_schedules(doc=None)</code>","text":"<p>Retrieves all schedule views from the given Revit document.</p> <p>Parameters:</p> Name Type Description Default <code>doc</code> <code>Document</code> <p>The Revit document to retrieve schedules from.                       If not provided, defaults to DOCS.doc.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>filter</code> <p>A filter object containing all schedule views in the document.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_all_schedules(doc=None):\n    \"\"\"\n    Retrieves all schedule views from the given Revit document.\n\n    Args:\n        doc (Document, optional): The Revit document to retrieve schedules from.\n                                  If not provided, defaults to DOCS.doc.\n\n    Returns:\n        filter: A filter object containing all schedule views in the document.\n    \"\"\"\n    doc = doc or DOCS.doc\n    all_scheds = (\n        DB.FilteredElementCollector(doc)\n        .OfClass(DB.ViewSchedule)\n        .WhereElementIsNotElementType()\n        .ToElements()\n    )\n    return filter(is_schedule, all_scheds)\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_view_by_name","title":"<code>get_view_by_name(view_name, view_types=None, doc=None)</code>","text":"<p>Retrieves a Revit view by its name.</p> <p>Parameters:</p> Name Type Description Default <code>view_name</code> <code>str</code> <p>The name of the view to retrieve.</p> required <code>view_types</code> <code>list</code> <p>A list of view types to filter the search. Defaults to None.</p> <code>None</code> <code>doc</code> <code>Document</code> <p>The Revit document to search within. Defaults to the active document.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>View</code> <p>The Revit view that matches the given name, or None if no match is found.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_view_by_name(view_name, view_types=None, doc=None):\n    \"\"\"\n    Retrieves a Revit view by its name.\n\n    Args:\n        view_name (str): The name of the view to retrieve.\n        view_types (list, optional): A list of view types to filter the search. Defaults to None.\n        doc (Document, optional): The Revit document to search within. Defaults to the active document.\n\n    Returns:\n        View: The Revit view that matches the given name, or None if no match is found.\n    \"\"\"\n    doc = doc or DOCS.doc\n    for view in get_all_views(doc=doc, view_types=view_types):\n        if get_name(view) == view_name:\n            return view\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_all_referencing_elements","title":"<code>get_all_referencing_elements(doc=None)</code>","text":"<p>Retrieves all elements in the given Revit document that reference views. This function collects all elements in the provided Revit document that are not element types, belong to a category, are instances of DB.Element, and whose category is in the predefined set of view-related built-in categories.</p> <p>Parameters:</p> Name Type Description Default <code>doc</code> <code>Document</code> <p>The Revit document to search for referencing elements.                          If not provided, defaults to DOCS.doc.</p> <code>None</code> <p>Returns:</p> Type Description <p>list[DB.ElementId]: A list of element IDs that reference views in the document.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_all_referencing_elements(doc=None):\n    \"\"\"\n    Retrieves all elements in the given Revit document that reference views.\n    This function collects all elements in the provided Revit document that are not element types,\n    belong to a category, are instances of DB.Element, and whose category is in the predefined\n    set of view-related built-in categories.\n\n    Args:\n        doc (DB.Document, optional): The Revit document to search for referencing elements.\n                                     If not provided, defaults to DOCS.doc.\n\n    Returns:\n        list[DB.ElementId]: A list of element IDs that reference views in the document.\n    \"\"\"\n    doc = doc or DOCS.doc\n    all_referencing_elements = []\n    for el in (\n        DB.FilteredElementCollector(doc).WhereElementIsNotElementType().ToElements()\n    ):\n        if (\n            el.Category\n            and isinstance(el, DB.Element)\n            and get_builtincategory(el.Category) in BUILTINCATEGORIES_VIEW\n        ):\n            all_referencing_elements.append(el.Id)\n    return all_referencing_elements\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_all_referencing_elements_in_view","title":"<code>get_all_referencing_elements_in_view(view)</code>","text":"<p>Retrieves all elements in the given view that reference other elements.</p> <p>Parameters:</p> Name Type Description Default <code>view</code> <code>View</code> <p>The Revit view from which to collect referencing elements.</p> required <p>Returns:</p> Type Description <p>list[DB.ElementId]: A list of element IDs that reference other elements in the view.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_all_referencing_elements_in_view(view):\n    \"\"\"\n    Retrieves all elements in the given view that reference other elements.\n\n    Args:\n        view (DB.View): The Revit view from which to collect referencing elements.\n\n    Returns:\n        list[DB.ElementId]: A list of element IDs that reference other elements in the view.\n    \"\"\"\n    all_referencing_elements_in_view = []\n    for el in (\n        DB.FilteredElementCollector(view.Document, view.Id)\n        .WhereElementIsNotElementType()\n        .ToElements()\n    ):\n        if (\n            el.Category\n            and isinstance(el, DB.Element)\n            and get_builtincategory(el.Category) in BUILTINCATEGORIES_VIEW\n        ):\n            all_referencing_elements_in_view.append(el.Id)\n    return all_referencing_elements_in_view\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_schedules_on_sheet","title":"<code>get_schedules_on_sheet(viewsheet, doc=None)</code>","text":"<p>Retrieves all schedule instances placed on a given Revit view sheet.</p> <p>Parameters:</p> Name Type Description Default <code>viewsheet</code> <code>ViewSheet</code> <p>The Revit view sheet from which to retrieve schedule instances.</p> required <code>doc</code> <code>Document</code> <p>The Revit document. If not provided, defaults to DOCS.doc.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>list</code> <p>A list of schedule instances (DB.ScheduleSheetInstance) that are placed on the given view sheet,   excluding title block revision schedules.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_schedules_on_sheet(viewsheet, doc=None):\n    \"\"\"\n    Retrieves all schedule instances placed on a given Revit view sheet.\n\n    Args:\n        viewsheet (DB.ViewSheet): The Revit view sheet from which to retrieve schedule instances.\n        doc (DB.Document, optional): The Revit document. If not provided, defaults to DOCS.doc.\n\n    Returns:\n        list: A list of schedule instances (DB.ScheduleSheetInstance) that are placed on the given view sheet,\n              excluding title block revision schedules.\n    \"\"\"\n    doc = doc or DOCS.doc\n    all_sheeted_scheds = (\n        DB.FilteredElementCollector(doc).OfClass(DB.ScheduleSheetInstance).ToElements()\n    )\n    return [\n        x\n        for x in all_sheeted_scheds\n        if x.OwnerViewId == viewsheet.Id\n        and not doc.GetElement(x.ScheduleId).IsTitleblockRevisionSchedule\n    ]\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_schedules_instances","title":"<code>get_schedules_instances(doc=None)</code>","text":"<p>Retrieves all schedule instances placed on sheets.</p> <p>Parameters:</p> Name Type Description Default <code>doc</code> <code>Document</code> <p>The Revit document to search within. If not provided,                        the default document (DOCS.doc) will be used.</p> <code>None</code> <p>Returns:</p> Type Description <p>List[ScheduleSheetInstance]: A list of ScheduleSheetInstance elements.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_schedules_instances(doc=None):\n    \"\"\"\n    Retrieves all schedule instances placed on sheets.\n\n    Args:\n        doc (Document, optional): The Revit document to search within. If not provided, \n                                  the default document (DOCS.doc) will be used.\n\n    Returns:\n        List[ScheduleSheetInstance]: A list of ScheduleSheetInstance elements.\n    \"\"\"\n    return (\n        DB.FilteredElementCollector(doc or DOCS.doc)\n        .OfClass(DB.ScheduleSheetInstance)\n        .ToElements()\n    )\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.is_sheet_empty","title":"<code>is_sheet_empty(viewsheet)</code>","text":"<p>Checks if a given Revit sheet is empty.</p> <p>Parameters:</p> Name Type Description Default <code>viewsheet</code> <p>The Revit sheet to check.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the sheet has no viewports or schedules, False otherwise.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def is_sheet_empty(viewsheet):\n    \"\"\"\n    Checks if a given Revit sheet is empty.\n\n    Args:\n        viewsheet: The Revit sheet to check.\n\n    Returns:\n        bool: True if the sheet has no viewports or schedules, False otherwise.\n    \"\"\"\n    sheet_views = viewsheet.GetAllViewports()\n    sheet_scheds = get_schedules_on_sheet(viewsheet, doc=viewsheet.Document)\n    if sheet_views or sheet_scheds:\n        return False\n    return True\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_doc_categories","title":"<code>get_doc_categories(doc=None, include_subcats=True)</code>","text":"<p>Retrieves all categories from the given Revit document, optionally including subcategories.</p> <p>Parameters:</p> Name Type Description Default <code>doc</code> <code>Document</code> <p>The Revit document from which to retrieve categories.                       If not provided, defaults to DOCS.doc.</p> <code>None</code> <code>include_subcats</code> <code>bool</code> <p>Whether to include subcategories in the result.                               Defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>list</code> <p>A list of all categories (and subcategories, if include_subcats is True) in the document.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_doc_categories(doc=None, include_subcats=True):\n    \"\"\"\n    Retrieves all categories from the given Revit document, optionally including subcategories.\n\n    Args:\n        doc (Document, optional): The Revit document from which to retrieve categories.\n                                  If not provided, defaults to DOCS.doc.\n        include_subcats (bool, optional): Whether to include subcategories in the result.\n                                          Defaults to True.\n\n    Returns:\n        list: A list of all categories (and subcategories, if include_subcats is True) in the document.\n    \"\"\"\n    doc = doc or DOCS.doc\n    all_cats = []\n    cats = doc.Settings.Categories\n    all_cats.extend(cats)\n    if include_subcats:\n        for cat in cats:\n            all_cats.extend([x for x in cat.SubCategories])\n    return all_cats\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_schedule_categories","title":"<code>get_schedule_categories(doc=None)</code>","text":"<p>Retrieves the categories that are valid for schedules in the given Revit document.</p> <p>Parameters:</p> Name Type Description Default <code>doc</code> <code>Document</code> <p>The Revit document to retrieve the schedule categories from.                       If not provided, it defaults to DOCS.doc.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>list</code> <p>A list of categories that are valid for schedules in the given Revit document.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_schedule_categories(doc=None):\n    \"\"\"\n    Retrieves the categories that are valid for schedules in the given Revit document.\n\n    Args:\n        doc (Document, optional): The Revit document to retrieve the schedule categories from.\n                                  If not provided, it defaults to DOCS.doc.\n\n    Returns:\n        list: A list of categories that are valid for schedules in the given Revit document.\n    \"\"\"\n    doc = doc or DOCS.doc\n    all_cats = get_doc_categories(doc)\n    cats = []\n    for cat_id in DB.ViewSchedule.GetValidCategoriesForSchedule():\n        for cat in all_cats:\n            if cat.Id == cat_id:\n                cats.append(cat)\n    return cats\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_key_schedule_categories","title":"<code>get_key_schedule_categories(doc=None)</code>","text":"<p>Retrieves the categories that are valid for key schedules in the given Revit document.</p> <p>Parameters:</p> Name Type Description Default <code>doc</code> <code>Document</code> <p>The Revit document to retrieve categories from.                       If not provided, defaults to DOCS.doc.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>list</code> <p>A list of categories that are valid for key schedules.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_key_schedule_categories(doc=None):\n    \"\"\"\n    Retrieves the categories that are valid for key schedules in the given Revit document.\n\n    Args:\n        doc (Document, optional): The Revit document to retrieve categories from.\n                                  If not provided, defaults to DOCS.doc.\n\n    Returns:\n        list: A list of categories that are valid for key schedules.\n    \"\"\"\n    doc = doc or DOCS.doc\n    all_cats = get_doc_categories(doc)\n    cats = []\n    for cat_id in DB.ViewSchedule.GetValidCategoriesForKeySchedule():\n        for cat in all_cats:\n            if cat.Id == cat_id:\n                cats.append(cat)\n    return cats\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_takeoff_categories","title":"<code>get_takeoff_categories(doc=None)</code>","text":"<p>Retrieves the categories that are valid for material takeoff schedules in a given Revit document.</p> <p>Parameters:</p> Name Type Description Default <code>doc</code> <code>Document</code> <p>The Revit document to retrieve categories from. If not provided,                       the default document (DOCS.doc) will be used.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>list</code> <p>A list of categories that are valid for material takeoff schedules.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_takeoff_categories(doc=None):\n    \"\"\"\n    Retrieves the categories that are valid for material takeoff schedules in a given Revit document.\n\n    Args:\n        doc (Document, optional): The Revit document to retrieve categories from. If not provided,\n                                  the default document (DOCS.doc) will be used.\n\n    Returns:\n        list: A list of categories that are valid for material takeoff schedules.\n    \"\"\"\n    doc = doc or DOCS.doc\n    all_cats = get_doc_categories(doc)\n    cats = []\n    for cat_id in DB.ViewSchedule.GetValidCategoriesForMaterialTakeoff():\n        for cat in all_cats:\n            if cat.Id == cat_id:\n                cats.append(cat)\n    return cats\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_category","title":"<code>get_category(cat_name_or_builtin, doc=None)</code>","text":"<p>Retrieves a Revit category based on the provided category name, built-in category, or category object.</p> <p>Parameters:</p> Name Type Description Default <code>cat_name_or_builtin</code> <code>Union[str, BuiltInCategory, Category]</code> <p>The category name as a string, a built-in category enum, or a category object.</p> required <code>doc</code> <code>Optional[Document]</code> <p>The Revit document to search within. If not provided, defaults to DOCS.doc.</p> <code>None</code> <p>Returns:</p> Type Description <p>DB.Category: The matching Revit category object, or None if no match is found.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_category(cat_name_or_builtin, doc=None):\n    \"\"\"\n    Retrieves a Revit category based on the provided category name, built-in category, or category object.\n\n    Args:\n        cat_name_or_builtin (Union[str, DB.BuiltInCategory, DB.Category]): The category name as a string,\n            a built-in category enum, or a category object.\n        doc (Optional[Document]): The Revit document to search within. If not provided, defaults to DOCS.doc.\n\n    Returns:\n        DB.Category: The matching Revit category object, or None if no match is found.\n    \"\"\"\n    doc = doc or DOCS.doc\n    all_cats = get_doc_categories(doc)\n    if isinstance(cat_name_or_builtin, str):\n        for cat in all_cats:\n            if cat.Name == cat_name_or_builtin:\n                return cat\n    elif isinstance(cat_name_or_builtin, DB.BuiltInCategory):\n        get_elementid_value = get_elementid_value_func()\n        for cat in all_cats:\n            if get_elementid_value(cat.Id) == int(cat_name_or_builtin):\n                return cat\n    elif isinstance(cat_name_or_builtin, DB.Category):\n        return cat_name_or_builtin\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_builtincategory","title":"<code>get_builtincategory(cat_name_or_id, doc=None)</code>","text":"<p>Retrieves the BuiltInCategory for a given category name or ElementId.</p> <p>Parameters:</p> Name Type Description Default <code>cat_name_or_id</code> <code>str or ElementId</code> <p>The name of the category as a string or the ElementId of the category.</p> required <code>doc</code> <code>optional</code> <p>The Revit document. If not provided, defaults to DOCS.doc.</p> <code>None</code> <p>Returns:</p> Type Description <p>DB.BuiltInCategory: The corresponding BuiltInCategory if found, otherwise None.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_builtincategory(cat_name_or_id, doc=None):\n    \"\"\"\n    Retrieves the BuiltInCategory for a given category name or ElementId.\n\n    Args:\n        cat_name_or_id (str or DB.ElementId): The name of the category as a string or the ElementId of the category.\n        doc (optional): The Revit document. If not provided, defaults to DOCS.doc.\n\n    Returns:\n        DB.BuiltInCategory: The corresponding BuiltInCategory if found, otherwise None.\n    \"\"\"\n    doc = doc or DOCS.doc\n    cat_id = None\n    if isinstance(cat_name_or_id, str):\n        cat = get_category(cat_name_or_id)\n        if cat:\n            cat_id = cat.Id\n    elif isinstance(cat_name_or_id, DB.ElementId):\n        cat_id = cat_name_or_id\n    if cat_id:\n        get_elementid_value = get_elementid_value_func()\n        for bicat in DB.BuiltInCategory.GetValues(DB.BuiltInCategory):\n            if int(bicat) == get_elementid_value(cat_id):\n                return bicat\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_subcategories","title":"<code>get_subcategories(doc=None, purgable=False, filterfunc=None)</code>","text":"<p>Retrieves subcategories from the given Revit document.</p> <p>Parameters:</p> Name Type Description Default <code>doc</code> <code>Document</code> <p>The Revit document to retrieve subcategories from.                       If None, defaults to DOCS.doc.</p> <code>None</code> <code>purgable</code> <code>bool</code> <p>If True, only includes subcategories that are purgable                        (element ID value greater than 1). Defaults to False.</p> <code>False</code> <code>filterfunc</code> <code>function</code> <p>A function to filter the subcategories.                              If provided, only subcategories that satisfy                              the filter function will be included.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>list</code> <p>A list of subcategories from the given Revit document.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_subcategories(doc=None, purgable=False, filterfunc=None):\n    \"\"\"\n    Retrieves subcategories from the given Revit document.\n\n    Args:\n        doc (Document, optional): The Revit document to retrieve subcategories from.\n                                  If None, defaults to DOCS.doc.\n        purgable (bool, optional): If True, only includes subcategories that are purgable\n                                   (element ID value greater than 1). Defaults to False.\n        filterfunc (function, optional): A function to filter the subcategories.\n                                         If provided, only subcategories that satisfy\n                                         the filter function will be included.\n\n    Returns:\n        list: A list of subcategories from the given Revit document.\n    \"\"\"\n    doc = doc or DOCS.doc\n    # collect custom categories\n    subcategories = []\n    get_elementid_value = get_elementid_value_func()\n    for cat in doc.Settings.Categories:\n        for subcat in cat.SubCategories:\n            if purgable:\n                if get_elementid_value(subcat.Id) &gt; 1:\n                    subcategories.append(subcat)\n            else:\n                subcategories.append(subcat)\n    if filterfunc:\n        subcategories = filter(filterfunc, subcategories)\n    return subcategories\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_subcategory","title":"<code>get_subcategory(cat_name_or_builtin, subcategory_name, doc=None)</code>","text":"<p>Retrieves a subcategory from a given category in a Revit document.</p> <p>Parameters:</p> Name Type Description Default <code>cat_name_or_builtin</code> <code>str or BuiltInCategory</code> <p>The name of the category or a built-in category.</p> required <code>subcategory_name</code> <code>str</code> <p>The name of the subcategory to retrieve.</p> required <code>doc</code> <code>Document</code> <p>The Revit document to search in. Defaults to the active document.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Category</code> <p>The subcategory if found, otherwise None.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_subcategory(cat_name_or_builtin, subcategory_name, doc=None):\n    \"\"\"\n    Retrieves a subcategory from a given category in a Revit document.\n\n    Args:\n        cat_name_or_builtin (str or BuiltInCategory): The name of the category or a built-in category.\n        subcategory_name (str): The name of the subcategory to retrieve.\n        doc (Document, optional): The Revit document to search in. Defaults to the active document.\n\n    Returns:\n        Category: The subcategory if found, otherwise None.\n    \"\"\"\n    doc = doc or DOCS.doc\n    cat = get_category(cat_name_or_builtin)\n    if cat:\n        for subcat in cat.SubCategories:\n            if subcat.Name == subcategory_name:\n                return subcat\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_builtinparameter","title":"<code>get_builtinparameter(element, param_name, doc=None)</code>","text":"<p>Retrieves the built-in parameter associated with a given element and parameter name.</p> <p>Parameters:</p> Name Type Description Default <code>element</code> <code>Element</code> <p>The Revit element from which to retrieve the parameter.</p> required <code>param_name</code> <code>str</code> <p>The name of the parameter to look up.</p> required <code>doc</code> <code>Document</code> <p>The Revit document. If not provided, defaults to DOCS.doc.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>BuiltInParameter</code> <p>The built-in parameter corresponding to the given element and parameter name.</p> <p>Raises:</p> Type Description <code>PyRevitException</code> <p>If the parameter with the given name is not found.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_builtinparameter(element, param_name, doc=None):\n    \"\"\"\n    Retrieves the built-in parameter associated with a given element and parameter name.\n\n    Args:\n        element (Element): The Revit element from which to retrieve the parameter.\n        param_name (str): The name of the parameter to look up.\n        doc (Document, optional): The Revit document. If not provided, defaults to DOCS.doc.\n\n    Returns:\n        BuiltInParameter: The built-in parameter corresponding to the given element and parameter name.\n\n    Raises:\n        PyRevitException: If the parameter with the given name is not found.\n    \"\"\"\n    doc = doc or DOCS.doc\n    eparam = element.LookupParameter(param_name)\n    if eparam:\n        eparam_def_id = eparam.Definition.Id\n        get_elementid_value = get_elementid_value_func()\n        for biparam in DB.BuiltInParameter.GetValues(DB.BuiltInParameter):\n            if int(biparam) == get_elementid_value(eparam_def_id):\n                return biparam\n    else:\n        raise PyRevitException(\"Parameter not found: {}\".format(param_name))\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_view_cutplane_offset","title":"<code>get_view_cutplane_offset(view)</code>","text":"<p>Retrieves the offset of the cut plane for a given Revit view.</p> <p>Parameters:</p> Name Type Description Default <code>view</code> <code>View</code> <p>The Revit view from which to get the cut plane offset.</p> required <p>Returns:</p> Name Type Description <code>float</code> <p>The offset of the cut plane in the view.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_view_cutplane_offset(view):\n    \"\"\"\n    Retrieves the offset of the cut plane for a given Revit view.\n\n    Args:\n        view (Autodesk.Revit.DB.View): The Revit view from which to get the cut plane offset.\n\n    Returns:\n        float: The offset of the cut plane in the view.\n    \"\"\"\n    viewrange = view.GetViewRange()\n    return viewrange.GetOffset(DB.PlanViewPlane.CutPlane)\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_project_location_transform","title":"<code>get_project_location_transform(doc=None)</code>","text":"<p>Retrieves the transformation matrix of the active project location in the given Revit document.</p> <p>Parameters:</p> Name Type Description Default <code>doc</code> <code>Document</code> <p>The Revit document from which to get the project location transform.                       If not provided, it defaults to DOCS.doc.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Transform</code> <p>The transformation matrix of the active project location.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_project_location_transform(doc=None):\n    \"\"\"\n    Retrieves the transformation matrix of the active project location in the given Revit document.\n\n    Args:\n        doc (Document, optional): The Revit document from which to get the project location transform.\n                                  If not provided, it defaults to DOCS.doc.\n\n    Returns:\n        Transform: The transformation matrix of the active project location.\n    \"\"\"\n    doc = doc or DOCS.doc\n    return doc.ActiveProjectLocation.GetTransform()\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_all_linkedmodels","title":"<code>get_all_linkedmodels(doc=None)</code>","text":"<p>Retrieves all linked Revit models in the given document.</p> <p>Parameters:</p> Name Type Description Default <code>doc</code> <code>Document</code> <p>The Revit document to search for linked models.                       If not provided, defaults to DOCS.doc.</p> <code>None</code> <p>Returns:</p> Type Description <p>List[Element]: A list of RevitLinkType elements representing the linked models.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_all_linkedmodels(doc=None):\n    \"\"\"\n    Retrieves all linked Revit models in the given document.\n\n    Args:\n        doc (Document, optional): The Revit document to search for linked models.\n                                  If not provided, defaults to DOCS.doc.\n\n    Returns:\n        List[Element]: A list of RevitLinkType elements representing the linked models.\n    \"\"\"\n    doc = doc or DOCS.doc\n    return DB.FilteredElementCollector(doc).OfClass(DB.RevitLinkType).ToElements()\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_all_linkeddocs","title":"<code>get_all_linkeddocs(doc=None)</code>","text":"<p>Retrieves all linked documents in the given Revit document.</p> <p>Parameters:</p> Name Type Description Default <code>doc</code> <code>Document</code> <p>The Revit document to search for linked documents.                       If None, it defaults to DOCS.doc.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>list</code> <p>A list of linked Revit documents.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_all_linkeddocs(doc=None):\n    \"\"\"\n    Retrieves all linked documents in the given Revit document.\n\n    Args:\n        doc (Document, optional): The Revit document to search for linked documents.\n                                  If None, it defaults to DOCS.doc.\n\n    Returns:\n        list: A list of linked Revit documents.\n    \"\"\"\n    doc = doc or DOCS.doc\n    linkinstances = (\n        DB.FilteredElementCollector(doc).OfClass(DB.RevitLinkInstance).ToElements()\n    )\n    docs = [x.GetLinkDocument() for x in linkinstances]\n    return [x for x in docs if x]\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_all_grids","title":"<code>get_all_grids(group_by_direction=False, include_linked_models=False, doc=None)</code>","text":"<p>Retrieves all grid elements from the given Revit document and optionally from linked models.</p> <p>Parameters:</p> Name Type Description Default <code>group_by_direction</code> <code>bool</code> <p>If True, groups the grids by their direction.</p> <code>False</code> <code>include_linked_models</code> <code>bool</code> <p>If True, includes grids from linked models.</p> <code>False</code> <code>doc</code> <code>Document</code> <p>The Revit document to retrieve grids from. If None, uses the current document.</p> <code>None</code> <p>Returns:</p> Type Description <p>list or dict: A list of all grid elements if group_by_direction is False.           A dictionary grouping grid elements by their direction if group_by_direction is True.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_all_grids(group_by_direction=False, include_linked_models=False, doc=None):\n    \"\"\"\n    Retrieves all grid elements from the given Revit document and optionally from linked models.\n\n    Args:\n        group_by_direction (bool): If True, groups the grids by their direction.\n        include_linked_models (bool): If True, includes grids from linked models.\n        doc (Document, optional): The Revit document to retrieve grids from. If None, uses the current document.\n\n    Returns:\n        list or dict: A list of all grid elements if group_by_direction is False.\n                      A dictionary grouping grid elements by their direction if group_by_direction is True.\n    \"\"\"\n    doc = doc or DOCS.doc\n    target_docs = [doc]\n    if include_linked_models:\n        target_docs.extend(get_all_linkeddocs())\n\n    all_grids = []\n    for tdoc in target_docs:\n        if tdoc is not None:\n            all_grids.extend(\n                list(\n                    DB.FilteredElementCollector(tdoc)\n                    .OfCategory(DB.BuiltInCategory.OST_Grids)\n                    .WhereElementIsNotElementType()\n                    .ToElements()\n                )\n            )\n\n    if group_by_direction:\n        direcs = {db.XYZPoint(x.Curve.Direction) for x in all_grids}\n        grouped_grids = {}\n        for direc in direcs:\n            grouped_grids[direc] = [\n                x for x in all_grids if direc == db.XYZPoint(x.Curve.Direction)\n            ]\n        return grouped_grids\n    return all_grids\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_gridpoints","title":"<code>get_gridpoints(grids=None, include_linked_models=False, doc=None)</code>","text":"<p>Retrieves the intersection points of grid lines in a Revit document.</p> <p>Parameters:</p> Name Type Description Default <code>grids</code> <code>list</code> <p>A list of grid elements to consider. If None, all grids in the document are considered.</p> <code>None</code> <code>include_linked_models</code> <code>bool</code> <p>If True, includes grids from linked models. Defaults to False.</p> <code>False</code> <code>doc</code> <code>Document</code> <p>The Revit document to operate on. If None, uses the current active document.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>list</code> <p>A list of GridPoint objects representing the intersection points of the grid lines.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_gridpoints(grids=None, include_linked_models=False, doc=None):\n    \"\"\"\n    Retrieves the intersection points of grid lines in a Revit document.\n\n    Args:\n        grids (list, optional): A list of grid elements to consider. If None, all grids in the document are considered.\n        include_linked_models (bool, optional): If True, includes grids from linked models. Defaults to False.\n        doc (Document, optional): The Revit document to operate on. If None, uses the current active document.\n\n    Returns:\n        list: A list of GridPoint objects representing the intersection points of the grid lines.\n    \"\"\"\n    doc = doc or DOCS.doc\n    source_grids = grids or get_all_grids(\n        doc=doc, include_linked_models=include_linked_models\n    )\n    gints = {}\n    for grid1 in source_grids:\n        for grid2 in source_grids:\n            results = framework.clr.Reference[DB.IntersectionResultArray]()\n            intres = grid1.Curve.Intersect(grid2.Curve, results)\n            if intres == DB.SetComparisonResult.Overlap:\n                gints[db.XYZPoint(results.get_Item(0).XYZPoint)] = [grid1, grid2]\n    return [GridPoint(point=k, grids=v) for k, v in gints.items()]\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_closest_gridpoint","title":"<code>get_closest_gridpoint(element, gridpoints)</code>","text":"<p>Finds the closest grid point to a given element.</p> <p>Parameters:</p> Name Type Description Default <code>element</code> <p>The element for which the closest grid point is to be found.      It is expected to have a Location attribute with a Point property.</p> required <code>gridpoints</code> <p>A list of grid points. Each grid point is expected to have a         point attribute with an unwrap() method that returns an object         with a DistanceTo method.</p> required <p>Returns:</p> Type Description <p>The grid point that is closest to the given element.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_closest_gridpoint(element, gridpoints):\n    \"\"\"\n    Finds the closest grid point to a given element.\n\n    Args:\n        element: The element for which the closest grid point is to be found.\n                 It is expected to have a Location attribute with a Point property.\n        gridpoints: A list of grid points. Each grid point is expected to have a\n                    point attribute with an unwrap() method that returns an object\n                    with a DistanceTo method.\n\n    Returns:\n        The grid point that is closest to the given element.\n    \"\"\"\n    dist = (\n        gridpoints[0].point.unwrap().DistanceTo(element.Location.Point),\n        gridpoints[0],\n    )\n    for grid_point in gridpoints:\n        gp_dist = grid_point.point.unwrap().DistanceTo(element.Location.Point)\n        if gp_dist &lt; dist[0]:\n            dist = (gp_dist, grid_point)\n    return dist[1]\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_category_set","title":"<code>get_category_set(category_list, doc=None)</code>","text":"<p>Creates a CategorySet from a list of built-in categories.</p> <p>Parameters:</p> Name Type Description Default <code>category_list</code> <code>list</code> <p>A list of built-in categories to include in the CategorySet.</p> required <code>doc</code> <code>Document</code> <p>The Revit document to use. If not provided, defaults to DOCS.doc.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>CategorySet</code> <p>A set of categories created from the provided list.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_category_set(category_list, doc=None):\n    \"\"\"\n    Creates a CategorySet from a list of built-in categories.\n\n    Args:\n        category_list (list): A list of built-in categories to include in the CategorySet.\n        doc (Document, optional): The Revit document to use. If not provided, defaults to DOCS.doc.\n\n    Returns:\n        CategorySet: A set of categories created from the provided list.\n    \"\"\"\n    doc = doc or DOCS.doc\n    cat_set = HOST_APP.app.Create.NewCategorySet()\n    for builtin_cat in category_list:\n        cat = doc.Settings.Categories.get_Item(builtin_cat)\n        cat_set.Insert(cat)\n    return cat_set\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_all_category_set","title":"<code>get_all_category_set(bindable=True, doc=None)</code>","text":"<p>Retrieves a set of all categories in the Revit document.</p> <p>Parameters:</p> Name Type Description Default <code>bindable</code> <code>bool</code> <p>If True, only includes categories that allow bound parameters. Defaults to True.</p> <code>True</code> <code>doc</code> <code>Document</code> <p>The Revit document to retrieve categories from. If None, uses the default document.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>CategorySet</code> <p>A set of categories from the specified Revit document.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_all_category_set(bindable=True, doc=None):\n    \"\"\"\n    Retrieves a set of all categories in the Revit document.\n\n    Args:\n        bindable (bool, optional): If True, only includes categories that allow bound parameters. Defaults to True.\n        doc (Document, optional): The Revit document to retrieve categories from. If None, uses the default document.\n\n    Returns:\n        CategorySet: A set of categories from the specified Revit document.\n    \"\"\"\n    doc = doc or DOCS.doc\n    cat_set = HOST_APP.app.Create.NewCategorySet()\n    for cat in doc.Settings.Categories:\n        if bindable:\n            if cat.AllowsBoundParameters:\n                cat_set.Insert(cat)\n        else:\n            cat_set.Insert(cat)\n    return cat_set\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_rule_filters","title":"<code>get_rule_filters(doc=None)</code>","text":"<p>Retrieves a list of rule-based filters from the given Revit document.</p> <p>Parameters:</p> Name Type Description Default <code>doc</code> <code>Document</code> <p>The Revit document to retrieve the filters from.                          If not provided, defaults to DOCS.doc.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>list</code> <p>A list of ParameterFilterElement instances from the document.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_rule_filters(doc=None):\n    \"\"\"\n    Retrieves a list of rule-based filters from the given Revit document.\n\n    Args:\n        doc (DB.Document, optional): The Revit document to retrieve the filters from.\n                                     If not provided, defaults to DOCS.doc.\n\n    Returns:\n        list: A list of ParameterFilterElement instances from the document.\n    \"\"\"\n    doc = doc or DOCS.doc\n    rfcl = (\n        DB.FilteredElementCollector(doc)\n        .OfClass(DB.ParameterFilterElement)\n        .WhereElementIsNotElementType()\n        .ToElements()\n    )\n    return list(rfcl)\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_connected_circuits","title":"<code>get_connected_circuits(element, spare=False, space=False)</code>","text":"<p>Retrieves the electrical circuits connected to a given element.</p> <p>Parameters:</p> Name Type Description Default <code>element</code> <code>Element</code> <p>The Revit element to get connected circuits for.</p> required <code>spare</code> <code>bool</code> <p>Include spare circuits if True. Defaults to False.</p> <code>False</code> <code>space</code> <code>bool</code> <p>Include space circuits if True. Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>list</code> <p>A list of electrical systems connected to the element that match the specified circuit types.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_connected_circuits(element, spare=False, space=False):\n    \"\"\"\n    Retrieves the electrical circuits connected to a given element.\n\n    Args:\n        element (DB.Element): The Revit element to get connected circuits for.\n        spare (bool, optional): Include spare circuits if True. Defaults to False.\n        space (bool, optional): Include space circuits if True. Defaults to False.\n\n    Returns:\n        list: A list of electrical systems connected to the element that match the specified circuit types.\n    \"\"\"\n    circuit_types = [DB.Electrical.CircuitType.Circuit]\n    if spare:\n        circuit_types.append(DB.Electrical.CircuitType.Spare)\n    if space:\n        circuit_types.append(DB.Electrical.CircuitType.Space)\n    if HOST_APP.is_newer_than(\n        2021, or_equal=True\n    ):  # deprecation of ElectricalSystems in 2021\n        if element.MEPModel and element.MEPModel.GetElectricalSystems():\n            return [\n                x\n                for x in element.MEPModel.GetElectricalSystems()\n                if x.CircuitType in circuit_types\n            ]\n    else:\n        if element.MEPModel and element.MEPModel.ElectricalSystems:\n            return [\n                x\n                for x in element.MEPModel.ElectricalSystems\n                if x.CircuitType in circuit_types\n            ]\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_element_categories","title":"<code>get_element_categories(elements)</code>","text":"<p>Given a list of Revit elements, returns a list of unique categories.</p> <p>Parameters:</p> Name Type Description Default <code>elements</code> <code>list</code> <p>A list of Revit elements.</p> required <p>Returns:</p> Name Type Description <code>list</code> <p>A list of unique categories of the given elements.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_element_categories(elements):\n    \"\"\"\n    Given a list of Revit elements, returns a list of unique categories.\n\n    Args:\n        elements (list): A list of Revit elements.\n\n    Returns:\n        list: A list of unique categories of the given elements.\n    \"\"\"\n    catsdict = {x.Category.Name: x.Category for x in elements}\n    uniquenames = set(catsdict.keys())\n    return [catsdict[x] for x in uniquenames]\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_category_schedules","title":"<code>get_category_schedules(category_or_catname, doc=None)</code>","text":"<p>Retrieves all schedules for a given category in a Revit document.</p> <p>Parameters:</p> Name Type Description Default <code>category_or_catname</code> <code>str or Category</code> <p>The category or category name to filter schedules.</p> required <code>doc</code> <code>Document</code> <p>The Revit document to search in. Defaults to None, in which case the default document is used.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>list</code> <p>A list of schedules that belong to the specified category.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_category_schedules(category_or_catname, doc=None):\n    \"\"\"\n    Retrieves all schedules for a given category in a Revit document.\n\n    Args:\n        category_or_catname (str or Category): The category or category name to filter schedules.\n        doc (Document, optional): The Revit document to search in. Defaults to None, in which case the default document is used.\n\n    Returns:\n        list: A list of schedules that belong to the specified category.\n    \"\"\"\n    doc = doc or DOCS.doc\n    cat = get_category(category_or_catname)\n    scheds = get_all_schedules(doc=doc)\n    return [x for x in scheds if x.Definition.CategoryId == cat.Id]\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_schedule_field","title":"<code>get_schedule_field(schedule, field_name)</code>","text":"<p>Retrieves a specific field from a Revit schedule by its name.</p> <p>Parameters:</p> Name Type Description Default <code>schedule</code> <code>Schedule</code> <p>The Revit schedule object.</p> required <code>field_name</code> <code>str</code> <p>The name of the field to retrieve.</p> required <p>Returns:</p> Name Type Description <code>ScheduleField</code> <p>The field object if found, otherwise None.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_schedule_field(schedule, field_name):\n    \"\"\"\n    Retrieves a specific field from a Revit schedule by its name.\n\n    Args:\n        schedule (Schedule): The Revit schedule object.\n        field_name (str): The name of the field to retrieve.\n\n    Returns:\n        ScheduleField: The field object if found, otherwise None.\n    \"\"\"\n    for field_idx in schedule.Definition.GetFieldOrder():\n        field = schedule.Definition.GetField(field_idx)\n        if field.GetName() == field_name:\n            return field\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_schedule_filters","title":"<code>get_schedule_filters(schedule, field_name, return_index=False)</code>","text":"<p>Retrieves the filters applied to a schedule based on a specified field name.</p> <p>Parameters:</p> Name Type Description Default <code>schedule</code> <code>Schedule</code> <p>The schedule from which to retrieve filters.</p> required <code>field_name</code> <code>str</code> <p>The name of the field to match filters against.</p> required <code>return_index</code> <code>bool</code> <p>If True, returns the indices of the matching filters.                            If False, returns the filter objects. Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>list</code> <p>A list of matching filters or their indices, depending on the value of return_index.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_schedule_filters(schedule, field_name, return_index=False):\n    \"\"\"\n    Retrieves the filters applied to a schedule based on a specified field name.\n\n    Args:\n        schedule (Schedule): The schedule from which to retrieve filters.\n        field_name (str): The name of the field to match filters against.\n        return_index (bool, optional): If True, returns the indices of the matching filters.\n                                       If False, returns the filter objects. Defaults to False.\n\n    Returns:\n        list: A list of matching filters or their indices, depending on the value of return_index.\n    \"\"\"\n    matching_filters = []\n    field = get_schedule_field(schedule, field_name)\n    if field:\n        for idx, sfilter in enumerate(schedule.Definition.GetFilters()):\n            if sfilter.FieldId == field.FieldId:\n                if return_index:\n                    matching_filters.append(idx)\n                else:\n                    matching_filters.append(sfilter)\n    return matching_filters\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_sheet_tblocks","title":"<code>get_sheet_tblocks(src_sheet)</code>","text":"<p>Retrieves all title block elements from a given Revit sheet.</p> <p>Parameters:</p> Name Type Description Default <code>src_sheet</code> <code>ViewSheet</code> <p>The source Revit sheet from which to collect title blocks.</p> required <p>Returns:</p> Name Type Description <code>list</code> <p>A list of title block elements present on the specified sheet.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_sheet_tblocks(src_sheet):\n    \"\"\"\n    Retrieves all title block elements from a given Revit sheet.\n\n    Args:\n        src_sheet (DB.ViewSheet): The source Revit sheet from which to collect title blocks.\n\n    Returns:\n        list: A list of title block elements present on the specified sheet.\n    \"\"\"\n    sheet_tblocks = (\n        DB.FilteredElementCollector(src_sheet.Document, src_sheet.Id)\n        .OfCategory(DB.BuiltInCategory.OST_TitleBlocks)\n        .WhereElementIsNotElementType()\n        .ToElements()\n    )\n    return list(sheet_tblocks)\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_sheet_sets","title":"<code>get_sheet_sets(doc=None)</code>","text":"<p>Retrieves all sheet sets from the given Revit document.</p> <p>Parameters:</p> Name Type Description Default <code>doc</code> <code>Document</code> <p>The Revit document to retrieve sheet sets from.                       If not provided, defaults to DOCS.doc.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>list</code> <p>A list of ViewSheetSet elements from the document.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_sheet_sets(doc=None):\n    \"\"\"\n    Retrieves all sheet sets from the given Revit document.\n\n    Args:\n        doc (Document, optional): The Revit document to retrieve sheet sets from.\n                                  If not provided, defaults to DOCS.doc.\n\n    Returns:\n        list: A list of ViewSheetSet elements from the document.\n    \"\"\"\n    doc = doc or DOCS.doc\n    sheet_sets = (\n        DB.FilteredElementCollector(doc)\n        .OfClass(DB.ViewSheetSet)\n        .WhereElementIsNotElementType()\n        .ToElements()\n    )\n    return list(sheet_sets)\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_rev_number","title":"<code>get_rev_number(revision, sheet=None)</code>","text":"<p>Get the revision number for a given revision. If a sheet is provided and it is an instance of DB.ViewSheet, the function returns the revision number as it appears on the sheet. Otherwise, it returns the sequence number of the revision or the revision number if it exists.</p> <p>Parameters:</p> Name Type Description Default <code>revision</code> <code>Revision</code> <p>The revision object to get the number for.</p> required <code>sheet</code> <code>ViewSheet</code> <p>The sheet object to get the revision number from. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>str</code> <p>The revision number as a string.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_rev_number(revision, sheet=None):\n    \"\"\"\n    Get the revision number for a given revision.\n    If a sheet is provided and it is an instance of DB.ViewSheet, the function\n    returns the revision number as it appears on the sheet. Otherwise, it returns\n    the sequence number of the revision or the revision number if it exists.\n\n    Args:\n        revision (DB.Revision): The revision object to get the number for.\n        sheet (DB.ViewSheet, optional): The sheet object to get the revision number from. Defaults to None.\n\n    Returns:\n        str: The revision number as a string.\n    \"\"\"\n    # if sheet is provided, get number on sheet\n    if sheet and isinstance(sheet, DB.ViewSheet):\n        return sheet.GetRevisionNumberOnSheet(revision.Id)\n    # otherwise get number from revision\n    revnum = revision.SequenceNumber\n    if hasattr(revision, \"RevisionNumber\"):\n        revnum = revision.RevisionNumber\n    return revnum\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_pointclouds","title":"<code>get_pointclouds(doc=None)</code>","text":"<p>Retrieves all point cloud elements from the given Revit document.</p> <p>Parameters:</p> Name Type Description Default <code>doc</code> <code>Document</code> <p>The Revit document to search for point cloud elements.                       If not provided, defaults to DOCS.doc.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>list</code> <p>A list of point cloud elements found in the specified document.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_pointclouds(doc=None):\n    \"\"\"\n    Retrieves all point cloud elements from the given Revit document.\n\n    Args:\n        doc (Document, optional): The Revit document to search for point cloud elements.\n                                  If not provided, defaults to DOCS.doc.\n\n    Returns:\n        list: A list of point cloud elements found in the specified document.\n    \"\"\"\n    doc = doc or DOCS.doc\n    return get_elements_by_categories([DB.BuiltInCategory.OST_PointClouds], doc=doc)\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_mep_connections","title":"<code>get_mep_connections(element)</code>","text":"<p>Retrieves the MEP (Mechanical, Electrical, and Plumbing) connections for a given Revit element.</p> <p>Parameters:</p> Name Type Description Default <code>element</code> <code>Element</code> <p>The Revit element for which to retrieve MEP connections. This can be a                   FamilyInstance or a Plumbing Pipe.</p> required <p>Returns:</p> Name Type Description <code>list</code> <p>A list of elements that are connected to the given element through MEP connections.</p> <p>Returns an empty list if no connections are found or if the element does not have a           ConnectorManager.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_mep_connections(element):\n    \"\"\"\n    Retrieves the MEP (Mechanical, Electrical, and Plumbing) connections for a given Revit element.\n\n    Args:\n        element (DB.Element): The Revit element for which to retrieve MEP connections. This can be a\n                              FamilyInstance or a Plumbing Pipe.\n\n    Returns:\n        list: A list of elements that are connected to the given element through MEP connections.\n\n    Returns an empty list if no connections are found or if the element does not have a\n              ConnectorManager.\n    \"\"\"\n    connmgr = None\n    if isinstance(element, DB.FamilyInstance):\n        connmgr = element.MEPModel.ConnectorManager\n    elif isinstance(element, DB.Plumbing.Pipe):\n        connmgr = element.ConnectorManager\n\n    if connmgr:\n        connelements = [\n            y.Owner\n            for x in connmgr.Connectors\n            for y in x.AllRefs\n            if x.IsConnected\n            and y.Owner.Id != element.Id\n            and y.ConnectorType != DB.ConnectorType.Logical\n        ]\n        return connelements\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_fillpattern_element","title":"<code>get_fillpattern_element(fillpattern_name, fillpattern_target, doc=None)</code>","text":"<p>Retrieves a FillPatternElement from the Revit document based on the given fill pattern name and target.</p> <p>Parameters:</p> Name Type Description Default <code>fillpattern_name</code> <code>str</code> <p>The name of the fill pattern to search for.</p> required <code>fillpattern_target</code> <code>FillPatternTarget</code> <p>The target type of the fill pattern (e.g., Drafting or Model).</p> required <code>doc</code> <code>Document</code> <p>The Revit document to search in. If not provided, defaults to DOCS.doc.</p> <code>None</code> <p>Returns:</p> Type Description <p>DB.FillPatternElement: The FillPatternElement that matches the given name and target, or None if not found.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_fillpattern_element(fillpattern_name, fillpattern_target, doc=None):\n    \"\"\"\n    Retrieves a FillPatternElement from the Revit document based on the given fill pattern name and target.\n\n    Args:\n        fillpattern_name (str): The name of the fill pattern to search for.\n        fillpattern_target (DB.FillPatternTarget): The target type of the fill pattern (e.g., Drafting or Model).\n        doc (DB.Document, optional): The Revit document to search in. If not provided, defaults to DOCS.doc.\n\n    Returns:\n        DB.FillPatternElement: The FillPatternElement that matches the given name and target, or None if not found.\n    \"\"\"\n    doc = doc or DOCS.doc\n    existing_fp_elements = DB.FilteredElementCollector(doc).OfClass(\n        framework.get_type(DB.FillPatternElement)\n    )\n\n    for existing_fp_element in existing_fp_elements:\n        fillpattern = existing_fp_element.GetFillPattern()\n        if (\n            fillpattern_name == fillpattern.Name\n            and fillpattern_target == fillpattern.Target\n        ):\n            return existing_fp_element\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_all_fillpattern_elements","title":"<code>get_all_fillpattern_elements(fillpattern_target, doc=None)</code>","text":"<p>Retrieves all fill pattern elements from the given document that match the specified fill pattern target.</p> <p>Parameters:</p> Name Type Description Default <code>fillpattern_target</code> <code>FillPatternTarget</code> <p>The target fill pattern to match.</p> required <code>doc</code> <code>Document</code> <p>The Revit document to search within. If not provided, defaults to DOCS.doc.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>list</code> <p>A list of fill pattern elements that match the specified fill pattern target.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_all_fillpattern_elements(fillpattern_target, doc=None):\n    \"\"\"\n    Retrieves all fill pattern elements from the given document that match the specified fill pattern target.\n\n    Args:\n        fillpattern_target (DB.FillPatternTarget): The target fill pattern to match.\n        doc (DB.Document, optional): The Revit document to search within. If not provided, defaults to DOCS.doc.\n\n    Returns:\n        list: A list of fill pattern elements that match the specified fill pattern target.\n    \"\"\"\n    doc = doc or DOCS.doc\n    existing_fp_elements = DB.FilteredElementCollector(doc).OfClass(\n        framework.get_type(DB.FillPatternElement)\n    )\n\n    return [\n        x\n        for x in existing_fp_elements\n        if x.GetFillPattern().Target == fillpattern_target\n    ]\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_fillpattern_from_element","title":"<code>get_fillpattern_from_element(element, background=True, doc=None)</code>","text":"<p>Retrieves the fill pattern from a given Revit element.</p> <p>Parameters:</p> Name Type Description Default <code>element</code> <code>Element</code> <p>The Revit element from which to retrieve the fill pattern.</p> required <code>background</code> <code>bool</code> <p>If True, retrieves the background fill pattern;                          otherwise, retrieves the foreground fill pattern.                          Defaults to True.</p> <code>True</code> <code>doc</code> <code>Document</code> <p>The Revit document. If not provided, defaults to DOCS.doc.</p> <code>None</code> <p>Returns:</p> Type Description <p>DB.FillPattern: The fill pattern of the specified element, or None if not found.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_fillpattern_from_element(element, background=True, doc=None):\n    \"\"\"\n    Retrieves the fill pattern from a given Revit element.\n\n    Args:\n        element (DB.Element): The Revit element from which to retrieve the fill pattern.\n        background (bool, optional): If True, retrieves the background fill pattern;\n                                     otherwise, retrieves the foreground fill pattern.\n                                     Defaults to True.\n        doc (DB.Document, optional): The Revit document. If not provided, defaults to DOCS.doc.\n\n    Returns:\n        DB.FillPattern: The fill pattern of the specified element, or None if not found.\n    \"\"\"\n    doc = doc or DOCS.doc\n\n    def get_fpm_from_frtype(etype):\n        fp_id = None\n        if HOST_APP.is_newer_than(2018):\n            # return requested fill pattern (background or foreground)\n            fp_id = (\n                etype.BackgroundPatternId if background else etype.ForegroundPatternId\n            )\n        else:\n            fp_id = etype.FillPatternId\n        if fp_id:\n            fillpat_element = doc.GetElement(fp_id)\n            if fillpat_element:\n                return fillpat_element.GetFillPattern()\n\n    if isinstance(element, DB.FilledRegion):\n        return get_fpm_from_frtype(doc.GetElement(element.GetTypeId()))\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_local_keynote_file","title":"<code>get_local_keynote_file(doc=None)</code>","text":"<p>Retrieves the path to the local keynote file for the given Revit document.</p> <p>Parameters:</p> Name Type Description Default <code>doc</code> <code>Document</code> <p>The Revit document. If not provided, the default document (DOCS.doc) is used.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>str</code> <p>The user-visible path to the local keynote file if it is an external file reference, otherwise None.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_local_keynote_file(doc=None):\n    \"\"\"\n    Retrieves the path to the local keynote file for the given Revit document.\n\n    Args:\n        doc (DB.Document, optional): The Revit document. If not provided, the default document (DOCS.doc) is used.\n\n    Returns:\n        str: The user-visible path to the local keynote file if it is an external file reference, otherwise None.\n    \"\"\"\n    doc = doc or DOCS.doc\n    knote_table = DB.KeynoteTable.GetKeynoteTable(doc)\n    if knote_table.IsExternalFileReference():\n        knote_table_ref = knote_table.GetExternalFileReference()\n        return DB.ModelPathUtils.ConvertModelPathToUserVisiblePath(\n            knote_table_ref.GetAbsolutePath()\n        )\n    return None\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_external_keynote_file","title":"<code>get_external_keynote_file(doc=None)</code>","text":"<p>Retrieves the path to the external keynote file associated with the given Revit document.</p> <p>Parameters:</p> Name Type Description Default <code>doc</code> <code>Document</code> <p>The Revit document to query. If not provided, defaults to DOCS.doc.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>str</code> <p>The in-session path to the external keynote file if it exists and has a valid display path, otherwise None.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_external_keynote_file(doc=None):\n    \"\"\"\n    Retrieves the path to the external keynote file associated with the given Revit document.\n\n    Args:\n        doc (DB.Document, optional): The Revit document to query. If not provided, defaults to DOCS.doc.\n\n    Returns:\n        str: The in-session path to the external keynote file if it exists and has a valid display path, otherwise None.\n    \"\"\"\n    doc = doc or DOCS.doc\n    knote_table = DB.KeynoteTable.GetKeynoteTable(doc)\n    if knote_table.RefersToExternalResourceReferences():\n        refs = knote_table.GetExternalResourceReferences()\n        if refs:\n            for ref_type, ref in dict(refs).items():\n                if ref.HasValidDisplayPath():\n                    return ref.InSessionPath\n    return None\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_keynote_file","title":"<code>get_keynote_file(doc=None)</code>","text":"<p>Retrieves the keynote file path for the given Revit document. If a local keynote file is available, it returns the local path. Otherwise, it returns the external keynote file path.</p> <p>Parameters:</p> Name Type Description Default <code>doc</code> <code>Document</code> <p>The Revit document. If not provided,                       the default document (DOCS.doc) is used.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>str</code> <p>The path to the keynote file.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_keynote_file(doc=None):\n    \"\"\"\n    Retrieves the keynote file path for the given Revit document.\n    If a local keynote file is available, it returns the local path.\n    Otherwise, it returns the external keynote file path.\n\n    Args:\n        doc (Document, optional): The Revit document. If not provided,\n                                  the default document (DOCS.doc) is used.\n\n    Returns:\n        str: The path to the keynote file.\n    \"\"\"\n    doc = doc or DOCS.doc\n    local_path = get_local_keynote_file(doc=doc)\n    if not local_path:\n        return get_external_keynote_file(doc=doc)\n    return local_path\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_used_keynotes","title":"<code>get_used_keynotes(doc=None)</code>","text":"<p>Retrieves all keynote tags used in the given Revit document.</p> <p>Parameters:</p> Name Type Description Default <code>doc</code> <code>Document</code> <p>The Revit document to search for keynote tags.                       If not provided, defaults to DOCS.doc.</p> <code>None</code> <p>Returns:</p> Type Description <p>List[Element]: A list of keynote tag elements found in the document.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_used_keynotes(doc=None):\n    \"\"\"\n    Retrieves all keynote tags used in the given Revit document.\n\n    Args:\n        doc (Document, optional): The Revit document to search for keynote tags.\n                                  If not provided, defaults to DOCS.doc.\n\n    Returns:\n        List[Element]: A list of keynote tag elements found in the document.\n    \"\"\"\n    doc = doc or DOCS.doc\n    return (\n        DB.FilteredElementCollector(doc)\n        .OfCategory(DB.BuiltInCategory.OST_KeynoteTags)\n        .WhereElementIsNotElementType()\n        .ToElements()\n    )\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_visible_keynotes","title":"<code>get_visible_keynotes(view=None)</code>","text":"<p>Retrieves all visible keynote tags in the specified Revit view.</p> <p>Parameters:</p> Name Type Description Default <code>view</code> <code>View</code> <p>The Revit view from which to retrieve keynote tags.</p> <code>None</code> <p>Returns:</p> Type Description <p>list[Autodesk.Revit.DB.Element]: A list of keynote tag elements visible in the specified view.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_visible_keynotes(view=None):\n    \"\"\"\n    Retrieves all visible keynote tags in the specified Revit view.\n\n    Args:\n        view (Autodesk.Revit.DB.View): The Revit view from which to retrieve keynote tags.\n\n    Returns:\n        list[Autodesk.Revit.DB.Element]: A list of keynote tag elements visible in the specified view.\n    \"\"\"\n    doc = view.Document\n    return (\n        DB.FilteredElementCollector(doc, view.Id)\n        .OfCategory(DB.BuiltInCategory.OST_KeynoteTags)\n        .WhereElementIsNotElementType()\n        .ToElements()\n    )\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_available_keynotes","title":"<code>get_available_keynotes(doc=None)</code>","text":"<p>Retrieves the available keynotes from the given Revit document.</p> <p>Parameters:</p> Name Type Description Default <code>doc</code> <code>Document</code> <p>The Revit document from which to retrieve keynotes.                          If not provided, the default document (DOCS.doc) will be used.</p> <code>None</code> <p>Returns:</p> Type Description <p>DB.KeyBasedTreeEntries: A collection of keynote entries from the keynote table.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_available_keynotes(doc=None):\n    \"\"\"\n    Retrieves the available keynotes from the given Revit document.\n\n    Args:\n        doc (DB.Document, optional): The Revit document from which to retrieve keynotes.\n                                     If not provided, the default document (DOCS.doc) will be used.\n\n    Returns:\n        DB.KeyBasedTreeEntries: A collection of keynote entries from the keynote table.\n    \"\"\"\n    doc = doc or DOCS.doc\n    knote_table = DB.KeynoteTable.GetKeynoteTable(doc)\n    return knote_table.GetKeyBasedTreeEntries()\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_available_keynotes_tree","title":"<code>get_available_keynotes_tree(doc=None)</code>","text":"<p>Retrieves the available keynotes in a hierarchical tree structure.</p> <p>Parameters:</p> Name Type Description Default <code>doc</code> <code>Document</code> <p>The Revit document to retrieve keynotes from.                       If not provided, defaults to the current document.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>dict</code> <p>A dictionary representing the hierarchical structure of keynotes.</p> <p>Raises:</p> Type Description <code>NotImplementedError</code> <p>This function is not yet implemented.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_available_keynotes_tree(doc=None):\n    \"\"\"\n    Retrieves the available keynotes in a hierarchical tree structure.\n\n    Args:\n        doc (Document, optional): The Revit document to retrieve keynotes from.\n                                  If not provided, defaults to the current document.\n\n    Returns:\n        dict: A dictionary representing the hierarchical structure of keynotes.\n\n    Raises:\n        NotImplementedError: This function is not yet implemented.\n    \"\"\"\n    doc = doc or DOCS.doc\n    knotes = get_available_keynotes(doc=doc)\n    # TODO: implement knotes tree\n    raise NotImplementedError()\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.is_placed","title":"<code>is_placed(spatial_element)</code>","text":"<p>Check if a spatial element (Room, Area, or Space) is placed and has a positive area.</p> <p>Parameters:</p> Name Type Description Default <code>spatial_element</code> <code>Element</code> <p>The spatial element to check. It can be an instance of                           DB.Architecture.Room, DB.Area, or DB.Mechanical.Space.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the spatial element is placed and has an area greater than 0, False otherwise.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def is_placed(spatial_element):\n    \"\"\"\n    Check if a spatial element (Room, Area, or Space) is placed and has a positive area.\n\n    Args:\n        spatial_element (DB.Element): The spatial element to check. It can be an instance of\n                                      DB.Architecture.Room, DB.Area, or DB.Mechanical.Space.\n\n    Returns:\n        bool: True if the spatial element is placed and has an area greater than 0, False otherwise.\n    \"\"\"\n    return (\n        isinstance(\n            spatial_element, (DB.Architecture.Room, DB.Area, DB.Mechanical.Space)\n        )\n        and spatial_element.Area &gt; 0\n    )\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_central_path","title":"<code>get_central_path(doc=None)</code>","text":"<p>Returns the central model path of a Revit document if it is workshared.</p> <p>Parameters:</p> Name Type Description Default <code>doc</code> <code>Document</code> <p>The Revit document. If not provided, defaults to DOCS.doc.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>str</code> <p>The user-visible path to the central model if the document is workshared.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_central_path(doc=None):\n    \"\"\"\n\n    Returns the central model path of a Revit document if it is workshared.\n\n    Args:\n        doc (Document, optional): The Revit document. If not provided, defaults to DOCS.doc.\n\n    Returns:\n        str: The user-visible path to the central model if the document is workshared.\n    \"\"\"\n    doc = doc or DOCS.doc\n    if doc.IsWorkshared:\n        model_path = doc.GetWorksharingCentralModelPath()\n        return DB.ModelPathUtils.ConvertModelPathToUserVisiblePath(model_path)\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.is_metric","title":"<code>is_metric(doc=None)</code>","text":"<p>Determines if the given Revit document uses the metric unit system.</p> <p>Parameters:</p> Name Type Description Default <code>doc</code> <code>Document</code> <p>The Revit document to check. If not provided,                       the default document (DOCS.doc) will be used.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the document uses the metric unit system, False otherwise.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def is_metric(doc=None):\n    \"\"\"\n    Determines if the given Revit document uses the metric unit system.\n\n    Args:\n        doc (Document, optional): The Revit document to check. If not provided,\n                                  the default document (DOCS.doc) will be used.\n\n    Returns:\n        bool: True if the document uses the metric unit system, False otherwise.\n    \"\"\"\n    doc = doc or DOCS.doc\n    return doc.DisplayUnitSystem == DB.DisplayUnit.METRIC\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.is_imperial","title":"<code>is_imperial(doc=None)</code>","text":"<p>Checks if the given Revit document uses the imperial unit system.</p> <p>Parameters:</p> Name Type Description Default <code>doc</code> <code>Document</code> <p>The Revit document to check. If not provided,                       the default document (DOCS.doc) will be used.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the document uses the imperial unit system, False otherwise.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def is_imperial(doc=None):\n    \"\"\"\n    Checks if the given Revit document uses the imperial unit system.\n\n    Args:\n        doc (Document, optional): The Revit document to check. If not provided,\n                                  the default document (DOCS.doc) will be used.\n\n    Returns:\n        bool: True if the document uses the imperial unit system, False otherwise.\n    \"\"\"\n    doc = doc or DOCS.doc\n    return doc.DisplayUnitSystem == DB.DisplayUnit.IMPERIAL\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_view_sheetrefinfo","title":"<code>get_view_sheetrefinfo(view)</code>","text":"<p>Retrieves sheet reference information for a given view. This function checks if the view is placed on a sheet by looking at the 'Sheet Number' and 'Sheet Name' parameters. If the view is placed on a sheet, it returns the sheet number, sheet name, and detail number. If the view is not placed on a sheet, it checks the 'Referencing Sheet' and 'Referencing Detail' parameters to see if the view is referenced by another view on a sheet, and returns the corresponding information.</p> <p>Parameters:</p> Name Type Description Default <code>view</code> <code>View</code> <p>The Revit view object to retrieve sheet reference             information from.</p> required <p>Returns:</p> Name Type Description <code>SheetRefInfo</code> <p>An object containing the sheet number, sheet name, detail           number, and reference view ID if applicable.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_view_sheetrefinfo(view):\n    \"\"\"\n    Retrieves sheet reference information for a given view.\n    This function checks if the view is placed on a sheet by looking at the\n    'Sheet Number' and 'Sheet Name' parameters. If the view is placed on a\n    sheet, it returns the sheet number, sheet name, and detail number. If the\n    view is not placed on a sheet, it checks the 'Referencing Sheet' and\n    'Referencing Detail' parameters to see if the view is referenced by another\n    view on a sheet, and returns the corresponding information.\n\n    Args:\n        view (DB.View): The Revit view object to retrieve sheet reference\n                        information from.\n\n    Returns:\n        SheetRefInfo: An object containing the sheet number, sheet name, detail\n                      number, and reference view ID if applicable.\n    \"\"\"\n    sheet_num = view.Parameter[DB.BuiltInParameter.VIEWPORT_SHEET_NUMBER].AsString()\n    sheet_name = view.Parameter[DB.BuiltInParameter.VIEWPORT_SHEET_NAME].AsString()\n    detail_num = view.Parameter[DB.BuiltInParameter.VIEWPORT_DETAIL_NUMBER].AsString()\n\n    if sheet_num:\n        return SheetRefInfo(\n            sheet_num=sheet_num,\n            sheet_name=sheet_name,\n            detail_num=detail_num,\n            ref_viewid=None,\n        )\n    ref_sheet_num = view.Parameter[\n        DB.BuiltInParameter.VIEW_REFERENCING_SHEET\n    ].AsString()\n    ref_sheet = get_sheet_by_number(ref_sheet_num)\n    ref_sheet_name = get_name(ref_sheet) if ref_sheet else \"\"\n    ref_detail_num = view.Parameter[\n        DB.BuiltInParameter.VIEW_REFERENCING_DETAIL\n    ].AsString()\n    if ref_sheet_num:\n        return SheetRefInfo(\n            sheet_num=ref_sheet_num,\n            sheet_name=ref_sheet_name,\n            detail_num=ref_detail_num,\n            ref_viewid=get_view_by_sheetref(ref_sheet_num, ref_detail_num),\n        )\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_all_sheeted_views","title":"<code>get_all_sheeted_views(doc=None, sheets=None)</code>","text":"<p>Retrieves all view IDs that are placed on sheets in the given Revit document.</p> <p>Parameters:</p> Name Type Description Default <code>doc</code> <code>Document</code> <p>The Revit document to query. If not provided, defaults to DOCS.doc.</p> <code>None</code> <code>sheets</code> <code>list</code> <p>A list of sheet elements to query. If not provided, defaults to all sheets in the document.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>set</code> <p>A set of view IDs that are placed on the provided sheets.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_all_sheeted_views(doc=None, sheets=None):\n    \"\"\"\n    Retrieves all view IDs that are placed on sheets in the given Revit document.\n\n    Args:\n        doc (Document, optional): The Revit document to query. If not provided, defaults to DOCS.doc.\n        sheets (list, optional): A list of sheet elements to query. If not provided, defaults to all sheets in the document.\n\n    Returns:\n        set: A set of view IDs that are placed on the provided sheets.\n    \"\"\"\n    doc = doc or DOCS.doc\n    sheets = sheets or get_sheets(doc=doc)\n    all_sheeted_view_ids = set()\n    for sht in sheets:\n        vp_ids = [doc.GetElement(x).ViewId for x in sht.GetAllViewports()]\n        all_sheeted_view_ids.update(vp_ids)\n    return all_sheeted_view_ids\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.is_view_sheeted","title":"<code>is_view_sheeted(view)</code>","text":"<p>Checks if a given view is placed on a sheet.</p> <p>Parameters:</p> Name Type Description Default <code>view</code> <code>View</code> <p>The Revit view to check.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the view is placed on a sheet, False otherwise.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def is_view_sheeted(view):\n    \"\"\"\n    Checks if a given view is placed on a sheet.\n\n    Args:\n        view (Autodesk.Revit.DB.View): The Revit view to check.\n\n    Returns:\n        bool: True if the view is placed on a sheet, False otherwise.\n    \"\"\"\n    return view.Id in get_all_sheeted_views(doc=view.Document)\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.can_refer_other_views","title":"<code>can_refer_other_views(source_view)</code>","text":"<p>Determines if the given source view can refer to other views.</p> <p>Parameters:</p> Name Type Description Default <code>source_view</code> <p>The view to check. Expected to be an instance of a Revit view class.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the source view is an instance of DB.ViewDrafting, DB.ViewPlan, or DB.ViewSection; otherwise, False.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def can_refer_other_views(source_view):\n    \"\"\"\n    Determines if the given source view can refer to other views.\n\n    Args:\n        source_view: The view to check. Expected to be an instance of a Revit view class.\n\n    Returns:\n        bool: True if the source view is an instance of DB.ViewDrafting, DB.ViewPlan, or DB.ViewSection; otherwise, False.\n    \"\"\"\n    return isinstance(source_view, (DB.ViewDrafting, DB.ViewPlan, DB.ViewSection))\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.is_referring_to","title":"<code>is_referring_to(source_view, target_view)</code>","text":"<p>Determines if the source view is referring to the target view.</p> <p>Parameters:</p> Name Type Description Default <code>source_view</code> <code>View</code> <p>The view that may be referring to another view.</p> required <code>target_view</code> <code>View</code> <p>The view that is being checked if it is referred to by the source view.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the source view is referring to the target view, False otherwise.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def is_referring_to(source_view, target_view):\n    \"\"\"\n    Determines if the source view is referring to the target view.\n\n    Args:\n        source_view (Autodesk.Revit.DB.View): The view that may be referring to another view.\n        target_view (Autodesk.Revit.DB.View): The view that is being checked if it is referred to by the source view.\n\n    Returns:\n        bool: True if the source view is referring to the target view, False otherwise.\n    \"\"\"\n    doc = source_view.Document\n    target_viewname = get_name(target_view)\n    if can_refer_other_views(source_view):\n        for ref_elid in get_all_referencing_elements_in_view(source_view):\n            viewref_el = doc.GetElement(ref_elid)\n            targetview_param = viewref_el.Parameter[\n                DB.BuiltInParameter.REFERENCE_VIEWER_TARGET_VIEW\n            ]\n            if targetview_param:\n                tvp_view = doc.GetElement(targetview_param.AsElementId())\n                if tvp_view and get_name(tvp_view) == target_viewname:\n                    return True\n            else:\n                viewref_name = get_name(viewref_el)\n                if viewref_name == target_viewname:\n                    return True\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.yield_referring_views","title":"<code>yield_referring_views(target_view, all_views=None)</code>","text":"<p>Yields the IDs of views that refer to the target view.</p> <p>Parameters:</p> Name Type Description Default <code>target_view</code> <code>View</code> <p>The view that other views may refer to.</p> required <code>all_views</code> <code>list[View]</code> <p>A list of all views to check. If not provided,                               all views in the document of the target view will be used.</p> <code>None</code> <p>Yields:     ElementId: The ID of a view that refers to the target view.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def yield_referring_views(target_view, all_views=None):\n    \"\"\"\n    Yields the IDs of views that refer to the target view.\n\n    Args:\n        target_view (View): The view that other views may refer to.\n        all_views (list[View], optional): A list of all views to check. If not provided,\n                                          all views in the document of the target view will be used.\n    Yields:\n        ElementId: The ID of a view that refers to the target view.\n    \"\"\"\n    all_views = all_views or get_all_views(doc=target_view.Document)\n    for view in all_views:\n        if is_referring_to(view, target_view):\n            yield view.Id\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.yield_referenced_views","title":"<code>yield_referenced_views(doc=None, all_views=None)</code>","text":"<p>Yields the IDs of views that have referring views.</p> <p>Parameters:</p> Name Type Description Default <code>doc</code> <code>Document</code> <p>The Revit document to query. Defaults to None, in which case the global DOCS.doc is used.</p> <code>None</code> <code>all_views</code> <code>list</code> <p>A list of all views in the document. Defaults to None, in which case all views are retrieved using get_all_views(doc).</p> <code>None</code> <p>Yields:     ElementId: The ID of a view that has referring views.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def yield_referenced_views(doc=None, all_views=None):\n    \"\"\"\n    Yields the IDs of views that have referring views.\n\n    Args:\n        doc (Document, optional): The Revit document to query. Defaults to None, in which case the global DOCS.doc is used.\n        all_views (list, optional): A list of all views in the document. Defaults to None, in which case all views are retrieved using get_all_views(doc).\n    Yields:\n        ElementId: The ID of a view that has referring views.\n    \"\"\"\n    doc = doc or DOCS.doc\n    all_views = all_views or get_all_views(doc=doc)\n    for view in all_views:\n        # if it has any referring views, yield\n        if next(yield_referring_views(view), None):\n            yield view.Id\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.yield_unreferenced_views","title":"<code>yield_unreferenced_views(doc=None, all_views=None)</code>","text":"<p>Yields the IDs of views in a Revit document that have no referring views.</p> <p>Parameters:</p> Name Type Description Default <code>doc</code> <code>Document</code> <p>The Revit document to search for unreferenced views.                       If not provided, defaults to DOCS.doc.</p> <code>None</code> <code>all_views</code> <code>list</code> <p>A list of all views in the document.                         If not provided, it will be retrieved using get_all_views(doc).</p> <code>None</code> <p>Yields:     ElementId: The ID of each view that has no referring views.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def yield_unreferenced_views(doc=None, all_views=None):\n    \"\"\"\n    Yields the IDs of views in a Revit document that have no referring views.\n\n    Args:\n        doc (Document, optional): The Revit document to search for unreferenced views.\n                                  If not provided, defaults to DOCS.doc.\n        all_views (list, optional): A list of all views in the document.\n                                    If not provided, it will be retrieved using get_all_views(doc).\n    Yields:\n        ElementId: The ID of each view that has no referring views.\n    \"\"\"\n    doc = doc or DOCS.doc\n    all_views = all_views or get_all_views(doc=doc)\n    for view in all_views:\n        # if it has NO referring views, yield\n        if len(list(yield_referring_views(view))) == 0:\n            yield view.Id\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_line_categories","title":"<code>get_line_categories(doc=None)</code>","text":"<p>Retrieves the line categories from the given Revit document.</p> <p>Parameters:</p> Name Type Description Default <code>doc</code> <code>Document</code> <p>The Revit document to retrieve the line categories from.                       If not provided, it defaults to DOCS.doc.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>SubCategories</code> <p>The subcategories of the line category in the Revit document.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_line_categories(doc=None):\n    \"\"\"\n    Retrieves the line categories from the given Revit document.\n\n    Args:\n        doc (Document, optional): The Revit document to retrieve the line categories from.\n                                  If not provided, it defaults to DOCS.doc.\n\n    Returns:\n        SubCategories: The subcategories of the line category in the Revit document.\n    \"\"\"\n    doc = doc or DOCS.doc\n    lines_cat = doc.Settings.Categories.get_Item(DB.BuiltInCategory.OST_Lines)\n    return lines_cat.SubCategories\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_line_styles","title":"<code>get_line_styles(doc=None)</code>","text":"<p>Retrieves the line styles from the given Revit document.</p> <p>Parameters:</p> Name Type Description Default <code>doc</code> <code>Document</code> <p>The Revit document to retrieve line styles from.                       If None, the current document will be used.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>list</code> <p>A list of GraphicsStyle objects representing the line styles in the document.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_line_styles(doc=None):\n    \"\"\"\n    Retrieves the line styles from the given Revit document.\n\n    Args:\n        doc (Document, optional): The Revit document to retrieve line styles from.\n                                  If None, the current document will be used.\n\n    Returns:\n        list: A list of GraphicsStyle objects representing the line styles in the document.\n    \"\"\"\n    return [\n        x.GetGraphicsStyle(DB.GraphicsStyleType.Projection)\n        for x in get_line_categories(doc=doc)\n    ]\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_history","title":"<code>get_history(target_element)</code>","text":"<p>Retrieves the worksharing history of a given Revit element.</p> <p>Parameters:</p> Name Type Description Default <code>target_element</code> <code>Element</code> <p>The Revit element for which to retrieve the history.</p> required <p>Returns:</p> Name Type Description <code>ElementHistory</code> <p>An object containing the creator, owner, and last changed by information of the element.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_history(target_element):\n    \"\"\"\n    Retrieves the worksharing history of a given Revit element.\n\n    Args:\n        target_element (DB.Element): The Revit element for which to retrieve the history.\n\n    Returns:\n        ElementHistory: An object containing the creator, owner, and last changed by information of the element.\n    \"\"\"\n    doc = target_element.Document\n    if doc.IsWorkshared:\n        wti = DB.WorksharingUtils.GetWorksharingTooltipInfo(doc, target_element.Id)\n        return ElementHistory(\n            creator=wti.Creator, owner=wti.Owner, last_changed_by=wti.LastChangedBy\n        )\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.is_detail_curve","title":"<code>is_detail_curve(element)</code>","text":"<p>Check if the given element is a detail curve.</p> <p>Parameters:</p> Name Type Description Default <code>element</code> <p>The element to check.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the element is a detail curve, False otherwise.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def is_detail_curve(element):\n    \"\"\"\n    Check if the given element is a detail curve.\n\n    Args:\n        element: The element to check.\n\n    Returns:\n        bool: True if the element is a detail curve, False otherwise.\n    \"\"\"\n    return isinstance(element, DETAIL_CURVES)\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.is_model_curve","title":"<code>is_model_curve(element)</code>","text":"<p>Check if the given element is a model curve.</p> <p>Parameters:</p> Name Type Description Default <code>element</code> <p>The element to check.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the element is a model curve, False otherwise.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def is_model_curve(element):\n    \"\"\"\n    Check if the given element is a model curve.\n\n    Args:\n        element: The element to check.\n\n    Returns:\n        bool: True if the element is a model curve, False otherwise.\n    \"\"\"\n    return isinstance(element, MODEL_CURVES)\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.is_sketch_curve","title":"<code>is_sketch_curve(element)</code>","text":"<p>Determines if the given Revit element is a sketch curve.</p> <p>Parameters:</p> Name Type Description Default <code>element</code> <code>Element</code> <p>The Revit element to check.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the element is a sketch curve, False otherwise.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def is_sketch_curve(element):\n    \"\"\"\n    Determines if the given Revit element is a sketch curve.\n\n    Args:\n        element (DB.Element): The Revit element to check.\n\n    Returns:\n        bool: True if the element is a sketch curve, False otherwise.\n    \"\"\"\n    if element.Category:\n        cid = element.Category.Id\n        return cid == DB.ElementId(DB.BuiltInCategory.OST_SketchLines)\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_all_schemas","title":"<code>get_all_schemas()</code>","text":"<p>Retrieves all the schemas from the Extensible Storage in Revit.</p> <p>Returns:</p> Type Description <p>IList[Schema]: A list of all schemas available in the Extensible Storage.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_all_schemas():\n    \"\"\"\n    Retrieves all the schemas from the Extensible Storage in Revit.\n\n    Returns:\n        IList[Schema]: A list of all schemas available in the Extensible Storage.\n    \"\"\"\n    return DB.ExtensibleStorage.Schema.ListSchemas()\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_schema_field_values","title":"<code>get_schema_field_values(element, schema)</code>","text":"<p>Retrieves the values of fields from a given schema for a specified Revit element.</p> <p>Parameters:</p> Name Type Description Default <code>element</code> <code>Element</code> <p>The Revit element from which to retrieve the schema field values.</p> required <code>schema</code> <code>Schema</code> <p>The schema that defines the fields to retrieve.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <p>A dictionary where the keys are field names and the values are the corresponding field values.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_schema_field_values(element, schema):\n    \"\"\"\n    Retrieves the values of fields from a given schema for a specified Revit element.\n\n    Args:\n        element (DB.Element): The Revit element from which to retrieve the schema field values.\n        schema (DB.ExtensibleStorage.Schema): The schema that defines the fields to retrieve.\n\n    Returns:\n        dict: A dictionary where the keys are field names and the values are the corresponding field values.\n    \"\"\"\n    field_values = {}\n    entity = element.GetEntity(schema)\n    if entity:\n        for field in schema.ListFields():\n            field_type = field.ValueType\n            if field.ContainerType == DB.ExtensibleStorage.ContainerType.Array:\n                field_type = framework.IList[field.ValueType]\n            elif field.ContainerType == DB.ExtensibleStorage.ContainerType.Map:\n                field_type = framework.IDictionary[field.KeyType, field.ValueType]\n            try:\n                value = entity.Get[field_type](\n                    field.FieldName, DB.DisplayUnitType.DUT_UNDEFINED\n                )\n            except:\n                value = None\n\n            field_values[field.FieldName] = value\n    return field_values\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_family_type","title":"<code>get_family_type(type_name, family_doc)</code>","text":"<p>Retrieves a family type from a Revit family document by its name.</p> <p>Parameters:</p> Name Type Description Default <code>type_name</code> <code>str</code> <p>The name of the family type to retrieve.</p> required <code>family_doc</code> <code>Document</code> <p>The Revit family document to search in. If None, the default document (DOCS.doc) is used.</p> required <p>Returns:</p> Name Type Description <code>FamilyType</code> <p>The family type with the specified name.</p> <p>Raises:</p> Type Description <code>PyRevitException</code> <p>If the provided document is not a family document.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_family_type(type_name, family_doc):\n    \"\"\"\n    Retrieves a family type from a Revit family document by its name.\n\n    Args:\n        type_name (str): The name of the family type to retrieve.\n        family_doc (Document): The Revit family document to search in. If None, the default document (DOCS.doc) is used.\n\n    Returns:\n        FamilyType: The family type with the specified name.\n\n    Raises:\n        PyRevitException: If the provided document is not a family document.\n    \"\"\"\n    family_doc = family_doc or DOCS.doc\n    if family_doc.IsFamilyDocument:\n        for ftype in family_doc.FamilyManager.Types:\n            if ftype.Name == type_name:\n                return ftype\n    else:\n        raise PyRevitException(\"Document is not a family\")\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_family_parameter","title":"<code>get_family_parameter(param_name, family_doc)</code>","text":"<p>Retrieves a family parameter from a Revit family document by its name.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The name of the parameter to retrieve.</p> required <code>family_doc</code> <code>Document</code> <p>The Revit family document to search in. If None, defaults to DOCS.doc.</p> required <p>Returns:</p> Name Type Description <code>FamilyParameter</code> <p>The family parameter with the specified name.</p> <p>Raises:</p> Type Description <code>PyRevitException</code> <p>If the provided document is not a family document.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_family_parameter(param_name, family_doc):\n    \"\"\"\n    Retrieves a family parameter from a Revit family document by its name.\n\n    Args:\n        param_name (str): The name of the parameter to retrieve.\n        family_doc (Document): The Revit family document to search in. If None, defaults to DOCS.doc.\n\n    Returns:\n        FamilyParameter: The family parameter with the specified name.\n\n    Raises:\n        PyRevitException: If the provided document is not a family document.\n    \"\"\"\n    family_doc = family_doc or DOCS.doc\n    if family_doc.IsFamilyDocument:\n        for fparam in family_doc.FamilyManager.GetParameters():\n            if fparam.Definition.Name == param_name:\n                return fparam\n    else:\n        raise PyRevitException(\"Document is not a family\")\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_family_parameters","title":"<code>get_family_parameters(family_doc)</code>","text":"<p>Retrieves the parameters of a Revit family document.</p> <p>Parameters:</p> Name Type Description Default <code>family_doc</code> <p>The Revit family document from which to retrieve parameters.         If None, the default document (DOCS.doc) will be used.</p> required <p>Returns:</p> Type Description <p>A collection of family parameters from the specified family document.</p> <p>Raises:</p> Type Description <code>PyRevitException</code> <p>If the provided document is not a family document.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_family_parameters(family_doc):\n    \"\"\"\n    Retrieves the parameters of a Revit family document.\n\n    Args:\n        family_doc: The Revit family document from which to retrieve parameters.\n                    If None, the default document (DOCS.doc) will be used.\n\n    Returns:\n        A collection of family parameters from the specified family document.\n\n    Raises:\n        PyRevitException: If the provided document is not a family document.\n    \"\"\"\n    family_doc = family_doc or DOCS.doc\n    if family_doc.IsFamilyDocument:\n        return family_doc.FamilyManager.GetParameters()\n    else:\n        raise PyRevitException(\"Document is not a family\")\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_family_label_parameters","title":"<code>get_family_label_parameters(family_doc)</code>","text":"<p>Retrieves the set of family label parameters from a given Revit family document.</p> <p>Parameters:</p> Name Type Description Default <code>family_doc</code> <code>Document</code> <p>The Revit family document to retrieve label parameters from.                       If None, the default document (DOCS.doc) is used.</p> required <p>Returns:</p> Name Type Description <code>set</code> <p>A set of family label parameters (DB.FamilyParameter) found in the document.</p> <p>Raises:</p> Type Description <code>PyRevitException</code> <p>If the provided document is not a family document.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_family_label_parameters(family_doc):\n    \"\"\"\n    Retrieves the set of family label parameters from a given Revit family document.\n\n    Args:\n        family_doc (DB.Document): The Revit family document to retrieve label parameters from.\n                                  If None, the default document (DOCS.doc) is used.\n\n    Returns:\n        set: A set of family label parameters (DB.FamilyParameter) found in the document.\n\n    Raises:\n        PyRevitException: If the provided document is not a family document.\n    \"\"\"\n    family_doc = family_doc or DOCS.doc\n    if family_doc.IsFamilyDocument:\n        dims = (\n            DB.FilteredElementCollector(family_doc)\n            .OfClass(DB.Dimension)\n            .WhereElementIsNotElementType()\n        )\n        label_params = set()\n        for dim in dims:\n            try:\n                # throws exception when dimension can not be labeled\n                if isinstance(dim.FamilyLabel, DB.FamilyParameter):\n                    label_params.add(dim.FamilyLabel)\n            except Exception:\n                pass\n        return label_params\n    else:\n        raise PyRevitException(\"Document is not a family\")\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_door_rooms","title":"<code>get_door_rooms(door)</code>","text":"<p>Get from/to rooms associated with given door element.</p> <p>Parameters:</p> Name Type Description Default <code>door</code> <code>FamilyInstance</code> <p>door instance</p> required <p>Returns:</p> Name Type Description <code>tuple</code> <code>(Room, Room)</code> <p>from/to rooms</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_door_rooms(door):\n    \"\"\"Get from/to rooms associated with given door element.\n\n\n    Args:\n        door (DB.FamilyInstance): door instance\n\n\n    Returns:\n        tuple(DB.Architecture.Room, DB.Architecture.Room): from/to rooms\n    \"\"\"\n    door_phase = door.Document.GetElement(door.CreatedPhaseId)\n    return (door.FromRoom[door_phase], door.ToRoom[door_phase])\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_doors","title":"<code>get_doors(elements=None, doc=None, room_id=None)</code>","text":"<p>Get all doors in active or given document.</p> <p>Parameters:</p> Name Type Description Default <code>elements</code> <code>list[Element]</code> <p>find rooms in given elements instead</p> <code>None</code> <code>doc</code> <code>Document</code> <p>target document; default is active document</p> <code>None</code> <code>room_id</code> <code>ElementId</code> <p>only doors associated with given room</p> <code>None</code> <p>Returns:</p> Type Description <code>list[Element]</code> <p>room instances</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_doors(elements=None, doc=None, room_id=None):\n    \"\"\"Get all doors in active or given document.\n\n\n    Args:\n        elements (list[DB.Element]): find rooms in given elements instead\n        doc (DB.Document): target document; default is active document\n        room_id (DB.ElementId): only doors associated with given room\n\n\n    Returns:\n        (list[DB.Element]): room instances\n    \"\"\"\n    doc = doc or DOCS.doc\n    all_doors = get_elements_by_categories(\n        [DB.BuiltInCategory.OST_Doors], elements=elements, doc=doc\n    )\n    if room_id:\n        room_doors = []\n        for door in all_doors:\n            from_room, to_room = get_door_rooms(door)\n            if (from_room and from_room.Id == room_id) or (\n                to_room and to_room.Id == room_id\n            ):\n                room_doors.append(door)\n        return room_doors\n    else:\n        return list(all_doors)\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_all_print_settings","title":"<code>get_all_print_settings(doc=None)</code>","text":"<p>Retrieves all print settings from the given Revit document.</p> <p>Parameters:</p> Name Type Description Default <code>doc</code> <code>Document</code> <p>The Revit document from which to retrieve print settings.                       If not provided, defaults to DOCS.doc.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>list</code> <p>A list of print settings elements from the document.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_all_print_settings(doc=None):\n    \"\"\"\n    Retrieves all print settings from the given Revit document.\n\n    Args:\n        doc (Document, optional): The Revit document from which to retrieve print settings.\n                                  If not provided, defaults to DOCS.doc.\n\n    Returns:\n        list: A list of print settings elements from the document.\n    \"\"\"\n    doc = doc or DOCS.doc\n    return [doc.GetElement(x) for x in doc.GetPrintSettingIds()]\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_used_paper_sizes","title":"<code>get_used_paper_sizes(doc=None)</code>","text":"<p>Retrieves a list of used paper sizes from the print settings in the given Revit document.</p> <p>Parameters:</p> Name Type Description Default <code>doc</code> <code>Document</code> <p>The Revit document to query. If not provided, defaults to DOCS.doc.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>list</code> <p>A list of paper sizes used in the print settings of the document.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_used_paper_sizes(doc=None):\n    \"\"\"\n    Retrieves a list of used paper sizes from the print settings in the given Revit document.\n\n    Args:\n        doc (Document, optional): The Revit document to query. If not provided, defaults to DOCS.doc.\n\n    Returns:\n        list: A list of paper sizes used in the print settings of the document.\n    \"\"\"\n    doc = doc or DOCS.doc\n    return [x.PrintParameters.PaperSize for x in get_all_print_settings(doc=doc)]\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.find_paper_size_by_name","title":"<code>find_paper_size_by_name(paper_size_name, doc=None)</code>","text":"<p>Finds and returns a paper size object by its name.</p> <p>Parameters:</p> Name Type Description Default <code>paper_size_name</code> <code>str</code> <p>The name of the paper size to find.</p> required <code>doc</code> <code>Document</code> <p>The Revit document to search in. If not provided,                       the default document (DOCS.doc) will be used.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>PaperSize</code> <p>The paper size object that matches the given name, or None if not found.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def find_paper_size_by_name(paper_size_name, doc=None):\n    \"\"\"\n    Finds and returns a paper size object by its name.\n\n    Args:\n        paper_size_name (str): The name of the paper size to find.\n        doc (Document, optional): The Revit document to search in. If not provided,\n                                  the default document (DOCS.doc) will be used.\n\n    Returns:\n        PaperSize: The paper size object that matches the given name, or None if not found.\n    \"\"\"\n    doc = doc or DOCS.doc\n    paper_size_name = paper_size_name.lower()\n    for psize in doc.PrintManager.PaperSizes:\n        if psize.Name.lower() == paper_size_name:\n            return psize\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.find_paper_sizes_by_dims","title":"<code>find_paper_sizes_by_dims(printer_name, paper_width, paper_height, doc=None)</code>","text":"<p>Finds paper sizes by dimensions for a given printer.</p> <p>Parameters:</p> Name Type Description Default <code>printer_name</code> <code>str</code> <p>The name of the printer.</p> required <code>paper_width</code> <code>float</code> <p>The width of the paper in inches.</p> required <code>paper_height</code> <code>float</code> <p>The height of the paper in inches.</p> required <code>doc</code> <code>optional</code> <p>The document context. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>list</code> <p>A list of matching paper sizes.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def find_paper_sizes_by_dims(printer_name, paper_width, paper_height, doc=None):\n    \"\"\"\n    Finds paper sizes by dimensions for a given printer.\n\n    Args:\n        printer_name (str): The name of the printer.\n        paper_width (float): The width of the paper in inches.\n        paper_height (float): The height of the paper in inches.\n        doc (optional): The document context. Defaults to None.\n\n    Returns:\n        list: A list of matching paper sizes.\n    \"\"\"\n    doc = doc or DOCS.doc\n    paper_sizes = []\n    system_paper_sizes = coreutils.get_paper_sizes(printer_name)\n    mlogger.debug(\"looking for paper size W:%s H:%s\", paper_width, paper_height)\n    mlogger.debug(\n        \"system paper sizes: %s -&gt; %s\",\n        printer_name,\n        [x.PaperName for x in system_paper_sizes],\n    )\n    for sys_psize in system_paper_sizes:\n        sys_pname = sys_psize.PaperName\n        sys_pwidth = int(sys_psize.Width / 100.00)\n        sys_pheight = int(sys_psize.Height / 100.00)\n        wxd = paper_width == sys_pwidth and paper_height == sys_pheight\n        dxw = paper_width == sys_pheight and paper_height == sys_pwidth\n        mlogger.debug(\n            '%s \"%s\" W:%s H:%s',\n            \"\u2713\" if wxd or dxw else \" \",\n            sys_pname,\n            sys_pwidth,\n            sys_pheight,\n        )\n        if wxd or dxw:\n            psize = find_paper_size_by_name(sys_pname)\n            if psize:\n                paper_sizes.append(psize)\n                mlogger.debug(\"found matching paper: %s\", psize.Name)\n    return paper_sizes\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_titleblock_print_settings","title":"<code>get_titleblock_print_settings(tblock, printer_name, doc_psettings)</code>","text":"<p>Retrieves the print settings for a given title block that match the specified printer and document print settings.</p> <p>Parameters:</p> Name Type Description Default <code>tblock</code> <code>FamilyInstance</code> <p>The title block instance.</p> required <code>printer_name</code> <code>str</code> <p>The name of the printer.</p> required <code>doc_psettings</code> <code>list[PrintSetting]</code> <p>A list of document print settings.</p> required <p>Returns:</p> Type Description <p>list[DB.PrintSetting]: A sorted list of print settings that match the title block size and orientation.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_titleblock_print_settings(tblock, printer_name, doc_psettings):\n    \"\"\"\n    Retrieves the print settings for a given title block that match the specified printer and document print settings.\n\n    Args:\n        tblock (DB.FamilyInstance): The title block instance.\n        printer_name (str): The name of the printer.\n        doc_psettings (list[DB.PrintSetting]): A list of document print settings.\n\n    Returns:\n        list[DB.PrintSetting]: A sorted list of print settings that match the title block size and orientation.\n    \"\"\"\n    doc = tblock.Document\n    page_width_param = tblock.Parameter[DB.BuiltInParameter.SHEET_WIDTH]\n    page_height_param = tblock.Parameter[DB.BuiltInParameter.SHEET_HEIGHT]\n    page_width = int(round(page_width_param.AsDouble() * 12.0))\n    page_height = int(round(page_height_param.AsDouble() * 12.0))\n    tform = tblock.GetTotalTransform()\n    is_portrait = (page_width &lt; page_height) or (int(tform.BasisX.Y) == -1)\n    paper_sizes = find_paper_sizes_by_dims(\n        printer_name, page_width, page_height, doc=doc\n    )\n    paper_size_names = [x.Name for x in paper_sizes]\n    page_orient = (\n        DB.PageOrientationType.Portrait\n        if is_portrait\n        else DB.PageOrientationType.Landscape\n    )\n    all_tblock_psettings = set()\n    for doc_psetting in doc_psettings:\n        try:\n            pparams = doc_psetting.PrintParameters\n            if (\n                pparams.PaperSize\n                and pparams.PaperSize.Name in paper_size_names\n                and (pparams.ZoomType == DB.ZoomType.Zoom and pparams.Zoom == 100)\n                and pparams.PageOrientation == page_orient\n            ):\n                all_tblock_psettings.add(doc_psetting)\n        except Exception:\n            mlogger.debug(\"incompatible psettings: %s\", doc_psetting.Name)\n    return sorted(all_tblock_psettings, key=lambda x: x.Name)\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_crop_region","title":"<code>get_crop_region(view)</code>","text":"<p>Takes crop region of a view.</p> <p>Parameters:</p> Name Type Description Default <code>view</code> <code>View</code> <p>view to get crop region from</p> required <p>Returns:</p> Type Description <code>list[CurveLoop]</code> <p>list of curve loops</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_crop_region(view):\n    \"\"\"Takes crop region of a view.\n\n    Args:\n        view (DB.View): view to get crop region from\n\n    Returns:\n        (list[DB.CurveLoop]): list of curve loops\n    \"\"\"\n    crsm = view.GetCropRegionShapeManager()\n    if HOST_APP.is_newer_than(2015):\n        crsm_valid = crsm.CanHaveShape\n    else:\n        crsm_valid = crsm.Valid\n\n    if crsm_valid:\n        if HOST_APP.is_newer_than(2015):\n            curve_loops = list(crsm.GetCropShape())\n        else:\n            curve_loops = [crsm.GetCropRegionShape()]\n\n        if curve_loops:\n            return curve_loops\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.is_cropable_view","title":"<code>is_cropable_view(view)</code>","text":"<p>Determines if a given Revit view can be cropped.</p> <p>Parameters:</p> Name Type Description Default <code>view</code> <code>View</code> <p>The Revit view to check.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the view can be cropped, False otherwise.</p> Notes <p>A view is considered cropable if it is not an instance of DB.ViewSheet or DB.TableView, and its ViewType is not Legend or DraftingView.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def is_cropable_view(view):\n    \"\"\"\n    Determines if a given Revit view can be cropped.\n\n    Args:\n        view (DB.View): The Revit view to check.\n\n    Returns:\n        bool: True if the view can be cropped, False otherwise.\n\n    Notes:\n        A view is considered cropable if it is not an instance of DB.ViewSheet or DB.TableView,\n        and its ViewType is not Legend or DraftingView.\n    \"\"\"\n    return not isinstance(view, (DB.ViewSheet, DB.TableView)) and view.ViewType not in (\n        DB.ViewType.Legend,\n        DB.ViewType.DraftingView,\n    )\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_view_filters","title":"<code>get_view_filters(view)</code>","text":"<p>Retrieves the filters applied to a given Revit view.</p> <p>Parameters:</p> Name Type Description Default <code>view</code> <code>View</code> <p>The Revit view from which to retrieve the filters.</p> required <p>Returns:</p> Type Description <p>list[Autodesk.Revit.DB.Element]: A list of filter elements applied to the view.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_view_filters(view):\n    \"\"\"\n    Retrieves the filters applied to a given Revit view.\n\n    Args:\n        view (Autodesk.Revit.DB.View): The Revit view from which to retrieve the filters.\n\n    Returns:\n        list[Autodesk.Revit.DB.Element]: A list of filter elements applied to the view.\n    \"\"\"\n    view_filters = []\n    for filter_id in view.GetFilters():\n        filter_element = view.Document.GetElement(filter_id)\n        view_filters.append(filter_element)\n    return view_filters\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_element_workset","title":"<code>get_element_workset(element)</code>","text":"<p>Retrieves the workset of a given Revit element.</p> <p>Parameters:</p> Name Type Description Default <code>element</code> <code>Element</code> <p>The Revit element for which to retrieve the workset.</p> required <p>Returns:</p> Type Description <p>DB.Workset: The workset to which the element belongs, or None if the element's workset ID is invalid.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_element_workset(element):\n    \"\"\"\n    Retrieves the workset of a given Revit element.\n\n    Args:\n        element (DB.Element): The Revit element for which to retrieve the workset.\n\n    Returns:\n        DB.Workset: The workset to which the element belongs, or None if the element's workset ID is invalid.\n    \"\"\"\n    doc = element.Document\n    workset_table = doc.GetWorksetTable()\n    if element.WorksetId != DB.WorksetId.InvalidWorksetId:\n        return workset_table.GetWorkset(element.WorksetId)\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_geometry","title":"<code>get_geometry(element, include_invisible=False, compute_references=False)</code>","text":"<p>Retrieves the geometry of a given Revit element.</p> <p>Parameters:</p> Name Type Description Default <code>element</code> <code>Element</code> <p>The Revit element from which to retrieve geometry.</p> required <code>include_invisible</code> <code>bool</code> <p>If True, includes non-visible objects in the geometry. Defaults to False.</p> <code>False</code> <code>compute_references</code> <code>bool</code> <p>If True, computes references for the geometry objects. Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>list</code> <p>A list of geometry objects associated with the element. If the element has no geometry, returns None.</p> <p>Raises:</p> Type Description <code>TypeError</code> <p>If the element's geometry cannot be retrieved.</p> Notes <ul> <li>If the geometry object is an instance of DB.GeometryInstance, its instance geometry is retrieved and added to the list.</li> <li>Logs a debug message if the element has no geometry.</li> </ul> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_geometry(element, include_invisible=False, compute_references=False):\n    \"\"\"\n    Retrieves the geometry of a given Revit element.\n\n    Args:\n        element (DB.Element): The Revit element from which to retrieve geometry.\n        include_invisible (bool, optional): If True, includes non-visible objects in the geometry. Defaults to False.\n        compute_references (bool, optional): If True, computes references for the geometry objects. Defaults to False.\n\n    Returns:\n        list: A list of geometry objects associated with the element. If the element has no geometry, returns None.\n\n    Raises:\n        TypeError: If the element's geometry cannot be retrieved.\n\n    Notes:\n        - If the geometry object is an instance of DB.GeometryInstance, its instance geometry is retrieved and added to the list.\n        - Logs a debug message if the element has no geometry.\n    \"\"\"\n    geom_opts = DB.Options()\n    geom_opts.IncludeNonVisibleObjects = include_invisible\n    geom_opts.ComputeReferences = compute_references\n    geom_objs = []\n    try:\n        for gobj in element.Geometry[geom_opts]:\n            if isinstance(gobj, DB.GeometryInstance):\n                inst_geom = gobj.GetInstanceGeometry()\n                geom_objs.extend(list(inst_geom))\n            else:\n                geom_objs.append(gobj)\n        return geom_objs\n    except TypeError:\n        get_elementid_value = get_elementid_value_func()\n        mlogger.debug(\"element %s has no geometry\", get_elementid_value(element.Id))\n        return\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_array_group_ids","title":"<code>get_array_group_ids(doc=None)</code>","text":"<p>Collects and returns the IDs of all array groups in the given document.</p> <p>Parameters:</p> Name Type Description Default <code>document</code> <code>Document</code> <p>The Revit document to search for array groups.</p> required <p>Returns:</p> Name Type Description <code>list</code> <p>A list of element IDs representing the array groups.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_array_group_ids(doc=None):\n    \"\"\"\n    Collects and returns the IDs of all array groups in the given document.\n\n    Args:\n        document (DB.Document): The Revit document to search for array groups.\n\n    Returns:\n        list: A list of element IDs representing the array groups.\n    \"\"\"\n    array_list = DB.FilteredElementCollector(doc or DOCS.doc).OfCategory(\n        DB.BuiltInCategory.OST_IOSArrays\n    )\n    arrays_groups = []\n    for ar in array_list:\n        arrays_groups.extend(ar.GetOriginalMemberIds())\n        arrays_groups.extend(ar.GetCopiedMemberIds())\n    return set(arrays_groups)\n</code></pre>"},{"location":"reference/pyrevit/revit/db/query/#pyrevit.revit.db.query.get_array_group_ids_types","title":"<code>get_array_group_ids_types(doc=None)</code>","text":"<p>Retrieves the unique types of array groups in the given Revit document.</p> <p>Parameters:</p> Name Type Description Default <code>doc</code> <p>The Revit document from which to collect array group types.</p> <code>None</code> <p>Returns:</p> Type Description <p>A set of unique array group type IDs present in the document.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/query.py</code> <pre><code>def get_array_group_ids_types(doc=None):\n    \"\"\"\n    Retrieves the unique types of array groups in the given Revit document.\n\n    Args:\n        doc: The Revit document from which to collect array group types.\n\n    Returns:\n        A set of unique array group type IDs present in the document.\n    \"\"\"\n    arrays_groups = get_array_group_ids(doc or DOCS.doc)\n    return {doc.GetElement(ar).GetTypeId() for ar in arrays_groups}\n</code></pre>"},{"location":"reference/pyrevit/revit/db/select/","title":"select","text":"<p>Selection utilities.</p>"},{"location":"reference/pyrevit/revit/db/select/#pyrevit.revit.db.select-functions","title":"Functions","text":""},{"location":"reference/pyrevit/revit/db/select/#pyrevit.revit.db.select.select_mirrored","title":"<code>select_mirrored(elements)</code>","text":"<p>Select only mirrored elements from the given elements.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/select.py</code> <pre><code>def select_mirrored(elements):\n    \"\"\"Select only mirrored elements from the given elements.\"\"\"\n    return [x for x in elements\n            if hasattr(x, \"Mirrored\") and x.Mirrored]\n</code></pre>"},{"location":"reference/pyrevit/revit/db/transaction/","title":"transaction","text":"<p>Revit transactions facility.</p>"},{"location":"reference/pyrevit/revit/db/transaction/#pyrevit.revit.db.transaction-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/revit/db/transaction/#pyrevit.revit.db.transaction.mlogger","title":"<code>mlogger = get_logger(__name__)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/revit/db/transaction/#pyrevit.revit.db.transaction.DEFAULT_TRANSACTION_NAME","title":"<code>DEFAULT_TRANSACTION_NAME = 'pyRevit Transaction'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/revit/db/transaction/#pyrevit.revit.db.transaction-classes","title":"Classes","text":""},{"location":"reference/pyrevit/revit/db/transaction/#pyrevit.revit.db.transaction.Transaction","title":"<code>Transaction(name=None, doc=None, clear_after_rollback=False, show_error_dialog=False, swallow_errors=False, log_errors=True, nested=False)</code>","text":"<p>Adds a context manager around Revit Transaction object.</p> <p>Runs <code>Transaction.Start()</code> and <code>Transaction.Commit()</code> before and after the context. Automatically rolls back if exception is raised.</p> <p>```python     with Transaction('Move Wall'):         wall.DoSomething()</p> <pre><code>with Transaction('Move Wall', doc, clear_after_rollback=False, show_error_dialog=False, swallow_errors=False, log_errors=True, nested=False)) as action:\n    wall.DoSomething()\n    assert action.status == ActionStatus.Started  # True\n    assert action.status == ActionStatus.Committed    # True\n```\n</code></pre> Source code in <code>pyrevitlib/pyrevit/revit/db/transaction.py</code> <pre><code>def __init__(self, name=None,\n             doc=None,\n             clear_after_rollback=False,\n             show_error_dialog=False,\n             swallow_errors=False,\n             log_errors=True,\n             nested=False):\n    doc = doc or DOCS.doc\n    # create nested transaction if one is already open\n    if doc.IsModifiable or nested:\n        self._rvtxn = \\\n            DB.SubTransaction(doc)\n    else:\n        self._rvtxn = \\\n            DB.Transaction(doc, name if name else DEFAULT_TRANSACTION_NAME)\n        self._fhndlr_ops = self._rvtxn.GetFailureHandlingOptions()\n        self._fhndlr_ops = \\\n            self._fhndlr_ops.SetClearAfterRollback(clear_after_rollback)\n        self._fhndlr_ops = \\\n            self._fhndlr_ops.SetForcedModalHandling(show_error_dialog)\n        if swallow_errors:\n            self._fhndlr_ops = \\\n                self._fhndlr_ops.SetFailuresPreprocessor(\n                    failure.FailureSwallower()\n                    )\n        self._rvtxn.SetFailureHandlingOptions(self._fhndlr_ops)\n    self._logerror = log_errors\n</code></pre>"},{"location":"reference/pyrevit/revit/db/transaction/#pyrevit.revit.db.transaction.Transaction-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/revit/db/transaction/#pyrevit.revit.db.transaction.Transaction.name","title":"<code>name</code>  <code>property</code> <code>writable</code>","text":""},{"location":"reference/pyrevit/revit/db/transaction/#pyrevit.revit.db.transaction.Transaction.status","title":"<code>status</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/db/transaction/#pyrevit.revit.db.transaction.Transaction-functions","title":"Functions","text":""},{"location":"reference/pyrevit/revit/db/transaction/#pyrevit.revit.db.transaction.Transaction.has_started","title":"<code>has_started()</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/transaction.py</code> <pre><code>def has_started(self):\n    return self._rvtxn.HasStarted()\n</code></pre>"},{"location":"reference/pyrevit/revit/db/transaction/#pyrevit.revit.db.transaction.Transaction.has_ended","title":"<code>has_ended()</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/transaction.py</code> <pre><code>def has_ended(self):\n    return self._rvtxn.HasEnded()\n</code></pre>"},{"location":"reference/pyrevit/revit/db/transaction/#pyrevit.revit.db.transaction.DryTransaction","title":"<code>DryTransaction(name=None, doc=None, clear_after_rollback=False, show_error_dialog=False, swallow_errors=False, log_errors=True, nested=False)</code>","text":"<p>               Bases: <code>Transaction</code></p> <p>Wrapper to a transaction that doesn't commit anything (dry-run).</p> Source code in <code>pyrevitlib/pyrevit/revit/db/transaction.py</code> <pre><code>def __init__(self, name=None,\n             doc=None,\n             clear_after_rollback=False,\n             show_error_dialog=False,\n             swallow_errors=False,\n             log_errors=True,\n             nested=False):\n    doc = doc or DOCS.doc\n    # create nested transaction if one is already open\n    if doc.IsModifiable or nested:\n        self._rvtxn = \\\n            DB.SubTransaction(doc)\n    else:\n        self._rvtxn = \\\n            DB.Transaction(doc, name if name else DEFAULT_TRANSACTION_NAME)\n        self._fhndlr_ops = self._rvtxn.GetFailureHandlingOptions()\n        self._fhndlr_ops = \\\n            self._fhndlr_ops.SetClearAfterRollback(clear_after_rollback)\n        self._fhndlr_ops = \\\n            self._fhndlr_ops.SetForcedModalHandling(show_error_dialog)\n        if swallow_errors:\n            self._fhndlr_ops = \\\n                self._fhndlr_ops.SetFailuresPreprocessor(\n                    failure.FailureSwallower()\n                    )\n        self._rvtxn.SetFailureHandlingOptions(self._fhndlr_ops)\n    self._logerror = log_errors\n</code></pre>"},{"location":"reference/pyrevit/revit/db/transaction/#pyrevit.revit.db.transaction.DryTransaction-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/revit/db/transaction/#pyrevit.revit.db.transaction.DryTransaction.name","title":"<code>name</code>  <code>property</code> <code>writable</code>","text":""},{"location":"reference/pyrevit/revit/db/transaction/#pyrevit.revit.db.transaction.DryTransaction.status","title":"<code>status</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/db/transaction/#pyrevit.revit.db.transaction.DryTransaction-functions","title":"Functions","text":""},{"location":"reference/pyrevit/revit/db/transaction/#pyrevit.revit.db.transaction.DryTransaction.has_started","title":"<code>has_started()</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/transaction.py</code> <pre><code>def has_started(self):\n    return self._rvtxn.HasStarted()\n</code></pre>"},{"location":"reference/pyrevit/revit/db/transaction/#pyrevit.revit.db.transaction.DryTransaction.has_ended","title":"<code>has_ended()</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/transaction.py</code> <pre><code>def has_ended(self):\n    return self._rvtxn.HasEnded()\n</code></pre>"},{"location":"reference/pyrevit/revit/db/transaction/#pyrevit.revit.db.transaction.TransactionGroup","title":"<code>TransactionGroup(name=None, doc=None, assimilate=True, log_errors=True)</code>","text":"<p>Transactions group with context manager.</p> Source code in <code>pyrevitlib/pyrevit/revit/db/transaction.py</code> <pre><code>def __init__(self, name=None, doc=None, assimilate=True, log_errors=True):\n    self._rvtxn_grp = \\\n        DB.TransactionGroup(doc or DOCS.doc,\n                            name if name else DEFAULT_TRANSACTION_NAME)\n    self.assimilate = assimilate\n    self._logerror = log_errors\n</code></pre>"},{"location":"reference/pyrevit/revit/db/transaction/#pyrevit.revit.db.transaction.TransactionGroup-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/revit/db/transaction/#pyrevit.revit.db.transaction.TransactionGroup.assimilate","title":"<code>assimilate = assimilate</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/revit/db/transaction/#pyrevit.revit.db.transaction.TransactionGroup.name","title":"<code>name</code>  <code>property</code> <code>writable</code>","text":""},{"location":"reference/pyrevit/revit/db/transaction/#pyrevit.revit.db.transaction.TransactionGroup.status","title":"<code>status</code>  <code>property</code>","text":""},{"location":"reference/pyrevit/revit/db/transaction/#pyrevit.revit.db.transaction.TransactionGroup-functions","title":"Functions","text":""},{"location":"reference/pyrevit/revit/db/transaction/#pyrevit.revit.db.transaction.TransactionGroup.has_started","title":"<code>has_started()</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/transaction.py</code> <pre><code>def has_started(self):\n    return self._rvtxn_grp.HasStarted()\n</code></pre>"},{"location":"reference/pyrevit/revit/db/transaction/#pyrevit.revit.db.transaction.TransactionGroup.has_ended","title":"<code>has_ended()</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/transaction.py</code> <pre><code>def has_ended(self):\n    return self._rvtxn_grp.HasEnded()\n</code></pre>"},{"location":"reference/pyrevit/revit/db/transaction/#pyrevit.revit.db.transaction-functions","title":"Functions","text":""},{"location":"reference/pyrevit/revit/db/transaction/#pyrevit.revit.db.transaction.carryout","title":"<code>carryout(name, doc=None)</code>","text":"<p>Transaction Decorator.</p> <p>Decorate any function with <code>@doc.carryout('Txn name')</code> and the funciton will run within an Transaction context.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the Transaction</p> required <code>doc</code> <code>Document</code> <p>Revit document</p> <code>None</code> <pre><code>@doc.carryout('Do Something')\ndef set_some_parameter(wall, value):\n    wall.parameters['Comments'].value = value\n\n\nset_some_parameter(wall, value)\n</code></pre> Source code in <code>pyrevitlib/pyrevit/revit/db/transaction.py</code> <pre><code>def carryout(name, doc=None):\n    \"\"\"Transaction Decorator.\n\n    Decorate any function with ``@doc.carryout('Txn name')``\n    and the funciton will run within an Transaction context.\n\n    Args:\n        name (str): Name of the Transaction\n        doc (Document): Revit document\n\n    ```python\n    @doc.carryout('Do Something')\n    def set_some_parameter(wall, value):\n        wall.parameters['Comments'].value = value\n\n\n    set_some_parameter(wall, value)\n    ```\n    \"\"\"\n    from functools import wraps\n\n    def wrap(f):\n        @wraps(f)\n        def wrapped_f(*args, **kwargs):\n            with Transaction(name, doc=doc):\n                return_value = f(*args, **kwargs)\n            return return_value\n        return wrapped_f\n    return wrap\n</code></pre>"},{"location":"reference/pyrevit/revit/db/update/","title":"update","text":"<p>Helper functions to update info and elements in Revit.</p>"},{"location":"reference/pyrevit/revit/db/update/#pyrevit.revit.db.update-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/revit/db/update/#pyrevit.revit.db.update-functions","title":"Functions","text":""},{"location":"reference/pyrevit/revit/db/update/#pyrevit.revit.db.update.set_name","title":"<code>set_name(element, new_name)</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/update.py</code> <pre><code>def set_name(element, new_name):\n    # grab viewname correctly\n    if isinstance(element, DB.View):\n        if HOST_APP.is_newer_than('2019', or_equal=True):\n            element.Name = new_name\n        else:\n            element.ViewName = new_name\n    else:\n        element.Name = new_name\n</code></pre>"},{"location":"reference/pyrevit/revit/db/update/#pyrevit.revit.db.update.update_sheet_revisions","title":"<code>update_sheet_revisions(revisions, sheets=None, state=True, doc=None)</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/update.py</code> <pre><code>def update_sheet_revisions(revisions, sheets=None, state=True, doc=None):\n    doc = doc or DOCS.doc\n    get_elementid_value = get_elementid_value_func()\n    # make sure revisions is a list\n    if not isinstance(revisions, list):\n        revisions = [revisions]\n    updated_sheets = []\n    if revisions:\n        # get sheets if not available\n        for sheet in sheets or query.get_sheets(doc=doc):\n            addrevs = set([get_elementid_value(x)\n                           for x in sheet.GetAdditionalRevisionIds()])\n            for rev in revisions:\n                # skip issued revisions\n                if not rev.Issued:\n                    if state:\n                        addrevs.add(get_elementid_value(rev.Id))\n                    elif get_elementid_value(rev.Id) in addrevs:\n                        addrevs.remove(get_elementid_value(rev.Id))\n            rev_elids = [DB.ElementId(x) for x in addrevs]\n            sheet.SetAdditionalRevisionIds(List[DB.ElementId](rev_elids))\n            updated_sheets.append(sheet)\n    return updated_sheets\n</code></pre>"},{"location":"reference/pyrevit/revit/db/update/#pyrevit.revit.db.update.update_revision_alphanumeric","title":"<code>update_revision_alphanumeric(token_list, prefix='', postfix='', doc=None)</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/update.py</code> <pre><code>def update_revision_alphanumeric(token_list, prefix='', postfix='', doc=None):\n    doc = doc or DOCS.doc\n    alphalist = List[str]()\n    for token in token_list:\n        alphalist.Add(str(token))\n    alpha_cfg = DB.AlphanumericRevisionSettings(alphalist, prefix, postfix)\n    rev_cfg = DB.RevisionSettings.GetRevisionSettings(doc)\n    rev_cfg.SetAlphanumericRevisionSettings(alpha_cfg)\n</code></pre>"},{"location":"reference/pyrevit/revit/db/update/#pyrevit.revit.db.update.update_revision_numeric","title":"<code>update_revision_numeric(starting_int, prefix='', postfix='', doc=None)</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/update.py</code> <pre><code>def update_revision_numeric(starting_int, prefix='', postfix='', doc=None):\n    doc = doc or DOCS.doc\n    num_cfg = DB.NumericRevisionSettings(starting_int, prefix, postfix)\n    rev_cfg = DB.RevisionSettings.GetRevisionSettings(doc)\n    rev_cfg.SetNumericRevisionSettings(num_cfg)\n</code></pre>"},{"location":"reference/pyrevit/revit/db/update/#pyrevit.revit.db.update.update_revision_numbering","title":"<code>update_revision_numbering(per_sheet=False, doc=None)</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/update.py</code> <pre><code>def update_revision_numbering(per_sheet=False, doc=None):\n    doc = doc or DOCS.doc\n    rev_cfg = DB.RevisionSettings.GetRevisionSettings(doc)\n    rev_cfg.RevisionNumbering = \\\n        DB.RevisionNumbering.PerSheet if per_sheet else \\\n        DB.RevisionNumbering.PerProject\n</code></pre>"},{"location":"reference/pyrevit/revit/db/update/#pyrevit.revit.db.update.update_param_value","title":"<code>update_param_value(rvt_param, value)</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/update.py</code> <pre><code>def update_param_value(rvt_param, value):\n    if not rvt_param.IsReadOnly:\n        if rvt_param.StorageType == DB.StorageType.String:\n            rvt_param.Set(str(value) if value else \"\")\n        else:\n            rvt_param.SetValueString(str(value))\n</code></pre>"},{"location":"reference/pyrevit/revit/db/update/#pyrevit.revit.db.update.toggle_category_visibility","title":"<code>toggle_category_visibility(view, subcat, hidden=None)</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/update.py</code> <pre><code>def toggle_category_visibility(view, subcat, hidden=None):\n    if HOST_APP.is_older_than(2018):\n        if hidden is None:\n            hidden = not view.GetVisibility(subcat.Id)\n        view.SetVisibility(subcat.Id, hidden)\n    else:\n        if hidden is None:\n            hidden = not view.GetCategoryHidden(subcat.Id)\n        view.SetCategoryHidden(subcat.Id, hidden)\n</code></pre>"},{"location":"reference/pyrevit/revit/db/update/#pyrevit.revit.db.update.rename_workset","title":"<code>rename_workset(workset, new_name, doc=None)</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/update.py</code> <pre><code>def rename_workset(workset, new_name, doc=None):\n    doc = doc or DOCS.doc\n    DB.WorksetTable.RenameWorkset(doc, workset.Id, new_name)\n</code></pre>"},{"location":"reference/pyrevit/revit/db/update/#pyrevit.revit.db.update.update_linked_keynotes","title":"<code>update_linked_keynotes(doc=None)</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/update.py</code> <pre><code>def update_linked_keynotes(doc=None):\n    doc = doc or DOCS.doc\n    ktable = DB.KeynoteTable.GetKeynoteTable(doc)\n    ktable.Reload(None)\n</code></pre>"},{"location":"reference/pyrevit/revit/db/update/#pyrevit.revit.db.update.set_keynote_file","title":"<code>set_keynote_file(keynote_file, doc=None)</code>","text":"Source code in <code>pyrevitlib/pyrevit/revit/db/update.py</code> <pre><code>def set_keynote_file(keynote_file, doc=None):\n    doc = doc or DOCS.doc\n    if op.exists(keynote_file):\n        mpath = \\\n            DB.ModelPathUtils.ConvertUserVisiblePathToModelPath(keynote_file)\n        keynote_exres = DB.ExternalResourceReference.CreateLocalResource(\n            doc,\n            DB.ExternalResourceTypes.BuiltInExternalResourceTypes.KeynoteTable,\n            mpath,\n            DB.PathType.Absolute)\n        knote_table = DB.KeynoteTable.GetKeynoteTable(doc)\n        knote_table.LoadFrom(keynote_exres, DB.KeyBasedTreeEntriesLoadResults())\n</code></pre>"},{"location":"reference/pyrevit/revit/db/update/#pyrevit.revit.db.update.set_crop_region","title":"<code>set_crop_region(view, curve_loops)</code>","text":"<p>Sets crop region to a view.</p> <p>Parameters:</p> Name Type Description Default <code>view</code> <code>View</code> <p>view to change</p> required <code>curve_loops</code> <code>list[CurveLoop]</code> <p>list of curve loops</p> required Source code in <code>pyrevitlib/pyrevit/revit/db/update.py</code> <pre><code>def set_crop_region(view, curve_loops):\n    \"\"\"Sets crop region to a view.\n\n    Args:\n        view (DB.View): view to change\n        curve_loops (list[DB.CurveLoop]): list of curve loops\n    \"\"\"\n    if not isinstance(curve_loops, list):\n        curve_loops = [curve_loops]\n\n    crop_active_saved = view.CropBoxActive\n    view.CropBoxActive = True\n    crsm = view.GetCropRegionShapeManager()\n    for cloop in curve_loops:\n        if HOST_APP.is_newer_than(2015):\n            crsm.SetCropShape(cloop)\n        else:\n            crsm.SetCropRegionShape(cloop)\n    view.CropBoxActive = crop_active_saved\n</code></pre>"},{"location":"reference/pyrevit/revit/db/update/#pyrevit.revit.db.update.set_active_workset","title":"<code>set_active_workset(workset_id, doc=None)</code>","text":"<p>Set active workset.</p> <p>Parameters:</p> Name Type Description Default <code>workset_id</code> <code>WorksetId</code> <p>target workset id</p> required <code>doc</code> <code>Document</code> <p>target document. defaults to active</p> <code>None</code> Source code in <code>pyrevitlib/pyrevit/revit/db/update.py</code> <pre><code>def set_active_workset(workset_id, doc=None):\n    \"\"\"Set active workset.\n\n    Args:\n        workset_id (DB.WorksetId): target workset id\n        doc (DB.Document, optional): target document. defaults to active\n    \"\"\"\n    doc = doc or DOCS.doc\n    if doc.IsWorkshared:\n        workset_table = doc.GetWorksetTable()\n        workset_table.SetActiveWorksetId(workset_id)\n</code></pre>"},{"location":"reference/pyrevit/routes/","title":"routes","text":"<p>HTTP API framework similar to flask.</p>"},{"location":"reference/pyrevit/routes/#pyrevit.routes-classes","title":"Classes","text":""},{"location":"reference/pyrevit/routes/#pyrevit.routes.Request","title":"<code>Request(path='/', method='GET', data=None, params=None)</code>","text":"<p>               Bases: <code>object</code></p> <p>Request wrapper object.</p> Source code in <code>pyrevitlib/pyrevit/routes/server/base.py</code> <pre><code>def __init__(self, path='/', method='GET', data=None, params=None):\n    self.path = path\n    self.method = method\n    self.data = data\n    self._headers = {}\n    self._params = params or []\n</code></pre>"},{"location":"reference/pyrevit/routes/#pyrevit.routes.Request-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/routes/#pyrevit.routes.Request.path","title":"<code>path = path</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/routes/#pyrevit.routes.Request.method","title":"<code>method = method</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/routes/#pyrevit.routes.Request.data","title":"<code>data = data</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/routes/#pyrevit.routes.Request.headers","title":"<code>headers</code>  <code>property</code>","text":"<p>Request headers dict.</p>"},{"location":"reference/pyrevit/routes/#pyrevit.routes.Request.params","title":"<code>params</code>  <code>property</code>","text":"<p>Request parameters.</p>"},{"location":"reference/pyrevit/routes/#pyrevit.routes.Request.callback_url","title":"<code>callback_url</code>  <code>property</code>","text":"<p>Request callback url, if provided in payload.</p>"},{"location":"reference/pyrevit/routes/#pyrevit.routes.Request-functions","title":"Functions","text":""},{"location":"reference/pyrevit/routes/#pyrevit.routes.Request.add_header","title":"<code>add_header(key, value)</code>","text":"<p>Add new header key:value.</p> Source code in <code>pyrevitlib/pyrevit/routes/server/base.py</code> <pre><code>def add_header(self, key, value):\n    \"\"\"Add new header key:value.\"\"\"\n    self._headers[key] = value\n</code></pre>"},{"location":"reference/pyrevit/routes/#pyrevit.routes.Response","title":"<code>Response(status=200, data=None, headers=None)</code>","text":"<p>               Bases: <code>object</code></p> <p>Response wrapper object.</p> Source code in <code>pyrevitlib/pyrevit/routes/server/base.py</code> <pre><code>def __init__(self, status=200, data=None, headers=None):\n    self.status = status\n    self.data = data\n    self._headers = headers or {}\n</code></pre>"},{"location":"reference/pyrevit/routes/#pyrevit.routes.Response-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/routes/#pyrevit.routes.Response.status","title":"<code>status = status</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/routes/#pyrevit.routes.Response.data","title":"<code>data = data</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/routes/#pyrevit.routes.Response.headers","title":"<code>headers</code>  <code>property</code>","text":"<p>Response headers dict.</p>"},{"location":"reference/pyrevit/routes/#pyrevit.routes.Response-functions","title":"Functions","text":""},{"location":"reference/pyrevit/routes/#pyrevit.routes.Response.add_header","title":"<code>add_header(key, value)</code>","text":"<p>Add new header key:value.</p> Source code in <code>pyrevitlib/pyrevit/routes/server/base.py</code> <pre><code>def add_header(self, key, value):\n    \"\"\"Add new header key:value.\"\"\"\n    self._headers[key] = value\n</code></pre>"},{"location":"reference/pyrevit/routes/#pyrevit.routes.API","title":"<code>API(name)</code>","text":"<p>               Bases: <code>object</code></p> <p>API root object.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>URL-safe unique root name of the API</p> required <p>Examples:</p> <pre><code>from pyrevit import routes\napi = routes.API(\"pyrevit-core\")\n@api.route('/sessions/', methods=['POST'])\ndef reload_pyrevit(uiapp):\n    new_session_id = sessionmgr.reload_pyrevit()\n    return {\"session_id\": new_session_id}\n</code></pre> Source code in <code>pyrevitlib/pyrevit/routes/__init__.py</code> <pre><code>def __init__(self, name):\n    self.name = name\n</code></pre>"},{"location":"reference/pyrevit/routes/#pyrevit.routes.API-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/routes/#pyrevit.routes.API.name","title":"<code>name = name</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/routes/#pyrevit.routes.API-functions","title":"Functions","text":""},{"location":"reference/pyrevit/routes/#pyrevit.routes.API.route","title":"<code>route(pattern, methods=['GET'])</code>","text":"<p>Define a new route on this API.</p> Source code in <code>pyrevitlib/pyrevit/routes/__init__.py</code> <pre><code>def route(self, pattern, methods=['GET']):\n    \"\"\"Define a new route on this API.\"\"\"\n    def __func_wrapper__(f):\n        for method in methods:\n            add_route(\n                api_name=self.name,\n                pattern=pattern,\n                method=method,\n                handler_func=f\n                )\n        return f\n    return __func_wrapper__\n</code></pre>"},{"location":"reference/pyrevit/routes/#pyrevit.routes-functions","title":"Functions","text":""},{"location":"reference/pyrevit/routes/#pyrevit.routes.init","title":"<code>init()</code>","text":"<p>Initialize routes. Reset all registered routes and shutdown servers.</p> Source code in <code>pyrevitlib/pyrevit/routes/server/__init__.py</code> <pre><code>def init():\n    \"\"\"Initialize routes. Reset all registered routes and shutdown servers.\"\"\"\n    # clear all routes\n    router.reset_routes()\n    # stop existing server\n    deactivate_server()\n</code></pre>"},{"location":"reference/pyrevit/routes/#pyrevit.routes.activate_server","title":"<code>activate_server()</code>","text":"<p>Activate routes server for this host instance.</p> Source code in <code>pyrevitlib/pyrevit/routes/server/__init__.py</code> <pre><code>def activate_server():\n    \"\"\"Activate routes server for this host instance.\"\"\"\n    routes_server = envvars.get_pyrevit_env_var(envvars.ROUTES_SERVER)\n    if not routes_server:\n        try:\n            rsinfo = serverinfo.register()\n            routes_server = \\\n                server.RoutesServer(\n                    host=rsinfo.server_host,\n                    port=rsinfo.server_port\n                    )\n            routes_server.start()\n            envvars.set_pyrevit_env_var(envvars.ROUTES_SERVER, routes_server)\n            return routes_server\n        except Exception as rs_ex:\n            serverinfo.unregister()\n            mlogger.error(\"Error starting Routes server | %s\", str(rs_ex))\n</code></pre>"},{"location":"reference/pyrevit/routes/#pyrevit.routes.deactivate_server","title":"<code>deactivate_server()</code>","text":"<p>Deactivate the active routes server for this host instance.</p> Source code in <code>pyrevitlib/pyrevit/routes/server/__init__.py</code> <pre><code>def deactivate_server():\n    \"\"\"Deactivate the active routes server for this host instance.\"\"\"\n    routes_server = envvars.get_pyrevit_env_var(envvars.ROUTES_SERVER)\n    if routes_server:\n        try:\n            routes_server.stop()\n            envvars.set_pyrevit_env_var(envvars.ROUTES_SERVER, None)\n            serverinfo.unregister()\n        except Exception as rs_ex:\n            mlogger.error(\"Error stopping Routes server | %s\", str(rs_ex))\n</code></pre>"},{"location":"reference/pyrevit/routes/#pyrevit.routes.get_active_server","title":"<code>get_active_server()</code>","text":"<p>Get active routes server for this host instance.</p> Source code in <code>pyrevitlib/pyrevit/routes/server/__init__.py</code> <pre><code>def get_active_server():\n    \"\"\"Get active routes server for this host instance.\"\"\"\n    return envvars.get_pyrevit_env_var(envvars.ROUTES_SERVER)\n</code></pre>"},{"location":"reference/pyrevit/routes/#pyrevit.routes.make_response","title":"<code>make_response(data, status=OK, headers=None)</code>","text":"<p>Create Reponse object with.</p> Source code in <code>pyrevitlib/pyrevit/routes/server/__init__.py</code> <pre><code>def make_response(data, status=OK, headers=None):\n    \"\"\"Create Reponse object with.\"\"\"\n    res = Response(status=status, data=data)\n    for key, value in (headers or {}).items():\n        res.add_header(key, value)\n    return res\n</code></pre>"},{"location":"reference/pyrevit/routes/#pyrevit.routes.get_routes","title":"<code>get_routes(api_name)</code>","text":"<p>Get all registered routes for given API name.</p> <p>Parameters:</p> Name Type Description Default <code>api_name</code> <code>str</code> <p>unique name of the api</p> required Source code in <code>pyrevitlib/pyrevit/routes/server/__init__.py</code> <pre><code>def get_routes(api_name):\n    \"\"\"Get all registered routes for given API name.\n\n    Args:\n        api_name (str): unique name of the api\n    \"\"\"\n    return router.get_routes(api_name)\n</code></pre>"},{"location":"reference/pyrevit/routes/#pyrevit.routes.add_route","title":"<code>add_route(api_name, pattern, method, handler_func)</code>","text":"<p>Add new route for given API name.</p> <p>Parameters:</p> Name Type Description Default <code>api_name</code> <code>str</code> <p>unique name of the api</p> required <code>pattern</code> <code>str</code> <p>route pattern</p> required <code>method</code> <code>str</code> <p>method name</p> required <code>handler_func</code> <code>function</code> <p>route handler function</p> required Source code in <code>pyrevitlib/pyrevit/routes/server/__init__.py</code> <pre><code>def add_route(api_name, pattern, method, handler_func):\n    \"\"\"Add new route for given API name.\n\n    Args:\n        api_name (str): unique name of the api\n        pattern (str): route pattern\n        method (str): method name\n        handler_func (function): route handler function\n    \"\"\"\n    return router.add_route(api_name, pattern, method, handler_func)\n</code></pre>"},{"location":"reference/pyrevit/routes/#pyrevit.routes.remove_route","title":"<code>remove_route(api_name, pattern, method)</code>","text":"<p>Remove previously registered route for given API name.</p> <p>Parameters:</p> Name Type Description Default <code>api_name</code> <code>str</code> <p>unique name of the api</p> required <code>pattern</code> <code>str</code> <p>route pattern</p> required <code>method</code> <code>str</code> <p>method name</p> required Source code in <code>pyrevitlib/pyrevit/routes/server/__init__.py</code> <pre><code>def remove_route(api_name, pattern, method):\n    \"\"\"Remove previously registered route for given API name.\n\n    Args:\n        api_name (str): unique name of the api\n        pattern (str): route pattern\n        method (str): method name\n    \"\"\"\n    return router.remove_route(api_name, pattern, method)\n</code></pre>"},{"location":"reference/pyrevit/routes/#pyrevit.routes.active_routes_api","title":"<code>active_routes_api()</code>","text":"<p>Activates routes API.</p> Source code in <code>pyrevitlib/pyrevit/routes/__init__.py</code> <pre><code>def active_routes_api():\n    \"\"\"Activates routes API.\"\"\"\n    from pyrevit.routes import api\n</code></pre>"},{"location":"reference/pyrevit/routes/api/","title":"api","text":"<p>Builtin routes API.</p> <p>This module also provides the API object to be used by third-party api developers to define new apis</p>"},{"location":"reference/pyrevit/routes/api/#pyrevit.routes.api-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/routes/api/#pyrevit.routes.api.mlogger","title":"<code>mlogger = get_logger(__name__)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/routes/api/#pyrevit.routes.api.routes_api","title":"<code>routes_api = routes.API('routes')</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/routes/api/#pyrevit.routes.api-functions","title":"Functions","text":""},{"location":"reference/pyrevit/routes/api/#pyrevit.routes.api.get_status","title":"<code>get_status()</code>","text":"<p>Get server status.</p> Source code in <code>pyrevitlib/pyrevit/routes/api.py</code> <pre><code>@routes_api.route('/status', methods=['GET'])\ndef get_status():\n    \"\"\"Get server status.\"\"\"\n    return {\n        \"host\": HOST_APP.pretty_name,\n        \"username\": HOST_APP.username,\n        \"session_id\": sessioninfo.get_session_uuid(),\n        }\n</code></pre>"},{"location":"reference/pyrevit/routes/api/#pyrevit.routes.api.get_sisters","title":"<code>get_sisters()</code>","text":"<p>Get other servers running on the same machine.</p> Source code in <code>pyrevitlib/pyrevit/routes/api.py</code> <pre><code>@routes_api.route('/sisters', methods=['GET'])\ndef get_sisters():\n    \"\"\"Get other servers running on the same machine.\"\"\"\n    return [x.get_cache_data() for x in serverinfo.get_registered_servers()]\n</code></pre>"},{"location":"reference/pyrevit/routes/api/#pyrevit.routes.api.get_sisters_by_year","title":"<code>get_sisters_by_year(version)</code>","text":"<p>Get servers of specific version, running on the same machine.</p> Source code in <code>pyrevitlib/pyrevit/routes/api.py</code> <pre><code>@routes_api.route('/sisters/&lt;int:version&gt;', methods=['GET'])\ndef get_sisters_by_year(version):\n    \"\"\"Get servers of specific version, running on the same machine.\"\"\"\n    return [x.get_cache_data() for x in serverinfo.get_registered_servers()\n            if int(x.version) == version]\n</code></pre>"},{"location":"reference/pyrevit/routes/server/","title":"server","text":"<p>Handles http api routing and serving with usage similar to flask.</p>"},{"location":"reference/pyrevit/routes/server/#pyrevit.routes.server-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/routes/server/#pyrevit.routes.server.mlogger","title":"<code>mlogger = get_logger(__name__)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/routes/server/#pyrevit.routes.server-classes","title":"Classes","text":""},{"location":"reference/pyrevit/routes/server/#pyrevit.routes.server.Request","title":"<code>Request(path='/', method='GET', data=None, params=None)</code>","text":"<p>               Bases: <code>object</code></p> <p>Request wrapper object.</p> Source code in <code>pyrevitlib/pyrevit/routes/server/base.py</code> <pre><code>def __init__(self, path='/', method='GET', data=None, params=None):\n    self.path = path\n    self.method = method\n    self.data = data\n    self._headers = {}\n    self._params = params or []\n</code></pre>"},{"location":"reference/pyrevit/routes/server/#pyrevit.routes.server.Request-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/routes/server/#pyrevit.routes.server.Request.path","title":"<code>path = path</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/routes/server/#pyrevit.routes.server.Request.method","title":"<code>method = method</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/routes/server/#pyrevit.routes.server.Request.data","title":"<code>data = data</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/routes/server/#pyrevit.routes.server.Request.headers","title":"<code>headers</code>  <code>property</code>","text":"<p>Request headers dict.</p>"},{"location":"reference/pyrevit/routes/server/#pyrevit.routes.server.Request.params","title":"<code>params</code>  <code>property</code>","text":"<p>Request parameters.</p>"},{"location":"reference/pyrevit/routes/server/#pyrevit.routes.server.Request.callback_url","title":"<code>callback_url</code>  <code>property</code>","text":"<p>Request callback url, if provided in payload.</p>"},{"location":"reference/pyrevit/routes/server/#pyrevit.routes.server.Request-functions","title":"Functions","text":""},{"location":"reference/pyrevit/routes/server/#pyrevit.routes.server.Request.add_header","title":"<code>add_header(key, value)</code>","text":"<p>Add new header key:value.</p> Source code in <code>pyrevitlib/pyrevit/routes/server/base.py</code> <pre><code>def add_header(self, key, value):\n    \"\"\"Add new header key:value.\"\"\"\n    self._headers[key] = value\n</code></pre>"},{"location":"reference/pyrevit/routes/server/#pyrevit.routes.server.Response","title":"<code>Response(status=200, data=None, headers=None)</code>","text":"<p>               Bases: <code>object</code></p> <p>Response wrapper object.</p> Source code in <code>pyrevitlib/pyrevit/routes/server/base.py</code> <pre><code>def __init__(self, status=200, data=None, headers=None):\n    self.status = status\n    self.data = data\n    self._headers = headers or {}\n</code></pre>"},{"location":"reference/pyrevit/routes/server/#pyrevit.routes.server.Response-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/routes/server/#pyrevit.routes.server.Response.status","title":"<code>status = status</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/routes/server/#pyrevit.routes.server.Response.data","title":"<code>data = data</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/routes/server/#pyrevit.routes.server.Response.headers","title":"<code>headers</code>  <code>property</code>","text":"<p>Response headers dict.</p>"},{"location":"reference/pyrevit/routes/server/#pyrevit.routes.server.Response-functions","title":"Functions","text":""},{"location":"reference/pyrevit/routes/server/#pyrevit.routes.server.Response.add_header","title":"<code>add_header(key, value)</code>","text":"<p>Add new header key:value.</p> Source code in <code>pyrevitlib/pyrevit/routes/server/base.py</code> <pre><code>def add_header(self, key, value):\n    \"\"\"Add new header key:value.\"\"\"\n    self._headers[key] = value\n</code></pre>"},{"location":"reference/pyrevit/routes/server/#pyrevit.routes.server-functions","title":"Functions","text":""},{"location":"reference/pyrevit/routes/server/#pyrevit.routes.server.init","title":"<code>init()</code>","text":"<p>Initialize routes. Reset all registered routes and shutdown servers.</p> Source code in <code>pyrevitlib/pyrevit/routes/server/__init__.py</code> <pre><code>def init():\n    \"\"\"Initialize routes. Reset all registered routes and shutdown servers.\"\"\"\n    # clear all routes\n    router.reset_routes()\n    # stop existing server\n    deactivate_server()\n</code></pre>"},{"location":"reference/pyrevit/routes/server/#pyrevit.routes.server.activate_server","title":"<code>activate_server()</code>","text":"<p>Activate routes server for this host instance.</p> Source code in <code>pyrevitlib/pyrevit/routes/server/__init__.py</code> <pre><code>def activate_server():\n    \"\"\"Activate routes server for this host instance.\"\"\"\n    routes_server = envvars.get_pyrevit_env_var(envvars.ROUTES_SERVER)\n    if not routes_server:\n        try:\n            rsinfo = serverinfo.register()\n            routes_server = \\\n                server.RoutesServer(\n                    host=rsinfo.server_host,\n                    port=rsinfo.server_port\n                    )\n            routes_server.start()\n            envvars.set_pyrevit_env_var(envvars.ROUTES_SERVER, routes_server)\n            return routes_server\n        except Exception as rs_ex:\n            serverinfo.unregister()\n            mlogger.error(\"Error starting Routes server | %s\", str(rs_ex))\n</code></pre>"},{"location":"reference/pyrevit/routes/server/#pyrevit.routes.server.deactivate_server","title":"<code>deactivate_server()</code>","text":"<p>Deactivate the active routes server for this host instance.</p> Source code in <code>pyrevitlib/pyrevit/routes/server/__init__.py</code> <pre><code>def deactivate_server():\n    \"\"\"Deactivate the active routes server for this host instance.\"\"\"\n    routes_server = envvars.get_pyrevit_env_var(envvars.ROUTES_SERVER)\n    if routes_server:\n        try:\n            routes_server.stop()\n            envvars.set_pyrevit_env_var(envvars.ROUTES_SERVER, None)\n            serverinfo.unregister()\n        except Exception as rs_ex:\n            mlogger.error(\"Error stopping Routes server | %s\", str(rs_ex))\n</code></pre>"},{"location":"reference/pyrevit/routes/server/#pyrevit.routes.server.get_active_server","title":"<code>get_active_server()</code>","text":"<p>Get active routes server for this host instance.</p> Source code in <code>pyrevitlib/pyrevit/routes/server/__init__.py</code> <pre><code>def get_active_server():\n    \"\"\"Get active routes server for this host instance.\"\"\"\n    return envvars.get_pyrevit_env_var(envvars.ROUTES_SERVER)\n</code></pre>"},{"location":"reference/pyrevit/routes/server/#pyrevit.routes.server.make_response","title":"<code>make_response(data, status=OK, headers=None)</code>","text":"<p>Create Reponse object with.</p> Source code in <code>pyrevitlib/pyrevit/routes/server/__init__.py</code> <pre><code>def make_response(data, status=OK, headers=None):\n    \"\"\"Create Reponse object with.\"\"\"\n    res = Response(status=status, data=data)\n    for key, value in (headers or {}).items():\n        res.add_header(key, value)\n    return res\n</code></pre>"},{"location":"reference/pyrevit/routes/server/#pyrevit.routes.server.get_routes","title":"<code>get_routes(api_name)</code>","text":"<p>Get all registered routes for given API name.</p> <p>Parameters:</p> Name Type Description Default <code>api_name</code> <code>str</code> <p>unique name of the api</p> required Source code in <code>pyrevitlib/pyrevit/routes/server/__init__.py</code> <pre><code>def get_routes(api_name):\n    \"\"\"Get all registered routes for given API name.\n\n    Args:\n        api_name (str): unique name of the api\n    \"\"\"\n    return router.get_routes(api_name)\n</code></pre>"},{"location":"reference/pyrevit/routes/server/#pyrevit.routes.server.add_route","title":"<code>add_route(api_name, pattern, method, handler_func)</code>","text":"<p>Add new route for given API name.</p> <p>Parameters:</p> Name Type Description Default <code>api_name</code> <code>str</code> <p>unique name of the api</p> required <code>pattern</code> <code>str</code> <p>route pattern</p> required <code>method</code> <code>str</code> <p>method name</p> required <code>handler_func</code> <code>function</code> <p>route handler function</p> required Source code in <code>pyrevitlib/pyrevit/routes/server/__init__.py</code> <pre><code>def add_route(api_name, pattern, method, handler_func):\n    \"\"\"Add new route for given API name.\n\n    Args:\n        api_name (str): unique name of the api\n        pattern (str): route pattern\n        method (str): method name\n        handler_func (function): route handler function\n    \"\"\"\n    return router.add_route(api_name, pattern, method, handler_func)\n</code></pre>"},{"location":"reference/pyrevit/routes/server/#pyrevit.routes.server.remove_route","title":"<code>remove_route(api_name, pattern, method)</code>","text":"<p>Remove previously registered route for given API name.</p> <p>Parameters:</p> Name Type Description Default <code>api_name</code> <code>str</code> <p>unique name of the api</p> required <code>pattern</code> <code>str</code> <p>route pattern</p> required <code>method</code> <code>str</code> <p>method name</p> required Source code in <code>pyrevitlib/pyrevit/routes/server/__init__.py</code> <pre><code>def remove_route(api_name, pattern, method):\n    \"\"\"Remove previously registered route for given API name.\n\n    Args:\n        api_name (str): unique name of the api\n        pattern (str): route pattern\n        method (str): method name\n    \"\"\"\n    return router.remove_route(api_name, pattern, method)\n</code></pre>"},{"location":"reference/pyrevit/routes/server/base/","title":"base","text":"<p>Utility functions and types.</p>"},{"location":"reference/pyrevit/routes/server/base/#pyrevit.routes.server.base-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/routes/server/base/#pyrevit.routes.server.base.DEFAULT_SOURCE","title":"<code>DEFAULT_SOURCE = 'pyrevit.routes'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/routes/server/base/#pyrevit.routes.server.base-classes","title":"Classes","text":""},{"location":"reference/pyrevit/routes/server/base/#pyrevit.routes.server.base.Request","title":"<code>Request(path='/', method='GET', data=None, params=None)</code>","text":"<p>               Bases: <code>object</code></p> <p>Request wrapper object.</p> Source code in <code>pyrevitlib/pyrevit/routes/server/base.py</code> <pre><code>def __init__(self, path='/', method='GET', data=None, params=None):\n    self.path = path\n    self.method = method\n    self.data = data\n    self._headers = {}\n    self._params = params or []\n</code></pre>"},{"location":"reference/pyrevit/routes/server/base/#pyrevit.routes.server.base.Request-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/routes/server/base/#pyrevit.routes.server.base.Request.path","title":"<code>path = path</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/routes/server/base/#pyrevit.routes.server.base.Request.method","title":"<code>method = method</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/routes/server/base/#pyrevit.routes.server.base.Request.data","title":"<code>data = data</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/routes/server/base/#pyrevit.routes.server.base.Request.headers","title":"<code>headers</code>  <code>property</code>","text":"<p>Request headers dict.</p>"},{"location":"reference/pyrevit/routes/server/base/#pyrevit.routes.server.base.Request.params","title":"<code>params</code>  <code>property</code>","text":"<p>Request parameters.</p>"},{"location":"reference/pyrevit/routes/server/base/#pyrevit.routes.server.base.Request.callback_url","title":"<code>callback_url</code>  <code>property</code>","text":"<p>Request callback url, if provided in payload.</p>"},{"location":"reference/pyrevit/routes/server/base/#pyrevit.routes.server.base.Request-functions","title":"Functions","text":""},{"location":"reference/pyrevit/routes/server/base/#pyrevit.routes.server.base.Request.add_header","title":"<code>add_header(key, value)</code>","text":"<p>Add new header key:value.</p> Source code in <code>pyrevitlib/pyrevit/routes/server/base.py</code> <pre><code>def add_header(self, key, value):\n    \"\"\"Add new header key:value.\"\"\"\n    self._headers[key] = value\n</code></pre>"},{"location":"reference/pyrevit/routes/server/base/#pyrevit.routes.server.base.Response","title":"<code>Response(status=200, data=None, headers=None)</code>","text":"<p>               Bases: <code>object</code></p> <p>Response wrapper object.</p> Source code in <code>pyrevitlib/pyrevit/routes/server/base.py</code> <pre><code>def __init__(self, status=200, data=None, headers=None):\n    self.status = status\n    self.data = data\n    self._headers = headers or {}\n</code></pre>"},{"location":"reference/pyrevit/routes/server/base/#pyrevit.routes.server.base.Response-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/routes/server/base/#pyrevit.routes.server.base.Response.status","title":"<code>status = status</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/routes/server/base/#pyrevit.routes.server.base.Response.data","title":"<code>data = data</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/routes/server/base/#pyrevit.routes.server.base.Response.headers","title":"<code>headers</code>  <code>property</code>","text":"<p>Response headers dict.</p>"},{"location":"reference/pyrevit/routes/server/base/#pyrevit.routes.server.base.Response-functions","title":"Functions","text":""},{"location":"reference/pyrevit/routes/server/base/#pyrevit.routes.server.base.Response.add_header","title":"<code>add_header(key, value)</code>","text":"<p>Add new header key:value.</p> Source code in <code>pyrevitlib/pyrevit/routes/server/base.py</code> <pre><code>def add_header(self, key, value):\n    \"\"\"Add new header key:value.\"\"\"\n    self._headers[key] = value\n</code></pre>"},{"location":"reference/pyrevit/routes/server/exceptions/","title":"exceptions","text":"<p>Route custom exceptions.</p>"},{"location":"reference/pyrevit/routes/server/exceptions/#pyrevit.routes.server.exceptions-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/routes/server/exceptions/#pyrevit.routes.server.exceptions-classes","title":"Classes","text":""},{"location":"reference/pyrevit/routes/server/exceptions/#pyrevit.routes.server.exceptions.ServerException","title":"<code>ServerException(message, exception_type, exception_traceback)</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Server error.</p> Source code in <code>pyrevitlib/pyrevit/routes/server/exceptions.py</code> <pre><code>def __init__(self, message, exception_type, exception_traceback):\n    message = \"Server error (%s): %s\\n%s\\n\" % (\n        exception_type.__name__ if exception_type else \"\",\n        message,\n        exception_traceback\n    )\n    super(ServerException, self).__init__(message)\n    self.status = 500 # https://httpstatuses.com/500\n</code></pre>"},{"location":"reference/pyrevit/routes/server/exceptions/#pyrevit.routes.server.exceptions.ServerException-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/routes/server/exceptions/#pyrevit.routes.server.exceptions.ServerException.status","title":"<code>status = 500</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/routes/server/exceptions/#pyrevit.routes.server.exceptions.APINotDefinedException","title":"<code>APINotDefinedException(api_name)</code>","text":"<p>               Bases: <code>Exception</code></p> <p>API is not defined exception.</p> Source code in <code>pyrevitlib/pyrevit/routes/server/exceptions.py</code> <pre><code>def __init__(self, api_name):\n    message = \"API is not defined: \\\"%s\\\"\" % api_name\n    super(APINotDefinedException, self).__init__(message)\n    self.status = 404 # https://httpstatuses.com/404\n</code></pre>"},{"location":"reference/pyrevit/routes/server/exceptions/#pyrevit.routes.server.exceptions.APINotDefinedException-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/routes/server/exceptions/#pyrevit.routes.server.exceptions.APINotDefinedException.status","title":"<code>status = 404</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/routes/server/exceptions/#pyrevit.routes.server.exceptions.RouteHandlerNotDefinedException","title":"<code>RouteHandlerNotDefinedException(api_name, route, method)</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Route does not exits exception.</p> Source code in <code>pyrevitlib/pyrevit/routes/server/exceptions.py</code> <pre><code>def __init__(self, api_name, route, method):\n    message = \\\n    \"Route does not exits: \\\"%s %s%s\\\"\" % (method, api_name, route)\n    super(RouteHandlerNotDefinedException, self).__init__(message)\n    self.status = 404 # https://httpstatuses.com/404\n</code></pre>"},{"location":"reference/pyrevit/routes/server/exceptions/#pyrevit.routes.server.exceptions.RouteHandlerNotDefinedException-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/routes/server/exceptions/#pyrevit.routes.server.exceptions.RouteHandlerNotDefinedException.status","title":"<code>status = 404</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/routes/server/exceptions/#pyrevit.routes.server.exceptions.RouteHandlerDeniedException","title":"<code>RouteHandlerDeniedException(request)</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Route handler was denied by host.</p> Source code in <code>pyrevitlib/pyrevit/routes/server/exceptions.py</code> <pre><code>def __init__(self, request):\n    message = \"Route handler was denied by host: \\\"%s\\\"\" % request.route\n    super(RouteHandlerDeniedException, self).__init__(message)\n    self.status = 406 # https://httpstatuses.com/406\n    self.source = HOST_APP.pretty_name\n</code></pre>"},{"location":"reference/pyrevit/routes/server/exceptions/#pyrevit.routes.server.exceptions.RouteHandlerDeniedException-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/routes/server/exceptions/#pyrevit.routes.server.exceptions.RouteHandlerDeniedException.status","title":"<code>status = 406</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/routes/server/exceptions/#pyrevit.routes.server.exceptions.RouteHandlerDeniedException.source","title":"<code>source = HOST_APP.pretty_name</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/routes/server/exceptions/#pyrevit.routes.server.exceptions.RouteHandlerTimedOutException","title":"<code>RouteHandlerTimedOutException(request)</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Route handler was timed out by host.</p> Source code in <code>pyrevitlib/pyrevit/routes/server/exceptions.py</code> <pre><code>def __init__(self, request):\n    message = \"Route handler was timed out by host: \\\"%s\\\"\" % request.route\n    super(RouteHandlerTimedOutException, self).__init__(message)\n    self.status = 408 # https://httpstatuses.com/408\n    self.source = HOST_APP.pretty_name\n</code></pre>"},{"location":"reference/pyrevit/routes/server/exceptions/#pyrevit.routes.server.exceptions.RouteHandlerTimedOutException-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/routes/server/exceptions/#pyrevit.routes.server.exceptions.RouteHandlerTimedOutException.status","title":"<code>status = 408</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/routes/server/exceptions/#pyrevit.routes.server.exceptions.RouteHandlerTimedOutException.source","title":"<code>source = HOST_APP.pretty_name</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/routes/server/exceptions/#pyrevit.routes.server.exceptions.RouteHandlerIsNotCallableException","title":"<code>RouteHandlerIsNotCallableException(hndlr_name)</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Route handler is not callable.</p> Source code in <code>pyrevitlib/pyrevit/routes/server/exceptions.py</code> <pre><code>def __init__(self, hndlr_name):\n    message = \"Route handler is not callable: \\\"%s\\\"\" % hndlr_name\n    super(RouteHandlerIsNotCallableException, self).__init__(message)\n    self.status = 405 # https://httpstatuses.com/405\n    self.source = HOST_APP.pretty_name\n</code></pre>"},{"location":"reference/pyrevit/routes/server/exceptions/#pyrevit.routes.server.exceptions.RouteHandlerIsNotCallableException-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/routes/server/exceptions/#pyrevit.routes.server.exceptions.RouteHandlerIsNotCallableException.status","title":"<code>status = 405</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/routes/server/exceptions/#pyrevit.routes.server.exceptions.RouteHandlerIsNotCallableException.source","title":"<code>source = HOST_APP.pretty_name</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/routes/server/exceptions/#pyrevit.routes.server.exceptions.RouteHandlerExecException","title":"<code>RouteHandlerExecException(message)</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Route handler exception.</p> Source code in <code>pyrevitlib/pyrevit/routes/server/exceptions.py</code> <pre><code>def __init__(self, message):\n    message = \"Route exception in Execute: %s\" % message\n    super(RouteHandlerExecException, self).__init__(message)\n    self.status = 408 # https://httpstatuses.com/408\n    self.source = HOST_APP.pretty_name\n</code></pre>"},{"location":"reference/pyrevit/routes/server/exceptions/#pyrevit.routes.server.exceptions.RouteHandlerExecException-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/routes/server/exceptions/#pyrevit.routes.server.exceptions.RouteHandlerExecException.status","title":"<code>status = 408</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/routes/server/exceptions/#pyrevit.routes.server.exceptions.RouteHandlerExecException.source","title":"<code>source = HOST_APP.pretty_name</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/routes/server/exceptions/#pyrevit.routes.server.exceptions.RouteHandlerException","title":"<code>RouteHandlerException(message, exception_type, exception_traceback, clsx_message, clsx_source, clsx_stacktrace, clsx_targetsite)</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Route handler exception.</p> Source code in <code>pyrevitlib/pyrevit/routes/server/exceptions.py</code> <pre><code>def __init__(self,\n             message, exception_type, exception_traceback,\n             clsx_message, clsx_source, clsx_stacktrace, clsx_targetsite):\n    message = \"%s: %s\\n%s\\n\" \\\n              \"Script Executor Traceback:\\n\" \\\n              \"%s: %s\\n%s\\n%s\" % (\n                  exception_type.__name__ if exception_type else \"\",\n                  message,\n                  exception_traceback,\n                  clsx_source,\n                  clsx_message,\n                  clsx_stacktrace,\n                  clsx_targetsite\n              )\n    super(RouteHandlerException, self).__init__(message)\n    self.status = 408 # https://httpstatuses.com/408\n    self.source = HOST_APP.pretty_name\n</code></pre>"},{"location":"reference/pyrevit/routes/server/exceptions/#pyrevit.routes.server.exceptions.RouteHandlerException-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/routes/server/exceptions/#pyrevit.routes.server.exceptions.RouteHandlerException.status","title":"<code>status = 408</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/routes/server/exceptions/#pyrevit.routes.server.exceptions.RouteHandlerException.source","title":"<code>source = HOST_APP.pretty_name</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/routes/server/handler/","title":"handler","text":"<p>Revit-aware event handler.</p>"},{"location":"reference/pyrevit/routes/server/handler/#pyrevit.routes.server.handler-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/routes/server/handler/#pyrevit.routes.server.handler.mlogger","title":"<code>mlogger = get_logger(__name__)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/routes/server/handler/#pyrevit.routes.server.handler.ARGS_REQUEST","title":"<code>ARGS_REQUEST = 'request'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/routes/server/handler/#pyrevit.routes.server.handler.ARGS_UIAPP","title":"<code>ARGS_UIAPP = 'uiapp'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/routes/server/handler/#pyrevit.routes.server.handler.ARGS_UIDOC","title":"<code>ARGS_UIDOC = 'uidoc'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/routes/server/handler/#pyrevit.routes.server.handler.ARGS_DOC","title":"<code>ARGS_DOC = 'doc'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/routes/server/handler/#pyrevit.routes.server.handler.RESERVED_VAR_NAMES","title":"<code>RESERVED_VAR_NAMES = [ARGS_REQUEST, ARGS_UIAPP]</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/routes/server/handler/#pyrevit.routes.server.handler-classes","title":"Classes","text":""},{"location":"reference/pyrevit/routes/server/handler/#pyrevit.routes.server.handler.RequestHandler","title":"<code>RequestHandler</code>","text":"<p>               Bases: <code>IExternalEventHandler</code></p> <p>Revit external event handler type.</p>"},{"location":"reference/pyrevit/routes/server/handler/#pyrevit.routes.server.handler.RequestHandler-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/routes/server/handler/#pyrevit.routes.server.handler.RequestHandler.request","title":"<code>request</code>  <code>property</code> <code>writable</code>","text":"<p>Get registered request.</p>"},{"location":"reference/pyrevit/routes/server/handler/#pyrevit.routes.server.handler.RequestHandler.handler","title":"<code>handler</code>  <code>property</code> <code>writable</code>","text":"<p>Get registered handler.</p>"},{"location":"reference/pyrevit/routes/server/handler/#pyrevit.routes.server.handler.RequestHandler.response","title":"<code>response</code>  <code>property</code>","text":"<p>Get registered response.</p>"},{"location":"reference/pyrevit/routes/server/handler/#pyrevit.routes.server.handler.RequestHandler.done","title":"<code>done</code>  <code>property</code>","text":"<p>Check if execution of handler is completed and response is set.</p>"},{"location":"reference/pyrevit/routes/server/handler/#pyrevit.routes.server.handler.RequestHandler-functions","title":"Functions","text":""},{"location":"reference/pyrevit/routes/server/handler/#pyrevit.routes.server.handler.RequestHandler.reset","title":"<code>reset()</code>","text":"<p>Reset internals for new execution.</p> Source code in <code>pyrevitlib/pyrevit/routes/server/handler.py</code> <pre><code>def reset(self):\n    \"\"\"Reset internals for new execution.\"\"\"\n    with self._lock: #pylint: disable=not-context-manager\n        self._response = None\n        self._done = False\n</code></pre>"},{"location":"reference/pyrevit/routes/server/handler/#pyrevit.routes.server.handler.RequestHandler.join","title":"<code>join()</code>","text":"<p>Allow other threads to call this method and wait for completion.</p> Source code in <code>pyrevitlib/pyrevit/routes/server/handler.py</code> <pre><code>def join(self):\n    \"\"\"Allow other threads to call this method and wait for completion.\"\"\"\n    # wait until handler signals completion\n    while True:\n        with self._lock:\n            if self._done:\n                return\n</code></pre>"},{"location":"reference/pyrevit/routes/server/handler/#pyrevit.routes.server.handler.RequestHandler.run_handler","title":"<code>run_handler(handler, kwargs)</code>  <code>staticmethod</code>","text":"<p>Execute the handler function and return base.Response.</p> Source code in <code>pyrevitlib/pyrevit/routes/server/handler.py</code> <pre><code>@staticmethod\ndef run_handler(handler, kwargs):\n    \"\"\"Execute the handler function and return base.Response.\"\"\"\n    response = None\n    kwargs = kwargs or {}\n    if handler and callable(handler):\n        try:\n            # now call handler, and save response\n            response = handler(**kwargs) #pylint: disable=not-callable\n        except Exception as hndlr_ex:\n            # grab original CLS exception\n            clsx = hndlr_ex.clsException #pylint: disable=no-member\n            # get exception info\n            sys.exc_type, sys.exc_value, sys.exc_traceback = \\\n                sys.exc_info()\n            # go back one frame to grab exception stack from handler\n            # and grab traceback lines\n            tb_report = ''.join(\n                traceback.format_tb(sys.exc_traceback)[1:]\n            )\n            # wrap all the exception info\n            response = excp.RouteHandlerException(\n                message=str(hndlr_ex),\n                exception_type=sys.exc_type,\n                exception_traceback=tb_report,\n                clsx_message=clsx.Message,\n                clsx_source=clsx.Source,\n                clsx_stacktrace=clsx.StackTrace,\n                clsx_targetsite=clsx.TargetSite.ToString()\n                )\n    else:\n        response = \\\n            excp.RouteHandlerIsNotCallableException(handler.__name__)\n    return response\n</code></pre>"},{"location":"reference/pyrevit/routes/server/handler/#pyrevit.routes.server.handler.RequestHandler.make_callback","title":"<code>make_callback(callback_url, response)</code>  <code>staticmethod</code>","text":"<p>Prepare request from base.Response and submit to callback url.</p> Source code in <code>pyrevitlib/pyrevit/routes/server/handler.py</code> <pre><code>@staticmethod\ndef make_callback(callback_url, response):\n    \"\"\"Prepare request from base.Response and submit to callback url.\"\"\"\n    # parse response object\n    r = RequestHandler.parse_response(response)\n    # prepare and submit request\n    make_request(url=callback_url, headers=r.headers, data=r.data)\n</code></pre>"},{"location":"reference/pyrevit/routes/server/handler/#pyrevit.routes.server.handler.RequestHandler.wants_api_context","title":"<code>wants_api_context(handler)</code>  <code>staticmethod</code>","text":"<p>Check if handler needs host api context.</p> Source code in <code>pyrevitlib/pyrevit/routes/server/handler.py</code> <pre><code>@staticmethod\ndef wants_api_context(handler):\n    \"\"\"Check if handler needs host api context.\"\"\"\n    return modutils.has_any_arguments(\n        function_obj=handler,\n        arg_name_list=[\n            ARGS_UIAPP,\n            ARGS_UIDOC,\n            ARGS_DOC\n        ])\n</code></pre>"},{"location":"reference/pyrevit/routes/server/handler/#pyrevit.routes.server.handler.RequestHandler.prepare_handler_kwargs","title":"<code>prepare_handler_kwargs(request, handler, uiapp=None)</code>  <code>staticmethod</code>","text":"<p>Prepare call arguments for handler function.</p> Source code in <code>pyrevitlib/pyrevit/routes/server/handler.py</code> <pre><code>@staticmethod\ndef prepare_handler_kwargs(request, handler, uiapp=None):\n    \"\"\"Prepare call arguments for handler function.\"\"\"\n    uidoc = doc = None\n    if uiapp:\n        uidoc = getattr(uiapp, 'ActiveUIDocument', None)\n        if uidoc:\n            doc = getattr(uidoc, 'Document', None)\n\n    kwargs = {}\n    kwargs[ARGS_REQUEST] = request\n    # if route pattern has parameter, provide those as well\n    if request.params:\n        kwargs.update({x.key:x.value for x in request.params})\n    # add host api context params\n    kwargs[ARGS_UIAPP] = uiapp\n    kwargs[ARGS_UIDOC] = uidoc\n    kwargs[ARGS_DOC] = doc\n\n    return modutils.filter_kwargs(handler, kwargs)\n</code></pre>"},{"location":"reference/pyrevit/routes/server/handler/#pyrevit.routes.server.handler.RequestHandler.parse_response","title":"<code>parse_response(response)</code>  <code>staticmethod</code>","text":"<p>Parse any given response data and return Response object.</p> Source code in <code>pyrevitlib/pyrevit/routes/server/handler.py</code> <pre><code>@staticmethod\ndef parse_response(response):\n    \"\"\"Parse any given response data and return Response object.\"\"\"\n    status = base.OK\n    headers = {}\n    data = None\n\n    # can not directly check for isinstance(x, Response)\n    # this module is executed on a different Engine than the\n    # script that registered the request handler function, thus\n    # the Response in script engine does not match Response\n    # registered when this module was loaded\n    #\n    # now process reponse based on obj type\n    # it is an exception is has .message\n    # write the exeption to output and return\n    if hasattr(response, 'message'):\n        status = \\\n            response.status if hasattr(response, 'status') \\\n                else base.INTERNAL_SERVER_ERROR\n        headers = {'Content-Type': 'application/json'}\n        data = json.dumps(\n            {\n                \"exception\": {\n                    \"source\": response.source\n                              if hasattr(response, 'source')\n                              else base.DEFAULT_SOURCE,\n                    \"message\": str(response)\n                }\n            }\n        )\n\n    # plain text response\n    elif isinstance(response, str):\n        # keey default status\n        headers['Content-Type'] = 'text/html'\n        data = json.dumps(response)\n\n    # any obj that has .status and .data, OR\n    # any json serializable object\n    # serialize before sending results\n    # in case exceptions happen in serialization,\n    # there are no double status in response header\n    else:\n        # determine status\n        status = getattr(response, 'status', base.OK)\n\n        # determine headers\n        headers.update(\n            getattr(response, 'headers', {})\n            )\n\n        # determine data, or dump the response object\n        data = getattr(response, 'data', response)\n\n        # serialize data\n        if data is not None:\n            data = json.dumps(data)\n            headers['Content-Type'] = 'application/json'\n\n    return base.Response(status=status, data=data, headers=headers)\n</code></pre>"},{"location":"reference/pyrevit/routes/server/handler/#pyrevit.routes.server.handler.RequestHandler.Execute","title":"<code>Execute(uiapp)</code>","text":"<p>This method is called to handle the external event.</p> Source code in <code>pyrevitlib/pyrevit/routes/server/handler.py</code> <pre><code>def Execute(self, uiapp):\n    \"\"\"This method is called to handle the external event.\"\"\"\n    # grab data. getters are thread-safe\n    handler = self.handler\n    request = self.request\n    response = None\n\n    try:\n        # process necessary arguments for the handler\n        kwargs = RequestHandler.prepare_handler_kwargs(\n            request,\n            handler,\n            uiapp=uiapp\n            )\n        # run handler with prepared arguments, and grab the response\n        response = self.run_handler(handler, kwargs)\n    except Exception as exec_ex:\n        # create exception response\n        response = excp.RouteHandlerExecException(message=str(exec_ex))\n    finally:\n        # send response to callback url if requested\n        if request.callback_url:\n            RequestHandler.make_callback(request.callback_url, response)\n        # or set the response to be picked up by http request handler\n        else:\n            self._set_response(response)\n</code></pre>"},{"location":"reference/pyrevit/routes/server/handler/#pyrevit.routes.server.handler.RequestHandler.GetName","title":"<code>GetName()</code>","text":"<p>String identification of the event handler.</p> Source code in <code>pyrevitlib/pyrevit/routes/server/handler.py</code> <pre><code>def GetName(self):\n    \"\"\"String identification of the event handler.\"\"\"\n    return self.__class__.__name__\n</code></pre>"},{"location":"reference/pyrevit/routes/server/handler/#pyrevit.routes.server.handler-functions","title":"Functions","text":""},{"location":"reference/pyrevit/routes/server/router/","title":"router","text":"<p>Route dictionary.</p>"},{"location":"reference/pyrevit/routes/server/router/#pyrevit.routes.server.router-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/routes/server/router/#pyrevit.routes.server.router.mlogger","title":"<code>mlogger = get_logger(__name__)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/routes/server/router/#pyrevit.routes.server.router.ROUTE_VAR_SEP","title":"<code>ROUTE_VAR_SEP = ':'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/routes/server/router/#pyrevit.routes.server.router.Route","title":"<code>Route = namedtuple('Route', ['pattern', 'method'])</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/routes/server/router/#pyrevit.routes.server.router.RouteParam","title":"<code>RouteParam = namedtuple('RouteParam', ['key', 'value'])</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/routes/server/router/#pyrevit.routes.server.router-functions","title":"Functions","text":""},{"location":"reference/pyrevit/routes/server/router/#pyrevit.routes.server.router.route_match","title":"<code>route_match(route, path, method)</code>","text":"<p>Test if route pattern matches given request path.</p> Source code in <code>pyrevitlib/pyrevit/routes/server/router.py</code> <pre><code>def route_match(route, path, method):\n    \"\"\"Test if route pattern matches given request path.\"\"\"\n    finder_pattern = _make_finder_pattern(route.pattern)\n    # if same method and matching pattern\n    if route.method == method \\\n            and re.match(finder_pattern, path):\n        # check variable data types\n        # e.g. paths below are different\n        # api/v1/posts/&lt;int:pid&gt; matches\n        #     api/v1/posts/12\n        # api/v1/posts/&lt;int:pid&gt; does not match\n        #     api/v1/posts/661a4f7a-7377-11ea-9494-acde48001122\n        for key, val in zip(\n                _find_pattern_keys(route.pattern),\n                _find_pattern_values(finder_pattern, path)\n            ):\n            if ROUTE_VAR_SEP in key:\n                cast, key = key.split(ROUTE_VAR_SEP)\n                try:\n                    val = _cast_value(cast, val)\n                except Exception:\n                    # if any of variable types does not match, say no\n                    return False\n        # if all variable types matched, say yes\n        return True\n    # otherwise say no\n    return False\n</code></pre>"},{"location":"reference/pyrevit/routes/server/router/#pyrevit.routes.server.router.extract_route_params","title":"<code>extract_route_params(route_pattern, request_path)</code>","text":"<p>Extracts route params from request path based on pattern.</p> <p>Examples:</p> <p><pre><code>extract_route_params('api/v1/posts/&lt;int:id&gt;', 'api/v1/posts/12')\n</code></pre> [] Source code in <code>pyrevitlib/pyrevit/routes/server/router.py</code> <pre><code>def extract_route_params(route_pattern, request_path):\n    \"\"\"Extracts route params from request path based on pattern.\n\n    Examples:\n        ```python\n        extract_route_params('api/v1/posts/&lt;int:id&gt;', 'api/v1/posts/12')\n        ```\n        [&lt;RouteParam key:id value=12&gt;]\n    \"\"\"\n    finder_pattern = _make_finder_pattern(route_pattern)\n    route_params = []\n    for key, val in zip(\n            _find_pattern_keys(route_pattern),\n            _find_pattern_values(finder_pattern, request_path)\n        ):\n        if ROUTE_VAR_SEP in key:\n            cast, key = key.split(ROUTE_VAR_SEP)\n            try:\n                val = _cast_value(cast, val)\n            except Exception as cast_ex:\n                mlogger.debug(\n                    'Cast error %s -&gt; %s | %s', val, cast, str(cast_ex)\n                    )\n        route_params.append(\n            RouteParam(key=key, value=val)\n        )\n    return route_params\n</code></pre>"},{"location":"reference/pyrevit/routes/server/router/#pyrevit.routes.server.router.reset_routes","title":"<code>reset_routes()</code>","text":"<p>Reset registered APIs and routes.</p> Source code in <code>pyrevitlib/pyrevit/routes/server/router.py</code> <pre><code>def reset_routes():\n    \"\"\"Reset registered APIs and routes.\"\"\"\n    envvars.set_pyrevit_env_var(envvars.ROUTES_ROUTES, {})\n</code></pre>"},{"location":"reference/pyrevit/routes/server/router/#pyrevit.routes.server.router.get_routes","title":"<code>get_routes(api_name)</code>","text":"<p>Get all registered routes for given API name.</p> <p>Parameters:</p> Name Type Description Default <code>api_name</code> <code>str</code> <p>unique name of the api</p> required <p>Returns:</p> Type Description <code>dict[str, Caller[]]</code> <p>registered routes</p> Source code in <code>pyrevitlib/pyrevit/routes/server/router.py</code> <pre><code>def get_routes(api_name):\n    \"\"\"Get all registered routes for given API name.\n\n    Args:\n        api_name (str): unique name of the api\n\n    Returns:\n        (dict[str, Caller[]]): registered routes\n    \"\"\"\n    if api_name is None:\n        raise Exception(\"API name can not be None.\")\n\n    routes_map = envvars.get_pyrevit_env_var(envvars.ROUTES_ROUTES)\n    if routes_map is None:\n        routes_map = {}\n        envvars.set_pyrevit_env_var(envvars.ROUTES_ROUTES, routes_map)\n\n    if api_name in routes_map:\n        return routes_map[api_name]\n    else:\n        app_routes = {}\n        routes_map[api_name] = app_routes\n        return app_routes\n</code></pre>"},{"location":"reference/pyrevit/routes/server/router/#pyrevit.routes.server.router.get_route_handler","title":"<code>get_route_handler(api_name, path, method)</code>","text":"<p>Return registered handler for given API, path, and method.</p> <p>Parameters:</p> Name Type Description Default <code>api_name</code> <code>str</code> <p>unique name of the api</p> required <code>path</code> <code>str</code> <p>request path</p> required <code>method</code> <code>str</code> <p>method name</p> required <p>Returns:</p> Name Type Description <code>api_route</code> <code>Route</code> <p>API route</p> <code>route_handler</code> <code>Caller</code> <p>registered route handler function</p> Source code in <code>pyrevitlib/pyrevit/routes/server/router.py</code> <pre><code>def get_route_handler(api_name, path, method):\n    \"\"\"Return registered handler for given API, path, and method.\n\n    Args:\n        api_name (str): unique name of the api\n        path (str): request path\n        method (str): method name\n\n    Returns:\n        api_route (Route): API route\n        route_handler (Caller): registered route handler function\n    \"\"\"\n    for api_route, route_handler in get_routes(api_name).items():\n        if route_match(api_route, path, method):\n            return api_route, route_handler\n    return None, None\n</code></pre>"},{"location":"reference/pyrevit/routes/server/router/#pyrevit.routes.server.router.add_route","title":"<code>add_route(api_name, pattern, method, handler_func)</code>","text":"<p>Add new route for given API name.</p> <p>Parameters:</p> Name Type Description Default <code>api_name</code> <code>str</code> <p>unique name of the api</p> required <code>pattern</code> <code>str</code> <p>route pattern</p> required <code>method</code> <code>str</code> <p>method name</p> required <code>handler_func</code> <code>function</code> <p>route handler function</p> required Source code in <code>pyrevitlib/pyrevit/routes/server/router.py</code> <pre><code>def add_route(api_name, pattern, method, handler_func):\n    \"\"\"Add new route for given API name.\n\n    Args:\n        api_name (str): unique name of the api\n        pattern (str): route pattern\n        method (str): method name\n        handler_func (function): route handler function\n    \"\"\"\n    if _validate_pattern(pattern):\n        route = Route(pattern=pattern, method=method)\n        app_routes = get_routes(api_name)\n        app_routes[route] = handler_func\n    else:\n        mlogger.error('Route pattern is invalid: %s', pattern)\n</code></pre>"},{"location":"reference/pyrevit/routes/server/router/#pyrevit.routes.server.router.remove_route","title":"<code>remove_route(api_name, pattern, method)</code>","text":"<p>Remove prevriously defined route for given API name.</p> <p>Parameters:</p> Name Type Description Default <code>api_name</code> <code>str</code> <p>unique name of the api</p> required <code>pattern</code> <code>str</code> <p>route pattern</p> required <code>method</code> <code>str</code> <p>method name</p> required Source code in <code>pyrevitlib/pyrevit/routes/server/router.py</code> <pre><code>def remove_route(api_name, pattern, method):\n    \"\"\"Remove prevriously defined route for given API name.\n\n    Args:\n        api_name (str): unique name of the api\n        pattern (str): route pattern\n        method (str): method name\n    \"\"\"\n    route = Route(pattern=pattern, method=method)\n    app_routes = get_routes(api_name)\n    app_routes.pop(route)\n</code></pre>"},{"location":"reference/pyrevit/routes/server/server/","title":"server","text":"<p>Routes HTTP Server.</p>"},{"location":"reference/pyrevit/routes/server/server/#pyrevit.routes.server.server-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/routes/server/server/#pyrevit.routes.server.server.mlogger","title":"<code>mlogger = get_logger(__name__)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/routes/server/server/#pyrevit.routes.server.server.REQUEST_HNDLR","title":"<code>REQUEST_HNDLR = handler.RequestHandler()</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/routes/server/server/#pyrevit.routes.server.server.EVENT_HNDLR","title":"<code>EVENT_HNDLR = UI.ExternalEvent.Create(REQUEST_HNDLR)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/routes/server/server/#pyrevit.routes.server.server-classes","title":"Classes","text":""},{"location":"reference/pyrevit/routes/server/server/#pyrevit.routes.server.server.HttpRequestHandler","title":"<code>HttpRequestHandler</code>","text":"<p>               Bases: <code>BaseHTTPRequestHandler</code></p> <p>HTTP Requests Handler.</p>"},{"location":"reference/pyrevit/routes/server/server/#pyrevit.routes.server.server.HttpRequestHandler-functions","title":"Functions","text":""},{"location":"reference/pyrevit/routes/server/server/#pyrevit.routes.server.server.HttpRequestHandler.do_POST","title":"<code>do_POST()</code>","text":"Source code in <code>pyrevitlib/pyrevit/routes/server/server.py</code> <pre><code>def do_POST(self):\n    self._process_request(method='POST')\n</code></pre>"},{"location":"reference/pyrevit/routes/server/server/#pyrevit.routes.server.server.HttpRequestHandler.do_GET","title":"<code>do_GET()</code>","text":"Source code in <code>pyrevitlib/pyrevit/routes/server/server.py</code> <pre><code>def do_GET(self):\n    self._process_request(method='GET')\n</code></pre>"},{"location":"reference/pyrevit/routes/server/server/#pyrevit.routes.server.server.HttpRequestHandler.do_PUT","title":"<code>do_PUT()</code>","text":"Source code in <code>pyrevitlib/pyrevit/routes/server/server.py</code> <pre><code>def do_PUT(self):\n    self._process_request(method='PUT')\n</code></pre>"},{"location":"reference/pyrevit/routes/server/server/#pyrevit.routes.server.server.HttpRequestHandler.do_DELETE","title":"<code>do_DELETE()</code>","text":"Source code in <code>pyrevitlib/pyrevit/routes/server/server.py</code> <pre><code>def do_DELETE(self):\n    self._process_request(method='DELETE')\n</code></pre>"},{"location":"reference/pyrevit/routes/server/server/#pyrevit.routes.server.server.HttpRequestHandler.do_HEAD","title":"<code>do_HEAD()</code>","text":"Source code in <code>pyrevitlib/pyrevit/routes/server/server.py</code> <pre><code>def do_HEAD(self):\n    self._process_request(method='HEAD')\n</code></pre>"},{"location":"reference/pyrevit/routes/server/server/#pyrevit.routes.server.server.HttpRequestHandler.do_CONNECT","title":"<code>do_CONNECT()</code>","text":"Source code in <code>pyrevitlib/pyrevit/routes/server/server.py</code> <pre><code>def do_CONNECT(self):\n    self._process_request(method='CONNECT')\n</code></pre>"},{"location":"reference/pyrevit/routes/server/server/#pyrevit.routes.server.server.HttpRequestHandler.do_OPTIONS","title":"<code>do_OPTIONS()</code>","text":"Source code in <code>pyrevitlib/pyrevit/routes/server/server.py</code> <pre><code>def do_OPTIONS(self):\n    self._process_request(method='OPTIONS')\n</code></pre>"},{"location":"reference/pyrevit/routes/server/server/#pyrevit.routes.server.server.HttpRequestHandler.do_TRACE","title":"<code>do_TRACE()</code>","text":"Source code in <code>pyrevitlib/pyrevit/routes/server/server.py</code> <pre><code>def do_TRACE(self):\n    self._process_request(method='TRACE')\n</code></pre>"},{"location":"reference/pyrevit/routes/server/server/#pyrevit.routes.server.server.HttpRequestHandler.do_PATCH","title":"<code>do_PATCH()</code>","text":"Source code in <code>pyrevitlib/pyrevit/routes/server/server.py</code> <pre><code>def do_PATCH(self):\n    self._process_request(method='PATCH')\n</code></pre>"},{"location":"reference/pyrevit/routes/server/server/#pyrevit.routes.server.server.ThreadedHttpServer","title":"<code>ThreadedHttpServer</code>","text":"<p>               Bases: <code>ThreadingMixIn</code>, <code>HTTPServer</code></p> <p>Threaded HTTP server.</p>"},{"location":"reference/pyrevit/routes/server/server/#pyrevit.routes.server.server.ThreadedHttpServer-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/routes/server/server/#pyrevit.routes.server.server.ThreadedHttpServer.allow_reuse_address","title":"<code>allow_reuse_address = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/routes/server/server/#pyrevit.routes.server.server.ThreadedHttpServer-functions","title":"Functions","text":""},{"location":"reference/pyrevit/routes/server/server/#pyrevit.routes.server.server.ThreadedHttpServer.shutdown","title":"<code>shutdown()</code>","text":"Source code in <code>pyrevitlib/pyrevit/routes/server/server.py</code> <pre><code>def shutdown(self):\n    self.socket.close()\n    HTTPServer.shutdown(self)\n</code></pre>"},{"location":"reference/pyrevit/routes/server/server/#pyrevit.routes.server.server.RoutesServer","title":"<code>RoutesServer(host, port)</code>","text":"<p>               Bases: <code>object</code></p> <p>Route server thread handler.</p> <p>It runs an HTTP server on the given host and port.</p> <p>Parameters:</p> Name Type Description Default <code>host</code> <code>str</code> <p>host</p> required <code>port</code> <code>int</code> <p>port</p> required Source code in <code>pyrevitlib/pyrevit/routes/server/server.py</code> <pre><code>def __init__(self, host, port):\n    self.server = ThreadedHttpServer((host, port), HttpRequestHandler)\n    self.host = host\n    self.port = port\n    self.start()\n</code></pre>"},{"location":"reference/pyrevit/routes/server/server/#pyrevit.routes.server.server.RoutesServer-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/routes/server/server/#pyrevit.routes.server.server.RoutesServer.server","title":"<code>server = ThreadedHttpServer((host, port), HttpRequestHandler)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/routes/server/server/#pyrevit.routes.server.server.RoutesServer.host","title":"<code>host = host</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/routes/server/server/#pyrevit.routes.server.server.RoutesServer.port","title":"<code>port = port</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/routes/server/server/#pyrevit.routes.server.server.RoutesServer-functions","title":"Functions","text":""},{"location":"reference/pyrevit/routes/server/server/#pyrevit.routes.server.server.RoutesServer.start","title":"<code>start()</code>","text":"Source code in <code>pyrevitlib/pyrevit/routes/server/server.py</code> <pre><code>def start(self):\n    self.server_thread = threading.Thread(target=self.server.serve_forever)\n    self.server_thread.daemon = True\n    self.server_thread.start()\n</code></pre>"},{"location":"reference/pyrevit/routes/server/server/#pyrevit.routes.server.server.RoutesServer.waitForThread","title":"<code>waitForThread()</code>","text":"Source code in <code>pyrevitlib/pyrevit/routes/server/server.py</code> <pre><code>def waitForThread(self):\n    self.server_thread.join()\n</code></pre>"},{"location":"reference/pyrevit/routes/server/server/#pyrevit.routes.server.server.RoutesServer.stop","title":"<code>stop()</code>","text":"Source code in <code>pyrevitlib/pyrevit/routes/server/server.py</code> <pre><code>def stop(self):\n    self.server.shutdown()\n    self.waitForThread()\n</code></pre>"},{"location":"reference/pyrevit/routes/server/server/#pyrevit.routes.server.server-functions","title":"Functions","text":""},{"location":"reference/pyrevit/routes/server/serverinfo/","title":"serverinfo","text":"<p>Defines the basic server management api.</p>"},{"location":"reference/pyrevit/routes/server/serverinfo/#pyrevit.routes.server.serverinfo-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/routes/server/serverinfo/#pyrevit.routes.server.serverinfo.DATAFILE_ID","title":"<code>DATAFILE_ID = 'serverinfo'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/routes/server/serverinfo/#pyrevit.routes.server.serverinfo.mlogger","title":"<code>mlogger = get_logger(__name__)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/routes/server/serverinfo/#pyrevit.routes.server.serverinfo-classes","title":"Classes","text":""},{"location":"reference/pyrevit/routes/server/serverinfo/#pyrevit.routes.server.serverinfo.RoutesServerInfo","title":"<code>RoutesServerInfo(host, version, process_id, server_host, server_port)</code>","text":"<p>               Bases: <code>object</code></p> <p>Routes server info.</p> Source code in <code>pyrevitlib/pyrevit/routes/server/serverinfo.py</code> <pre><code>def __init__(self,\n             host, version, process_id,\n             server_host, server_port):\n    # host app info\n    self.host = host\n    self.version = version\n    self.process_id = process_id\n    # server info\n    self.server_host = server_host\n    self.server_port = server_port\n</code></pre>"},{"location":"reference/pyrevit/routes/server/serverinfo/#pyrevit.routes.server.serverinfo.RoutesServerInfo-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/routes/server/serverinfo/#pyrevit.routes.server.serverinfo.RoutesServerInfo.host","title":"<code>host = host</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/routes/server/serverinfo/#pyrevit.routes.server.serverinfo.RoutesServerInfo.version","title":"<code>version = version</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/routes/server/serverinfo/#pyrevit.routes.server.serverinfo.RoutesServerInfo.process_id","title":"<code>process_id = process_id</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/routes/server/serverinfo/#pyrevit.routes.server.serverinfo.RoutesServerInfo.server_host","title":"<code>server_host = server_host</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/routes/server/serverinfo/#pyrevit.routes.server.serverinfo.RoutesServerInfo.server_port","title":"<code>server_port = server_port</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/routes/server/serverinfo/#pyrevit.routes.server.serverinfo.RoutesServerInfo-functions","title":"Functions","text":""},{"location":"reference/pyrevit/routes/server/serverinfo/#pyrevit.routes.server.serverinfo.RoutesServerInfo.get_cache_data","title":"<code>get_cache_data()</code>","text":"<p>Get json string of this instance.</p> Source code in <code>pyrevitlib/pyrevit/routes/server/serverinfo.py</code> <pre><code>def get_cache_data(self):\n    \"\"\"Get json string of this instance.\"\"\"\n    data_dict = OrderedDict()\n    for key in sorted(self.__dict__.keys()):\n        data_dict[key] = self.__dict__[key]\n    return data_dict\n</code></pre>"},{"location":"reference/pyrevit/routes/server/serverinfo/#pyrevit.routes.server.serverinfo-functions","title":"Functions","text":""},{"location":"reference/pyrevit/routes/server/serverinfo/#pyrevit.routes.server.serverinfo.get_registered_servers","title":"<code>get_registered_servers()</code>","text":"<p>Get all registered servers on this machine.</p> <p>Returns:</p> Type Description <code>list[RoutesServerInfo]</code> <p>list of registered servers</p> Source code in <code>pyrevitlib/pyrevit/routes/server/serverinfo.py</code> <pre><code>def get_registered_servers():\n    \"\"\"Get all registered servers on this machine.\n\n    Returns:\n        (list[RoutesServerInfo]): list of registered servers\n    \"\"\"\n    return _get_all_serverinfo()\n</code></pre>"},{"location":"reference/pyrevit/routes/server/serverinfo/#pyrevit.routes.server.serverinfo.register","title":"<code>register()</code>","text":"<p>Register host:port for this host instance.</p> Source code in <code>pyrevitlib/pyrevit/routes/server/serverinfo.py</code> <pre><code>def register():\n    \"\"\"Register host:port for this host instance.\"\"\"\n    data_file = _get_host_serverinfo_file()\n    if op.exists(data_file):\n        return _read_serverinfo(data_file)\n    else:\n        return _get_new_serverinfo(data_file)\n</code></pre>"},{"location":"reference/pyrevit/routes/server/serverinfo/#pyrevit.routes.server.serverinfo.unregister","title":"<code>unregister()</code>","text":"<p>Remove registered server host:port for this host instance.</p> Source code in <code>pyrevitlib/pyrevit/routes/server/serverinfo.py</code> <pre><code>def unregister():\n    \"\"\"Remove registered server host:port for this host instance.\"\"\"\n    data_file = _get_host_serverinfo_file()\n    if op.exists(data_file):\n        appdata.garbage_data_file(data_file)\n</code></pre>"},{"location":"reference/pyrevit/runtime/","title":"runtime","text":"<p>Module that compiles the base DLL on load.</p>"},{"location":"reference/pyrevit/runtime/#pyrevit.runtime-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/runtime/#pyrevit.runtime.mlogger","title":"<code>mlogger = logger.get_logger(__name__)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/runtime/#pyrevit.runtime.INTERFACE_TYPES_DIR","title":"<code>INTERFACE_TYPES_DIR = RUNTIME_DIR</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/runtime/#pyrevit.runtime.DOTNET_DIR","title":"<code>DOTNET_DIR = op.join(os.getenv('windir'), 'Microsoft.NET', 'Framework')</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/runtime/#pyrevit.runtime.DOTNET64_DIR","title":"<code>DOTNET64_DIR = op.join(os.getenv('windir'), 'Microsoft.NET', 'Framework64')</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/runtime/#pyrevit.runtime.DOTNET_SDK_DIR","title":"<code>DOTNET_SDK_DIR = op.join(os.getenv('programfiles(x86)'), 'Reference Assemblies', 'Microsoft', 'Framework', '.NETFramework')</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/runtime/#pyrevit.runtime.DOTNET_FRAMEWORK_DIRS","title":"<code>DOTNET_FRAMEWORK_DIRS = sorted([x for x in os.listdir(DOTNET_DIR) if x.startswith('v4.') and 'X' not in x], reverse=True)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/runtime/#pyrevit.runtime.DOTNET64_FRAMEWORK_DIRS","title":"<code>DOTNET64_FRAMEWORK_DIRS = sorted([x for x in os.listdir(DOTNET64_DIR) if x.startswith('v4.') and 'X' not in x], reverse=True)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/runtime/#pyrevit.runtime.DOTNET_TARGETPACK_DIRS","title":"<code>DOTNET_TARGETPACK_DIRS = sorted([x for x in os.listdir(DOTNET_SDK_DIR) if x.startswith('v4.') and 'X' not in x], reverse=True)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/runtime/#pyrevit.runtime.RUNTIME_NAMESPACE","title":"<code>RUNTIME_NAMESPACE = 'PyRevitLabs.PyRevit.Runtime'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/runtime/#pyrevit.runtime.CMD_EXECUTOR_TYPE_NAME","title":"<code>CMD_EXECUTOR_TYPE_NAME = '{}.{}'.format(RUNTIME_NAMESPACE, 'ScriptCommand')</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/runtime/#pyrevit.runtime.CMD_AVAIL_TYPE_NAME_EXTENDED","title":"<code>CMD_AVAIL_TYPE_NAME_EXTENDED = coreutils.make_canonical_name(RUNTIME_NAMESPACE, 'ScriptCommandExtendedAvail')</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/runtime/#pyrevit.runtime.CMD_AVAIL_TYPE_NAME_SELECTION","title":"<code>CMD_AVAIL_TYPE_NAME_SELECTION = coreutils.make_canonical_name(RUNTIME_NAMESPACE, 'ScriptCommandSelectionAvail')</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/runtime/#pyrevit.runtime.CMD_AVAIL_TYPE_NAME_ZERODOC","title":"<code>CMD_AVAIL_TYPE_NAME_ZERODOC = coreutils.make_canonical_name(RUNTIME_NAMESPACE, 'ScriptCommandZeroDocAvail')</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/runtime/#pyrevit.runtime.CMD_AVAIL_NAME_POSTFIX","title":"<code>CMD_AVAIL_NAME_POSTFIX = '-avail'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/runtime/#pyrevit.runtime.SOURCE_FILE_EXT","title":"<code>SOURCE_FILE_EXT = '.cs'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/runtime/#pyrevit.runtime.SOURCE_FILE_FILTER","title":"<code>SOURCE_FILE_FILTER = '(\\\\.cs)'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/runtime/#pyrevit.runtime.CPYTHON_ENGINE","title":"<code>CPYTHON_ENGINE = user_config.get_active_cpython_engine()</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/runtime/#pyrevit.runtime.BASE_TYPES_DIR_HASH","title":"<code>BASE_TYPES_DIR_HASH = coreutils.get_str_hash(coreutils.calculate_dir_hash(INTERFACE_TYPES_DIR, '', SOURCE_FILE_FILTER) + EXEC_PARAMS.engine_ver + str(CPYTHON_ENGINE.Version) if CPYTHON_ENGINE else '0')[:HASH_CUTOFF_LENGTH]</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/runtime/#pyrevit.runtime.RUNTIME_ASSM_FILE_ID","title":"<code>RUNTIME_ASSM_FILE_ID = '{}_{}'.format(BASE_TYPES_DIR_HASH, RUNTIME_NAMESPACE)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/runtime/#pyrevit.runtime.RUNTIME_ASSM_FILE","title":"<code>RUNTIME_ASSM_FILE = op.join(BIN_DIR, 'pyRevitLabs.PyRevit.Runtime.{}.dll'.format(HOST_APP.version))</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/runtime/#pyrevit.runtime.RUNTIME_ASSM_NAME","title":"<code>RUNTIME_ASSM_NAME = op.splitext(op.basename(RUNTIME_ASSM_FILE))[0]</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/runtime/#pyrevit.runtime.RUNTIME_ASSM","title":"<code>RUNTIME_ASSM = None</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/runtime/#pyrevit.runtime.assm_list","title":"<code>assm_list = assmutils.find_loaded_asm(RUNTIME_ASSM_NAME)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/runtime/#pyrevit.runtime.CMD_EXECUTOR_TYPE","title":"<code>CMD_EXECUTOR_TYPE = assmutils.find_type_by_name(RUNTIME_ASSM, CMD_EXECUTOR_TYPE_NAME)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/runtime/#pyrevit.runtime.CMD_AVAIL_TYPE_EXTENDED","title":"<code>CMD_AVAIL_TYPE_EXTENDED = assmutils.find_type_by_name(RUNTIME_ASSM, CMD_AVAIL_TYPE_NAME_EXTENDED)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/runtime/#pyrevit.runtime.CMD_AVAIL_TYPE_SELECTION","title":"<code>CMD_AVAIL_TYPE_SELECTION = assmutils.find_type_by_name(RUNTIME_ASSM, CMD_AVAIL_TYPE_NAME_SELECTION)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/runtime/#pyrevit.runtime.CMD_AVAIL_TYPE_ZERODOC","title":"<code>CMD_AVAIL_TYPE_ZERODOC = assmutils.find_type_by_name(RUNTIME_ASSM, CMD_AVAIL_TYPE_NAME_ZERODOC)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/runtime/#pyrevit.runtime-classes","title":"Classes","text":""},{"location":"reference/pyrevit/runtime/#pyrevit.runtime-functions","title":"Functions","text":""},{"location":"reference/pyrevit/runtime/#pyrevit.runtime.get_references","title":"<code>get_references()</code>","text":"<p>Get list of all referenced assemblies.</p> <p>Returns:</p> Type Description <code>list</code> <p>referenced assemblies</p> Source code in <code>pyrevitlib/pyrevit/runtime/__init__.py</code> <pre><code>def get_references():\n    \"\"\"Get list of all referenced assemblies.\n\n    Returns:\n        (list): referenced assemblies\n    \"\"\"\n    ref_list = [\n        # system stuff\n        'System', 'System.Core', 'System.Runtime', 'System.Linq', 'System.Collections',\n        'System.Collections.Immutable', 'System.Console',\n        'System.Xaml', 'System.Web', 'System.Xml', 'System.Numerics',\n        'System.Drawing', 'System.Windows.Forms',\n        'System.ComponentModel.Primitives', 'System.ComponentModel.TypeConverter',\n        'PresentationCore', 'PresentationFramework',\n        'WindowsBase', 'WindowsFormsIntegration',\n        # legacy csharp/vb.net compiler\n        'Microsoft.CSharp',\n        # iron python engine\n        '{prefix}Microsoft.Dynamic'.format(prefix=eng.EnginePrefix),\n        '{prefix}Microsoft.Scripting'.format(prefix=eng.EnginePrefix),\n        '{prefix}IronPython'.format(prefix=eng.EnginePrefix),\n        '{prefix}IronPython.Modules'.format(prefix=eng.EnginePrefix),\n        # revit api\n        'RevitAPI', 'RevitAPIUI', 'AdWindows', 'UIFramework',\n        # pyrevit loader assembly\n        'pyRevitLoader',\n        # pyrevit labs\n        'pyRevitLabs.Common', 'pyRevitLabs.CommonWPF',\n        'pyRevitLabs.MahAppsMetro',\n        'pyRevitLabs.NLog',\n        'pyRevitLabs.Json',\n        'pyRevitLabs.Emojis',\n        'pyRevitLabs.TargetApps.Revit',\n        'pyRevitLabs.PyRevit',\n        'pyRevitLabs.PyRevit.Runtime.Shared',\n    ]\n\n    # netcore depends\n    if NETCORE:\n        ref_list.extend(['System.Drawing.Common',\n                         'System.Diagnostics.Process',\n                         'System.Diagnostics.FileVersionInfo',\n                         'System.Text.RegularExpressions'])\n\n    # another revit api\n    if HOST_APP.is_newer_than(2018):\n        ref_list.extend(['Xceed.Wpf.AvalonDock'])\n\n    refs = (_get_reference_file(ref_name) for ref_name in ref_list)\n    return [r for r in refs if r]\n</code></pre>"},{"location":"reference/pyrevit/runtime/#pyrevit.runtime.create_ipyengine_configs","title":"<code>create_ipyengine_configs(clean=False, full_frame=False, persistent=False)</code>","text":"<p>Return the configuration for ipython engine.</p> <p>Parameters:</p> Name Type Description Default <code>clean</code> <code>bool</code> <p>Engine should be clean. Defaults to False.</p> <code>False</code> <code>full_frame</code> <code>bool</code> <p>Engine shoul be full frame. Defaults to False.</p> <code>False</code> <code>persistent</code> <code>bool</code> <p>Engine should persist. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>str</code> <p>Configuration</p> Source code in <code>pyrevitlib/pyrevit/runtime/__init__.py</code> <pre><code>def create_ipyengine_configs(clean=False, full_frame=False, persistent=False):\n    \"\"\"Return the configuration for ipython engine.\n\n    Args:\n        clean (bool, optional): Engine should be clean. Defaults to False.\n        full_frame (bool, optional): Engine shoul be full frame. Defaults to False.\n        persistent (bool, optional): Engine should persist. Defaults to False.\n\n    Returns:\n        (str): Configuration\n    \"\"\"\n    return json.dumps({\n        exts.MDATA_ENGINE_CLEAN: clean,\n        exts.MDATA_ENGINE_FULLFRAME: full_frame,\n        exts.MDATA_ENGINE_PERSISTENT: persistent,\n    })\n</code></pre>"},{"location":"reference/pyrevit/runtime/#pyrevit.runtime.create_ext_command_attrs","title":"<code>create_ext_command_attrs()</code>","text":"<p>Create dotnet attributes for Revit external commands.</p> <p>This method is used in creating custom dotnet types for pyRevit commands and compiling them into a DLL assembly. Current implementation sets <code>RegenerationOption.Manual</code> and <code>TransactionMode.Manual</code></p> <p>Returns:</p> Type Description <code>list[CustomAttributeBuilder]</code> <p>object for <code>RegenerationOption</code>  and <code>TransactionMode</code> attributes.</p> Source code in <code>pyrevitlib/pyrevit/runtime/__init__.py</code> <pre><code>def create_ext_command_attrs():\n    \"\"\"Create dotnet attributes for Revit external commands.\n\n    This method is used in creating custom dotnet types for pyRevit commands\n    and compiling them into a DLL assembly. Current implementation sets\n    ``RegenerationOption.Manual`` and ``TransactionMode.Manual``\n\n    Returns:\n        (list[CustomAttributeBuilder]): object for `RegenerationOption` \n            and `TransactionMode` attributes.\n    \"\"\"\n    regen_const_info = \\\n        framework.clr.GetClrType(api.Attributes.RegenerationAttribute) \\\n        .GetConstructor(\n            framework.Array[framework.Type](\n                (api.Attributes.RegenerationOption,)\n                ))\n\n    regen_attr_builder = \\\n        framework.CustomAttributeBuilder(\n            regen_const_info,\n            framework.Array[object](\n                (api.Attributes.RegenerationOption.Manual,)\n                ))\n\n    # add TransactionAttribute to framework.Type\n    trans_constructor_info = \\\n        framework.clr.GetClrType(api.Attributes.TransactionAttribute) \\\n        .GetConstructor(\n            framework.Array[framework.Type](\n                (api.Attributes.TransactionMode,)\n                )\n            )\n\n    trans_attrib_builder = \\\n        framework.CustomAttributeBuilder(\n            trans_constructor_info,\n            framework.Array[object](\n                (api.Attributes.TransactionMode.Manual,)\n                )\n            )\n\n    return [regen_attr_builder, trans_attrib_builder]\n</code></pre>"},{"location":"reference/pyrevit/runtime/#pyrevit.runtime.create_type","title":"<code>create_type(modulebuilder, type_class, class_name, custom_attr_list, *args)</code>","text":"<p>Create a dotnet type for a pyRevit command.</p> <p>See <code>baseclasses.cs</code> code for the template pyRevit command dotnet type and its constructor default arguments that must be provided here.</p> <p>Parameters:</p> Name Type Description Default <code>modulebuilder</code> <p>obj:<code>ModuleBuilder</code>): dotnet module builder</p> required <code>type_class</code> <code>type</code> <p>source dotnet type for the command</p> required <code>class_name</code> <code>str</code> <p>name for the new type</p> required <code>custom_attr_list</code> <p>obj:<code>list</code>): list of dotnet attributes for the type</p> required <code>*args</code> <code>Any</code> <p>list of arguments to be used with type constructor</p> <code>()</code> <p>Returns:</p> Type Description <code>type</code> <p>returns created dotnet type</p> <p>Examples:</p> <p><pre><code>asm_builder = AppDomain.CurrentDomain.DefineDynamicAssembly(\nwin_asm_name, AssemblyBuilderAccess.RunAndSave, filepath\n)\nmodule_builder = asm_builder.DefineDynamicModule(\next_asm_file_name, ext_asm_full_file_name\n)\ncreate_type(\n    module_builder,\n    runtime.ScriptCommand,\n    \"PyRevitSomeCommandUniqueName\",\n    runtime.create_ext_command_attrs(),\n    [scriptpath, atlscriptpath, searchpath, helpurl, name,\n    bundle, extension, uniquename, False, False])\n</code></pre> Source code in <code>pyrevitlib/pyrevit/runtime/__init__.py</code> <pre><code>def create_type(modulebuilder, type_class, class_name, custom_attr_list, *args):\n    \"\"\"Create a dotnet type for a pyRevit command.\n\n    See ``baseclasses.cs`` code for the template pyRevit command dotnet type\n    and its constructor default arguments that must be provided here.\n\n    Args:\n        modulebuilder (:obj:`ModuleBuilder`): dotnet module builder\n        type_class (type): source dotnet type for the command\n        class_name (str): name for the new type\n        custom_attr_list (:obj:`list`): list of dotnet attributes for the type\n        *args (Any): list of arguments to be used with type constructor\n\n    Returns:\n        (type): returns created dotnet type\n\n    Examples:\n        ```python\n        asm_builder = AppDomain.CurrentDomain.DefineDynamicAssembly(\n        win_asm_name, AssemblyBuilderAccess.RunAndSave, filepath\n        )\n        module_builder = asm_builder.DefineDynamicModule(\n        ext_asm_file_name, ext_asm_full_file_name\n        )\n        create_type(\n            module_builder,\n            runtime.ScriptCommand,\n            \"PyRevitSomeCommandUniqueName\",\n            runtime.create_ext_command_attrs(),\n            [scriptpath, atlscriptpath, searchpath, helpurl, name,\n            bundle, extension, uniquename, False, False])\n        ```\n        &lt;type PyRevitSomeCommandUniqueName&gt;\n    \"\"\"\n    # create type builder\n    type_builder = \\\n        modulebuilder.DefineType(\n            class_name,\n            framework.TypeAttributes.Class | framework.TypeAttributes.Public,\n            type_class\n            )\n\n    for custom_attr in custom_attr_list:\n        type_builder.SetCustomAttribute(custom_attr)\n\n    # prepare a list of input param types to find the matching constructor\n    type_list = []\n    param_list = []\n    for param in args:\n        if isinstance(param, str) \\\n                or isinstance(param, int):\n            type_list.append(type(param))\n            param_list.append(param)\n\n    # call base constructor\n    constructor = \\\n        type_class.GetConstructor(framework.Array[framework.Type](type_list))\n    # create class constructor builder\n    const_builder = \\\n        type_builder.DefineConstructor(framework.MethodAttributes.Public,\n                                       framework.CallingConventions.Standard,\n                                       framework.Array[framework.Type](()))\n    # add constructor parameters to stack\n    gen = const_builder.GetILGenerator()\n    gen.Emit(framework.OpCodes.Ldarg_0)  # Load \"this\" onto eval stack\n\n    # add constructor input params to the stack\n    for param_type, param in zip(type_list, param_list):\n        if param_type == str:\n            gen.Emit(framework.OpCodes.Ldstr, param)\n        elif param_type == int:\n            gen.Emit(framework.OpCodes.Ldc_I4, param)\n\n    # call base constructor (consumes \"this\" and the created stack)\n    gen.Emit(framework.OpCodes.Call, constructor)\n    # Fill some space - this is how it is generated for equivalent C# code\n    gen.Emit(framework.OpCodes.Nop)\n    gen.Emit(framework.OpCodes.Nop)\n    gen.Emit(framework.OpCodes.Nop)\n    gen.Emit(framework.OpCodes.Ret)\n    return type_builder.CreateType()\n</code></pre>"},{"location":"reference/pyrevit/runtime/bundletypemaker/","title":"bundletypemaker","text":"<p>Create necessary compiled types for pyRevit bundles.</p>"},{"location":"reference/pyrevit/runtime/bundletypemaker/#pyrevit.runtime.bundletypemaker-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/runtime/bundletypemaker/#pyrevit.runtime.bundletypemaker.mlogger","title":"<code>mlogger = logger.get_logger(__name__)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/runtime/bundletypemaker/#pyrevit.runtime.bundletypemaker-functions","title":"Functions","text":""},{"location":"reference/pyrevit/runtime/bundletypemaker/#pyrevit.runtime.bundletypemaker.create_bundle_type","title":"<code>create_bundle_type(module_builder, type_name, bundle_script, bundle_config_script, bundle_search_paths, bundle_arguments, bundle_help_url, bundle_tooltip, bundle_name, bundle_full_name, bundle_extension_name, bundle_unique_name, bundle_control_id, bundle_context, engine_cfgs)</code>","text":"Source code in <code>pyrevitlib/pyrevit/runtime/bundletypemaker.py</code> <pre><code>def create_bundle_type(\n        module_builder,\n        type_name,\n        bundle_script,\n        bundle_config_script,\n        bundle_search_paths,\n        bundle_arguments,\n        bundle_help_url,\n        bundle_tooltip,\n        bundle_name,\n        bundle_full_name,\n        bundle_extension_name,\n        bundle_unique_name,\n        bundle_control_id,\n        bundle_context,\n        engine_cfgs,\n    ):\n    runtime.create_type(\n        module_builder,\n        runtime.CMD_EXECUTOR_TYPE,\n        type_name,\n        runtime.create_ext_command_attrs(),\n        bundle_script,\n        bundle_config_script,\n        coreutils.join_strings(bundle_search_paths),\n        coreutils.join_strings(bundle_arguments),\n        bundle_help_url,\n        bundle_tooltip,\n        bundle_name,\n        bundle_full_name,\n        bundle_extension_name,\n        bundle_unique_name,\n        bundle_control_id,\n        bundle_context,\n        engine_cfgs)\n</code></pre>"},{"location":"reference/pyrevit/runtime/bundletypemaker/#pyrevit.runtime.bundletypemaker.create_executor_type","title":"<code>create_executor_type(extension, module_builder, cmd_component, eng_cfgs='')</code>","text":"Source code in <code>pyrevitlib/pyrevit/runtime/bundletypemaker.py</code> <pre><code>def create_executor_type(extension, module_builder, cmd_component, eng_cfgs=''):\n    mlogger.debug('Creating executor type for: %s', cmd_component)\n    mlogger.debug('%s uses clean engine: %s',\n                  cmd_component.name, cmd_component.requires_clean_engine)\n    mlogger.debug('%s requires Fullframe engine: %s',\n                  cmd_component.name, cmd_component.requires_fullframe_engine)\n    mlogger.debug('%s requires Fullframe engine: %s',\n                  cmd_component.name, cmd_component.requires_fullframe_engine)\n\n    create_bundle_type(\n        module_builder=module_builder,\n        type_name=cmd_component.unique_name,\n        bundle_script=cmd_component.script_file or \"\",\n        bundle_config_script=cmd_component.config_script_file or \"\",\n        bundle_search_paths=cmd_component.module_paths,\n        bundle_arguments=cmd_component.arguments,\n        bundle_help_url=cmd_component.help_url or \"\",\n        bundle_tooltip=cmd_component.tooltip or \"\",\n        bundle_name=cmd_component.name,\n        bundle_full_name=cmd_component.get_full_bundle_name(),\n        bundle_extension_name=extension.name,\n        bundle_unique_name=cmd_component.unique_name,\n        bundle_control_id=cmd_component.control_id,\n        bundle_context=cmd_component.context or \"\",\n        engine_cfgs=eng_cfgs\n        )\n\n    mlogger.debug('Successfully created executor type for: %s', cmd_component)\n</code></pre>"},{"location":"reference/pyrevit/runtime/bundletypemaker/#pyrevit.runtime.bundletypemaker.create_selection_avail_type","title":"<code>create_selection_avail_type(module_builder, cmd_component)</code>","text":"Source code in <code>pyrevitlib/pyrevit/runtime/bundletypemaker.py</code> <pre><code>def create_selection_avail_type(module_builder, cmd_component):\n    runtime.create_type(module_builder,\n                        runtime.CMD_AVAIL_TYPE_SELECTION,\n                        cmd_component.avail_class_name,\n                        [],\n                        cmd_component.context)\n</code></pre>"},{"location":"reference/pyrevit/runtime/bundletypemaker/#pyrevit.runtime.bundletypemaker.create_zerodoc_avail_type","title":"<code>create_zerodoc_avail_type(module_builder, cmd_component)</code>","text":"Source code in <code>pyrevitlib/pyrevit/runtime/bundletypemaker.py</code> <pre><code>def create_zerodoc_avail_type(module_builder, cmd_component):\n    runtime.create_type(module_builder,\n                        runtime.CMD_AVAIL_TYPE_ZERODOC,\n                        cmd_component.avail_class_name,\n                        [])\n</code></pre>"},{"location":"reference/pyrevit/runtime/bundletypemaker/#pyrevit.runtime.bundletypemaker.create_extended_avail_type","title":"<code>create_extended_avail_type(module_builder, cmd_component)</code>","text":"Source code in <code>pyrevitlib/pyrevit/runtime/bundletypemaker.py</code> <pre><code>def create_extended_avail_type(module_builder, cmd_component):\n    runtime.create_type(module_builder,\n                        runtime.CMD_AVAIL_TYPE_EXTENDED,\n                        cmd_component.avail_class_name,\n                        [],\n                        cmd_component.context)\n</code></pre>"},{"location":"reference/pyrevit/runtime/dynamotypemaker/","title":"dynamotypemaker","text":"<p>Prepare and compile python script types.</p>"},{"location":"reference/pyrevit/runtime/dynamotypemaker/#pyrevit.runtime.dynamotypemaker-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/runtime/dynamotypemaker/#pyrevit.runtime.dynamotypemaker.mlogger","title":"<code>mlogger = logger.get_logger(__name__)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/runtime/dynamotypemaker/#pyrevit.runtime.dynamotypemaker-functions","title":"Functions","text":""},{"location":"reference/pyrevit/runtime/dynamotypemaker/#pyrevit.runtime.dynamotypemaker.create_executor_type","title":"<code>create_executor_type(extension, module_builder, cmd_component)</code>","text":"<p>Create the dotnet type for the executor.</p> <p>Parameters:</p> Name Type Description Default <code>extension</code> <code>Extension</code> <p>pyRevit extension</p> required <code>module_builder</code> <code>ModuleBuilder</code> <p>module builder</p> required <code>cmd_component</code> <code>GenericUICommand</code> <p>command</p> required Source code in <code>pyrevitlib/pyrevit/runtime/dynamotypemaker.py</code> <pre><code>def create_executor_type(extension, module_builder, cmd_component):\n    \"\"\"Create the dotnet type for the executor.\n\n    Args:\n        extension (pyrevit.extensions.components.Extension): pyRevit extension\n        module_builder (ModuleBuilder): module builder\n        cmd_component (pyrevit.extensions.genericcomps.GenericUICommand):\n            command\n    \"\"\"\n    engine_configs = json.dumps({\n        exts.MDATA_ENGINE_CLEAN:\n            cmd_component.requires_clean_engine,\n\n        exts.MDATA_ENGINE_DYNAMO_AUTOMATE:\n            cmd_component.requires_mainthread_engine,\n\n        exts.MDATA_ENGINE_DYNAMO_PATH:\n            cmd_component.dynamo_path,\n\n        # exts.MDATA_ENGINE_DYNAMO_PATH_EXEC:\n        #     cmd_component.dynamo_path_exec,\n\n        exts.MDATA_ENGINE_DYNAMO_PATH_CHECK_EXIST:\n            cmd_component.dynamo_path_check_existing,\n\n        exts.MDATA_ENGINE_DYNAMO_FORCE_MANUAL_RUN:\n            cmd_component.dynamo_force_manual_run,\n\n        exts.MDATA_ENGINE_DYNAMO_MODEL_NODES_INFO:\n            cmd_component.dynamo_model_nodes_info,\n    })\n\n    bundletypemaker.create_executor_type(\n        extension,\n        module_builder,\n        cmd_component,\n        eng_cfgs=engine_configs\n        )\n</code></pre>"},{"location":"reference/pyrevit/runtime/invoketypemaker/","title":"invoketypemaker","text":"<p>Prepare and compile direct invoke script types.</p>"},{"location":"reference/pyrevit/runtime/invoketypemaker/#pyrevit.runtime.invoketypemaker-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/runtime/invoketypemaker/#pyrevit.runtime.invoketypemaker.mlogger","title":"<code>mlogger = logger.get_logger(__name__)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/runtime/invoketypemaker/#pyrevit.runtime.invoketypemaker-functions","title":"Functions","text":""},{"location":"reference/pyrevit/runtime/invoketypemaker/#pyrevit.runtime.invoketypemaker.create_executor_type","title":"<code>create_executor_type(extension, module_builder, cmd_component)</code>","text":"Source code in <code>pyrevitlib/pyrevit/runtime/invoketypemaker.py</code> <pre><code>def create_executor_type(extension, module_builder, cmd_component):\n    # create argument to pass on to the executor for invoke commands\n    target_assm_command_class = ''\n    target_assm = cmd_component.get_target_assembly(required=True)\n    target_class = cmd_component.command_class\n    if target_assm and not target_class:\n        # RevitPythonShell.dll\n        target_assm_command_class = target_assm\n    elif target_assm and target_class:\n        # RevitPythonShell.dll::IronPythonConsoleCommand\n        target_assm_command_class = '{}::{}'.format(target_assm, target_class)\n\n    cmd_component.arguments = [target_assm_command_class]\n    bundletypemaker.create_executor_type(\n        extension,\n        module_builder,\n        cmd_component\n        )\n</code></pre>"},{"location":"reference/pyrevit/runtime/pythontypemaker/","title":"pythontypemaker","text":"<p>Prepare and compile python script types.</p>"},{"location":"reference/pyrevit/runtime/pythontypemaker/#pyrevit.runtime.pythontypemaker-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/runtime/pythontypemaker/#pyrevit.runtime.pythontypemaker.mlogger","title":"<code>mlogger = logger.get_logger(__name__)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/runtime/pythontypemaker/#pyrevit.runtime.pythontypemaker-functions","title":"Functions","text":""},{"location":"reference/pyrevit/runtime/pythontypemaker/#pyrevit.runtime.pythontypemaker.create_executor_type","title":"<code>create_executor_type(extension, module_builder, cmd_component)</code>","text":"<p>Create the dotnet type for the executor.</p> <p>Parameters:</p> Name Type Description Default <code>extension</code> <code>Extension</code> <p>pyRevit extension</p> required <code>module_builder</code> <code>ModuleBuilder</code> <p>module builder</p> required <code>cmd_component</code> <code>GenericUICommand</code> <p>command</p> required Source code in <code>pyrevitlib/pyrevit/runtime/pythontypemaker.py</code> <pre><code>def create_executor_type(extension, module_builder, cmd_component):\n    \"\"\"Create the dotnet type for the executor.\n\n    Args:\n        extension (pyrevit.extensions.components.Extension): pyRevit extension\n        module_builder (ModuleBuilder): module builder\n        cmd_component (pyrevit.extensions.genericcomps.GenericUICommand):\n            command\n    \"\"\"\n    cmd_component.requires_clean_engine = \\\n        _does_need_clean_engine(extension, cmd_component)\n\n    engine_configs = runtime.create_ipyengine_configs(\n        clean=cmd_component.requires_clean_engine,\n        full_frame=cmd_component.requires_fullframe_engine,\n        persistent=cmd_component.requires_persistent_engine,\n    )\n\n    bundletypemaker.create_executor_type(\n        extension,\n        module_builder,\n        cmd_component,\n        eng_cfgs=engine_configs\n        )\n</code></pre>"},{"location":"reference/pyrevit/runtime/typemaker/","title":"typemaker","text":"<p>Prepare and compile script types.</p>"},{"location":"reference/pyrevit/runtime/typemaker/#pyrevit.runtime.typemaker-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/runtime/typemaker/#pyrevit.runtime.typemaker.mlogger","title":"<code>mlogger = logger.get_logger(__name__)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/runtime/typemaker/#pyrevit.runtime.typemaker-functions","title":"Functions","text":""},{"location":"reference/pyrevit/runtime/typemaker/#pyrevit.runtime.typemaker.create_avail_type","title":"<code>create_avail_type(extension, cmd_component, module_builder=None)</code>","text":"Source code in <code>pyrevitlib/pyrevit/runtime/typemaker.py</code> <pre><code>def create_avail_type(extension, cmd_component, module_builder=None):\n    if cmd_component.type_id == exts.LINK_BUTTON_POSTFIX:\n        mlogger.debug(\n            'Skipped creating availability type for: %s', cmd_component\n            )\n        return\n\n    # create command availability class for this command\n    mlogger.debug('Creating availability type for: %s', cmd_component)\n    # set the name of the created type\n    cmd_component.avail_class_name = \\\n            cmd_component.class_name + runtime.CMD_AVAIL_NAME_POSTFIX\n\n    if module_builder:\n        context_str = cmd_component.context.lower()\n\n        if context_str == exts.CTX_SELETION:\n            bundletypemaker.create_selection_avail_type(\n                module_builder=module_builder,\n                cmd_component=cmd_component\n                )\n\n        elif context_str == exts.CTX_ZERODOC:\n            bundletypemaker.create_zerodoc_avail_type(\n                module_builder=module_builder,\n                cmd_component=cmd_component\n                )\n\n        else:\n            bundletypemaker.create_extended_avail_type(\n                module_builder=module_builder,\n                cmd_component=cmd_component\n                )\n\n        mlogger.debug(\n            'Successfully created availability type for: %s', cmd_component)\n</code></pre>"},{"location":"reference/pyrevit/runtime/typemaker/#pyrevit.runtime.typemaker.create_exec_types","title":"<code>create_exec_types(extension, cmd_component, module_builder=None)</code>","text":"Source code in <code>pyrevitlib/pyrevit/runtime/typemaker.py</code> <pre><code>def create_exec_types(extension, cmd_component, module_builder=None):\n    mlogger.debug('Command language is: %s', cmd_component.script_language)\n    # set the name of the created type\n    cmd_component.class_name = cmd_component.unique_name\n\n    if module_builder:\n        ### create the executor types\n        ## first highly custom button types\n        # if invoke\n        if cmd_component.type_id == exts.INVOKE_BUTTON_POSTFIX:\n            invoketypemaker.create_executor_type(\n                extension,\n                module_builder,\n                cmd_component\n                )\n        # if link\n        elif cmd_component.type_id == exts.LINK_BUTTON_POSTFIX:\n            # link buttons don't need types\n            mlogger.debug('Skipped creating executor type for: %s',\n                          cmd_component)\n        # if content\n        elif cmd_component.type_id == exts.CONTENT_BUTTON_POSTFIX:\n            # link buttons don't need types\n            bundletypemaker.create_executor_type(\n                extension,\n                module_builder,\n                cmd_component\n                )\n        # if url\n        elif cmd_component.type_id == exts.URL_BUTTON_POSTFIX:\n            urltypemaker.create_executor_type(\n                extension,\n                module_builder,\n                cmd_component\n                )\n        ## now language based button types\n        # if python\n        elif cmd_component.script_language == exts.PYTHON_LANG:\n            pythontypemaker.create_executor_type(\n                extension,\n                module_builder,\n                cmd_component\n                )\n        # if dynamo\n        elif cmd_component.script_language == exts.DYNAMO_LANG:\n            dynamotypemaker.create_executor_type(\n                extension,\n                module_builder,\n                cmd_component\n                )\n        # if anything else\n        else:\n            bundletypemaker.create_executor_type(\n                extension,\n                module_builder,\n                cmd_component\n                )\n</code></pre>"},{"location":"reference/pyrevit/runtime/typemaker/#pyrevit.runtime.typemaker.make_bundle_types","title":"<code>make_bundle_types(extension, cmd_component, module_builder=None)</code>","text":"<p>Create the types for the bundle.</p> <p>Parameters:</p> Name Type Description Default <code>extension</code> <code>Extension</code> <p>pyRevit extension</p> required <code>cmd_component</code> <code>GenericUICommand</code> <p>command</p> required <code>module_builder</code> <code>ModuleBuilder</code> <p>module builder.</p> <code>None</code> Source code in <code>pyrevitlib/pyrevit/runtime/typemaker.py</code> <pre><code>def make_bundle_types(extension, cmd_component, module_builder=None):\n    \"\"\"Create the types for the bundle.\n\n    Args:\n        extension (pyrevit.extensions.components.Extension): pyRevit extension\n        cmd_component (pyrevit.extensions.genericcomps.GenericUICommand):\n            command\n        module_builder (ModuleBuilder): module builder.\n    \"\"\"\n    # make command interface type for the given command\n    try:\n        create_exec_types(extension, cmd_component, module_builder)\n    except Exception as createtype_err:\n        mlogger.error('Error creating appropriate exec types for: %s | %s',\n                      cmd_component, createtype_err)\n    # create availability types if necessary\n    if cmd_component.context:\n        try:\n            create_avail_type(extension, cmd_component, module_builder)\n        except Exception as createtype_err:\n            mlogger.error('Error creating appropriate avail types for: %s | %s',\n                          cmd_component, createtype_err)\n</code></pre>"},{"location":"reference/pyrevit/runtime/types/","title":"types","text":"<p>Provide access to classes and functionalty inside base loader module.</p>"},{"location":"reference/pyrevit/runtime/types/#pyrevit.runtime.types-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/runtime/urltypemaker/","title":"urltypemaker","text":"<p>Prepare and compile url script types.</p>"},{"location":"reference/pyrevit/runtime/urltypemaker/#pyrevit.runtime.urltypemaker-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/runtime/urltypemaker/#pyrevit.runtime.urltypemaker.mlogger","title":"<code>mlogger = logger.get_logger(__name__)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/runtime/urltypemaker/#pyrevit.runtime.urltypemaker-functions","title":"Functions","text":""},{"location":"reference/pyrevit/runtime/urltypemaker/#pyrevit.runtime.urltypemaker.create_executor_type","title":"<code>create_executor_type(extension, module_builder, cmd_component)</code>","text":"<p>Create the dotnet type for the executor.</p> <p>Parameters:</p> Name Type Description Default <code>extension</code> <code>Extension</code> <p>pyRevit extension</p> required <code>module_builder</code> <code>ModuleBuilder</code> <p>module builder</p> required <code>cmd_component</code> <code>GenericUICommand</code> <p>command component</p> required Source code in <code>pyrevitlib/pyrevit/runtime/urltypemaker.py</code> <pre><code>def create_executor_type(extension, module_builder, cmd_component):\n    \"\"\"Create the dotnet type for the executor.\n\n    Args:\n        extension (Extension): pyRevit extension\n        module_builder (ModuleBuilder): module builder\n        cmd_component (GenericUICommand): command component\n    \"\"\"\n    cmd_component.arguments = [cmd_component.get_target_url()]\n    bundletypemaker.create_executor_type(\n        extension,\n        module_builder,\n        cmd_component\n        )\n</code></pre>"},{"location":"reference/pyrevit/telemetry/","title":"telemetry","text":"<p>This module manages the telemetry system.</p> This function is used to setup the telemetry system on pyRevit startup <pre><code>setup_telemetry()\n</code></pre> These functions are used to query information about the logging system <pre><code>get_telemetry_state()\n</code></pre> <pre><code>get_apptelemetry_state()\n</code></pre> <p>This module also provides a wrapper class around the command results dictionary that is included with the telemetry record.</p> <p>Scripts should use the instance of this class provided by the script module. See <code>script.get_results()</code> for examples</p>"},{"location":"reference/pyrevit/telemetry/#pyrevit.telemetry-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/telemetry/#pyrevit.telemetry.FILE_LOG_EXT","title":"<code>FILE_LOG_EXT = 'json'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/telemetry/#pyrevit.telemetry.FILE_LOG_FILENAME_TEMPLATE","title":"<code>FILE_LOG_FILENAME_TEMPLATE = '{}_{}_telemetry.{}'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/telemetry/#pyrevit.telemetry.mlogger","title":"<code>mlogger = get_logger(__name__)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/telemetry/#pyrevit.telemetry.consts","title":"<code>consts = PyRevit.PyRevitConsts</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/telemetry/#pyrevit.telemetry-functions","title":"Functions","text":""},{"location":"reference/pyrevit/telemetry/#pyrevit.telemetry.get_default_telemetry_filepath","title":"<code>get_default_telemetry_filepath()</code>","text":"Source code in <code>pyrevitlib/pyrevit/telemetry/__init__.py</code> <pre><code>def get_default_telemetry_filepath():\n    return PYREVIT_VERSION_APP_DIR\n</code></pre>"},{"location":"reference/pyrevit/telemetry/#pyrevit.telemetry.get_telemetry_state","title":"<code>get_telemetry_state()</code>","text":"Source code in <code>pyrevitlib/pyrevit/telemetry/__init__.py</code> <pre><code>def get_telemetry_state():\n    return envvars.get_pyrevit_env_var(envvars.TELEMETRYSTATE_ENVVAR)\n</code></pre>"},{"location":"reference/pyrevit/telemetry/#pyrevit.telemetry.get_telemetry_utc_timestamp","title":"<code>get_telemetry_utc_timestamp()</code>","text":"Source code in <code>pyrevitlib/pyrevit/telemetry/__init__.py</code> <pre><code>def get_telemetry_utc_timestamp():\n    return envvars.get_pyrevit_env_var(envvars.TELEMETRYUTCTIMESTAMPS_ENVVAR)\n</code></pre>"},{"location":"reference/pyrevit/telemetry/#pyrevit.telemetry.get_telemetry_file_dir","title":"<code>get_telemetry_file_dir()</code>","text":"Source code in <code>pyrevitlib/pyrevit/telemetry/__init__.py</code> <pre><code>def get_telemetry_file_dir():\n    return envvars.get_pyrevit_env_var(envvars.TELEMETRYDIR_ENVVAR)\n</code></pre>"},{"location":"reference/pyrevit/telemetry/#pyrevit.telemetry.get_telemetry_file_path","title":"<code>get_telemetry_file_path()</code>","text":"Source code in <code>pyrevitlib/pyrevit/telemetry/__init__.py</code> <pre><code>def get_telemetry_file_path():\n    return envvars.get_pyrevit_env_var(envvars.TELEMETRYFILE_ENVVAR)\n</code></pre>"},{"location":"reference/pyrevit/telemetry/#pyrevit.telemetry.get_telemetry_server_url","title":"<code>get_telemetry_server_url()</code>","text":"Source code in <code>pyrevitlib/pyrevit/telemetry/__init__.py</code> <pre><code>def get_telemetry_server_url():\n    return envvars.get_pyrevit_env_var(envvars.TELEMETRYSERVER_ENVVAR)\n</code></pre>"},{"location":"reference/pyrevit/telemetry/#pyrevit.telemetry.get_telemetry_include_hooks","title":"<code>get_telemetry_include_hooks()</code>","text":"Source code in <code>pyrevitlib/pyrevit/telemetry/__init__.py</code> <pre><code>def get_telemetry_include_hooks():\n    return envvars.get_pyrevit_env_var(envvars.TELEMETRYINCLUDEHOOKS_ENVVAR)\n</code></pre>"},{"location":"reference/pyrevit/telemetry/#pyrevit.telemetry.set_telemetry_state","title":"<code>set_telemetry_state(state)</code>","text":"Source code in <code>pyrevitlib/pyrevit/telemetry/__init__.py</code> <pre><code>def set_telemetry_state(state):\n    envvars.set_pyrevit_env_var(envvars.TELEMETRYSTATE_ENVVAR, state)\n    user_config.telemetry_status = state\n</code></pre>"},{"location":"reference/pyrevit/telemetry/#pyrevit.telemetry.set_telemetry_utc_timestamp","title":"<code>set_telemetry_utc_timestamp(state)</code>","text":"Source code in <code>pyrevitlib/pyrevit/telemetry/__init__.py</code> <pre><code>def set_telemetry_utc_timestamp(state):\n    envvars.set_pyrevit_env_var(envvars.TELEMETRYUTCTIMESTAMPS_ENVVAR, state)\n    user_config.telemetry_utc_timestamp = state\n</code></pre>"},{"location":"reference/pyrevit/telemetry/#pyrevit.telemetry.set_telemetry_file_dir","title":"<code>set_telemetry_file_dir(file_dir)</code>","text":"Source code in <code>pyrevitlib/pyrevit/telemetry/__init__.py</code> <pre><code>def set_telemetry_file_dir(file_dir):\n    if not file_dir or not op.isdir(file_dir):\n        disable_telemetry_to_file()\n    envvars.set_pyrevit_env_var(envvars.TELEMETRYDIR_ENVVAR, file_dir)\n    user_config.telemetry_file_dir = file_dir\n</code></pre>"},{"location":"reference/pyrevit/telemetry/#pyrevit.telemetry.set_telemetry_file_path","title":"<code>set_telemetry_file_path(file_path)</code>","text":"Source code in <code>pyrevitlib/pyrevit/telemetry/__init__.py</code> <pre><code>def set_telemetry_file_path(file_path):\n    envvars.set_pyrevit_env_var(envvars.TELEMETRYFILE_ENVVAR, file_path)\n</code></pre>"},{"location":"reference/pyrevit/telemetry/#pyrevit.telemetry.set_telemetry_server_url","title":"<code>set_telemetry_server_url(server_url)</code>","text":"Source code in <code>pyrevitlib/pyrevit/telemetry/__init__.py</code> <pre><code>def set_telemetry_server_url(server_url):\n    envvars.set_pyrevit_env_var(envvars.TELEMETRYSERVER_ENVVAR, server_url)\n    user_config.telemetry_server_url = server_url\n</code></pre>"},{"location":"reference/pyrevit/telemetry/#pyrevit.telemetry.set_telemetry_include_hooks","title":"<code>set_telemetry_include_hooks(state)</code>","text":"Source code in <code>pyrevitlib/pyrevit/telemetry/__init__.py</code> <pre><code>def set_telemetry_include_hooks(state):\n    envvars.set_pyrevit_env_var(envvars.TELEMETRYINCLUDEHOOKS_ENVVAR, state)\n    user_config.telemetry_include_hooks = state\n</code></pre>"},{"location":"reference/pyrevit/telemetry/#pyrevit.telemetry.disable_telemetry","title":"<code>disable_telemetry()</code>","text":"Source code in <code>pyrevitlib/pyrevit/telemetry/__init__.py</code> <pre><code>def disable_telemetry():\n    set_telemetry_state(False)\n</code></pre>"},{"location":"reference/pyrevit/telemetry/#pyrevit.telemetry.disable_telemetry_to_file","title":"<code>disable_telemetry_to_file()</code>","text":"Source code in <code>pyrevitlib/pyrevit/telemetry/__init__.py</code> <pre><code>def disable_telemetry_to_file():\n    set_telemetry_file_path('')\n</code></pre>"},{"location":"reference/pyrevit/telemetry/#pyrevit.telemetry.disable_telemetry_to_server","title":"<code>disable_telemetry_to_server()</code>","text":"Source code in <code>pyrevitlib/pyrevit/telemetry/__init__.py</code> <pre><code>def disable_telemetry_to_server():\n    set_telemetry_server_url('')\n</code></pre>"},{"location":"reference/pyrevit/telemetry/#pyrevit.telemetry.get_apptelemetry_state","title":"<code>get_apptelemetry_state()</code>","text":"Source code in <code>pyrevitlib/pyrevit/telemetry/__init__.py</code> <pre><code>def get_apptelemetry_state():\n    return envvars.get_pyrevit_env_var(envvars.APPTELEMETRYSTATE_ENVVAR)\n</code></pre>"},{"location":"reference/pyrevit/telemetry/#pyrevit.telemetry.set_apptelemetry_state","title":"<code>set_apptelemetry_state(state)</code>","text":"Source code in <code>pyrevitlib/pyrevit/telemetry/__init__.py</code> <pre><code>def set_apptelemetry_state(state):\n    envvars.set_pyrevit_env_var(envvars.APPTELEMETRYSTATE_ENVVAR, state)\n    user_config.apptelemetry_status = state\n</code></pre>"},{"location":"reference/pyrevit/telemetry/#pyrevit.telemetry.get_apptelemetry_handler","title":"<code>get_apptelemetry_handler()</code>","text":"Source code in <code>pyrevitlib/pyrevit/telemetry/__init__.py</code> <pre><code>def get_apptelemetry_handler():\n    return envvars.get_pyrevit_env_var(envvars.APPTELEMETRYHANDLER_ENVVAR)\n</code></pre>"},{"location":"reference/pyrevit/telemetry/#pyrevit.telemetry.set_apptelemetry_handler","title":"<code>set_apptelemetry_handler(handler)</code>","text":"Source code in <code>pyrevitlib/pyrevit/telemetry/__init__.py</code> <pre><code>def set_apptelemetry_handler(handler):\n    envvars.set_pyrevit_env_var(envvars.APPTELEMETRYHANDLER_ENVVAR, handler)\n</code></pre>"},{"location":"reference/pyrevit/telemetry/#pyrevit.telemetry.get_apptelemetry_server_url","title":"<code>get_apptelemetry_server_url()</code>","text":"Source code in <code>pyrevitlib/pyrevit/telemetry/__init__.py</code> <pre><code>def get_apptelemetry_server_url():\n    return envvars.get_pyrevit_env_var(envvars.APPTELEMETRYSERVER_ENVVAR)\n</code></pre>"},{"location":"reference/pyrevit/telemetry/#pyrevit.telemetry.get_apptelemetry_event_flags","title":"<code>get_apptelemetry_event_flags()</code>","text":"Source code in <code>pyrevitlib/pyrevit/telemetry/__init__.py</code> <pre><code>def get_apptelemetry_event_flags():\n    # default value is 16 bytes of 0\n    flags_hex = \\\n        user_config.apptelemetry_event_flags or '0x00000000000000000000000000000000'\n    return coreutils.hex2int_long(flags_hex)\n</code></pre>"},{"location":"reference/pyrevit/telemetry/#pyrevit.telemetry.set_apptelemetry_server_url","title":"<code>set_apptelemetry_server_url(server_url)</code>","text":"Source code in <code>pyrevitlib/pyrevit/telemetry/__init__.py</code> <pre><code>def set_apptelemetry_server_url(server_url):\n    envvars.set_pyrevit_env_var(envvars.APPTELEMETRYSERVER_ENVVAR, server_url)\n    user_config.apptelemetry_server_url = server_url\n</code></pre>"},{"location":"reference/pyrevit/telemetry/#pyrevit.telemetry.set_apptelemetry_event_flags","title":"<code>set_apptelemetry_event_flags(event_flags)</code>","text":"Source code in <code>pyrevitlib/pyrevit/telemetry/__init__.py</code> <pre><code>def set_apptelemetry_event_flags(event_flags):\n    flags_hex = coreutils.int2hex_long(event_flags)\n    user_config.apptelemetry_event_flags = flags_hex\n    envvars.set_pyrevit_env_var(\n        envvars.APPTELEMETRYEVENTFLAGS_ENVVAR, flags_hex)\n</code></pre>"},{"location":"reference/pyrevit/telemetry/#pyrevit.telemetry.disable_apptelemetry","title":"<code>disable_apptelemetry()</code>","text":"Source code in <code>pyrevitlib/pyrevit/telemetry/__init__.py</code> <pre><code>def disable_apptelemetry():\n    set_apptelemetry_state(False)\n</code></pre>"},{"location":"reference/pyrevit/telemetry/#pyrevit.telemetry.disable_apptelemetry_to_server","title":"<code>disable_apptelemetry_to_server()</code>","text":"Source code in <code>pyrevitlib/pyrevit/telemetry/__init__.py</code> <pre><code>def disable_apptelemetry_to_server():\n    set_apptelemetry_server_url('')\n</code></pre>"},{"location":"reference/pyrevit/telemetry/#pyrevit.telemetry.get_apptelemetry_event_types","title":"<code>get_apptelemetry_event_types()</code>","text":"Source code in <code>pyrevitlib/pyrevit/telemetry/__init__.py</code> <pre><code>def get_apptelemetry_event_types():\n    return list(coreutils.get_enum_values(EventType))\n</code></pre>"},{"location":"reference/pyrevit/telemetry/#pyrevit.telemetry.get_apptelemetry_event_state","title":"<code>get_apptelemetry_event_state(flags, event_type)</code>","text":"Source code in <code>pyrevitlib/pyrevit/telemetry/__init__.py</code> <pre><code>def get_apptelemetry_event_state(flags, event_type):\n    event_idx = get_apptelemetry_event_types().index(event_type)\n    return flags &amp; (1&lt;&lt;event_idx)\n</code></pre>"},{"location":"reference/pyrevit/telemetry/#pyrevit.telemetry.set_apptelemetry_event_state","title":"<code>set_apptelemetry_event_state(flags, event_type)</code>","text":"Source code in <code>pyrevitlib/pyrevit/telemetry/__init__.py</code> <pre><code>def set_apptelemetry_event_state(flags, event_type):\n    return flags | (1&lt;&lt;int(event_type))\n</code></pre>"},{"location":"reference/pyrevit/telemetry/#pyrevit.telemetry.unset_apptelemetry_event_state","title":"<code>unset_apptelemetry_event_state(flags, event_type)</code>","text":"Source code in <code>pyrevitlib/pyrevit/telemetry/__init__.py</code> <pre><code>def unset_apptelemetry_event_state(flags, event_type):\n    return flags &amp; ~(1&lt;&lt;int(event_type))\n</code></pre>"},{"location":"reference/pyrevit/telemetry/#pyrevit.telemetry.get_status_from_url","title":"<code>get_status_from_url(server_url)</code>","text":"Source code in <code>pyrevitlib/pyrevit/telemetry/__init__.py</code> <pre><code>def get_status_from_url(server_url):\n    server_url = server_url.lower()\n    if server_url.endswith('scripts/'):\n        server_url = server_url.replace('scripts/', 'status')\n    elif server_url.endswith('events/'):\n        server_url = server_url.replace('events/', 'status')\n\n    try:\n        return json.loads(urlopen(server_url).read())\n    except Exception:\n        return None\n</code></pre>"},{"location":"reference/pyrevit/telemetry/#pyrevit.telemetry.get_status","title":"<code>get_status()</code>","text":"Source code in <code>pyrevitlib/pyrevit/telemetry/__init__.py</code> <pre><code>def get_status():\n    return get_status_from_url(\n        get_telemetry_server_url()\n        or get_apptelemetry_server_url()\n        )\n</code></pre>"},{"location":"reference/pyrevit/telemetry/#pyrevit.telemetry.setup_telemetry","title":"<code>setup_telemetry(session_id=None)</code>","text":"<p>Sets up the telemetry default config and environment values.</p> Source code in <code>pyrevitlib/pyrevit/telemetry/__init__.py</code> <pre><code>def setup_telemetry(session_id=None):\n    \"\"\"Sets up the telemetry default config and environment values.\"\"\"\n    # make sure session id is availabe\n    if not session_id:\n        session_id = sessioninfo.get_session_uuid()\n\n    # PYREVIT TELEMETRY -------------------------------------------------------\n    # utc timestamp\n    telemetry_utc_timestamp = user_config.telemetry_utc_timestamp\n    set_telemetry_utc_timestamp(telemetry_utc_timestamp)\n\n    # global telemetry toggle\n    telemetry_state = user_config.telemetry_status\n    set_telemetry_state(telemetry_state)\n\n    # read or setup default values for file telemetry\n    # default file path and name for telemetry\n    telemetry_file_dir = user_config.telemetry_file_dir\n    set_telemetry_file_dir(telemetry_file_dir)\n\n    # check file telemetry config and setup destination\n    if not telemetry_file_dir or coreutils.is_blank(telemetry_file_dir):\n        # if no config is provided, disable output\n        disable_telemetry_to_file()\n    # if config exists, create new telemetry file under the same address\n    elif telemetry_state:\n        if op.isdir(telemetry_file_dir):\n            telemetry_file_name = \\\n                FILE_LOG_FILENAME_TEMPLATE.format(PYREVIT_FILE_PREFIX,\n                                                  session_id,\n                                                  FILE_LOG_EXT)\n            # if directory is valid\n            telemetry_fullfilepath = \\\n                op.join(telemetry_file_dir, telemetry_file_name)\n            set_telemetry_file_path(telemetry_fullfilepath)\n            # setup telemetry file or disable if failed\n            try:\n                _setup_default_logfile(telemetry_fullfilepath)\n            except Exception as write_err:\n                mlogger.error('Telemetry is active but log file location '\n                              'is not accessible. | %s', write_err)\n                disable_telemetry_to_file()\n        else:\n            # if not, show error and disable telemetry\n            mlogger.error('Provided telemetry address does not exits or is '\n                          'not a directory. Telemetry disabled.')\n            disable_telemetry_to_file()\n\n    # read or setup default values for server telemetry\n    telemetry_server_url = user_config.telemetry_server_url\n\n    # check server telemetry config and setup destination\n    if not telemetry_server_url or coreutils.is_blank(telemetry_server_url):\n        # if no config is provided, disable output\n        disable_telemetry_to_server()\n    else:\n        # if config exists, setup server logging\n        set_telemetry_server_url(telemetry_server_url)\n\n    # set telemetry script types\n    set_telemetry_include_hooks(user_config.telemetry_include_hooks)\n\n    # APP TELEMETRY ------------------------------------------------------------\n    # setup default value for telemetry global switch\n    apptelemetry_state = user_config.apptelemetry_status\n    set_apptelemetry_state(apptelemetry_state)\n\n    # read or setup default values for server telemetry\n    apptelemetry_server_url = user_config.apptelemetry_server_url\n\n    # check server telemetry config and setup destination\n    if not apptelemetry_server_url \\\n            or coreutils.is_blank(apptelemetry_server_url):\n        # if no config is provided, disable output\n        disable_apptelemetry_to_server()\n    else:\n        # if config exists, setup server logging\n        set_apptelemetry_server_url(apptelemetry_server_url)\n\n    # setup events\n    new_telemetry_handler = EventTelemetry(session_id, HOST_APP.username)\n    telemetry_handler = get_apptelemetry_handler()\n    if telemetry_handler:\n        # clear existing\n        telemetry_events.unregister_all_event_telemetries(telemetry_handler)\n\n    set_apptelemetry_handler(new_telemetry_handler)\n    # register handlers only if telemetry system is active\n    if apptelemetry_state:\n        apptelemetry_event_flags = get_apptelemetry_event_flags()\n        # re-register events with new telemetry_handler\n        telemetry_events.register_event_telemetry(\n            new_telemetry_handler,\n            apptelemetry_event_flags\n        )\n\n    user_config.save_changes()\n</code></pre>"},{"location":"reference/pyrevit/telemetry/events/","title":"events","text":"<p>Event telemetry management.</p>"},{"location":"reference/pyrevit/telemetry/events/#pyrevit.telemetry.events-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/telemetry/events/#pyrevit.telemetry.events.mlogger","title":"<code>mlogger = logger.get_logger(__name__)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/telemetry/events/#pyrevit.telemetry.events.ALL_EVENTS","title":"<code>ALL_EVENTS = 340282366920938463463374607431768211455</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/telemetry/events/#pyrevit.telemetry.events.SUGGESTED_EVENTS","title":"<code>SUGGESTED_EVENTS = 31988513242969</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/telemetry/events/#pyrevit.telemetry.events-functions","title":"Functions","text":""},{"location":"reference/pyrevit/telemetry/events/#pyrevit.telemetry.events.register_event_telemetry","title":"<code>register_event_telemetry(handler, flags)</code>","text":"<p>Registers application event telemetry handlers based on given flags.</p> <p>Parameters:</p> Name Type Description Default <code>handler</code> <code>EventTelemetry</code> <p>event telemetry handler</p> required <code>flags</code> <code>int</code> <p>event flags</p> required Source code in <code>pyrevitlib/pyrevit/telemetry/events.py</code> <pre><code>def register_event_telemetry(handler, flags):\n    \"\"\"Registers application event telemetry handlers based on given flags.\n\n    Args:\n        handler (EventTelemetry): event telemetry handler\n        flags (int): event flags\n    \"\"\"\n    try:\n        handler.RegisterEventTelemetry(HOST_APP.uiapp, flags)\n    except Exception as ex:\n        mlogger.debug(\n            \"Error registering event telementry with flags: %s | %s\",\n            str(flags), ex)\n</code></pre>"},{"location":"reference/pyrevit/telemetry/events/#pyrevit.telemetry.events.unregister_event_telemetry","title":"<code>unregister_event_telemetry(handler, flags)</code>","text":"<p>Unregisters application event telemetry handlers based on given flags.</p> <p>Parameters:</p> Name Type Description Default <code>handler</code> <code>EventTelemetry</code> <p>event telemetry handler</p> required <code>flags</code> <code>int</code> <p>event flags</p> required Source code in <code>pyrevitlib/pyrevit/telemetry/events.py</code> <pre><code>def unregister_event_telemetry(handler, flags):\n    \"\"\"Unregisters application event telemetry handlers based on given flags.\n\n    Args:\n        handler (EventTelemetry): event telemetry handler\n        flags (int): event flags\n    \"\"\"\n    try:\n        handler.UnRegisterEventTelemetry(HOST_APP.uiapp, flags)\n    except Exception as ex:\n        mlogger.debug(\n            \"Error unregistering event telementry with flags: %s | %s\",\n            str(flags), ex)\n</code></pre>"},{"location":"reference/pyrevit/telemetry/events/#pyrevit.telemetry.events.unregister_all_event_telemetries","title":"<code>unregister_all_event_telemetries(handler)</code>","text":"<p>Unregisters all available application event telemetry handlers.</p> Source code in <code>pyrevitlib/pyrevit/telemetry/events.py</code> <pre><code>def unregister_all_event_telemetries(handler):\n    \"\"\"Unregisters all available application event telemetry handlers.\"\"\"\n    unregister_event_telemetry(handler, ALL_EVENTS)\n</code></pre>"},{"location":"reference/pyrevit/telemetry/record/","title":"record","text":"<p>Provides base class for telemetry records.</p>"},{"location":"reference/pyrevit/telemetry/record/#pyrevit.telemetry.record-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/telemetry/record/#pyrevit.telemetry.record-classes","title":"Classes","text":""},{"location":"reference/pyrevit/telemetry/record/#pyrevit.telemetry.record.CommandCustomResults","title":"<code>CommandCustomResults</code>","text":"<p>               Bases: <code>object</code></p> <p>Wrapper around ScriptExecutor's EXEC_PARAMS.result_dict.</p> <p>ScriptExecutor provides this results dictionary to all scripts, and scripts can add key:value pairs to the dictionary. But since the provided dictionary is a C# dictionary, this class provides a very easy to use wrapper around it.</p> <p>Examples:</p> <pre><code>CommandCustomResults().returnparam = 'some return value'\n</code></pre>"},{"location":"reference/pyrevit/telemetry/record/#pyrevit.telemetry.record.CommandCustomResults-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/telemetry/record/#pyrevit.telemetry.record.CommandCustomResults.RESERVED_NAMES","title":"<code>RESERVED_NAMES = ['time', 'username', 'revit', 'revitbuild', 'sessionid', 'pyrevit', 'debug', 'config', 'commandname', 'result', 'source']</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/unittests/","title":"unittests","text":"<p>The main pyRevit test is the startup test which is done by launching Revit.</p> <p>This module is created to provide a platform to perform complete tests on different components of pyRevit. For example, as the git module grows, new tests will be added to the git test suite to test the full functionality of that module, although only a subset of functions are used during startup and normal operations of pyRevit.</p> <pre><code>from unittest import TestCase\nclass TestWithIndependentOutput(TestCase):\n    def setUp(self):\n        pass\n\n    def tearDown(self):\n        pass\n\n    def doCleanups(self):\n        pass\n</code></pre>"},{"location":"reference/pyrevit/unittests/#pyrevit.unittests-functions","title":"Functions","text":""},{"location":"reference/pyrevit/unittests/runner/","title":"runner","text":"<p>Unit tests facility.</p>"},{"location":"reference/pyrevit/unittests/runner/#pyrevit.unittests.runner-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/unittests/runner/#pyrevit.unittests.runner.mlogger","title":"<code>mlogger = get_logger(__name__)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/unittests/runner/#pyrevit.unittests.runner.DEBUG_OKAY_RESULT","title":"<code>DEBUG_OKAY_RESULT = 'PASSED'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/unittests/runner/#pyrevit.unittests.runner.DEBUG_FAIL_RESULT","title":"<code>DEBUG_FAIL_RESULT = 'FAILED'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/unittests/runner/#pyrevit.unittests.runner.RESULT_TEST_SUITE_START","title":"<code>RESULT_TEST_SUITE_START = '&lt;div class=\"unittest unitteststart\"&gt;Test Suite: {suite}&lt;/div&gt;'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/unittests/runner/#pyrevit.unittests.runner.RESULT_DIV_OKAY","title":"<code>RESULT_DIV_OKAY = '&lt;div class=\"unittest unittestokay\"&gt;:white_heavy_check_mark: PASSED {test}&lt;/div&gt;'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/unittests/runner/#pyrevit.unittests.runner.RESULT_DIV_FAIL","title":"<code>RESULT_DIV_FAIL = '&lt;div class=\"unittest unittestfail\"&gt;:cross_mark: FAILED {test}&lt;/div&gt;'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/unittests/runner/#pyrevit.unittests.runner.RESULT_DIV_ERROR","title":"<code>RESULT_DIV_ERROR = '&lt;div class=\"unittest unittesterror\"&gt;:heavy_large_circle: ERROR {test}&lt;/div&gt;'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/unittests/runner/#pyrevit.unittests.runner-classes","title":"Classes","text":""},{"location":"reference/pyrevit/unittests/runner/#pyrevit.unittests.runner.OutputWriter","title":"<code>OutputWriter()</code>","text":"<p>Output writer for tests results.</p> Source code in <code>pyrevitlib/pyrevit/unittests/runner.py</code> <pre><code>def __init__(self):\n    self._output = get_output()\n</code></pre>"},{"location":"reference/pyrevit/unittests/runner/#pyrevit.unittests.runner.OutputWriter-functions","title":"Functions","text":""},{"location":"reference/pyrevit/unittests/runner/#pyrevit.unittests.runner.OutputWriter.write","title":"<code>write(output_str)</code>","text":"<p>Prints the results to the output window.</p> <p>Parameters:</p> Name Type Description Default <code>output_str</code> <code>str</code> <p>Text to output</p> required Source code in <code>pyrevitlib/pyrevit/unittests/runner.py</code> <pre><code>def write(self, output_str):\n    \"\"\"Prints the results to the output window.\n\n    Args:\n        output_str (str): Text to output\n    \"\"\"\n    self._output.print_html(output_str)\n</code></pre>"},{"location":"reference/pyrevit/unittests/runner/#pyrevit.unittests.runner.PyRevitTestResult","title":"<code>PyRevitTestResult(verbosity)</code>","text":"<p>               Bases: <code>TestResult</code></p> <p>Pyrevit Test Result.</p> <p>Parameters:</p> Name Type Description Default <code>verbosity</code> <code>int</code> <p>verbosity level.</p> required Source code in <code>pyrevitlib/pyrevit/unittests/runner.py</code> <pre><code>def __init__(self, verbosity):\n    super(PyRevitTestResult, self).__init__(verbosity=verbosity)\n    self.writer = OutputWriter()\n</code></pre>"},{"location":"reference/pyrevit/unittests/runner/#pyrevit.unittests.runner.PyRevitTestResult-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/unittests/runner/#pyrevit.unittests.runner.PyRevitTestResult.writer","title":"<code>writer = OutputWriter()</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/unittests/runner/#pyrevit.unittests.runner.PyRevitTestResult-functions","title":"Functions","text":""},{"location":"reference/pyrevit/unittests/runner/#pyrevit.unittests.runner.PyRevitTestResult.getDescription","title":"<code>getDescription(test)</code>  <code>staticmethod</code>","text":"<p>Returns the description of the test.</p> <p>Parameters:</p> Name Type Description Default <code>test</code> <code>TestCase</code> <p>Unit test.</p> required <p>Returns:</p> Type Description <code>str</code> <p>test description</p> Source code in <code>pyrevitlib/pyrevit/unittests/runner.py</code> <pre><code>@staticmethod\ndef getDescription(test):\n    \"\"\"Returns the description of the test.\n\n    Args:\n        test (TestCase): Unit test.\n\n    Returns:\n        (str): test description\n    \"\"\"\n    return test.shortDescription() or test\n</code></pre>"},{"location":"reference/pyrevit/unittests/runner/#pyrevit.unittests.runner.PyRevitTestResult.startTest","title":"<code>startTest(test)</code>","text":"<p>Starts the test.</p> <p>Parameters:</p> Name Type Description Default <code>test</code> <code>TestCase</code> <p>unit test</p> required Source code in <code>pyrevitlib/pyrevit/unittests/runner.py</code> <pre><code>def startTest(self, test):\n    \"\"\"Starts the test.\n\n    Args:\n        test (TestCase): unit test\n    \"\"\"\n    super(PyRevitTestResult, self).startTest(test)\n    mlogger.debug('Running test: %s', self.getDescription(test))\n</code></pre>"},{"location":"reference/pyrevit/unittests/runner/#pyrevit.unittests.runner.PyRevitTestResult.addSuccess","title":"<code>addSuccess(test)</code>","text":"<p>Adds a test success.</p> <p>Parameters:</p> Name Type Description Default <code>test</code> <code>TestCase</code> <p>unit test case</p> required Source code in <code>pyrevitlib/pyrevit/unittests/runner.py</code> <pre><code>def addSuccess(self, test):\n    \"\"\"Adds a test success.\n\n    Args:\n        test (TestCase): unit test case\n    \"\"\"\n    super(PyRevitTestResult, self).addSuccess(test)\n    mlogger.debug(DEBUG_OKAY_RESULT)\n    self.writer.write(RESULT_DIV_OKAY\n                      .format(test=self.getDescription(test)))\n</code></pre>"},{"location":"reference/pyrevit/unittests/runner/#pyrevit.unittests.runner.PyRevitTestResult.addError","title":"<code>addError(test, err)</code>","text":"<p>Adds a test error.</p> <p>Parameters:</p> Name Type Description Default <code>test</code> <code>TestCase</code> <p>unit test case</p> required <code>err</code> <code>OptExcInfo</code> <p>test exception info</p> required Source code in <code>pyrevitlib/pyrevit/unittests/runner.py</code> <pre><code>def addError(self, test, err):\n    \"\"\"Adds a test error.\n\n    Args:\n        test (TestCase): unit test case\n        err (OptExcInfo): test exception info\n    \"\"\"\n    super(PyRevitTestResult, self).addError(test, err)\n    mlogger.debug(DEBUG_FAIL_RESULT)\n    self.writer.write(RESULT_DIV_ERROR\n                      .format(test=self.getDescription(test)))\n</code></pre>"},{"location":"reference/pyrevit/unittests/runner/#pyrevit.unittests.runner.PyRevitTestResult.addFailure","title":"<code>addFailure(test, err)</code>","text":"<p>Adds a test failure.</p> <p>Parameters:</p> Name Type Description Default <code>test</code> <code>TestCase</code> <p>unit test case</p> required <code>err</code> <code>OptExcInfo</code> <p>test exception info</p> required Source code in <code>pyrevitlib/pyrevit/unittests/runner.py</code> <pre><code>def addFailure(self, test, err):\n    \"\"\"Adds a test failure.\n\n    Args:\n        test (TestCase): unit test case\n        err (OptExcInfo): test exception info\n    \"\"\"\n    super(PyRevitTestResult, self).addFailure(test, err)\n    mlogger.debug(DEBUG_FAIL_RESULT)\n    self.writer.write(RESULT_DIV_FAIL\n                      .format(test=self.getDescription(test)))\n</code></pre>"},{"location":"reference/pyrevit/unittests/runner/#pyrevit.unittests.runner.PyRevitTestRunner","title":"<code>PyRevitTestRunner(verbosity=1, failfast=False, use_buffer=False, resultclass=None)</code>","text":"<p>               Bases: <code>object</code></p> <p>Test runner.</p> <p>Parameters:</p> Name Type Description Default <code>verbosity</code> <code>int</code> <p>level of vermosity. Defaults to 1.</p> <code>1</code> <code>failfast</code> <code>bool</code> <p>if True, stops at the first failure. Defaults to False.</p> <code>False</code> <code>use_buffer</code> <code>bool</code> <p>use a buffer. Defaults to False.</p> <code>False</code> <code>resultclass</code> <code>type</code> <p>Class to use to hold the results.  Defaults to <code>PyRevitTestResult</code>.</p> <code>None</code> Source code in <code>pyrevitlib/pyrevit/unittests/runner.py</code> <pre><code>def __init__(self, verbosity=1, failfast=False,\n             use_buffer=False, resultclass=None):\n    self.verbosity = verbosity\n    self.failfast = failfast\n    self.use_buffer = use_buffer\n    if resultclass is not None:\n        self.resultclass = resultclass\n</code></pre>"},{"location":"reference/pyrevit/unittests/runner/#pyrevit.unittests.runner.PyRevitTestRunner-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/unittests/runner/#pyrevit.unittests.runner.PyRevitTestRunner.resultclass","title":"<code>resultclass = PyRevitTestResult</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/unittests/runner/#pyrevit.unittests.runner.PyRevitTestRunner.verbosity","title":"<code>verbosity = verbosity</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/unittests/runner/#pyrevit.unittests.runner.PyRevitTestRunner.failfast","title":"<code>failfast = failfast</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/unittests/runner/#pyrevit.unittests.runner.PyRevitTestRunner.use_buffer","title":"<code>use_buffer = use_buffer</code>  <code>instance-attribute</code>","text":""},{"location":"reference/pyrevit/unittests/runner/#pyrevit.unittests.runner.PyRevitTestRunner-functions","title":"Functions","text":""},{"location":"reference/pyrevit/unittests/runner/#pyrevit.unittests.runner.PyRevitTestRunner.run","title":"<code>run(test)</code>","text":"<p>Runs a test suite.</p> <p>Parameters:</p> Name Type Description Default <code>test</code> <code>TestSuite</code> <p>Test suite to run</p> required <p>Returns:</p> Type Description <code>PyRevitTestResult</code> <p>Test suite results.</p> Source code in <code>pyrevitlib/pyrevit/unittests/runner.py</code> <pre><code>def run(self, test):\n    \"\"\"Runs a test suite.\n\n    Args:\n        test (TestSuite): Test suite to run\n\n    Returns:\n        (PyRevitTestResult): Test suite results.\n    \"\"\"\n    # setup results object\n    result = self._make_result()\n    result.failfast = self.failfast\n    result.buffer = self.use_buffer\n\n    # start clock\n    start_time = time.time()\n\n    # find run test methods\n    start_test_run = getattr(result, 'startTestRun', None)\n    if start_test_run is not None:\n        start_test_run()\n    try:\n        test(result)\n    finally:\n        stop_test_run = getattr(result, 'stopTestRun', None)\n        if stop_test_run is not None:\n            stop_test_run()\n\n    # stop clock and calculate run time\n    stop_time = time.time()\n    time_taken = stop_time - start_time\n\n    # print errots\n    result.printErrors()\n    test_count = result.testsRun\n    mlogger.debug(\"Ran %d test%s in %.3fs\",\n                  test_count, test_count != 1 and \"s\" or \"\", time_taken)\n\n    expected_fails = unexpected_successes = skipped = 0\n    try:\n        results = map(len, (result.expectedFailures,\n                            result.unexpectedSuccesses,\n                            result.skipped))\n    except AttributeError:\n        pass\n    else:\n        expected_fails, unexpected_successes, skipped = results\n\n    infos = []\n    if not result.wasSuccessful():\n        mlogger.debug(\"FAILED\")\n        failed, errored = map(len, (result.failures, result.errors))\n        if failed:\n            infos.append(\"failures=%d\" % failed)\n        if errored:\n            infos.append(\"errors=%d\" % errored)\n    else:\n        mlogger.debug(DEBUG_OKAY_RESULT)\n\n    if skipped:\n        infos.append(\"skipped=%d\" % skipped)\n    if expected_fails:\n        infos.append(\"expected failures=%d\" % expected_fails)\n    if unexpected_successes:\n        infos.append(\"unexpected successes=%d\" % unexpected_successes)\n    if infos:\n        mlogger.debug(\" (%s)\", (\", \".join(infos),))\n\n    return result\n</code></pre>"},{"location":"reference/pyrevit/unittests/runner/#pyrevit.unittests.runner-functions","title":"Functions","text":""},{"location":"reference/pyrevit/unittests/runner/#pyrevit.unittests.runner.run_module_tests","title":"<code>run_module_tests(test_module)</code>","text":"<p>Runs the unit tests of the given module.</p> <p>Parameters:</p> Name Type Description Default <code>test_module</code> <code>module</code> <p>module with tests</p> required <p>Returns:</p> Type Description <code>PyRevitTestResult</code> <p>tests results.</p> Source code in <code>pyrevitlib/pyrevit/unittests/runner.py</code> <pre><code>def run_module_tests(test_module):\n    \"\"\"Runs the unit tests of the given module.\n\n    Args:\n        test_module (module): module with tests\n\n    Returns:\n        (PyRevitTestResult): tests results.\n    \"\"\"\n    test_runner = PyRevitTestRunner()\n    test_loader = TestLoader()\n    # load all testcases from the given module into a testsuite\n    test_suite = test_loader.loadTestsFromModule(test_module)\n    # run the test suite\n    mlogger.debug('Running test suite for module: %s', test_module)\n    OutputWriter()\\\n        .write(RESULT_TEST_SUITE_START.format(suite=test_module.__name__))\n    return test_runner.run(test_suite)\n</code></pre>"},{"location":"reference/pyrevit/unittests/runner/#pyrevit.unittests.runner.run_test_case","title":"<code>run_test_case(test_case)</code>","text":"<p>Runs the unit test of the given TestCase class.</p> <p>Parameters:</p> Name Type Description Default <code>test_case</code> <code>type[TestCase]</code> <p>TestCase class with tests</p> required <p>Returns:</p> Type Description <code>PyRevitTestResult</code> <p>tests results.</p> Source code in <code>pyrevitlib/pyrevit/unittests/runner.py</code> <pre><code>def run_test_case(test_case):\n    \"\"\"Runs the unit test of the given TestCase class.\n\n    Args:\n        test_case (type[TestCase]): TestCase class with tests\n\n    Returns:\n        (PyRevitTestResult): tests results.\n    \"\"\"\n    test_runner = PyRevitTestRunner()\n    suite = TestLoader().loadTestsFromTestCase(test_case)\n    OutputWriter()\\\n        .write(RESULT_TEST_SUITE_START.format(suite=suite.__class__.__name__))\n    return test_runner.run(suite)\n</code></pre>"},{"location":"reference/pyrevit/versionmgr/","title":"versionmgr","text":"<p>Utility functions for managing pyRevit versions.</p> <p>Examples:</p> <p><pre><code>from pyrevit import versionmgr\nv = versionmgr.get_pyrevit_version()\nv.get_formatted()\n</code></pre> '4.10-beta2'</p>"},{"location":"reference/pyrevit/versionmgr/#pyrevit.versionmgr-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/versionmgr/#pyrevit.versionmgr.mlogger","title":"<code>mlogger = get_logger(__name__)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/versionmgr/#pyrevit.versionmgr-functions","title":"Functions","text":""},{"location":"reference/pyrevit/versionmgr/#pyrevit.versionmgr.get_pyrevit_repo","title":"<code>get_pyrevit_repo()</code>","text":"<p>Return pyRevit repository.</p> <p>Returns:</p> Type Description <code>RepoInfo</code> <p>repo wrapper object</p> Source code in <code>pyrevitlib/pyrevit/versionmgr/__init__.py</code> <pre><code>def get_pyrevit_repo():\n    \"\"\"Return pyRevit repository.\n\n    Returns:\n        (pyrevit.coreutils.git.RepoInfo): repo wrapper object\n    \"\"\"\n    try:\n        return git.get_repo(HOME_DIR)\n    except Exception as repo_err:\n        mlogger.debug('Can not create repo from directory: %s | %s',\n                      HOME_DIR, repo_err)\n</code></pre>"},{"location":"reference/pyrevit/versionmgr/#pyrevit.versionmgr.get_pyrevit_version","title":"<code>get_pyrevit_version()</code>","text":"<p>Return information about active pyRevit version.</p> <p>Returns:</p> Type Description <code>_PyRevitVersion</code> <p>version wrapper object</p> Source code in <code>pyrevitlib/pyrevit/versionmgr/__init__.py</code> <pre><code>def get_pyrevit_version():\n    \"\"\"Return information about active pyRevit version.\n\n    Returns:\n        (_PyRevitVersion): version wrapper object\n    \"\"\"\n    try:\n        return _PyRevitVersion(get_pyrevit_repo().last_commit_hash)\n    except Exception as ver_err:\n        mlogger.debug('Can not get pyRevit patch number. | %s', ver_err)\n        return _PyRevitVersion('')\n</code></pre>"},{"location":"reference/pyrevit/versionmgr/#pyrevit.versionmgr.get_pyrevit_cli_version","title":"<code>get_pyrevit_cli_version()</code>","text":"<p>Return version of shipped pyRevit CLI utility.</p> <p>Returns:</p> Type Description <code>str</code> <p>version string of pyRevit CLI utility binary</p> Source code in <code>pyrevitlib/pyrevit/versionmgr/__init__.py</code> <pre><code>def get_pyrevit_cli_version():\n    \"\"\"Return version of shipped pyRevit CLI utility.\n\n    Returns:\n        (str): version string of pyRevit CLI utility binary\n    \"\"\"\n    return coreutils.get_exe_version(PYREVIT_CLI_PATH)\n</code></pre>"},{"location":"reference/pyrevit/versionmgr/about/","title":"about","text":"<p>Utility module for pyRevit project information.</p> <p>Examples:</p> <p><pre><code>from pyrevit.versionmgr import about\na = about.get_pyrevit_about()\na.subtitle\n</code></pre> 'python RAD Environment for Autodesk Revit\u00ae'a.copyright'\u00a9 2014-2024 Ehsan Iran-Nejad'</p>"},{"location":"reference/pyrevit/versionmgr/about/#pyrevit.versionmgr.about-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/versionmgr/about/#pyrevit.versionmgr.about.PyRevitAbout","title":"<code>PyRevitAbout = namedtuple('PyRevitAbout', ['subtitle', 'madein', 'copyright'])</code>  <code>module-attribute</code>","text":"<p>pyRevit project info tuple.</p> <p>Attributes:</p> Name Type Description <code>subtitle</code> <code>str</code> <p>project subtitle</p> <code>madein</code> <code>str</code> <p>project made-in info</p> <code>copyright</code> <code>str</code> <p>project copyright info</p>"},{"location":"reference/pyrevit/versionmgr/about/#pyrevit.versionmgr.about-functions","title":"Functions","text":""},{"location":"reference/pyrevit/versionmgr/about/#pyrevit.versionmgr.about.get_pyrevit_about","title":"<code>get_pyrevit_about()</code>","text":"<p>Return information about pyRevit project.</p> <p>Returns:</p> Type Description <code>PyRevitAbout</code> <p>pyRevit project info tuple</p> Source code in <code>pyrevitlib/pyrevit/versionmgr/about.py</code> <pre><code>def get_pyrevit_about():\n    \"\"\"Return information about pyRevit project.\n\n    Returns:\n        (PyRevitAbout): pyRevit project info tuple\n    \"\"\"\n    return PyRevitAbout(subtitle='python RAD Environment for Autodesk Revit\u00ae',\n                        madein=\"['pdx', 'hio', 'rno', 'sea']\",\n                        copyright='\u00a9 2014-2024 Ehsan Iran-Nejad')\n</code></pre>"},{"location":"reference/pyrevit/versionmgr/updater/","title":"updater","text":"<p>Handle updating pyRevit repository and its extensions.</p>"},{"location":"reference/pyrevit/versionmgr/updater/#pyrevit.versionmgr.updater-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/versionmgr/updater/#pyrevit.versionmgr.updater.logger","title":"<code>logger = get_logger(__name__)</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/versionmgr/updater/#pyrevit.versionmgr.updater.COREUPDATE_TRIGGER","title":"<code>COREUPDATE_TRIGGER = 'COREUPDATE'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/versionmgr/updater/#pyrevit.versionmgr.updater.COREUPDATE_MESSAGE","title":"<code>COREUPDATE_MESSAGE = '&lt;div class=\"coreupdatewarn\"&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt;\\npyRevit has a major core update. This update &lt;u&gt;can not&lt;/u&gt; be applied when Revit is running. Please close all Revit instances, and update the clone using the pyRevit CLI. Start Revit again after the update and pyRevit will load with the new core changes.&lt;/div&gt;'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/versionmgr/updater/#pyrevit.versionmgr.updater-functions","title":"Functions","text":""},{"location":"reference/pyrevit/versionmgr/updater/#pyrevit.versionmgr.updater.get_thirdparty_ext_repos","title":"<code>get_thirdparty_ext_repos()</code>","text":"<p>Return a list of repos for installed third-party extensions.</p> Source code in <code>pyrevitlib/pyrevit/versionmgr/updater.py</code> <pre><code>def get_thirdparty_ext_repos():\n    \"\"\"Return a list of repos for installed third-party extensions.\"\"\"\n    processed_paths = set()\n    valid_exts = []\n    ext_repos = []\n    logger.debug('Finding installed repos...')\n    ext_info_list = extensionmgr.get_thirdparty_extension_data()\n\n    for ext_info in ext_info_list:\n        repo_path = libgit.libgit.Repository.Discover(ext_info.directory)\n        if repo_path:\n            repo_info = libgit.get_repo(repo_path)\n            if repo_info:\n                valid_exts.append(ext_info)\n                if repo_info.directory not in processed_paths:\n                    processed_paths.add(repo_info.directory)\n                    ext_repos.append(repo_info)\n\n    logger.debug('Valid third-party extensions for update: %s', valid_exts)\n\n    return ext_repos\n</code></pre>"},{"location":"reference/pyrevit/versionmgr/updater/#pyrevit.versionmgr.updater.get_all_extension_repos","title":"<code>get_all_extension_repos()</code>","text":"<p>Return a list of repos for all installed extensions.</p> Source code in <code>pyrevitlib/pyrevit/versionmgr/updater.py</code> <pre><code>def get_all_extension_repos():\n    \"\"\"Return a list of repos for all installed extensions.\"\"\"\n    logger.debug('Finding all extension repos.')\n    # pyrevit main repo\n    repo_info_list = []\n    pyrevit_repo = versionmgr.get_pyrevit_repo()\n    if pyrevit_repo:\n        repo_info_list.append(pyrevit_repo)\n    # add all thirdparty extension repos\n    repo_info_list.extend(get_thirdparty_ext_repos())\n    logger.debug('Repos are: %s', repo_info_list)\n    return repo_info_list\n</code></pre>"},{"location":"reference/pyrevit/versionmgr/updater/#pyrevit.versionmgr.updater.update_repo","title":"<code>update_repo(repo_info)</code>","text":"<p>Update repository.</p> <p>Parameters:</p> Name Type Description Default <code>repo_info</code> <p>obj:<code>pyrevit.coreutils.git.RepoInfo</code>): repository info wrapper object</p> required Source code in <code>pyrevitlib/pyrevit/versionmgr/updater.py</code> <pre><code>def update_repo(repo_info):\n    \"\"\"Update repository.\n\n    Args:\n        repo_info (:obj:`pyrevit.coreutils.git.RepoInfo`):\n            repository info wrapper object\n    \"\"\"\n    repo = repo_info.repo\n    logger.debug('Updating repo: %s', repo_info.directory)\n    head_msg = safe_strtype(repo.Head.Tip.Message).replace('\\n', '')\n    logger.debug('Current head is: %s &gt; %s', repo.Head.Tip.Id.Sha, head_msg)\n    username, password = _get_extension_credentials(repo_info)\n    if username and password:\n        repo_info.username = username\n        repo_info.password = password\n\n    try:\n        updated_repo_info = libgit.git_pull(repo_info)\n        logger.debug('Successfully updated repo: %s',\n                     updated_repo_info.directory)\n        return updated_repo_info\n\n    except libgit.PyRevitGitAuthenticationError as auth_err:\n        logger.debug('Can not login to git repository to get updates: %s | %s',\n                     repo_info, auth_err)\n        raise auth_err\n\n    except Exception as update_err:\n        logger.debug('Failed updating repo: %s | %s', repo_info, update_err)\n        raise update_err\n</code></pre>"},{"location":"reference/pyrevit/versionmgr/updater/#pyrevit.versionmgr.updater.get_updates","title":"<code>get_updates(repo_info)</code>","text":"<p>Fetch updates on repository.</p> <p>Parameters:</p> Name Type Description Default <code>repo_info</code> <p>obj:<code>pyrevit.coreutils.git.RepoInfo</code>): repository info wrapper object</p> required Source code in <code>pyrevitlib/pyrevit/versionmgr/updater.py</code> <pre><code>def get_updates(repo_info):\n    \"\"\"Fetch updates on repository.\n\n    Args:\n        repo_info (:obj:`pyrevit.coreutils.git.RepoInfo`):\n            repository info wrapper object\n    \"\"\"\n    repo = repo_info.repo\n    at_least_one_fetch_was_successful = False\n\n    logger.debug('Fetching updates for: %s', repo_info.directory)\n    for remote in repo.Network.Remotes:\n        try:\n            _fetch_remote(remote, repo_info)\n            at_least_one_fetch_was_successful = True\n\n        except libgit.PyRevitGitAuthenticationError:\n            logger.debug('Failed fetching updates. '\n                         'Can not login to repo to get updates: %s', repo_info)\n            continue\n\n        except Exception:\n            logger.debug('Failed fetching updates: %s', repo_info)\n            continue\n\n    if at_least_one_fetch_was_successful:\n        return True\n\n    return False\n</code></pre>"},{"location":"reference/pyrevit/versionmgr/updater/#pyrevit.versionmgr.updater.has_pending_updates","title":"<code>has_pending_updates(repo_info)</code>","text":"<p>Check for updates on repository.</p> <p>Parameters:</p> Name Type Description Default <code>repo_info</code> <p>obj:<code>pyrevit.coreutils.git.RepoInfo</code>): repository info wrapper object</p> required Source code in <code>pyrevitlib/pyrevit/versionmgr/updater.py</code> <pre><code>def has_pending_updates(repo_info):\n    \"\"\"Check for updates on repository.\n\n    Args:\n        repo_info (:obj:`pyrevit.coreutils.git.RepoInfo`):\n            repository info wrapper object\n    \"\"\"\n    if get_updates(repo_info):\n        hist_div = libgit.compare_branch_heads(repo_info)\n        if hist_div.BehindBy &gt; 0:\n            return True\n</code></pre>"},{"location":"reference/pyrevit/versionmgr/updater/#pyrevit.versionmgr.updater.check_for_updates","title":"<code>check_for_updates()</code>","text":"<p>Check whether any available repo has pending updates.</p> Source code in <code>pyrevitlib/pyrevit/versionmgr/updater.py</code> <pre><code>def check_for_updates():\n    \"\"\"Check whether any available repo has pending updates.\"\"\"\n    if _check_connection():\n        logger.info('Checking for updates...')\n\n        for repo in get_all_extension_repos():\n            if has_pending_updates(repo):\n                logger.info('Updates are available for %s...', repo.name)\n                return True\n            else:\n                logger.info('%s is up-to-date...', repo.name)\n    else:\n        logger.warning('No internet access detected. '\n                       'Skipping check for updates.')\n        return False\n</code></pre>"},{"location":"reference/pyrevit/versionmgr/updater/#pyrevit.versionmgr.updater.has_core_updates","title":"<code>has_core_updates()</code>","text":"<p>Check whether pyRevit repo has core updates.</p> <p>This would require host application to be closed to release the file lock of core DLLs so they can be updated separately.</p> Source code in <code>pyrevitlib/pyrevit/versionmgr/updater.py</code> <pre><code>def has_core_updates():\n    \"\"\"Check whether pyRevit repo has core updates.\n\n    This would require host application to be closed to release the file lock\n    of core DLLs so they can be updated separately.\n    \"\"\"\n    pyrevit_repo = versionmgr.get_pyrevit_repo()\n    if pyrevit_repo and get_updates(pyrevit_repo):\n        new_commits = libgit.get_all_new_commits(pyrevit_repo)\n\n        logger.debug('Checking new commits on pyrevit repo.')\n        for cmt_sha, cmt_msg in new_commits.items():\n            logger.debug('%s: %s', cmt_sha, cmt_msg)\n            if COREUPDATE_TRIGGER in cmt_msg:\n                logger.debug('pyrevit repo has core update at %s: %s',\n                             cmt_sha, cmt_msg)\n                return True\n\n    return False\n</code></pre>"},{"location":"reference/pyrevit/versionmgr/updater/#pyrevit.versionmgr.updater.update_pyrevit","title":"<code>update_pyrevit()</code>","text":"<p>Update pyrevit and its extension repositories.</p> Source code in <code>pyrevitlib/pyrevit/versionmgr/updater.py</code> <pre><code>def update_pyrevit():\n    \"\"\"Update pyrevit and its extension repositories.\"\"\"\n    if _check_connection():\n        third_party_updated = False\n        pyrevit_updated = False\n        pyrevit_has_coreupdates = has_core_updates()\n        thirdparty_repos = get_thirdparty_ext_repos()\n\n        logger.debug('List of thirdparty repos to be updated: %s',\n                     thirdparty_repos)\n\n        # update third-party extensions first, one by one\n        for repo_info in thirdparty_repos:\n            logger.debug('Updating repo: %s', repo_info.directory)\n            try:\n                upped_repo_info = update_repo(repo_info)\n                logger.info(':inbox_tray: Successfully updated: %s to %s',\n                            upped_repo_info.name,\n                            upped_repo_info.last_commit_hash[:7])\n                third_party_updated = True\n            except Exception:\n                logger.info('Can not update repo: %s (Run in debug to see why)',\n                            repo_info.name)\n\n        # now update pyrevit repo and reload\n        pyrevit_repo = versionmgr.get_pyrevit_repo()\n        if pyrevit_repo:\n            if not pyrevit_has_coreupdates:\n                logger.debug('Updating pyrevit repo: %s',\n                             pyrevit_repo.directory)\n                try:\n                    upped_pyrevit_repo_info = update_repo(pyrevit_repo)\n                    logger.info(':inbox_tray: Successfully updated: %s to %s',\n                                upped_pyrevit_repo_info.name,\n                                upped_pyrevit_repo_info.last_commit_hash[:7])\n                    pyrevit_updated = True\n                except Exception as err:\n                    logger.info('Can not update pyrevit repo '\n                                '(Run in debug to see why) | %s', err)\n                # perform upgrade tasks\n                logger.info('Upgrading settings...')\n                upgrade.upgrade_existing_pyrevit()\n        if not pyrevit_has_coreupdates:\n            if third_party_updated or pyrevit_updated:\n                # now reload pyrevit\n                from pyrevit.loader import sessionmgr\n                sessionmgr.reload_pyrevit()\n            else:\n                logger.info('pyRevit and extensions seem to be up-to-date.')\n        else:\n            from pyrevit import script\n            output = script.get_output()\n            output.print_html(COREUPDATE_MESSAGE)\n            logger.debug('Core updates. Skippin update and reload.')\n    else:\n        logger.warning('No internet access detected. Skipping update.')\n</code></pre>"},{"location":"reference/pyrevit/versionmgr/upgrade/","title":"upgrade","text":"<p>Perform upgrades between version, e.g. adding a new config parameter.</p>"},{"location":"reference/pyrevit/versionmgr/upgrade/#pyrevit.versionmgr.upgrade-functions","title":"Functions","text":""},{"location":"reference/pyrevit/versionmgr/upgrade/#pyrevit.versionmgr.upgrade.upgrade_user_config","title":"<code>upgrade_user_config(user_config)</code>","text":"<p>Upgarde user configurations.</p> <p>Parameters:</p> Name Type Description Default <code>user_config</code> <p>obj:<code>pyrevit.userconfig.PyRevitConfig</code>): config object</p> required Source code in <code>pyrevitlib/pyrevit/versionmgr/upgrade.py</code> <pre><code>def upgrade_user_config(user_config):   #pylint: disable=W0613\n    \"\"\"Upgarde user configurations.\n\n    Args:\n        user_config (:obj:`pyrevit.userconfig.PyRevitConfig`): config object\n    \"\"\"\n    # upgrade value formats\n    for section in user_config:\n        for option in section:\n            setattr(section, option, getattr(section, option))\n</code></pre>"},{"location":"reference/pyrevit/versionmgr/upgrade/#pyrevit.versionmgr.upgrade.remove_leftover_temp_files","title":"<code>remove_leftover_temp_files()</code>","text":"<p>4.8.5 had a bug that would create temp files with extension ..bak.</p> <p>This cleans them up.</p> Source code in <code>pyrevitlib/pyrevit/versionmgr/upgrade.py</code> <pre><code>def remove_leftover_temp_files():\n    \"\"\"4.8.5 had a bug that would create temp files with extension ..bak.\n\n    This cleans them up.\n    \"\"\"\n    univ_path = op.dirname(appdata.get_universal_data_file(\"X\", 'bak'))\n    if op.exists(univ_path):\n        for entry in os.listdir(univ_path):\n            if op.isfile(entry) and entry.lower().endswith('..bak'):\n                appdata.garbage_data_file(op.join(univ_path, entry))\n</code></pre>"},{"location":"reference/pyrevit/versionmgr/upgrade/#pyrevit.versionmgr.upgrade.upgrade_existing_pyrevit","title":"<code>upgrade_existing_pyrevit()</code>","text":"<p>Upgrade existing pyRevit deployment.</p> Source code in <code>pyrevitlib/pyrevit/versionmgr/upgrade.py</code> <pre><code>def upgrade_existing_pyrevit():\n    \"\"\"Upgrade existing pyRevit deployment.\"\"\"\n    remove_leftover_temp_files()\n</code></pre>"},{"location":"reference/pyrevit/versionmgr/urls/","title":"urls","text":"<p>pyRevit related links.</p>"},{"location":"reference/pyrevit/versionmgr/urls/#pyrevit.versionmgr.urls-attributes","title":"Attributes","text":""},{"location":"reference/pyrevit/versionmgr/urls/#pyrevit.versionmgr.urls.PYREVIT_LICENSE","title":"<code>PYREVIT_LICENSE = Common.PyRevitLabsConsts.LicenseUrl</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/versionmgr/urls/#pyrevit.versionmgr.urls.PYREVIT_CREDITS","title":"<code>PYREVIT_CREDITS = Common.PyRevitLabsConsts.CreditsUrl</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/versionmgr/urls/#pyrevit.versionmgr.urls.PYREVIT_WIKI","title":"<code>PYREVIT_WIKI = Common.PyRevitLabsConsts.WikiUrl</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/versionmgr/urls/#pyrevit.versionmgr.urls.PYREVIT_TWITTER","title":"<code>PYREVIT_TWITTER = 'https://twitter.com/pyrevit'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/versionmgr/urls/#pyrevit.versionmgr.urls.PYREVIT_BLOG","title":"<code>PYREVIT_BLOG = Common.PyRevitLabsConsts.BlogsUrl</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/versionmgr/urls/#pyrevit.versionmgr.urls.PYREVIT_DOCS","title":"<code>PYREVIT_DOCS = Common.PyRevitLabsConsts.DocsUrl</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/versionmgr/urls/#pyrevit.versionmgr.urls.PYREVIT_GITHUB","title":"<code>PYREVIT_GITHUB = Common.PyRevitLabsConsts.OriginalRepoBasePath</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/versionmgr/urls/#pyrevit.versionmgr.urls.PYREVIT_GITHUBBRANCH","title":"<code>PYREVIT_GITHUBBRANCH = Common.PyRevitLabsConsts.OriginalRepoBasePath + '/tree/{branch}'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/versionmgr/urls/#pyrevit.versionmgr.urls.PYREVIT_GITHUBMASTER_COMMIT","title":"<code>PYREVIT_GITHUBMASTER_COMMIT = Common.PyRevitLabsConsts.OriginalRepoBasePath + '/commits/master'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/versionmgr/urls/#pyrevit.versionmgr.urls.PYREVIT_GITHUBBRANCH_COMMIT","title":"<code>PYREVIT_GITHUBBRANCH_COMMIT = Common.PyRevitLabsConsts.OriginalRepoBasePath + '/commits/{branch}'</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/versionmgr/urls/#pyrevit.versionmgr.urls.PYREVIT_GITHUBISSUES","title":"<code>PYREVIT_GITHUBISSUES = Common.PyRevitLabsConsts.IssuesUrl</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/versionmgr/urls/#pyrevit.versionmgr.urls.PYREVIT_YOUTUBE","title":"<code>PYREVIT_YOUTUBE = Common.PyRevitLabsConsts.YoutubeUrl</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/versionmgr/urls/#pyrevit.versionmgr.urls.PYREVIT_SUPPORT","title":"<code>PYREVIT_SUPPORT = Common.PyRevitLabsConsts.SupportUrl</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/versionmgr/urls/#pyrevit.versionmgr.urls.PYREVIT_RELEASENOTES","title":"<code>PYREVIT_RELEASENOTES = Common.PyRevitLabsConsts.ReleasesUrl</code>  <code>module-attribute</code>","text":""},{"location":"reference/pyrevit/versionmgr/urls/#pyrevit.versionmgr.urls.PROFILE_EIN","title":"<code>PROFILE_EIN = 'https://ein.sh'</code>  <code>module-attribute</code>","text":""}]}